
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001541c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000dd28  08015600  08015600  00016600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023328  08023328  00025558  2**0
                  CONTENTS
  4 .ARM          00000008  08023328  08023328  00024328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023330  08023330  00025558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023330  08023330  00024330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023334  08023334  00024334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000558  20000000  08023338  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002874  20000558  08023890  00025558  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dcc  08023890  00025dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025558  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa14  00000000  00000000  00025588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aa3  00000000  00000000  0004ff9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c0  00000000  00000000  00055a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b88  00000000  00000000  00057e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030696  00000000  00000000  00059988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f45f  00000000  00000000  0008a01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a64f  00000000  00000000  000b947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3acc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad2c  00000000  00000000  001e3b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001ee83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000558 	.word	0x20000558
 80001fc:	00000000 	.word	0x00000000
 8000200:	080155e4 	.word	0x080155e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000055c 	.word	0x2000055c
 800021c:	080155e4 	.word	0x080155e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    if (bit)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800104a:	f005 fa07 	bl	800645c <HAL_GPIO_WritePin>
 800104e:	e004      	b.n	800105a <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001056:	f005 fa01 	bl	800645c <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001060:	f005 f9fc 	bl	800645c <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800106a:	f005 f9f7 	bl	800645c <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd6 	bl	8001034 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <TLC5952_WriteLED+0x64>)
 800108a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e013      	b.n	80010ba <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dae7      	bge.n	8001092 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010c8:	f005 f9c8 	bl	800645c <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010d2:	f005 f9c3 	bl	800645c <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000574 	.word	0x20000574
 80010e4:	48000400 	.word	0x48000400

080010e8 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ffa0 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80010f4:	2306      	movs	r3, #6
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e012      	b.n	8001120 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80010fa:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff8d 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dae9      	bge.n	80010fa <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e012      	b.n	8001152 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff74 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dae9      	bge.n	800112c <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	e012      	b.n	8001184 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5b 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae9      	bge.n	800115e <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e012      	b.n	80011b6 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff42 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dae9      	bge.n	8001190 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011c2:	f005 f94b 	bl	800645c <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011cc:	f005 f946 	bl	800645c <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000574 	.word	0x20000574
 80011dc:	48000400 	.word	0x48000400

080011e0 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <FT6336_ReadRegister+0x38>)
 8001208:	f005 f9fe 	bl	8006608 <HAL_I2C_Mem_Read>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000674 	.word	0x20000674

0800121c <FT6336_Init>:

void FT6336_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <FT6336_Init+0x48>)
 8001228:	f005 f918 	bl	800645c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f002 fe99 	bl	8003f64 <HAL_Delay>
    FT6336_RST_H;
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	480b      	ldr	r0, [pc, #44]	@ (8001264 <FT6336_Init+0x48>)
 8001238:	f005 f910 	bl	800645c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	@ 0x32
 800123e:	f002 fe91 	bl	8003f64 <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	20a8      	movs	r0, #168	@ 0xa8
 800124e:	f7ff ffc7 	bl	80011e0 <FT6336_ReadRegister>
    HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f002 fe85 	bl	8003f64 <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000c00 	.word	0x48000c00

08001268 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128a:	b29a      	uxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff95 	bl	80011e0 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d054      	beq.n	800136e <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2204      	movs	r2, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff ff87 	bl	80011e0 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80012d2:	7a3b      	ldrb	r3, [r7, #8]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7a7b      	ldrb	r3, [r7, #9]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80012ec:	7abb      	ldrb	r3, [r7, #10]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff ffaa 	bl	8001268 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d929      	bls.n	800136e <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	3304      	adds	r3, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	2009      	movs	r0, #9
 8001326:	f7ff ff5b 	bl	80011e0 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21b      	sxth	r3, r3
 8001330:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001334:	b21a      	sxth	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800134e:	b21a      	sxth	r2, r3
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff ff7d 	bl	8001268 <AdjustTouchCoordinates>
        }
    }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <__io_putchar>:
int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE
int fputc(int ch, FILE *f)
#endif PUTCHAR_PROTOTYPE
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <__io_putchar+0x20>)
 800138a:	f00a ff2d 	bl	800c1e8 <HAL_UART_Transmit>
    return ch;
 800138e:	687b      	ldr	r3, [r7, #4]
};
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200006c8 	.word	0x200006c8

0800139c <Analog_FE_Update>:
	uint16_t OFFSET2 :12;
} FEAnalogStates;

FEAnalogStates FEAnalog = {0};  // 全局变量，存储引脚状态

void Analog_FE_Update(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH1);
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f005 f853 	bl	800645c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 0) & 0x01));
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2120      	movs	r1, #32
 80013ca:	483e      	ldr	r0, [pc, #248]	@ (80014c4 <Analog_FE_Update+0x128>)
 80013cc:	f005 f846 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ea:	4837      	ldr	r0, [pc, #220]	@ (80014c8 <Analog_FE_Update+0x12c>)
 80013ec:	f005 f836 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	109b      	asrs	r3, r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f005 f825 	bl	800645c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH2);
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001424:	f005 f81a 	bl	800645c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 0) & 0x01));
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <Analog_FE_Update+0x124>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001440:	f005 f80c 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001460:	f004 fffc 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2102      	movs	r1, #2
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f004 ffec 	bl	800645c <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	b29b      	uxth	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <Analog_FE_Update+0x130>)
 8001494:	f004 fa06 	bl	80058a4 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <Analog_FE_Update+0x124>)
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014a8:	f004 f9fc 	bl	80058a4 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <Analog_FE_Update+0x130>)
 80014b0:	f004 f98c 	bl	80057cc <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014b8:	f004 f988 	bl	80057cc <HAL_DAC_Start>

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000c10 	.word	0x20000c10
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	20000638 	.word	0x20000638
 80014d0:	2000064c 	.word	0x2000064c

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f002 fcd2 	bl	8003e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f92d 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f000 ffa1 	bl	8002428 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e6:	f000 ff65 	bl	80023b4 <MX_DMA_Init>
  MX_USB_Device_Init();
 80014ea:	f00e ffd3 	bl	8010494 <MX_USB_Device_Init>
  MX_COMP2_Init();
 80014ee:	f000 f9d9 	bl	80018a4 <MX_COMP2_Init>
  MX_COMP5_Init();
 80014f2:	f000 f9fd 	bl	80018f0 <MX_COMP5_Init>
  MX_DAC1_Init();
 80014f6:	f000 fa21 	bl	800193c <MX_DAC1_Init>
  MX_DAC2_Init();
 80014fa:	f000 fa69 	bl	80019d0 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80014fe:	f000 fb65 	bl	8001bcc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001502:	f000 fb8f 	bl	8001c24 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001506:	f000 fbb3 	bl	8001c70 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 800150a:	f000 fc23 	bl	8001d54 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 800150e:	f000 fc8b 	bl	8001e28 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001512:	f000 fd39 	bl	8001f88 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001516:	f000 fef3 	bl	8002300 <MX_TIM20_Init>
  MX_TIM3_Init();
 800151a:	f000 fcdf 	bl	8001edc <MX_TIM3_Init>
  MX_ADC5_Init();
 800151e:	f000 f95b 	bl	80017d8 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001522:	f000 fe49 	bl	80021b8 <MX_TIM15_Init>
  MX_TIM8_Init();
 8001526:	f000 fd85 	bl	8002034 <MX_TIM8_Init>
  MX_SPI3_Init();
 800152a:	f000 fc3f 	bl	8001dac <MX_SPI3_Init>
  MX_I2C3_Init();
 800152e:	f000 fac3 	bl	8001ab8 <MX_I2C3_Init>
  MX_DAC4_Init();
 8001532:	f000 fa87 	bl	8001a44 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 8001536:	f000 faff 	bl	8001b38 <MX_LPUART1_UART_Init>
  MX_OPAMP4_Init();
 800153a:	f000 fbbf 	bl	8001cbc <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 800153e:	f000 fbe3 	bl	8001d08 <MX_OPAMP5_Init>
  /* USER CODE BEGIN 2 */




  HAL_OPAMP_Start(&hopamp1);
 8001542:	4867      	ldr	r0, [pc, #412]	@ (80016e0 <main+0x20c>)
 8001544:	f005 fd50 	bl	8006fe8 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8001548:	4866      	ldr	r0, [pc, #408]	@ (80016e4 <main+0x210>)
 800154a:	f005 fd4d 	bl	8006fe8 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 800154e:	4866      	ldr	r0, [pc, #408]	@ (80016e8 <main+0x214>)
 8001550:	f005 fd4a 	bl	8006fe8 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp4);
 8001554:	4865      	ldr	r0, [pc, #404]	@ (80016ec <main+0x218>)
 8001556:	f005 fd47 	bl	8006fe8 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp5);
 800155a:	4865      	ldr	r0, [pc, #404]	@ (80016f0 <main+0x21c>)
 800155c:	f005 fd44 	bl	8006fe8 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp6);
 8001560:	4864      	ldr	r0, [pc, #400]	@ (80016f4 <main+0x220>)
 8001562:	f005 fd41 	bl	8006fe8 <HAL_OPAMP_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001566:	213c      	movs	r1, #60	@ 0x3c
 8001568:	4863      	ldr	r0, [pc, #396]	@ (80016f8 <main+0x224>)
 800156a:	f009 fc7b 	bl	800ae64 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800156e:	213c      	movs	r1, #60	@ 0x3c
 8001570:	4862      	ldr	r0, [pc, #392]	@ (80016fc <main+0x228>)
 8001572:	f009 fc77 	bl	800ae64 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001576:	213c      	movs	r1, #60	@ 0x3c
 8001578:	4861      	ldr	r0, [pc, #388]	@ (8001700 <main+0x22c>)
 800157a:	f009 fc73 	bl	800ae64 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 800157e:	213c      	movs	r1, #60	@ 0x3c
 8001580:	4860      	ldr	r0, [pc, #384]	@ (8001704 <main+0x230>)
 8001582:	f009 fc6f 	bl	800ae64 <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001586:	2100      	movs	r1, #0
 8001588:	485f      	ldr	r0, [pc, #380]	@ (8001708 <main+0x234>)
 800158a:	f009 f887 	bl	800a69c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800158e:	2100      	movs	r1, #0
 8001590:	485e      	ldr	r0, [pc, #376]	@ (800170c <main+0x238>)
 8001592:	f009 f883 	bl	800a69c <HAL_TIM_PWM_Start>
  FT6336_Init();
 8001596:	f7ff fe41 	bl	800121c <FT6336_Init>
  ST7789_Init();
 800159a:	f001 f961 	bl	8002860 <ST7789_Init>

//	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
//	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
//	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
	  ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 800159e:	4b5c      	ldr	r3, [pc, #368]	@ (8001710 <main+0x23c>)
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	23a0      	movs	r3, #160	@ 0xa0
 80015a4:	22a0      	movs	r2, #160	@ 0xa0
 80015a6:	210a      	movs	r1, #10
 80015a8:	200a      	movs	r0, #10
 80015aa:	f001 fbf4 	bl	8002d96 <ST7789_DrawImage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  ST7789_Test();
//	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);
	TLC5952_WriteLED();  // 发送数据
 80015ae:	f7ff fd65 	bl	800107c <TLC5952_WriteLED>
	TLC5952_WriteControl();
 80015b2:	f7ff fd99 	bl	80010e8 <TLC5952_WriteControl>

	printf("123\r\n");
 80015b6:	4857      	ldr	r0, [pc, #348]	@ (8001714 <main+0x240>)
 80015b8:	f010 fbd4 	bl	8011d64 <puts>



	sprintf(BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 80015bc:	4b50      	ldr	r3, [pc, #320]	@ (8001700 <main+0x22c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	461a      	mov	r2, r3
 80015c4:	4954      	ldr	r1, [pc, #336]	@ (8001718 <main+0x244>)
 80015c6:	4855      	ldr	r0, [pc, #340]	@ (800171c <main+0x248>)
 80015c8:	f010 fbd4 	bl	8011d74 <siprintf>
	ST7789_WriteString(200, 10, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80015cc:	4b54      	ldr	r3, [pc, #336]	@ (8001720 <main+0x24c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	9202      	str	r2, [sp, #8]
 80015d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d6:	9201      	str	r2, [sp, #4]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a4f      	ldr	r2, [pc, #316]	@ (800171c <main+0x248>)
 80015e0:	210a      	movs	r1, #10
 80015e2:	20c8      	movs	r0, #200	@ 0xc8
 80015e4:	f001 fc90 	bl	8002f08 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC2:%5d",htim3.Instance->CNT);
 80015e8:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <main+0x228>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	461a      	mov	r2, r3
 80015f0:	494c      	ldr	r1, [pc, #304]	@ (8001724 <main+0x250>)
 80015f2:	484a      	ldr	r0, [pc, #296]	@ (800171c <main+0x248>)
 80015f4:	f010 fbbe 	bl	8011d74 <siprintf>
	ST7789_WriteString(200, 40, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80015f8:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <main+0x24c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	9202      	str	r2, [sp, #8]
 80015fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001602:	9201      	str	r2, [sp, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a44      	ldr	r2, [pc, #272]	@ (800171c <main+0x248>)
 800160c:	2128      	movs	r1, #40	@ 0x28
 800160e:	20c8      	movs	r0, #200	@ 0xc8
 8001610:	f001 fc7a 	bl	8002f08 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC3:%5d",htim20.Instance->CNT);
 8001614:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <main+0x230>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	461a      	mov	r2, r3
 800161c:	4942      	ldr	r1, [pc, #264]	@ (8001728 <main+0x254>)
 800161e:	483f      	ldr	r0, [pc, #252]	@ (800171c <main+0x248>)
 8001620:	f010 fba8 	bl	8011d74 <siprintf>
	ST7789_WriteString(200, 70, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <main+0x24c>)
 8001626:	2200      	movs	r2, #0
 8001628:	9202      	str	r2, [sp, #8]
 800162a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162e:	9201      	str	r2, [sp, #4]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a39      	ldr	r2, [pc, #228]	@ (800171c <main+0x248>)
 8001638:	2146      	movs	r1, #70	@ 0x46
 800163a:	20c8      	movs	r0, #200	@ 0xc8
 800163c:	f001 fc64 	bl	8002f08 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC4:%5d",htim1.Instance->CNT);
 8001640:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <main+0x224>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	461a      	mov	r2, r3
 8001648:	4938      	ldr	r1, [pc, #224]	@ (800172c <main+0x258>)
 800164a:	4834      	ldr	r0, [pc, #208]	@ (800171c <main+0x248>)
 800164c:	f010 fb92 	bl	8011d74 <siprintf>
	ST7789_WriteString(200, 100, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001650:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <main+0x24c>)
 8001652:	2200      	movs	r2, #0
 8001654:	9202      	str	r2, [sp, #8]
 8001656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800165a:	9201      	str	r2, [sp, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a2e      	ldr	r2, [pc, #184]	@ (800171c <main+0x248>)
 8001664:	2164      	movs	r1, #100	@ 0x64
 8001666:	20c8      	movs	r0, #200	@ 0xc8
 8001668:	f001 fc4e 	bl	8002f08 <ST7789_WriteString>



	ST7789_WriteString(200, 130, " !\"#$\%", Han_Array, WHITE, BLACK);
 800166c:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <main+0x25c>)
 800166e:	2200      	movs	r2, #0
 8001670:	9202      	str	r2, [sp, #8]
 8001672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001676:	9201      	str	r2, [sp, #4]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a2d      	ldr	r2, [pc, #180]	@ (8001734 <main+0x260>)
 8001680:	2182      	movs	r1, #130	@ 0x82
 8001682:	20c8      	movs	r0, #200	@ 0xc8
 8001684:	f001 fc40 	bl	8002f08 <ST7789_WriteString>


	ST7789_DrawTriangle(20, 210, 40, 200, 40, 220, WHITE);
 8001688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	23dc      	movs	r3, #220	@ 0xdc
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2328      	movs	r3, #40	@ 0x28
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	23c8      	movs	r3, #200	@ 0xc8
 8001698:	2228      	movs	r2, #40	@ 0x28
 800169a:	21d2      	movs	r1, #210	@ 0xd2
 800169c:	2014      	movs	r0, #20
 800169e:	f001 fc7c 	bl	8002f9a <ST7789_DrawTriangle>
	ST7789_DrawCircle(90, 210, 10, WHITE);
 80016a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016a6:	220a      	movs	r2, #10
 80016a8:	21d2      	movs	r1, #210	@ 0xd2
 80016aa:	205a      	movs	r0, #90	@ 0x5a
 80016ac:	f001 fa98 	bl	8002be0 <ST7789_DrawCircle>
	ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
 80016b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	23dc      	movs	r3, #220	@ 0xdc
 80016b8:	22a0      	movs	r2, #160	@ 0xa0
 80016ba:	21c8      	movs	r1, #200	@ 0xc8
 80016bc:	208c      	movs	r0, #140	@ 0x8c
 80016be:	f001 fa56 	bl	8002b6e <ST7789_DrawRectangle>


	WS2812_Set_All(color);
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <main+0x264>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fb8a 	bl	8003de0 <WS2812_Set_All>
	WS2812_Update();
 80016cc:	f002 fba0 	bl	8003e10 <WS2812_Update>
	  Analog_FE_Update();
 80016d0:	f7ff fe64 	bl	800139c <Analog_FE_Update>
	    HAL_Delay(100);
 80016d4:	2064      	movs	r0, #100	@ 0x64
 80016d6:	f002 fc45 	bl	8003f64 <HAL_Delay>
	TLC5952_WriteLED();  // 发送数据
 80016da:	bf00      	nop
 80016dc:	e767      	b.n	80015ae <main+0xda>
 80016de:	bf00      	nop
 80016e0:	2000075c 	.word	0x2000075c
 80016e4:	20000798 	.word	0x20000798
 80016e8:	200007d4 	.word	0x200007d4
 80016ec:	20000810 	.word	0x20000810
 80016f0:	2000084c 	.word	0x2000084c
 80016f4:	20000888 	.word	0x20000888
 80016f8:	20000988 	.word	0x20000988
 80016fc:	200009d4 	.word	0x200009d4
 8001700:	20000a20 	.word	0x20000a20
 8001704:	20000b04 	.word	0x20000b04
 8001708:	20000ab8 	.word	0x20000ab8
 800170c:	20000a6c 	.word	0x20000a6c
 8001710:	0801647c 	.word	0x0801647c
 8001714:	08015600 	.word	0x08015600
 8001718:	08015608 	.word	0x08015608
 800171c:	20000010 	.word	0x20000010
 8001720:	20000000 	.word	0x20000000
 8001724:	08015614 	.word	0x08015614
 8001728:	08015620 	.word	0x08015620
 800172c:	0801562c 	.word	0x0801562c
 8001730:	20000008 	.word	0x20000008
 8001734:	08015638 	.word	0x08015638
 8001738:	20000204 	.word	0x20000204

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	2238      	movs	r2, #56	@ 0x38
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f010 fc0a 	bl	8011f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001762:	f007 f973 	bl	8008a4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001766:	2321      	movs	r3, #33	@ 0x21
 8001768:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800176e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001774:	2302      	movs	r3, #2
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001778:	2303      	movs	r3, #3
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001780:	234b      	movs	r3, #75	@ 0x4b
 8001782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001784:	2306      	movs	r3, #6
 8001786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001788:	2302      	movs	r3, #2
 800178a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4618      	mov	r0, r3
 8001796:	f007 fa0d 	bl	8008bb4 <HAL_RCC_OscConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80017a0:	f000 ff5c 	bl	800265c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a4:	230f      	movs	r3, #15
 80017a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a8:	2303      	movs	r3, #3
 80017aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f007 fd0b 	bl	80091d8 <HAL_RCC_ClockConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80017c8:	f000 ff48 	bl	800265c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80017cc:	f007 feda 	bl	8009584 <HAL_RCC_EnableCSS>
}
 80017d0:	bf00      	nop
 80017d2:	3750      	adds	r7, #80	@ 0x50
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017de:	463b      	mov	r3, r7
 80017e0:	2220      	movs	r2, #32
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f010 fbbd 	bl	8011f64 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80017ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <MX_ADC5_Init+0xc0>)
 80017ec:	4a2b      	ldr	r2, [pc, #172]	@ (800189c <MX_ADC5_Init+0xc4>)
 80017ee:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <MX_ADC5_Init+0xc0>)
 80017f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017f6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <MX_ADC5_Init+0xc0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <MX_ADC5_Init+0xc0>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001812:	2204      	movs	r2, #4
 8001814:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001818:	2200      	movs	r2, #0
 800181a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800181c:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <MX_ADC5_Init+0xc0>)
 800181e:	2200      	movs	r2, #0
 8001820:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001824:	2201      	movs	r2, #1
 8001826:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MX_ADC5_Init+0xc0>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001832:	2200      	movs	r2, #0
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_ADC5_Init+0xc0>)
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001846:	2200      	movs	r2, #0
 8001848:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_ADC5_Init+0xc0>)
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001852:	4811      	ldr	r0, [pc, #68]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001854:	f002 fda2 	bl	800439c <HAL_ADC_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800185e:	f000 fefd 	bl	800265c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_ADC5_Init+0xc8>)
 8001864:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001866:	2306      	movs	r3, #6
 8001868:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800186e:	237f      	movs	r3, #127	@ 0x7f
 8001870:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001872:	2304      	movs	r3, #4
 8001874:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800187a:	463b      	mov	r3, r7
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	@ (8001898 <MX_ADC5_Init+0xc0>)
 8001880:	f002 ff48 	bl	8004714 <HAL_ADC_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800188a:	f000 fee7 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000584 	.word	0x20000584
 800189c:	50000600 	.word	0x50000600
 80018a0:	08600004 	.word	0x08600004

080018a4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018aa:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <MX_COMP2_Init+0x48>)
 80018ac:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018b6:	2250      	movs	r2, #80	@ 0x50
 80018b8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_COMP2_Init+0x44>)
 80018d4:	f003 fcae 	bl	8005234 <HAL_COMP_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80018de:	f000 febd 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200005f0 	.word	0x200005f0
 80018ec:	40010204 	.word	0x40010204

080018f0 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_COMP5_Init+0x44>)
 80018f6:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <MX_COMP5_Init+0x48>)
 80018f8:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_COMP5_Init+0x44>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_COMP5_Init+0x44>)
 8001902:	2250      	movs	r2, #80	@ 0x50
 8001904:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <MX_COMP5_Init+0x44>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_COMP5_Init+0x44>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <MX_COMP5_Init+0x44>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_COMP5_Init+0x44>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_COMP5_Init+0x44>)
 8001920:	f003 fc88 	bl	8005234 <HAL_COMP_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 800192a:	f000 fe97 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000614 	.word	0x20000614
 8001938:	40010210 	.word	0x40010210

0800193c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	@ 0x30
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2230      	movs	r2, #48	@ 0x30
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f010 fb0b 	bl	8011f64 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800194e:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <MX_DAC1_Init+0x8c>)
 8001950:	4a1e      	ldr	r2, [pc, #120]	@ (80019cc <MX_DAC1_Init+0x90>)
 8001952:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001954:	481c      	ldr	r0, [pc, #112]	@ (80019c8 <MX_DAC1_Init+0x8c>)
 8001956:	f003 ff16 	bl	8005786 <HAL_DAC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001960:	f000 fe7c 	bl	800265c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001964:	2302      	movs	r3, #2
 8001966:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001974:	2302      	movs	r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001980:	2304      	movs	r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	480e      	ldr	r0, [pc, #56]	@ (80019c8 <MX_DAC1_Init+0x8c>)
 8001990:	f003 ffb6 	bl	8005900 <HAL_DAC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800199a:	f000 fe5f 	bl	800265c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80019a2:	2302      	movs	r3, #2
 80019a4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2210      	movs	r2, #16
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_DAC1_Init+0x8c>)
 80019b2:	f003 ffa5 	bl	8005900 <HAL_DAC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 80019bc:	f000 fe4e 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	@ 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000638 	.word	0x20000638
 80019cc:	50000800 	.word	0x50000800

080019d0 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2230      	movs	r2, #48	@ 0x30
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f010 fac1 	bl	8011f64 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <MX_DAC2_Init+0x6c>)
 80019e4:	4a16      	ldr	r2, [pc, #88]	@ (8001a40 <MX_DAC2_Init+0x70>)
 80019e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80019e8:	4814      	ldr	r0, [pc, #80]	@ (8001a3c <MX_DAC2_Init+0x6c>)
 80019ea:	f003 fecc 	bl	8005786 <HAL_DAC_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80019f4:	f000 fe32 	bl	800265c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80019f8:	2302      	movs	r3, #2
 80019fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001a14:	2304      	movs	r3, #4
 8001a16:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <MX_DAC2_Init+0x6c>)
 8001a24:	f003 ff6c 	bl	8005900 <HAL_DAC_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001a2e:	f000 fe15 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	@ 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000064c 	.word	0x2000064c
 8001a40:	50000c00 	.word	0x50000c00

08001a44 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2230      	movs	r2, #48	@ 0x30
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f010 fa87 	bl	8011f64 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_DAC4_Init+0x6c>)
 8001a58:	4a16      	ldr	r2, [pc, #88]	@ (8001ab4 <MX_DAC4_Init+0x70>)
 8001a5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001a5c:	4814      	ldr	r0, [pc, #80]	@ (8001ab0 <MX_DAC4_Init+0x6c>)
 8001a5e:	f003 fe92 	bl	8005786 <HAL_DAC_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001a68:	f000 fdf8 	bl	800265c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001a84:	2302      	movs	r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	@ (8001ab0 <MX_DAC4_Init+0x6c>)
 8001a98:	f003 ff32 	bl	8005900 <HAL_DAC_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001aa2:	f000 fddb 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3730      	adds	r7, #48	@ 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000660 	.word	0x20000660
 8001ab4:	50001400 	.word	0x50001400

08001ab8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001abe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <MX_I2C3_Init+0x78>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30D293D6;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <MX_I2C3_Init+0x7c>)
 8001ac6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001af2:	480e      	ldr	r0, [pc, #56]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001af4:	f004 fced 	bl	80064d2 <HAL_I2C_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001afe:	f000 fdad 	bl	800265c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001b06:	f005 f907 	bl	8006d18 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b10:	f000 fda4 	bl	800265c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_I2C3_Init+0x74>)
 8001b18:	f005 f949 	bl	8006dae <HAL_I2CEx_ConfigDigitalFilter>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f000 fd9b 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000674 	.word	0x20000674
 8001b30:	40007800 	.word	0x40007800
 8001b34:	30d293d6 	.word	0x30d293d6

08001b38 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b3c:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b3e:	4a22      	ldr	r2, [pc, #136]	@ (8001bc8 <MX_LPUART1_UART_Init+0x90>)
 8001b40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8001b42:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b44:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001b48:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b7a:	4812      	ldr	r0, [pc, #72]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b7c:	f00a fae4 	bl	800c148 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b86:	f000 fd69 	bl	800265c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001b8e:	f00b f90d 	bl	800cdac <HAL_UARTEx_SetTxFifoThreshold>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b98:	f000 fd60 	bl	800265c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001ba0:	f00b f942 	bl	800ce28 <HAL_UARTEx_SetRxFifoThreshold>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001baa:	f000 fd57 	bl	800265c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_LPUART1_UART_Init+0x8c>)
 8001bb0:	f00b f8c3 	bl	800cd3a <HAL_UARTEx_DisableFifoMode>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001bba:	f000 fd4f 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200006c8 	.word	0x200006c8
 8001bc8:	40008000 	.word	0x40008000

08001bcc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bd2:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <MX_OPAMP1_Init+0x54>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bde:	2240      	movs	r2, #64	@ 0x40
 8001be0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001be4:	2208      	movs	r2, #8
 8001be6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_OPAMP1_Init+0x50>)
 8001c08:	f005 f91e 	bl	8006e48 <HAL_OPAMP_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 8001c12:	f000 fd23 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000075c 	.word	0x2000075c
 8001c20:	40010300 	.word	0x40010300

08001c24 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <MX_OPAMP2_Init+0x48>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c36:	2260      	movs	r2, #96	@ 0x60
 8001c38:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <MX_OPAMP2_Init+0x44>)
 8001c54:	f005 f8f8 	bl	8006e48 <HAL_OPAMP_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8001c5e:	f000 fcfd 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000798 	.word	0x20000798
 8001c6c:	40010304 	.word	0x40010304

08001c70 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <MX_OPAMP3_Init+0x48>)
 8001c78:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c82:	2260      	movs	r2, #96	@ 0x60
 8001c84:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c88:	2204      	movs	r2, #4
 8001c8a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_OPAMP3_Init+0x44>)
 8001ca0:	f005 f8d2 	bl	8006e48 <HAL_OPAMP_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001caa:	f000 fcd7 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200007d4 	.word	0x200007d4
 8001cb8:	40010308 	.word	0x40010308

08001cbc <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001cc2:	4a10      	ldr	r2, [pc, #64]	@ (8001d04 <MX_OPAMP4_Init+0x48>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001cce:	2260      	movs	r2, #96	@ 0x60
 8001cd0:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_OPAMP4_Init+0x44>)
 8001cec:	f005 f8ac 	bl	8006e48 <HAL_OPAMP_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8001cf6:	f000 fcb1 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000810 	.word	0x20000810
 8001d04:	4001030c 	.word	0x4001030c

08001d08 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d0e:	4a10      	ldr	r2, [pc, #64]	@ (8001d50 <MX_OPAMP5_Init+0x48>)
 8001d10:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d1a:	2260      	movs	r2, #96	@ 0x60
 8001d1c:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d20:	2208      	movs	r2, #8
 8001d22:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <MX_OPAMP5_Init+0x44>)
 8001d38:	f005 f886 	bl	8006e48 <HAL_OPAMP_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8001d42:	f000 fc8b 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000084c 	.word	0x2000084c
 8001d50:	40010310 	.word	0x40010310

08001d54 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d5a:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <MX_OPAMP6_Init+0x54>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_OPAMP6_Init+0x50>)
 8001d90:	f005 f85a 	bl	8006e48 <HAL_OPAMP_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 8001d9a:	f000 fc5f 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000888 	.word	0x20000888
 8001da8:	40010314 	.word	0x40010314

08001dac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001db2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <MX_SPI3_Init+0x78>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dc4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dc8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dcc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001de4:	2210      	movs	r2, #16
 8001de6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001e08:	2208      	movs	r2, #8
 8001e0a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <MX_SPI3_Init+0x74>)
 8001e0e:	f007 fe79 	bl	8009b04 <HAL_SPI_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001e18:	f000 fc20 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200008c4 	.word	0x200008c4
 8001e24:	40003c00 	.word	0x40003c00

08001e28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f010 f894 	bl	8011f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e46:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e48:	4a23      	ldr	r2, [pc, #140]	@ (8001ed8 <MX_TIM1_Init+0xb0>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e82:	230f      	movs	r3, #15
 8001e84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001e92:	230f      	movs	r3, #15
 8001e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001e9e:	f008 ff3b 	bl	800ad18 <HAL_TIM_Encoder_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001ea8:	f000 fbd8 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_TIM1_Init+0xac>)
 8001ebe:	f00a f819 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ec8:	f000 fbc8 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	@ 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000988 	.word	0x20000988
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2224      	movs	r2, #36	@ 0x24
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f010 f83a 	bl	8011f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <MX_TIM3_Init+0xa8>)
 8001efe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001f20:	2302      	movs	r3, #2
 8001f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001f30:	230f      	movs	r3, #15
 8001f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001f40:	230f      	movs	r3, #15
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f4c:	f008 fee4 	bl	800ad18 <HAL_TIM_Encoder_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f56:	f000 fb81 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f62:	463b      	mov	r3, r7
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	@ (8001f80 <MX_TIM3_Init+0xa4>)
 8001f68:	f009 ffc4 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f72:	f000 fb73 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	@ 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009d4 	.word	0x200009d4
 8001f84:	40000400 	.word	0x40000400

08001f88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00f ffe4 	bl	8011f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001fa8:	4a21      	ldr	r2, [pc, #132]	@ (8002030 <MX_TIM4_Init+0xa8>)
 8001faa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001fdc:	230f      	movs	r3, #15
 8001fde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001fec:	230f      	movs	r3, #15
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480d      	ldr	r0, [pc, #52]	@ (800202c <MX_TIM4_Init+0xa4>)
 8001ff8:	f008 fe8e 	bl	800ad18 <HAL_TIM_Encoder_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002002:	f000 fb2b 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <MX_TIM4_Init+0xa4>)
 8002014:	f009 ff6e 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800201e:	f000 fb1d 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	3730      	adds	r7, #48	@ 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000a20 	.word	0x20000a20
 8002030:	40000800 	.word	0x40000800

08002034 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09c      	sub	sp, #112	@ 0x70
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002054:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
 8002064:	615a      	str	r2, [r3, #20]
 8002066:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2234      	movs	r2, #52	@ 0x34
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f00f ff78 	bl	8011f64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002074:	4b4e      	ldr	r3, [pc, #312]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002076:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <MX_TIM8_Init+0x180>)
 8002078:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800207a:	4b4d      	ldr	r3, [pc, #308]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b4b      	ldr	r3, [pc, #300]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002088:	22b3      	movs	r2, #179	@ 0xb3
 800208a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b48      	ldr	r3, [pc, #288]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002092:	4b47      	ldr	r3, [pc, #284]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b45      	ldr	r3, [pc, #276]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800209e:	4844      	ldr	r0, [pc, #272]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 80020a0:	f008 fa44 	bl	800a52c <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80020aa:	f000 fad7 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020b4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020b8:	4619      	mov	r1, r3
 80020ba:	483d      	ldr	r0, [pc, #244]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 80020bc:	f009 f874 	bl	800b1a8 <HAL_TIM_ConfigClockSource>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020c6:	f000 fac9 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020ca:	4839      	ldr	r0, [pc, #228]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 80020cc:	f008 fa85 	bl	800a5da <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80020d6:	f000 fac1 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ea:	4619      	mov	r1, r3
 80020ec:	4830      	ldr	r0, [pc, #192]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 80020ee:	f009 ff01 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80020f8:	f000 fab0 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020fc:	2370      	movs	r3, #112	@ 0x70
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8002100:	235a      	movs	r3, #90	@ 0x5a
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002104:	2302      	movs	r3, #2
 8002106:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002108:	2300      	movs	r3, #0
 800210a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002118:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	4823      	ldr	r0, [pc, #140]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002122:	f008 ff2d 	bl	800af80 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800212c:	f000 fa96 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002130:	2360      	movs	r3, #96	@ 0x60
 8002132:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800213c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800213e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002142:	2208      	movs	r2, #8
 8002144:	4619      	mov	r1, r3
 8002146:	481a      	ldr	r0, [pc, #104]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002148:	f008 ff1a 	bl	800af80 <HAL_TIM_PWM_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 8002152:	f000 fa83 	bl	800265c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800217c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4807      	ldr	r0, [pc, #28]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 8002194:	f009 ff44 	bl	800c020 <HAL_TIMEx_ConfigBreakDeadTime>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 800219e:	f000 fa5d 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80021a2:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <MX_TIM8_Init+0x17c>)
 80021a4:	f001 fc00 	bl	80039a8 <HAL_TIM_MspPostInit>

}
 80021a8:	bf00      	nop
 80021aa:	3770      	adds	r7, #112	@ 0x70
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000a6c 	.word	0x20000a6c
 80021b4:	40013400 	.word	0x40013400

080021b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b09c      	sub	sp, #112	@ 0x70
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
 80021e8:	615a      	str	r2, [r3, #20]
 80021ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2234      	movs	r2, #52	@ 0x34
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00f feb6 	bl	8011f64 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80021f8:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <MX_TIM15_Init+0x140>)
 80021fa:	4a40      	ldr	r2, [pc, #256]	@ (80022fc <MX_TIM15_Init+0x144>)
 80021fc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 80021fe:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002200:	2296      	movs	r2, #150	@ 0x96
 8002202:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800220a:	4b3b      	ldr	r3, [pc, #236]	@ (80022f8 <MX_TIM15_Init+0x140>)
 800220c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002210:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002212:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002218:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <MX_TIM15_Init+0x140>)
 800221a:	2200      	movs	r2, #0
 800221c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221e:	4b36      	ldr	r3, [pc, #216]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002224:	4834      	ldr	r0, [pc, #208]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002226:	f008 f981 	bl	800a52c <HAL_TIM_Base_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002230:	f000 fa14 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002238:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800223a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800223e:	4619      	mov	r1, r3
 8002240:	482d      	ldr	r0, [pc, #180]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002242:	f008 ffb1 	bl	800b1a8 <HAL_TIM_ConfigClockSource>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800224c:	f000 fa06 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002250:	4829      	ldr	r0, [pc, #164]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002252:	f008 f9c2 	bl	800a5da <HAL_TIM_PWM_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800225c:	f000 f9fe 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002268:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800226c:	4619      	mov	r1, r3
 800226e:	4822      	ldr	r0, [pc, #136]	@ (80022f8 <MX_TIM15_Init+0x140>)
 8002270:	f009 fe40 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800227a:	f000 f9ef 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227e:	2360      	movs	r3, #96	@ 0x60
 8002280:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 8002282:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	2300      	movs	r3, #0
 800228a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800228c:	2300      	movs	r3, #0
 800228e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800229c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	4814      	ldr	r0, [pc, #80]	@ (80022f8 <MX_TIM15_Init+0x140>)
 80022a6:	f008 fe6b 	bl	800af80 <HAL_TIM_PWM_ConfigChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80022b0:	f000 f9d4 	bl	800265c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <MX_TIM15_Init+0x140>)
 80022dc:	f009 fea0 	bl	800c020 <HAL_TIMEx_ConfigBreakDeadTime>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80022e6:	f000 f9b9 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80022ea:	4803      	ldr	r0, [pc, #12]	@ (80022f8 <MX_TIM15_Init+0x140>)
 80022ec:	f001 fb5c 	bl	80039a8 <HAL_TIM_MspPostInit>

}
 80022f0:	bf00      	nop
 80022f2:	3770      	adds	r7, #112	@ 0x70
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000ab8 	.word	0x20000ab8
 80022fc:	40014000 	.word	0x40014000

08002300 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2224      	movs	r2, #36	@ 0x24
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f00f fe28 	bl	8011f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800231e:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002320:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <MX_TIM20_Init+0xb0>)
 8002322:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <MX_TIM20_Init+0xac>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002336:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <MX_TIM20_Init+0xac>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002346:	2200      	movs	r2, #0
 8002348:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800234a:	2301      	movs	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002352:	2301      	movs	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800235a:	230f      	movs	r3, #15
 800235c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002362:	2301      	movs	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800236a:	230f      	movs	r3, #15
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	4619      	mov	r1, r3
 8002374:	480d      	ldr	r0, [pc, #52]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002376:	f008 fccf 	bl	800ad18 <HAL_TIM_Encoder_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8002380:	f000 f96c 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	@ (80023ac <MX_TIM20_Init+0xac>)
 8002396:	f009 fdad 	bl	800bef4 <HAL_TIMEx_MasterConfigSynchronization>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 80023a0:	f000 f95c 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	3730      	adds	r7, #48	@ 0x30
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000b04 	.word	0x20000b04
 80023b0:	40015000 	.word	0x40015000

080023b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <MX_DMA_Init+0x70>)
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <MX_DMA_Init+0x70>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <MX_DMA_Init+0x70>)
 80023c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <MX_DMA_Init+0x70>)
 80023d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d6:	4a13      	ldr	r2, [pc, #76]	@ (8002424 <MX_DMA_Init+0x70>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <MX_DMA_Init+0x70>)
 80023e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	200b      	movs	r0, #11
 80023f0:	f003 f995 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023f4:	200b      	movs	r0, #11
 80023f6:	f003 f9ac 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	200c      	movs	r0, #12
 8002400:	f003 f98d 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002404:	200c      	movs	r0, #12
 8002406:	f003 f9a4 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	200d      	movs	r0, #13
 8002410:	f003 f985 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002414:	200d      	movs	r0, #13
 8002416:	f003 f99c 	bl	8005752 <HAL_NVIC_EnableIRQ>

}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000

08002428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	4b83      	ldr	r3, [pc, #524]	@ (800264c <MX_GPIO_Init+0x224>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	4a82      	ldr	r2, [pc, #520]	@ (800264c <MX_GPIO_Init+0x224>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244a:	4b80      	ldr	r3, [pc, #512]	@ (800264c <MX_GPIO_Init+0x224>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002456:	4b7d      	ldr	r3, [pc, #500]	@ (800264c <MX_GPIO_Init+0x224>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a7c      	ldr	r2, [pc, #496]	@ (800264c <MX_GPIO_Init+0x224>)
 800245c:	f043 0320 	orr.w	r3, r3, #32
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b7a      	ldr	r3, [pc, #488]	@ (800264c <MX_GPIO_Init+0x224>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	4b77      	ldr	r3, [pc, #476]	@ (800264c <MX_GPIO_Init+0x224>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	4a76      	ldr	r2, [pc, #472]	@ (800264c <MX_GPIO_Init+0x224>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247a:	4b74      	ldr	r3, [pc, #464]	@ (800264c <MX_GPIO_Init+0x224>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	4b71      	ldr	r3, [pc, #452]	@ (800264c <MX_GPIO_Init+0x224>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	4a70      	ldr	r2, [pc, #448]	@ (800264c <MX_GPIO_Init+0x224>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002492:	4b6e      	ldr	r3, [pc, #440]	@ (800264c <MX_GPIO_Init+0x224>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249e:	4b6b      	ldr	r3, [pc, #428]	@ (800264c <MX_GPIO_Init+0x224>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	4a6a      	ldr	r2, [pc, #424]	@ (800264c <MX_GPIO_Init+0x224>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024aa:	4b68      	ldr	r3, [pc, #416]	@ (800264c <MX_GPIO_Init+0x224>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 80024b6:	2200      	movs	r2, #0
 80024b8:	f64e 0120 	movw	r1, #59424	@ 0xe820
 80024bc:	4864      	ldr	r0, [pc, #400]	@ (8002650 <MX_GPIO_Init+0x228>)
 80024be:	f003 ffcd 	bl	800645c <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024cc:	f003 ffc6 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	f248 0138 	movw	r1, #32824	@ 0x8038
 80024d6:	485f      	ldr	r0, [pc, #380]	@ (8002654 <MX_GPIO_Init+0x22c>)
 80024d8:	f003 ffc0 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 80024dc:	2200      	movs	r2, #0
 80024de:	2104      	movs	r1, #4
 80024e0:	485d      	ldr	r0, [pc, #372]	@ (8002658 <MX_GPIO_Init+0x230>)
 80024e2:	f003 ffbb 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 80024e6:	f64e 0320 	movw	r3, #59424	@ 0xe820
 80024ea:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4854      	ldr	r0, [pc, #336]	@ (8002650 <MX_GPIO_Init+0x228>)
 8002500:	f003 fe2a 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002504:	2301      	movs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8002514:	230e      	movs	r3, #14
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4619      	mov	r1, r3
 800251e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002522:	f003 fe19 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 8002526:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002542:	f003 fe09 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8002546:	f240 430c 	movw	r3, #1036	@ 0x40c
 800254a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800254c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002560:	f003 fdfa 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002564:	2310      	movs	r3, #16
 8002566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002568:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800256c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4835      	ldr	r0, [pc, #212]	@ (8002650 <MX_GPIO_Init+0x228>)
 800257a:	f003 fded 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 800257e:	f240 1303 	movw	r3, #259	@ 0x103
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002584:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	482f      	ldr	r0, [pc, #188]	@ (8002654 <MX_GPIO_Init+0x22c>)
 8002596:	f003 fddf 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 800259a:	f248 0338 	movw	r3, #32824	@ 0x8038
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4828      	ldr	r0, [pc, #160]	@ (8002654 <MX_GPIO_Init+0x22c>)
 80025b4:	f003 fdd0 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 80025b8:	2304      	movs	r3, #4
 80025ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4822      	ldr	r0, [pc, #136]	@ (8002658 <MX_GPIO_Init+0x230>)
 80025d0:	f003 fdc2 	bl	8006158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2006      	movs	r0, #6
 80025da:	f003 f8a0 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025de:	2006      	movs	r0, #6
 80025e0:	f003 f8b7 	bl	8005752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2100      	movs	r1, #0
 80025e8:	2007      	movs	r0, #7
 80025ea:	f003 f898 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025ee:	2007      	movs	r0, #7
 80025f0:	f003 f8af 	bl	8005752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2008      	movs	r0, #8
 80025fa:	f003 f890 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025fe:	2008      	movs	r0, #8
 8002600:	f003 f8a7 	bl	8005752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2009      	movs	r0, #9
 800260a:	f003 f888 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800260e:	2009      	movs	r0, #9
 8002610:	f003 f89f 	bl	8005752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	200a      	movs	r0, #10
 800261a:	f003 f880 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800261e:	200a      	movs	r0, #10
 8002620:	f003 f897 	bl	8005752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	2017      	movs	r0, #23
 800262a:	f003 f878 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800262e:	2017      	movs	r0, #23
 8002630:	f003 f88f 	bl	8005752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	2028      	movs	r0, #40	@ 0x28
 800263a:	f003 f870 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800263e:	2028      	movs	r0, #40	@ 0x28
 8002640:	f003 f887 	bl	8005752 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002644:	bf00      	nop
 8002646:	3728      	adds	r7, #40	@ 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	48000800 	.word	0x48000800
 8002654:	48000400 	.word	0x48000400
 8002658:	48000c00 	.word	0x48000c00

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
}
 8002662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <Error_Handler+0x8>

08002668 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002672:	bf00      	nop
	ST7789_DC_Clr();
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800267a:	4807      	ldr	r0, [pc, #28]	@ (8002698 <ST7789_WriteCommand+0x30>)
 800267c:	f003 feee 	bl	800645c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002680:	1df9      	adds	r1, r7, #7
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	2201      	movs	r2, #1
 8002688:	4804      	ldr	r0, [pc, #16]	@ (800269c <ST7789_WriteCommand+0x34>)
 800268a:	f007 fae6 	bl	8009c5a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800268e:	bf00      	nop
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	48000800 	.word	0x48000800
 800269c:	200008c4 	.word	0x200008c4

080026a0 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80026aa:	bf00      	nop
	ST7789_DC_Set();
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026b2:	481b      	ldr	r0, [pc, #108]	@ (8002720 <ST7789_WriteData+0x80>)
 80026b4:	f003 fed2 	bl	800645c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80026b8:	e02a      	b.n	8002710 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026c0:	4293      	cmp	r3, r2
 80026c2:	bf28      	it	cs
 80026c4:	4613      	movcs	r3, r2
 80026c6:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <ST7789_WriteData+0x84>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d30e      	bcc.n	80026f2 <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4813      	ldr	r0, [pc, #76]	@ (8002728 <ST7789_WriteData+0x88>)
 80026dc:	f007 fc34 	bl	8009f48 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80026e0:	bf00      	nop
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <ST7789_WriteData+0x88>)
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d1f8      	bne.n	80026e2 <ST7789_WriteData+0x42>
 80026f0:	e006      	b.n	8002700 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80026f2:	89fa      	ldrh	r2, [r7, #14]
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	480b      	ldr	r0, [pc, #44]	@ (8002728 <ST7789_WriteData+0x88>)
 80026fc:	f007 faad 	bl	8009c5a <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1d1      	bne.n	80026ba <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 8002716:	bf00      	nop
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	48000800 	.word	0x48000800
 8002724:	20000208 	.word	0x20000208
 8002728:	200008c4 	.word	0x200008c4

0800272c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002736:	bf00      	nop
	ST7789_DC_Set();
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800273e:	4807      	ldr	r0, [pc, #28]	@ (800275c <ST7789_WriteSmallData+0x30>)
 8002740:	f003 fe8c 	bl	800645c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8002744:	1df9      	adds	r1, r7, #7
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	2201      	movs	r2, #1
 800274c:	4804      	ldr	r0, [pc, #16]	@ (8002760 <ST7789_WriteSmallData+0x34>)
 800274e:	f007 fa84 	bl	8009c5a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002752:	bf00      	nop
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	48000800 	.word	0x48000800
 8002760:	200008c4 	.word	0x200008c4

08002764 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800276e:	2036      	movs	r0, #54	@ 0x36
 8002770:	f7ff ff7a 	bl	8002668 <ST7789_WriteCommand>
	switch (m) {
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d81a      	bhi.n	80027b0 <ST7789_SetRotation+0x4c>
 800277a:	a201      	add	r2, pc, #4	@ (adr r2, 8002780 <ST7789_SetRotation+0x1c>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	08002799 	.word	0x08002799
 8002788:	080027a1 	.word	0x080027a1
 800278c:	080027a9 	.word	0x080027a9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002790:	20c0      	movs	r0, #192	@ 0xc0
 8002792:	f7ff ffcb 	bl	800272c <ST7789_WriteSmallData>
		break;
 8002796:	e00c      	b.n	80027b2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002798:	20a0      	movs	r0, #160	@ 0xa0
 800279a:	f7ff ffc7 	bl	800272c <ST7789_WriteSmallData>
		break;
 800279e:	e008      	b.n	80027b2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff ffc3 	bl	800272c <ST7789_WriteSmallData>
		break;
 80027a6:	e004      	b.n	80027b2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80027a8:	2060      	movs	r0, #96	@ 0x60
 80027aa:	f7ff ffbf 	bl	800272c <ST7789_WriteSmallData>
		break;
 80027ae:	e000      	b.n	80027b2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80027b0:	bf00      	nop
	}
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop

080027bc <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4604      	mov	r4, r0
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	80fb      	strh	r3, [r7, #6]
 80027ce:	4603      	mov	r3, r0
 80027d0:	80bb      	strh	r3, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	807b      	strh	r3, [r7, #2]
 80027d6:	4613      	mov	r3, r2
 80027d8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80027da:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	82fb      	strh	r3, [r7, #22]
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80027e4:	88bb      	ldrh	r3, [r7, #4]
 80027e6:	827b      	strh	r3, [r7, #18]
 80027e8:	883b      	ldrh	r3, [r7, #0]
 80027ea:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80027ec:	202a      	movs	r0, #42	@ 0x2a
 80027ee:	f7ff ff3b 	bl	8002668 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80027f2:	8afb      	ldrh	r3, [r7, #22]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	733b      	strb	r3, [r7, #12]
 80027fc:	8afb      	ldrh	r3, [r7, #22]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	737b      	strb	r3, [r7, #13]
 8002802:	8abb      	ldrh	r3, [r7, #20]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b29b      	uxth	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	73bb      	strb	r3, [r7, #14]
 800280c:	8abb      	ldrh	r3, [r7, #20]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2104      	movs	r1, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff41 	bl	80026a0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800281e:	202b      	movs	r0, #43	@ 0x2b
 8002820:	f7ff ff22 	bl	8002668 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002824:	8a7b      	ldrh	r3, [r7, #18]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b29b      	uxth	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	723b      	strb	r3, [r7, #8]
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	727b      	strb	r3, [r7, #9]
 8002834:	8a3b      	ldrh	r3, [r7, #16]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	72bb      	strb	r3, [r7, #10]
 800283e:	8a3b      	ldrh	r3, [r7, #16]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	2104      	movs	r1, #4
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff28 	bl	80026a0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002850:	202c      	movs	r0, #44	@ 0x2c
 8002852:	f7ff ff09 	bl	8002668 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002856:	bf00      	nop
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b08b      	sub	sp, #44	@ 0x2c
 8002864:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8002866:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800286a:	2100      	movs	r1, #0
 800286c:	484a      	ldr	r0, [pc, #296]	@ (8002998 <ST7789_Init+0x138>)
 800286e:	f00f fb79 	bl	8011f64 <memset>
	#endif
	HAL_Delay(10);
 8002872:	200a      	movs	r0, #10
 8002874:	f001 fb76 	bl	8003f64 <HAL_Delay>
    ST7789_RST_Clr();
 8002878:	2200      	movs	r2, #0
 800287a:	2104      	movs	r1, #4
 800287c:	4847      	ldr	r0, [pc, #284]	@ (800299c <ST7789_Init+0x13c>)
 800287e:	f003 fded 	bl	800645c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002882:	200a      	movs	r0, #10
 8002884:	f001 fb6e 	bl	8003f64 <HAL_Delay>
    ST7789_RST_Set();
 8002888:	2201      	movs	r2, #1
 800288a:	2104      	movs	r1, #4
 800288c:	4843      	ldr	r0, [pc, #268]	@ (800299c <ST7789_Init+0x13c>)
 800288e:	f003 fde5 	bl	800645c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8002892:	2014      	movs	r0, #20
 8002894:	f001 fb66 	bl	8003f64 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002898:	203a      	movs	r0, #58	@ 0x3a
 800289a:	f7ff fee5 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800289e:	2055      	movs	r0, #85	@ 0x55
 80028a0:	f7ff ff44 	bl	800272c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80028a4:	20b2      	movs	r0, #178	@ 0xb2
 80028a6:	f7ff fedf 	bl	8002668 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80028aa:	4a3d      	ldr	r2, [pc, #244]	@ (80029a0 <ST7789_Init+0x140>)
 80028ac:	f107 0320 	add.w	r3, r7, #32
 80028b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028b4:	6018      	str	r0, [r3, #0]
 80028b6:	3304      	adds	r3, #4
 80028b8:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80028ba:	f107 0320 	add.w	r3, r7, #32
 80028be:	2105      	movs	r1, #5
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff feed 	bl	80026a0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80028c6:	2003      	movs	r0, #3
 80028c8:	f7ff ff4c 	bl	8002764 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80028cc:	20b7      	movs	r0, #183	@ 0xb7
 80028ce:	f7ff fecb 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80028d2:	2035      	movs	r0, #53	@ 0x35
 80028d4:	f7ff ff2a 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80028d8:	20bb      	movs	r0, #187	@ 0xbb
 80028da:	f7ff fec5 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80028de:	2019      	movs	r0, #25
 80028e0:	f7ff ff24 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80028e4:	20c0      	movs	r0, #192	@ 0xc0
 80028e6:	f7ff febf 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80028ea:	202c      	movs	r0, #44	@ 0x2c
 80028ec:	f7ff ff1e 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80028f0:	20c2      	movs	r0, #194	@ 0xc2
 80028f2:	f7ff feb9 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff ff18 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80028fc:	20c3      	movs	r0, #195	@ 0xc3
 80028fe:	f7ff feb3 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002902:	2012      	movs	r0, #18
 8002904:	f7ff ff12 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8002908:	20c4      	movs	r0, #196	@ 0xc4
 800290a:	f7ff fead 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800290e:	2020      	movs	r0, #32
 8002910:	f7ff ff0c 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8002914:	20c6      	movs	r0, #198	@ 0xc6
 8002916:	f7ff fea7 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800291a:	200f      	movs	r0, #15
 800291c:	f7ff ff06 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8002920:	20d0      	movs	r0, #208	@ 0xd0
 8002922:	f7ff fea1 	bl	8002668 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8002926:	20a4      	movs	r0, #164	@ 0xa4
 8002928:	f7ff ff00 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800292c:	20a1      	movs	r0, #161	@ 0xa1
 800292e:	f7ff fefd 	bl	800272c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002932:	20e0      	movs	r0, #224	@ 0xe0
 8002934:	f7ff fe98 	bl	8002668 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <ST7789_Init+0x144>)
 800293a:	f107 0410 	add.w	r4, r7, #16
 800293e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002940:	c407      	stmia	r4!, {r0, r1, r2}
 8002942:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	210e      	movs	r1, #14
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fea8 	bl	80026a0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002950:	20e1      	movs	r0, #225	@ 0xe1
 8002952:	f7ff fe89 	bl	8002668 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <ST7789_Init+0x148>)
 8002958:	463c      	mov	r4, r7
 800295a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800295c:	c407      	stmia	r4!, {r0, r1, r2}
 800295e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002960:	463b      	mov	r3, r7
 8002962:	210e      	movs	r1, #14
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fe9b 	bl	80026a0 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800296a:	2021      	movs	r0, #33	@ 0x21
 800296c:	f7ff fe7c 	bl	8002668 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002970:	2011      	movs	r0, #17
 8002972:	f7ff fe79 	bl	8002668 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002976:	2013      	movs	r0, #19
 8002978:	f7ff fe76 	bl	8002668 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800297c:	2029      	movs	r0, #41	@ 0x29
 800297e:	f7ff fe73 	bl	8002668 <ST7789_WriteCommand>

	HAL_Delay(50);
 8002982:	2032      	movs	r0, #50	@ 0x32
 8002984:	f001 faee 	bl	8003f64 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002988:	2000      	movs	r0, #0
 800298a:	f000 f80f 	bl	80029ac <ST7789_Fill_Color>
}
 800298e:	bf00      	nop
 8002990:	372c      	adds	r7, #44	@ 0x2c
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	20000c18 	.word	0x20000c18
 800299c:	48000c00 	.word	0x48000c00
 80029a0:	08015640 	.word	0x08015640
 80029a4:	08015648 	.word	0x08015648
 80029a8:	08015658 	.word	0x08015658

080029ac <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80029b6:	23ef      	movs	r3, #239	@ 0xef
 80029b8:	f240 123f 	movw	r2, #319	@ 0x13f
 80029bc:	2100      	movs	r1, #0
 80029be:	2000      	movs	r0, #0
 80029c0:	f7ff fefc 	bl	80027bc <ST7789_SetAddressWindow>
	ST7789_Select();
 80029c4:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	81fb      	strh	r3, [r7, #14]
 80029ca:	e00e      	b.n	80029ea <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80029d2:	4619      	mov	r1, r3
 80029d4:	4809      	ldr	r0, [pc, #36]	@ (80029fc <ST7789_Fill_Color+0x50>)
 80029d6:	f00f fac5 	bl	8011f64 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 80029da:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 80029de:	4807      	ldr	r0, [pc, #28]	@ (80029fc <ST7789_Fill_Color+0x50>)
 80029e0:	f7ff fe5e 	bl	80026a0 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	3301      	adds	r3, #1
 80029e8:	81fb      	strh	r3, [r7, #14]
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80029ee:	d9ed      	bls.n	80029cc <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 80029f0:	bf00      	nop
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000c18 	.word	0x20000c18

08002a00 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	80bb      	strh	r3, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a18:	d219      	bcs.n	8002a4e <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	2bef      	cmp	r3, #239	@ 0xef
 8002a1e:	d816      	bhi.n	8002a4e <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8002a20:	88bb      	ldrh	r3, [r7, #4]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	88b9      	ldrh	r1, [r7, #4]
 8002a26:	88f8      	ldrh	r0, [r7, #6]
 8002a28:	f7ff fec8 	bl	80027bc <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	733b      	strb	r3, [r7, #12]
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8002a3c:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fe2b 	bl	80026a0 <ST7789_WriteData>
	ST7789_UnSelect();
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002a4e:	bf00      	nop
}
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8002a56:	b590      	push	{r4, r7, lr}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	4608      	mov	r0, r1
 8002a60:	4611      	mov	r1, r2
 8002a62:	461a      	mov	r2, r3
 8002a64:	4623      	mov	r3, r4
 8002a66:	80fb      	strh	r3, [r7, #6]
 8002a68:	4603      	mov	r3, r0
 8002a6a:	80bb      	strh	r3, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8002a74:	883a      	ldrh	r2, [r7, #0]
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a82:	8879      	ldrh	r1, [r7, #2]
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	1acb      	subs	r3, r1, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bfb8      	it	lt
 8002a8c:	425b      	neglt	r3, r3
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	bfcc      	ite	gt
 8002a92:	2301      	movgt	r3, #1
 8002a94:	2300      	movle	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8002a9a:	8a7b      	ldrh	r3, [r7, #18]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <ST7789_DrawLine+0x62>
		swap = x0;
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8002aa4:	88bb      	ldrh	r3, [r7, #4]
 8002aa6:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8002aa8:	8a3b      	ldrh	r3, [r7, #16]
 8002aaa:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8002ab0:	883b      	ldrh	r3, [r7, #0]
 8002ab2:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8002ab4:	8a3b      	ldrh	r3, [r7, #16]
 8002ab6:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d90b      	bls.n	8002ad8 <ST7789_DrawLine+0x82>
		swap = x0;
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8002ac8:	8a3b      	ldrh	r3, [r7, #16]
 8002aca:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8002acc:	88bb      	ldrh	r3, [r7, #4]
 8002ace:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8002ad0:	883b      	ldrh	r3, [r7, #0]
 8002ad2:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8002ad4:	8a3b      	ldrh	r3, [r7, #16]
 8002ad6:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002ad8:	887a      	ldrh	r2, [r7, #2]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8002ae2:	883a      	ldrh	r2, [r7, #0]
 8002ae4:	88bb      	ldrh	r3, [r7, #4]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bfb8      	it	lt
 8002aec:	425b      	neglt	r3, r3
 8002aee:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8002af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002af4:	0fda      	lsrs	r2, r3, #31
 8002af6:	4413      	add	r3, r2
 8002af8:	105b      	asrs	r3, r3, #1
 8002afa:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8002afc:	88ba      	ldrh	r2, [r7, #4]
 8002afe:	883b      	ldrh	r3, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d202      	bcs.n	8002b0a <ST7789_DrawLine+0xb4>
        ystep = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	82bb      	strh	r3, [r7, #20]
 8002b08:	e028      	b.n	8002b5c <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8002b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b0e:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8002b10:	e024      	b.n	8002b5c <ST7789_DrawLine+0x106>
        if (steep) {
 8002b12:	8a7b      	ldrh	r3, [r7, #18]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8002b18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002b1a:	88f9      	ldrh	r1, [r7, #6]
 8002b1c:	88bb      	ldrh	r3, [r7, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff6e 	bl	8002a00 <ST7789_DrawPixel>
 8002b24:	e005      	b.n	8002b32 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8002b26:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002b28:	88b9      	ldrh	r1, [r7, #4]
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff67 	bl	8002a00 <ST7789_DrawPixel>
        }
        err -= dy;
 8002b32:	8afa      	ldrh	r2, [r7, #22]
 8002b34:	89bb      	ldrh	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8002b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da08      	bge.n	8002b56 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8002b44:	8aba      	ldrh	r2, [r7, #20]
 8002b46:	88bb      	ldrh	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002b4c:	8afa      	ldrh	r2, [r7, #22]
 8002b4e:	89fb      	ldrh	r3, [r7, #14]
 8002b50:	4413      	add	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	80fb      	strh	r3, [r7, #6]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d9d6      	bls.n	8002b12 <ST7789_DrawLine+0xbc>
        }
    }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002b6e:	b590      	push	{r4, r7, lr}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af02      	add	r7, sp, #8
 8002b74:	4604      	mov	r4, r0
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	80fb      	strh	r3, [r7, #6]
 8002b80:	4603      	mov	r3, r0
 8002b82:	80bb      	strh	r3, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002b8c:	bf00      	nop
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8002b8e:	88bc      	ldrh	r4, [r7, #4]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	88b9      	ldrh	r1, [r7, #4]
 8002b94:	88f8      	ldrh	r0, [r7, #6]
 8002b96:	8b3b      	ldrh	r3, [r7, #24]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7ff ff5b 	bl	8002a56 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8002ba0:	883c      	ldrh	r4, [r7, #0]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	88b9      	ldrh	r1, [r7, #4]
 8002ba6:	88f8      	ldrh	r0, [r7, #6]
 8002ba8:	8b3b      	ldrh	r3, [r7, #24]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4623      	mov	r3, r4
 8002bae:	f7ff ff52 	bl	8002a56 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8002bb2:	883c      	ldrh	r4, [r7, #0]
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	8839      	ldrh	r1, [r7, #0]
 8002bb8:	88f8      	ldrh	r0, [r7, #6]
 8002bba:	8b3b      	ldrh	r3, [r7, #24]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	f7ff ff49 	bl	8002a56 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8002bc4:	883c      	ldrh	r4, [r7, #0]
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	88b9      	ldrh	r1, [r7, #4]
 8002bca:	8878      	ldrh	r0, [r7, #2]
 8002bcc:	8b3b      	ldrh	r3, [r7, #24]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	f7ff ff40 	bl	8002a56 <ST7789_DrawLine>
	ST7789_UnSelect();
 8002bd6:	bf00      	nop
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4604      	mov	r4, r0
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	80fb      	strh	r3, [r7, #6]
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80bb      	strh	r3, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f1c3 0301 	rsb	r3, r3, #1
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	03d2      	lsls	r2, r2, #15
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8002c26:	bf00      	nop
	ST7789_DrawPixel(x0, y0 + r, color);
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	88bb      	ldrh	r3, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	b299      	uxth	r1, r3
 8002c32:	883a      	ldrh	r2, [r7, #0]
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fee2 	bl	8002a00 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	88ba      	ldrh	r2, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	b299      	uxth	r1, r3
 8002c46:	883a      	ldrh	r2, [r7, #0]
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fed8 	bl	8002a00 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	4413      	add	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	883a      	ldrh	r2, [r7, #0]
 8002c5c:	88b9      	ldrh	r1, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fece 	bl	8002a00 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	883a      	ldrh	r2, [r7, #0]
 8002c70:	88b9      	ldrh	r1, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fec4 	bl	8002a00 <ST7789_DrawPixel>

	while (x < y) {
 8002c78:	e081      	b.n	8002d7e <ST7789_DrawCircle+0x19e>
		if (f >= 0) {
 8002c7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	db0e      	blt.n	8002ca0 <ST7789_DrawCircle+0xc0>
			y--;
 8002c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002c8e:	8a7b      	ldrh	r3, [r7, #18]
 8002c90:	3302      	adds	r3, #2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002c96:	8afa      	ldrh	r2, [r7, #22]
 8002c98:	8a7b      	ldrh	r3, [r7, #18]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002ca0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002cac:	8abb      	ldrh	r3, [r7, #20]
 8002cae:	3302      	adds	r3, #2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002cb4:	8afa      	ldrh	r2, [r7, #22]
 8002cb6:	8abb      	ldrh	r3, [r7, #20]
 8002cb8:	4413      	add	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8002cbe:	8a3a      	ldrh	r2, [r7, #16]
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b298      	uxth	r0, r3
 8002cc6:	89fa      	ldrh	r2, [r7, #14]
 8002cc8:	88bb      	ldrh	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	883a      	ldrh	r2, [r7, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7ff fe95 	bl	8002a00 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8002cd6:	8a3b      	ldrh	r3, [r7, #16]
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b298      	uxth	r0, r3
 8002cde:	89fa      	ldrh	r2, [r7, #14]
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	883a      	ldrh	r2, [r7, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7ff fe89 	bl	8002a00 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8002cee:	8a3a      	ldrh	r2, [r7, #16]
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b298      	uxth	r0, r3
 8002cf6:	89fb      	ldrh	r3, [r7, #14]
 8002cf8:	88ba      	ldrh	r2, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	883a      	ldrh	r2, [r7, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7ff fe7d 	bl	8002a00 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8002d06:	8a3b      	ldrh	r3, [r7, #16]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	b298      	uxth	r0, r3
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	88ba      	ldrh	r2, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	883a      	ldrh	r2, [r7, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f7ff fe71 	bl	8002a00 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8002d1e:	89fa      	ldrh	r2, [r7, #14]
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4413      	add	r3, r2
 8002d24:	b298      	uxth	r0, r3
 8002d26:	8a3a      	ldrh	r2, [r7, #16]
 8002d28:	88bb      	ldrh	r3, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	883a      	ldrh	r2, [r7, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f7ff fe65 	bl	8002a00 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	b298      	uxth	r0, r3
 8002d3e:	8a3a      	ldrh	r2, [r7, #16]
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	883a      	ldrh	r2, [r7, #0]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7ff fe59 	bl	8002a00 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8002d4e:	89fa      	ldrh	r2, [r7, #14]
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	4413      	add	r3, r2
 8002d54:	b298      	uxth	r0, r3
 8002d56:	8a3b      	ldrh	r3, [r7, #16]
 8002d58:	88ba      	ldrh	r2, [r7, #4]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	883a      	ldrh	r2, [r7, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f7ff fe4d 	bl	8002a00 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8002d66:	89fb      	ldrh	r3, [r7, #14]
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	b298      	uxth	r0, r3
 8002d6e:	8a3b      	ldrh	r3, [r7, #16]
 8002d70:	88ba      	ldrh	r2, [r7, #4]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	883a      	ldrh	r2, [r7, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7ff fe41 	bl	8002a00 <ST7789_DrawPixel>
	while (x < y) {
 8002d7e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f6ff af77 	blt.w	8002c7a <ST7789_DrawCircle+0x9a>
	}
	ST7789_UnSelect();
 8002d8c:	bf00      	nop
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}

08002d96 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8002d96:	b590      	push	{r4, r7, lr}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4608      	mov	r0, r1
 8002da0:	4611      	mov	r1, r2
 8002da2:	461a      	mov	r2, r3
 8002da4:	4623      	mov	r3, r4
 8002da6:	80fb      	strh	r3, [r7, #6]
 8002da8:	4603      	mov	r3, r0
 8002daa:	80bb      	strh	r3, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002dba:	d22a      	bcs.n	8002e12 <ST7789_DrawImage+0x7c>
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	2bef      	cmp	r3, #239	@ 0xef
 8002dc0:	d827      	bhi.n	8002e12 <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002dcc:	dc23      	bgt.n	8002e16 <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8002dce:	88ba      	ldrh	r2, [r7, #4]
 8002dd0:	883b      	ldrh	r3, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2bf0      	cmp	r3, #240	@ 0xf0
 8002dd6:	dc20      	bgt.n	8002e1a <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8002dd8:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	4413      	add	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29c      	uxth	r4, r3
 8002de6:	88ba      	ldrh	r2, [r7, #4]
 8002de8:	883b      	ldrh	r3, [r7, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	88b9      	ldrh	r1, [r7, #4]
 8002df4:	88f8      	ldrh	r0, [r7, #6]
 8002df6:	4622      	mov	r2, r4
 8002df8:	f7ff fce0 	bl	80027bc <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	883a      	ldrh	r2, [r7, #0]
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4619      	mov	r1, r3
 8002e08:	69b8      	ldr	r0, [r7, #24]
 8002e0a:	f7ff fc49 	bl	80026a0 <ST7789_WriteData>
	ST7789_UnSelect();
 8002e0e:	bf00      	nop
 8002e10:	e004      	b.n	8002e1c <ST7789_DrawImage+0x86>
		return;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <ST7789_DrawImage+0x86>
		return;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <ST7789_DrawImage+0x86>
		return;
 8002e1a:	bf00      	nop
}
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002e22:	b082      	sub	sp, #8
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	80fb      	strh	r3, [r7, #6]
 8002e30:	460b      	mov	r3, r1
 8002e32:	80bb      	strh	r3, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8002e38:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002e3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e3e:	461a      	mov	r2, r3
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	4413      	add	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002e4e:	4619      	mov	r1, r3
 8002e50:	88bb      	ldrh	r3, [r7, #4]
 8002e52:	440b      	add	r3, r1
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	88b9      	ldrh	r1, [r7, #4]
 8002e5c:	88f8      	ldrh	r0, [r7, #6]
 8002e5e:	f7ff fcad 	bl	80027bc <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	e041      	b.n	8002eec <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8002e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	3b20      	subs	r3, #32
 8002e6e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	440b      	add	r3, r1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e027      	b.n	8002eda <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002e9a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	743b      	strb	r3, [r7, #16]
 8002ea4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fbf5 	bl	80026a0 <ST7789_WriteData>
 8002eb6:	e00d      	b.n	8002ed4 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002eb8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	733b      	strb	r3, [r7, #12]
 8002ec2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2102      	movs	r1, #2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fbe6 	bl	80026a0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ede:	461a      	mov	r2, r3
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d3d1      	bcc.n	8002e8a <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d3b7      	bcc.n	8002e68 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8002ef8:	bf00      	nop
}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f04:	b002      	add	sp, #8
 8002f06:	4770      	bx	lr

08002f08 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002f08:	b082      	sub	sp, #8
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af04      	add	r7, sp, #16
 8002f10:	603a      	str	r2, [r7, #0]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	4603      	mov	r3, r0
 8002f16:	80fb      	strh	r3, [r7, #6]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002f1c:	bf00      	nop
	while (*str) {
 8002f1e:	e02e      	b.n	8002f7e <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	7d3a      	ldrb	r2, [r7, #20]
 8002f24:	4413      	add	r3, r2
 8002f26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f2a:	db13      	blt.n	8002f54 <ST7789_WriteString+0x4c>
			x = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002f30:	7d7b      	ldrb	r3, [r7, #21]
 8002f32:	461a      	mov	r2, r3
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8002f3a:	88bb      	ldrh	r3, [r7, #4]
 8002f3c:	7d7a      	ldrb	r2, [r7, #21]
 8002f3e:	4413      	add	r3, r2
 8002f40:	2bef      	cmp	r3, #239	@ 0xef
 8002f42:	dc21      	bgt.n	8002f88 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d103      	bne.n	8002f54 <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	603b      	str	r3, [r7, #0]
				continue;
 8002f52:	e014      	b.n	8002f7e <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	88b9      	ldrh	r1, [r7, #4]
 8002f5a:	88f8      	ldrh	r0, [r7, #6]
 8002f5c:	8c3b      	ldrh	r3, [r7, #32]
 8002f5e:	9302      	str	r3, [sp, #8]
 8002f60:	8bbb      	ldrh	r3, [r7, #28]
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f7ff ff5a 	bl	8002e22 <ST7789_WriteChar>
		x += font.width;
 8002f6e:	7d3b      	ldrb	r3, [r7, #20]
 8002f70:	461a      	mov	r2, r3
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	4413      	add	r3, r2
 8002f76:	80fb      	strh	r3, [r7, #6]
		str++;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1cc      	bne.n	8002f20 <ST7789_WriteString+0x18>
 8002f86:	e000      	b.n	8002f8a <ST7789_WriteString+0x82>
				break;
 8002f88:	bf00      	nop
	}
	ST7789_UnSelect();
 8002f8a:	bf00      	nop
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f96:	b002      	add	sp, #8
 8002f98:	4770      	bx	lr

08002f9a <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8002f9a:	b590      	push	{r4, r7, lr}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4608      	mov	r0, r1
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	80fb      	strh	r3, [r7, #6]
 8002fac:	4603      	mov	r3, r0
 8002fae:	80bb      	strh	r3, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002fb8:	bf00      	nop
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8002fba:	883c      	ldrh	r4, [r7, #0]
 8002fbc:	887a      	ldrh	r2, [r7, #2]
 8002fbe:	88b9      	ldrh	r1, [r7, #4]
 8002fc0:	88f8      	ldrh	r0, [r7, #6]
 8002fc2:	8c3b      	ldrh	r3, [r7, #32]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	f7ff fd45 	bl	8002a56 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8002fcc:	8bbc      	ldrh	r4, [r7, #28]
 8002fce:	8b3a      	ldrh	r2, [r7, #24]
 8002fd0:	8839      	ldrh	r1, [r7, #0]
 8002fd2:	8878      	ldrh	r0, [r7, #2]
 8002fd4:	8c3b      	ldrh	r3, [r7, #32]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4623      	mov	r3, r4
 8002fda:	f7ff fd3c 	bl	8002a56 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8002fde:	88bc      	ldrh	r4, [r7, #4]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	8bb9      	ldrh	r1, [r7, #28]
 8002fe4:	8b38      	ldrh	r0, [r7, #24]
 8002fe6:	8c3b      	ldrh	r3, [r7, #32]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4623      	mov	r3, r4
 8002fec:	f7ff fd33 	bl	8002a56 <ST7789_DrawLine>
	ST7789_UnSelect();
 8002ff0:	bf00      	nop
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
	...

08002ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_MspInit+0x4c>)
 8003004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003006:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <HAL_MspInit+0x4c>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6613      	str	r3, [r2, #96]	@ 0x60
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_MspInit+0x4c>)
 8003010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_MspInit+0x4c>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <HAL_MspInit+0x4c>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003024:	6593      	str	r3, [r2, #88]	@ 0x58
 8003026:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <HAL_MspInit+0x4c>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003032:	f000 ffcd 	bl	8003fd0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003036:	2002      	movs	r0, #2
 8003038:	f000 ffb6 	bl	8003fa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800303c:	f005 fdaa 	bl	8008b94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000

0800304c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b09e      	sub	sp, #120	@ 0x78
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003064:	f107 0310 	add.w	r3, r7, #16
 8003068:	2254      	movs	r2, #84	@ 0x54
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f00e ff79 	bl	8011f64 <memset>
  if(hadc->Instance==ADC5)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1e      	ldr	r2, [pc, #120]	@ (80030f0 <HAL_ADC_MspInit+0xa4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d135      	bne.n	80030e8 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800307c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003080:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003082:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003086:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f006 faeb 	bl	8009668 <HAL_RCCEx_PeriphCLKConfig>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003098:	f7ff fae0 	bl	800265c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 800309c:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_ADC_MspInit+0xa8>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <HAL_ADC_MspInit+0xa8>)
 80030a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_ADC_MspInit+0xa8>)
 80030aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b4:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <HAL_ADC_MspInit+0xa8>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b8:	4a0e      	ldr	r2, [pc, #56]	@ (80030f4 <HAL_ADC_MspInit+0xa8>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_ADC_MspInit+0xa8>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC5 GPIO Configuration
    PA9     ------> ADC5_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d2:	2303      	movs	r3, #3
 80030d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80030de:	4619      	mov	r1, r3
 80030e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e4:	f003 f838 	bl	8006158 <HAL_GPIO_Init>

  /* USER CODE END ADC5_MspInit 1 */

  }

}
 80030e8:	bf00      	nop
 80030ea:	3778      	adds	r7, #120	@ 0x78
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	50000600 	.word	0x50000600
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_COMP_MspInit+0x9c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d119      	bne.n	800314e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	4b1f      	ldr	r3, [pc, #124]	@ (8003198 <HAL_COMP_MspInit+0xa0>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	4a1e      	ldr	r2, [pc, #120]	@ (8003198 <HAL_COMP_MspInit+0xa0>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003126:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <HAL_COMP_MspInit+0xa0>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003136:	2303      	movs	r3, #3
 8003138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003148:	f003 f806 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 800314c:	e01d      	b.n	800318a <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a12      	ldr	r2, [pc, #72]	@ (800319c <HAL_COMP_MspInit+0xa4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d118      	bne.n	800318a <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <HAL_COMP_MspInit+0xa0>)
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	4a0e      	ldr	r2, [pc, #56]	@ (8003198 <HAL_COMP_MspInit+0xa0>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <HAL_COMP_MspInit+0xa0>)
 8003166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003170:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003176:	2303      	movs	r3, #3
 8003178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4806      	ldr	r0, [pc, #24]	@ (80031a0 <HAL_COMP_MspInit+0xa8>)
 8003186:	f002 ffe7 	bl	8006158 <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3728      	adds	r7, #40	@ 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40010204 	.word	0x40010204
 8003198:	40021000 	.word	0x40021000
 800319c:	40010210 	.word	0x40010210
 80031a0:	48000400 	.word	0x48000400

080031a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	@ 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <HAL_DAC_MspInit+0xf0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d125      	bne.n	8003212 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80031c6:	4b34      	ldr	r3, [pc, #208]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031d2:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	4b2e      	ldr	r3, [pc, #184]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031f6:	2310      	movs	r3, #16
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031fa:	2303      	movs	r3, #3
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800320c:	f002 ffa4 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8003210:	e03b      	b.n	800328a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a21      	ldr	r2, [pc, #132]	@ (800329c <HAL_DAC_MspInit+0xf8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d125      	bne.n	8003268 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800321c:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 800321e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003220:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 8003222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 8003236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003240:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 8003242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800324c:	2340      	movs	r3, #64	@ 0x40
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003250:	2303      	movs	r3, #3
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003262:	f002 ff79 	bl	8006158 <HAL_GPIO_Init>
}
 8003266:	e010      	b.n	800328a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <HAL_DAC_MspInit+0xfc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10b      	bne.n	800328a <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 8003278:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800327c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_DAC_MspInit+0xf4>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
}
 800328a:	bf00      	nop
 800328c:	3730      	adds	r7, #48	@ 0x30
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	50000800 	.word	0x50000800
 8003298:	40021000 	.word	0x40021000
 800329c:	50000c00 	.word	0x50000c00
 80032a0:	50001400 	.word	0x50001400

080032a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b09e      	sub	sp, #120	@ 0x78
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	2254      	movs	r2, #84	@ 0x54
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00e fe4d 	bl	8011f64 <memset>
  if(hi2c->Instance==I2C3)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_I2C_MspInit+0xa8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d137      	bne.n	8003344 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80032d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f006 f9c0 	bl	8009668 <HAL_RCCEx_PeriphCLKConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80032ee:	f7ff f9b5 	bl	800265c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f2:	4b17      	ldr	r3, [pc, #92]	@ (8003350 <HAL_I2C_MspInit+0xac>)
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	4a16      	ldr	r2, [pc, #88]	@ (8003350 <HAL_I2C_MspInit+0xac>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032fe:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_I2C_MspInit+0xac>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800330a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800330e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003310:	2312      	movs	r3, #18
 8003312:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800331c:	2308      	movs	r3, #8
 800331e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003320:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003324:	4619      	mov	r1, r3
 8003326:	480b      	ldr	r0, [pc, #44]	@ (8003354 <HAL_I2C_MspInit+0xb0>)
 8003328:	f002 ff16 	bl	8006158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800332c:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <HAL_I2C_MspInit+0xac>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	4a07      	ldr	r2, [pc, #28]	@ (8003350 <HAL_I2C_MspInit+0xac>)
 8003332:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003336:	6593      	str	r3, [r2, #88]	@ 0x58
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_I2C_MspInit+0xac>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003344:	bf00      	nop
 8003346:	3778      	adds	r7, #120	@ 0x78
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40007800 	.word	0x40007800
 8003350:	40021000 	.word	0x40021000
 8003354:	48000800 	.word	0x48000800

08003358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b09e      	sub	sp, #120	@ 0x78
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	2254      	movs	r2, #84	@ 0x54
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f00e fdf3 	bl	8011f64 <memset>
  if(huart->Instance==LPUART1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <HAL_UART_MspInit+0xa8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d136      	bne.n	80033f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003388:	2320      	movs	r3, #32
 800338a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800338c:	2300      	movs	r3, #0
 800338e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003390:	f107 0310 	add.w	r3, r7, #16
 8003394:	4618      	mov	r0, r3
 8003396:	f006 f967 	bl	8009668 <HAL_RCCEx_PeriphCLKConfig>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033a0:	f7ff f95c 	bl	800265c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80033a4:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <HAL_UART_MspInit+0xac>)
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	4a16      	ldr	r2, [pc, #88]	@ (8003404 <HAL_UART_MspInit+0xac>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_UART_MspInit+0xac>)
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_UART_MspInit+0xac>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	4a10      	ldr	r2, [pc, #64]	@ (8003404 <HAL_UART_MspInit+0xac>)
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003404 <HAL_UART_MspInit+0xac>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80033e6:	2308      	movs	r3, #8
 80033e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80033ee:	4619      	mov	r1, r3
 80033f0:	4805      	ldr	r0, [pc, #20]	@ (8003408 <HAL_UART_MspInit+0xb0>)
 80033f2:	f002 feb1 	bl	8006158 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80033f6:	bf00      	nop
 80033f8:	3778      	adds	r7, #120	@ 0x78
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40008000 	.word	0x40008000
 8003404:	40021000 	.word	0x40021000
 8003408:	48000400 	.word	0x48000400

0800340c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	@ 0x38
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_OPAMP_MspInit+0x190>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d119      	bne.n	8003462 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	4b5c      	ldr	r3, [pc, #368]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343a:	4b59      	ldr	r3, [pc, #356]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800344a:	2303      	movs	r3, #3
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003456:	4619      	mov	r1, r3
 8003458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800345c:	f002 fe7c 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8003460:	e098      	b.n	8003594 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a4f      	ldr	r2, [pc, #316]	@ (80035a4 <HAL_OPAMP_MspInit+0x198>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d119      	bne.n	80034a0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 800346e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003470:	4a4b      	ldr	r2, [pc, #300]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003478:	4b49      	ldr	r3, [pc, #292]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 800347a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003488:	2303      	movs	r3, #3
 800348a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349a:	f002 fe5d 	bl	8006158 <HAL_GPIO_Init>
}
 800349e:	e079      	b.n	8003594 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP3)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	@ (80035a8 <HAL_OPAMP_MspInit+0x19c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d119      	bne.n	80034de <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	4a3c      	ldr	r2, [pc, #240]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034b6:	4b3a      	ldr	r3, [pc, #232]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c8:	2303      	movs	r3, #3
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4835      	ldr	r0, [pc, #212]	@ (80035ac <HAL_OPAMP_MspInit+0x1a0>)
 80034d8:	f002 fe3e 	bl	8006158 <HAL_GPIO_Init>
}
 80034dc:	e05a      	b.n	8003594 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP4)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a33      	ldr	r2, [pc, #204]	@ (80035b0 <HAL_OPAMP_MspInit+0x1a4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d119      	bne.n	800351c <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	4b2d      	ldr	r3, [pc, #180]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	4a2c      	ldr	r2, [pc, #176]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f4:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	2303      	movs	r3, #3
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003512:	4619      	mov	r1, r3
 8003514:	4825      	ldr	r0, [pc, #148]	@ (80035ac <HAL_OPAMP_MspInit+0x1a0>)
 8003516:	f002 fe1f 	bl	8006158 <HAL_GPIO_Init>
}
 800351a:	e03b      	b.n	8003594 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP5)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a24      	ldr	r2, [pc, #144]	@ (80035b4 <HAL_OPAMP_MspInit+0x1a8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d118      	bne.n	8003558 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003526:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352a:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003532:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800353e:	2308      	movs	r3, #8
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003542:	2303      	movs	r3, #3
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354e:	4619      	mov	r1, r3
 8003550:	4819      	ldr	r0, [pc, #100]	@ (80035b8 <HAL_OPAMP_MspInit+0x1ac>)
 8003552:	f002 fe01 	bl	8006158 <HAL_GPIO_Init>
}
 8003556:	e01d      	b.n	8003594 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP6)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_OPAMP_MspInit+0x1b0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d118      	bne.n	8003594 <HAL_OPAMP_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003562:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	4a0e      	ldr	r2, [pc, #56]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800356e:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <HAL_OPAMP_MspInit+0x194>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800357a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003580:	2303      	movs	r3, #3
 8003582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800358c:	4619      	mov	r1, r3
 800358e:	4807      	ldr	r0, [pc, #28]	@ (80035ac <HAL_OPAMP_MspInit+0x1a0>)
 8003590:	f002 fde2 	bl	8006158 <HAL_GPIO_Init>
}
 8003594:	bf00      	nop
 8003596:	3738      	adds	r7, #56	@ 0x38
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40010300 	.word	0x40010300
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010304 	.word	0x40010304
 80035a8:	40010308 	.word	0x40010308
 80035ac:	48000400 	.word	0x48000400
 80035b0:	4001030c 	.word	0x4001030c
 80035b4:	40010310 	.word	0x40010310
 80035b8:	48000800 	.word	0x48000800
 80035bc:	40010314 	.word	0x40010314

080035c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <HAL_SPI_MspInit+0xd0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d151      	bne.n	8003686 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_SPI_MspInit+0xd4>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003694 <HAL_SPI_MspInit+0xd4>)
 80035e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ee:	4b29      	ldr	r3, [pc, #164]	@ (8003694 <HAL_SPI_MspInit+0xd4>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <HAL_SPI_MspInit+0xd4>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <HAL_SPI_MspInit+0xd4>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003606:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <HAL_SPI_MspInit+0xd4>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003612:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003624:	2306      	movs	r3, #6
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	481a      	ldr	r0, [pc, #104]	@ (8003698 <HAL_SPI_MspInit+0xd8>)
 8003630:	f002 fd92 	bl	8006158 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003636:	4a1a      	ldr	r2, [pc, #104]	@ (80036a0 <HAL_SPI_MspInit+0xe0>)
 8003638:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800363a:	4b18      	ldr	r3, [pc, #96]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 800363c:	220f      	movs	r2, #15
 800363e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003640:	4b16      	ldr	r3, [pc, #88]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003642:	2210      	movs	r2, #16
 8003644:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003646:	4b15      	ldr	r3, [pc, #84]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800364c:	4b13      	ldr	r3, [pc, #76]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003652:	4b12      	ldr	r3, [pc, #72]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800365e:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003660:	2200      	movs	r2, #0
 8003662:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003664:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003666:	2200      	movs	r2, #0
 8003668:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800366a:	480c      	ldr	r0, [pc, #48]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 800366c:	f002 fb02 	bl	8005c74 <HAL_DMA_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003676:	f7fe fff1 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a07      	ldr	r2, [pc, #28]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003680:	4a06      	ldr	r2, [pc, #24]	@ (800369c <HAL_SPI_MspInit+0xdc>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003686:	bf00      	nop
 8003688:	3728      	adds	r7, #40	@ 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40003c00 	.word	0x40003c00
 8003694:	40021000 	.word	0x40021000
 8003698:	48000800 	.word	0x48000800
 800369c:	20000928 	.word	0x20000928
 80036a0:	40020030 	.word	0x40020030

080036a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b090      	sub	sp, #64	@ 0x40
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	@ (800386c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d128      	bne.n	8003718 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	4a69      	ldr	r2, [pc, #420]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80036d2:	4b67      	ldr	r3, [pc, #412]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036de:	4b64      	ldr	r3, [pc, #400]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	4a63      	ldr	r2, [pc, #396]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ea:	4b61      	ldr	r3, [pc, #388]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036f6:	2303      	movs	r3, #3
 80036f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036fe:	2301      	movs	r3, #1
 8003700:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003706:	2302      	movs	r3, #2
 8003708:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800370e:	4619      	mov	r1, r3
 8003710:	4858      	ldr	r0, [pc, #352]	@ (8003874 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003712:	f002 fd21 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003716:	e0a4      	b.n	8003862 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a56      	ldr	r2, [pc, #344]	@ (8003878 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d128      	bne.n	8003774 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003722:	4b53      	ldr	r3, [pc, #332]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	4a52      	ldr	r2, [pc, #328]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	6593      	str	r3, [r2, #88]	@ 0x58
 800372e:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373a:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	4a4c      	ldr	r2, [pc, #304]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003746:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003752:	23c0      	movs	r3, #192	@ 0xc0
 8003754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800375a:	2301      	movs	r3, #1
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375e:	2303      	movs	r3, #3
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003762:	2302      	movs	r3, #2
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376a:	4619      	mov	r1, r3
 800376c:	4841      	ldr	r0, [pc, #260]	@ (8003874 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800376e:	f002 fcf3 	bl	8006158 <HAL_GPIO_Init>
}
 8003772:	e076      	b.n	8003862 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a40      	ldr	r2, [pc, #256]	@ (800387c <HAL_TIM_Encoder_MspInit+0x1d8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d128      	bne.n	80037d0 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800377e:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a3b      	ldr	r2, [pc, #236]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	6593      	str	r3, [r2, #88]	@ 0x58
 800378a:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003796:	4b36      	ldr	r3, [pc, #216]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379a:	4a35      	ldr	r2, [pc, #212]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037a2:	4b33      	ldr	r3, [pc, #204]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ae:	23c0      	movs	r3, #192	@ 0xc0
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b6:	2301      	movs	r3, #1
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037be:	2302      	movs	r3, #2
 80037c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037c6:	4619      	mov	r1, r3
 80037c8:	482d      	ldr	r0, [pc, #180]	@ (8003880 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80037ca:	f002 fcc5 	bl	8006158 <HAL_GPIO_Init>
}
 80037ce:	e048      	b.n	8003862 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003884 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d143      	bne.n	8003862 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037de:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80037e6:	4b22      	ldr	r3, [pc, #136]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380e:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003822:	2304      	movs	r3, #4
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003826:	2302      	movs	r3, #2
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800382a:	2301      	movs	r3, #1
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382e:	2303      	movs	r3, #3
 8003830:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003832:	2306      	movs	r3, #6
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800383a:	4619      	mov	r1, r3
 800383c:	480d      	ldr	r0, [pc, #52]	@ (8003874 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800383e:	f002 fc8b 	bl	8006158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003842:	2304      	movs	r3, #4
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2302      	movs	r3, #2
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384a:	2301      	movs	r3, #1
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384e:	2303      	movs	r3, #3
 8003850:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003852:	2303      	movs	r3, #3
 8003854:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800385a:	4619      	mov	r1, r3
 800385c:	4808      	ldr	r0, [pc, #32]	@ (8003880 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800385e:	f002 fc7b 	bl	8006158 <HAL_GPIO_Init>
}
 8003862:	bf00      	nop
 8003864:	3740      	adds	r7, #64	@ 0x40
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40021000 	.word	0x40021000
 8003874:	48000800 	.word	0x48000800
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	48000400 	.word	0x48000400
 8003884:	40015000 	.word	0x40015000

08003888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3d      	ldr	r2, [pc, #244]	@ (800398c <HAL_TIM_Base_MspInit+0x104>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d137      	bne.n	800390a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800389a:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_TIM_Base_MspInit+0x108>)
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	4a3c      	ldr	r2, [pc, #240]	@ (8003990 <HAL_TIM_Base_MspInit+0x108>)
 80038a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_TIM_Base_MspInit+0x108>)
 80038a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 80038b2:	4b38      	ldr	r3, [pc, #224]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038b4:	4a38      	ldr	r2, [pc, #224]	@ (8003998 <HAL_TIM_Base_MspInit+0x110>)
 80038b6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038ba:	2233      	movs	r2, #51	@ 0x33
 80038bc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038be:	4b35      	ldr	r3, [pc, #212]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038c0:	2210      	movs	r2, #16
 80038c2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c4:	4b33      	ldr	r3, [pc, #204]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80038ca:	4b32      	ldr	r3, [pc, #200]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038cc:	2280      	movs	r2, #128	@ 0x80
 80038ce:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038d0:	4b30      	ldr	r3, [pc, #192]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038d6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038de:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 80038e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80038e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 80038ec:	4829      	ldr	r0, [pc, #164]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 80038ee:	f002 f9c1 	bl	8005c74 <HAL_DMA_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80038f8:	f7fe feb0 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a25      	ldr	r2, [pc, #148]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 8003900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003902:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_TIM_Base_MspInit+0x10c>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003908:	e03b      	b.n	8003982 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM15)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a23      	ldr	r2, [pc, #140]	@ (800399c <HAL_TIM_Base_MspInit+0x114>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d136      	bne.n	8003982 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003914:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <HAL_TIM_Base_MspInit+0x108>)
 8003916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003918:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <HAL_TIM_Base_MspInit+0x108>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003920:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_TIM_Base_MspInit+0x108>)
 8003922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 800392c:	4b1c      	ldr	r3, [pc, #112]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 800392e:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <HAL_TIM_Base_MspInit+0x11c>)
 8003930:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 8003932:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 8003934:	224e      	movs	r2, #78	@ 0x4e
 8003936:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003938:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 800393a:	2210      	movs	r2, #16
 800393c:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800393e:	4b18      	ldr	r3, [pc, #96]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 8003940:	2200      	movs	r2, #0
 8003942:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003944:	4b16      	ldr	r3, [pc, #88]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 8003946:	2280      	movs	r2, #128	@ 0x80
 8003948:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800394a:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 800394c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003950:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003952:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 8003954:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003958:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 800395a:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003960:	4b0f      	ldr	r3, [pc, #60]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8003966:	480e      	ldr	r0, [pc, #56]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 8003968:	f002 f984 	bl	8005c74 <HAL_DMA_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8003972:	f7fe fe73 	bl	800265c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24
 800397c:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <HAL_TIM_Base_MspInit+0x118>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40013400 	.word	0x40013400
 8003990:	40021000 	.word	0x40021000
 8003994:	20000b50 	.word	0x20000b50
 8003998:	40020008 	.word	0x40020008
 800399c:	40014000 	.word	0x40014000
 80039a0:	20000bb0 	.word	0x20000bb0
 80039a4:	4002001c 	.word	0x4002001c

080039a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a32      	ldr	r2, [pc, #200]	@ (8003a90 <HAL_TIM_MspPostInit+0xe8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d13b      	bne.n	8003a42 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ca:	4b32      	ldr	r3, [pc, #200]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	4a31      	ldr	r2, [pc, #196]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 80039d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ee:	4b29      	ldr	r3, [pc, #164]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80039fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a04:	2302      	movs	r3, #2
 8003a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a1a:	f002 fb9d 	bl	8006158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003a30:	230a      	movs	r3, #10
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4817      	ldr	r0, [pc, #92]	@ (8003a98 <HAL_TIM_MspPostInit+0xf0>)
 8003a3c:	f002 fb8c 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003a40:	e021      	b.n	8003a86 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <HAL_TIM_MspPostInit+0xf4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d11c      	bne.n	8003a86 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4c:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_TIM_MspPostInit+0xec>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a72:	2303      	movs	r3, #3
 8003a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003a76:	2301      	movs	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7a:	f107 0314 	add.w	r3, r7, #20
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4805      	ldr	r0, [pc, #20]	@ (8003a98 <HAL_TIM_MspPostInit+0xf0>)
 8003a82:	f002 fb69 	bl	8006158 <HAL_GPIO_Init>
}
 8003a86:	bf00      	nop
 8003a88:	3728      	adds	r7, #40	@ 0x28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40013400 	.word	0x40013400
 8003a94:	40021000 	.word	0x40021000
 8003a98:	48000400 	.word	0x48000400
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003aa4:	f005 fd7e 	bl	80095a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <NMI_Handler+0x8>

08003aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <HardFault_Handler+0x4>

08003ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <MemManage_Handler+0x4>

08003abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <BusFault_Handler+0x4>

08003ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <UsageFault_Handler+0x4>

08003acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003afa:	f000 fa15 	bl	8003f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f002 fcc0 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b14:	2002      	movs	r0, #2
 8003b16:	f002 fcb9 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b22:	2004      	movs	r0, #4
 8003b24:	f002 fcb2 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b30:	2008      	movs	r0, #8
 8003b32:	f002 fcab 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003b3e:	2010      	movs	r0, #16
 8003b40:	f002 fca4 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003b4c:	4802      	ldr	r0, [pc, #8]	@ (8003b58 <DMA1_Channel1_IRQHandler+0x10>)
 8003b4e:	f002 f9b4 	bl	8005eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000b50 	.word	0x20000b50

08003b5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 8003b60:	4802      	ldr	r0, [pc, #8]	@ (8003b6c <DMA1_Channel2_IRQHandler+0x10>)
 8003b62:	f002 f9aa 	bl	8005eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000bb0 	.word	0x20000bb0

08003b70 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003b74:	4802      	ldr	r0, [pc, #8]	@ (8003b80 <DMA1_Channel3_IRQHandler+0x10>)
 8003b76:	f002 f9a0 	bl	8005eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000928 	.word	0x20000928

08003b84 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b88:	4802      	ldr	r0, [pc, #8]	@ (8003b94 <USB_LP_IRQHandler+0x10>)
 8003b8a:	f003 fb4e 	bl	800722a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20002784 	.word	0x20002784

08003b98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003ba0:	f002 fc74 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8003bac:	4808      	ldr	r0, [pc, #32]	@ (8003bd0 <EXTI15_10_IRQHandler+0x28>)
 8003bae:	f7fd fb75 	bl	800129c <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <EXTI15_10_IRQHandler+0x28>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	4a06      	ldr	r2, [pc, #24]	@ (8003bd0 <EXTI15_10_IRQHandler+0x28>)
 8003bb8:	8851      	ldrh	r1, [r2, #2]
 8003bba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe ff1e 	bl	8002a00 <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003bc4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003bc8:	f002 fc60 	bl	800648c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	2000057c 	.word	0x2000057c

08003bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return 1;
 8003bd8:	2301      	movs	r3, #1
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_kill>:

int _kill(int pid, int sig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bee:	f00e fa0b 	bl	8012008 <__errno>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2216      	movs	r2, #22
 8003bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_exit>:

void _exit (int status)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ffe7 	bl	8003be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <_exit+0x12>

08003c1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e00a      	b.n	8003c42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c2c:	f3af 8000 	nop.w
 8003c30:	4601      	mov	r1, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	60ba      	str	r2, [r7, #8]
 8003c38:	b2ca      	uxtb	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	dbf0      	blt.n	8003c2c <_read+0x12>
  }

  return len;
 8003c4a:	687b      	ldr	r3, [r7, #4]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e009      	b.n	8003c7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	60ba      	str	r2, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fb82 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	dbf1      	blt.n	8003c66 <_write+0x12>
  }
  return len;
 8003c82:	687b      	ldr	r3, [r7, #4]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_close>:

int _close(int file)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cb4:	605a      	str	r2, [r3, #4]
  return 0;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_isatty>:

int _isatty(int file)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ccc:	2301      	movs	r3, #1
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cfc:	4a14      	ldr	r2, [pc, #80]	@ (8003d50 <_sbrk+0x5c>)
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <_sbrk+0x60>)
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d08:	4b13      	ldr	r3, [pc, #76]	@ (8003d58 <_sbrk+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d10:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <_sbrk+0x64>)
 8003d12:	4a12      	ldr	r2, [pc, #72]	@ (8003d5c <_sbrk+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <_sbrk+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d207      	bcs.n	8003d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d24:	f00e f970 	bl	8012008 <__errno>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	e009      	b.n	8003d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d34:	4b08      	ldr	r3, [pc, #32]	@ (8003d58 <_sbrk+0x64>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <_sbrk+0x64>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	4a05      	ldr	r2, [pc, #20]	@ (8003d58 <_sbrk+0x64>)
 8003d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20020000 	.word	0x20020000
 8003d54:	00000400 	.word	0x00000400
 8003d58:	20001898 	.word	0x20001898
 8003d5c:	20002dd0 	.word	0x20002dd0

08003d60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <SystemInit+0x20>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	4a05      	ldr	r2, [pc, #20]	@ (8003d80 <SystemInit+0x20>)
 8003d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e018      	b.n	8003dc8 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <WS2812_Write_Data+0x26>
 8003da6:	215a      	movs	r1, #90	@ 0x5a
 8003da8:	e000      	b.n	8003dac <WS2812_Write_Data+0x28>
 8003daa:	212d      	movs	r1, #45	@ 0x2d
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	461a      	mov	r2, r3
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a07      	ldr	r2, [pc, #28]	@ (8003ddc <WS2812_Write_Data+0x58>)
 8003dbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b17      	cmp	r3, #23
 8003dcc:	d9e3      	bls.n	8003d96 <WS2812_Write_Data+0x12>
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	2000189c 	.word	0x2000189c

08003de0 <WS2812_Set_All>:
 * @brief  所有灯数据更新
 * @param  Color:颜色24bit of RGB888
 * @return None
 */
void WS2812_Set_All(uint32_t Color)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	/*循环写入所有灯珠数组*/
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e007      	b.n	8003dfe <WS2812_Set_All+0x1e>
		WS2812_Write_Data(Color,index);
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffc6 	bl	8003d84 <WS2812_Write_Data>
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d9f4      	bls.n	8003dee <WS2812_Set_All+0xe>
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 8003e14:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003e18:	4a03      	ldr	r2, [pc, #12]	@ (8003e28 <WS2812_Update+0x18>)
 8003e1a:	2108      	movs	r1, #8
 8003e1c:	4803      	ldr	r0, [pc, #12]	@ (8003e2c <WS2812_Update+0x1c>)
 8003e1e:	f006 fd4f 	bl	800a8c0 <HAL_TIM_PWM_Start_DMA>
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000189c 	.word	0x2000189c
 8003e2c:	20000a6c 	.word	0x20000a6c

08003e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e30:	480d      	ldr	r0, [pc, #52]	@ (8003e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e34:	f7ff ff94 	bl	8003d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e38:	480c      	ldr	r0, [pc, #48]	@ (8003e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e3a:	490d      	ldr	r1, [pc, #52]	@ (8003e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <LoopForever+0xe>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e40:	e002      	b.n	8003e48 <LoopCopyDataInit>

08003e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e46:	3304      	adds	r3, #4

08003e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e4c:	d3f9      	bcc.n	8003e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e50:	4c0a      	ldr	r4, [pc, #40]	@ (8003e7c <LoopForever+0x16>)
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e54:	e001      	b.n	8003e5a <LoopFillZerobss>

08003e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e58:	3204      	adds	r2, #4

08003e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e5c:	d3fb      	bcc.n	8003e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f00e f8d9 	bl	8012014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e62:	f7fd fb37 	bl	80014d4 <main>

08003e66 <LoopForever>:

LoopForever:
    b LoopForever
 8003e66:	e7fe      	b.n	8003e66 <LoopForever>
  ldr   r0, =_estack
 8003e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e70:	20000558 	.word	0x20000558
  ldr r2, =_sidata
 8003e74:	08023338 	.word	0x08023338
  ldr r2, =_sbss
 8003e78:	20000558 	.word	0x20000558
  ldr r4, =_ebss
 8003e7c:	20002dcc 	.word	0x20002dcc

08003e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC1_2_IRQHandler>

08003e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f001 fc3b 	bl	8005708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e92:	200f      	movs	r0, #15
 8003e94:	f000 f80e 	bl	8003eb4 <HAL_InitTick>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	71fb      	strb	r3, [r7, #7]
 8003ea2:	e001      	b.n	8003ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ea4:	f7ff f8aa 	bl	8002ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]

}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <HAL_InitTick+0x68>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d022      	beq.n	8003f0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ec8:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <HAL_InitTick+0x6c>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <HAL_InitTick+0x68>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fc46 	bl	800576e <HAL_SYSTICK_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d809      	bhi.n	8003f02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef6:	f001 fc12 	bl	800571e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003efa:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <HAL_InitTick+0x70>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e007      	b.n	8003f12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e004      	b.n	8003f12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e001      	b.n	8003f12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000214 	.word	0x20000214
 8003f20:	2000020c 	.word	0x2000020c
 8003f24:	20000210 	.word	0x20000210

08003f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_IncTick+0x1c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <HAL_IncTick+0x20>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	4a03      	ldr	r2, [pc, #12]	@ (8003f44 <HAL_IncTick+0x1c>)
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20001aac 	.word	0x20001aac
 8003f48:	20000214 	.word	0x20000214

08003f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_GetTick+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20001aac 	.word	0x20001aac

08003f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f6c:	f7ff ffee 	bl	8003f4c <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d004      	beq.n	8003f88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_Delay+0x40>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f88:	bf00      	nop
 8003f8a:	f7ff ffdf 	bl	8003f4c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d8f7      	bhi.n	8003f8a <HAL_Delay+0x26>
  {
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000214 	.word	0x20000214

08003fa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 0202 	bic.w	r2, r3, #2
 8003fb8:	4904      	ldr	r1, [pc, #16]	@ (8003fcc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40010030 	.word	0x40010030

08003fd0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010030 	.word	0x40010030

08003ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3360      	adds	r3, #96	@ 0x60
 800406a:	461a      	mov	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b08      	ldr	r3, [pc, #32]	@ (800409c <LL_ADC_SetOffset+0x44>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	03fff000 	.word	0x03fff000

080040a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3360      	adds	r3, #96	@ 0x60
 80040ae:	461a      	mov	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3360      	adds	r3, #96	@ 0x60
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3360      	adds	r3, #96	@ 0x60
 8004112:	461a      	mov	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	431a      	orrs	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3360      	adds	r3, #96	@ 0x60
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	431a      	orrs	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	615a      	str	r2, [r3, #20]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3330      	adds	r3, #48	@ 0x30
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	4413      	add	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	211f      	movs	r1, #31
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0e9b      	lsrs	r3, r3, #26
 80041cc:	f003 011f 	and.w	r1, r3, #31
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	431a      	orrs	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3314      	adds	r3, #20
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0e5b      	lsrs	r3, r3, #25
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	4413      	add	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	0d1b      	lsrs	r3, r3, #20
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2107      	movs	r1, #7
 800421a:	fa01 f303 	lsl.w	r3, r1, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	401a      	ands	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	0d1b      	lsrs	r3, r3, #20
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0318 	and.w	r3, r3, #24
 8004266:	4908      	ldr	r1, [pc, #32]	@ (8004288 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004268:	40d9      	lsrs	r1, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	400b      	ands	r3, r1
 800426e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	0007ffff 	.word	0x0007ffff

0800428c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800429c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6093      	str	r3, [r2, #8]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c4:	d101      	bne.n	80042ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80042e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004314:	d101      	bne.n	800431a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <LL_ADC_IsEnabled+0x18>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <LL_ADC_IsEnabled+0x1a>
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d101      	bne.n	8004366 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d101      	bne.n	800438c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b089      	sub	sp, #36	@ 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1a9      	b.n	800470a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fe fe41 	bl	800304c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff67 	bl	80042b0 <LL_ADC_IsDeepPowerDownEnabled>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff4d 	bl	800428c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ff82 	bl	8004300 <LL_ADC_IsInternalRegulatorEnabled>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d115      	bne.n	800442e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff66 	bl	80042d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800440c:	4b9c      	ldr	r3, [pc, #624]	@ (8004680 <HAL_ADC_Init+0x2e4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	4a9c      	ldr	r2, [pc, #624]	@ (8004684 <HAL_ADC_Init+0x2e8>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	3301      	adds	r3, #1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004420:	e002      	b.n	8004428 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b01      	subs	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f9      	bne.n	8004422 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff64 	bl	8004300 <LL_ADC_IsInternalRegulatorEnabled>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff75 	bl	800434e <LL_ADC_REG_IsConversionOngoing>
 8004464:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 8142 	bne.w	80046f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 813e 	bne.w	80046f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004484:	f043 0202 	orr.w	r2, r3, #2
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff49 	bl	8004328 <LL_ADC_IsEnabled>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d141      	bne.n	8004520 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a4:	d004      	beq.n	80044b0 <HAL_ADC_Init+0x114>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a77      	ldr	r2, [pc, #476]	@ (8004688 <HAL_ADC_Init+0x2ec>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10f      	bne.n	80044d0 <HAL_ADC_Init+0x134>
 80044b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044b4:	f7ff ff38 	bl	8004328 <LL_ADC_IsEnabled>
 80044b8:	4604      	mov	r4, r0
 80044ba:	4873      	ldr	r0, [pc, #460]	@ (8004688 <HAL_ADC_Init+0x2ec>)
 80044bc:	f7ff ff34 	bl	8004328 <LL_ADC_IsEnabled>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4323      	orrs	r3, r4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e012      	b.n	80044f6 <HAL_ADC_Init+0x15a>
 80044d0:	486e      	ldr	r0, [pc, #440]	@ (800468c <HAL_ADC_Init+0x2f0>)
 80044d2:	f7ff ff29 	bl	8004328 <LL_ADC_IsEnabled>
 80044d6:	4604      	mov	r4, r0
 80044d8:	486d      	ldr	r0, [pc, #436]	@ (8004690 <HAL_ADC_Init+0x2f4>)
 80044da:	f7ff ff25 	bl	8004328 <LL_ADC_IsEnabled>
 80044de:	4603      	mov	r3, r0
 80044e0:	431c      	orrs	r4, r3
 80044e2:	486c      	ldr	r0, [pc, #432]	@ (8004694 <HAL_ADC_Init+0x2f8>)
 80044e4:	f7ff ff20 	bl	8004328 <LL_ADC_IsEnabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4323      	orrs	r3, r4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d012      	beq.n	8004520 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004502:	d004      	beq.n	800450e <HAL_ADC_Init+0x172>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a5f      	ldr	r2, [pc, #380]	@ (8004688 <HAL_ADC_Init+0x2ec>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_ADC_Init+0x176>
 800450e:	4a62      	ldr	r2, [pc, #392]	@ (8004698 <HAL_ADC_Init+0x2fc>)
 8004510:	e000      	b.n	8004514 <HAL_ADC_Init+0x178>
 8004512:	4a62      	ldr	r2, [pc, #392]	@ (800469c <HAL_ADC_Init+0x300>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f7ff fd68 	bl	8003ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7f5b      	ldrb	r3, [r3, #29]
 8004524:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800452a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004530:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004536:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800453e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800454a:	2b01      	cmp	r3, #1
 800454c:	d106      	bne.n	800455c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	045b      	lsls	r3, r3, #17
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	4b48      	ldr	r3, [pc, #288]	@ (80046a0 <HAL_ADC_Init+0x304>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	430b      	orrs	r3, r1
 800458a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fee4 	bl	8004374 <LL_ADC_INJ_IsConversionOngoing>
 80045ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d17f      	bne.n	80046b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d17c      	bne.n	80046b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045d6:	f023 0302 	bic.w	r3, r3, #2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	69b9      	ldr	r1, [r7, #24]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80045fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004604:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6911      	ldr	r1, [r2, #16]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800461a:	e013      	b.n	8004644 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800462a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800463c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004640:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800464a:	2b01      	cmp	r3, #1
 800464c:	d12a      	bne.n	80046a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004670:	430a      	orrs	r2, r1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	611a      	str	r2, [r3, #16]
 800467e:	e019      	b.n	80046b4 <HAL_ADC_Init+0x318>
 8004680:	2000020c 	.word	0x2000020c
 8004684:	053e2d63 	.word	0x053e2d63
 8004688:	50000100 	.word	0x50000100
 800468c:	50000400 	.word	0x50000400
 8004690:	50000500 	.word	0x50000500
 8004694:	50000600 	.word	0x50000600
 8004698:	50000300 	.word	0x50000300
 800469c:	50000700 	.word	0x50000700
 80046a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0201 	bic.w	r2, r2, #1
 80046b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10c      	bne.n	80046d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f023 010f 	bic.w	r1, r3, #15
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046d4:	e007      	b.n	80046e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020f 	bic.w	r2, r2, #15
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046f6:	e007      	b.n	8004708 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004708:	7ffb      	ldrb	r3, [r7, #31]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	@ 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop

08004714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b0b6      	sub	sp, #216	@ 0xd8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800472e:	2b01      	cmp	r3, #1
 8004730:	d102      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x24>
 8004732:	2302      	movs	r3, #2
 8004734:	f000 bc13 	b.w	8004f5e <HAL_ADC_ConfigChannel+0x84a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fe02 	bl	800434e <LL_ADC_REG_IsConversionOngoing>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 83f3 	bne.w	8004f38 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	f7ff fd18 	bl	8004194 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fdf0 	bl	800434e <LL_ADC_REG_IsConversionOngoing>
 800476e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fdfc 	bl	8004374 <LL_ADC_INJ_IsConversionOngoing>
 800477c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004780:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 81d9 	bne.w	8004b3c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800478a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 81d4 	bne.w	8004b3c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800479c:	d10f      	bne.n	80047be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7ff fd1f 	bl	80041ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fcd9 	bl	800416e <LL_ADC_SetSamplingTimeCommonConfig>
 80047bc:	e00e      	b.n	80047dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f7ff fd0e 	bl	80041ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fcc9 	bl	800416e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	08db      	lsrs	r3, r3, #3
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d022      	beq.n	8004844 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6919      	ldr	r1, [r3, #16]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800480e:	f7ff fc23 	bl	8004058 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6919      	ldr	r1, [r3, #16]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	461a      	mov	r2, r3
 8004820:	f7ff fc6f 	bl	8004102 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004830:	2b01      	cmp	r3, #1
 8004832:	d102      	bne.n	800483a <HAL_ADC_ConfigChannel+0x126>
 8004834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004838:	e000      	b.n	800483c <HAL_ADC_ConfigChannel+0x128>
 800483a:	2300      	movs	r3, #0
 800483c:	461a      	mov	r2, r3
 800483e:	f7ff fc7b 	bl	8004138 <LL_ADC_SetOffsetSaturation>
 8004842:	e17b      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fc28 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004850:	4603      	mov	r3, r0
 8004852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x15c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fc1d 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004866:	4603      	mov	r3, r0
 8004868:	0e9b      	lsrs	r3, r3, #26
 800486a:	f003 021f 	and.w	r2, r3, #31
 800486e:	e01e      	b.n	80048ae <HAL_ADC_ConfigChannel+0x19a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fc12 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 800487c:	4603      	mov	r3, r0
 800487e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800488e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800489e:	2320      	movs	r3, #32
 80048a0:	e004      	b.n	80048ac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80048a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d105      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x1b2>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	e018      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x1e4>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80048da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80048e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80048ea:	2320      	movs	r3, #32
 80048ec:	e004      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80048ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d106      	bne.n	800490a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fbe1 	bl	80040cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2101      	movs	r1, #1
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fbc5 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004916:	4603      	mov	r3, r0
 8004918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x222>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fbba 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 800492c:	4603      	mov	r3, r0
 800492e:	0e9b      	lsrs	r3, r3, #26
 8004930:	f003 021f 	and.w	r2, r3, #31
 8004934:	e01e      	b.n	8004974 <HAL_ADC_ConfigChannel+0x260>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2101      	movs	r1, #1
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fbaf 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800495c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004964:	2320      	movs	r3, #32
 8004966:	e004      	b.n	8004972 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800496c:	fab3 f383 	clz	r3, r3
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_ADC_ConfigChannel+0x278>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0e9b      	lsrs	r3, r3, #26
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	e018      	b.n	80049be <HAL_ADC_ConfigChannel+0x2aa>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e004      	b.n	80049be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049b8:	fab3 f383 	clz	r3, r3
 80049bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049be:	429a      	cmp	r2, r3
 80049c0:	d106      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	2101      	movs	r1, #1
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fb7e 	bl	80040cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2102      	movs	r1, #2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fb62 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 80049dc:	4603      	mov	r3, r0
 80049de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x2e8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fb57 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 80049f2:	4603      	mov	r3, r0
 80049f4:	0e9b      	lsrs	r3, r3, #26
 80049f6:	f003 021f 	and.w	r2, r3, #31
 80049fa:	e01e      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x326>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fb4c 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	e004      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x33e>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	0e9b      	lsrs	r3, r3, #26
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	e016      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x36c>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004a72:	2320      	movs	r3, #32
 8004a74:	e004      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d106      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fb1d 	bl	80040cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2103      	movs	r1, #3
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fb01 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x3aa>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2103      	movs	r1, #3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff faf6 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	0e9b      	lsrs	r3, r3, #26
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	e017      	b.n	8004aee <HAL_ADC_ConfigChannel+0x3da>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2103      	movs	r1, #3
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff faeb 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004aca:	4603      	mov	r3, r0
 8004acc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad0:	fa93 f3a3 	rbit	r3, r3
 8004ad4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004ae0:	2320      	movs	r3, #32
 8004ae2:	e003      	b.n	8004aec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x3f2>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	0e9b      	lsrs	r3, r3, #26
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	e011      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x416>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b0e:	fa93 f3a3 	rbit	r3, r3
 8004b12:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	e003      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d106      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2103      	movs	r1, #3
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fac8 	bl	80040cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fbf1 	bl	8004328 <LL_ADC_IsEnabled>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f040 813d 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f7ff fb72 	bl	8004244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4aa2      	ldr	r2, [pc, #648]	@ (8004df0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f040 812e 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x480>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	3301      	adds	r3, #1
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2b09      	cmp	r3, #9
 8004b8a:	bf94      	ite	ls
 8004b8c:	2301      	movls	r3, #1
 8004b8e:	2300      	movhi	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e019      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x4b4>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ba4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bac:	2320      	movs	r3, #32
 8004bae:	e003      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	bf94      	ite	ls
 8004bc2:	2301      	movls	r3, #1
 8004bc4:	2300      	movhi	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d079      	beq.n	8004cc0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d107      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x4d4>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	3301      	adds	r3, #1
 8004be0:	069b      	lsls	r3, r3, #26
 8004be2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004be6:	e015      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x500>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c00:	2320      	movs	r3, #32
 8004c02:	e003      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	069b      	lsls	r3, r3, #26
 8004c10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x520>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	0e9b      	lsrs	r3, r3, #26
 8004c26:	3301      	adds	r3, #1
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	e017      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x550>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	e003      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	ea42 0103 	orr.w	r1, r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x576>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0e9b      	lsrs	r3, r3, #26
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f003 021f 	and.w	r2, r3, #31
 8004c80:	4613      	mov	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	051b      	lsls	r3, r3, #20
 8004c88:	e018      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x5a8>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	e003      	b.n	8004cae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca8:	fab3 f383 	clz	r3, r3
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	f003 021f 	and.w	r2, r3, #31
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	4413      	add	r3, r2
 8004cba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	e07e      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d107      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x5c8>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	069b      	lsls	r3, r3, #26
 8004cd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cda:	e015      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x5f4>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	e003      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	069b      	lsls	r3, r3, #26
 8004d04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x614>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0e9b      	lsrs	r3, r3, #26
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	e017      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x644>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	61fb      	str	r3, [r7, #28]
  return result;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	e003      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2101      	movs	r1, #1
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	ea42 0103 	orr.w	r1, r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x670>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	0e9b      	lsrs	r3, r3, #26
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	3b1e      	subs	r3, #30
 8004d7c:	051b      	lsls	r3, r3, #20
 8004d7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d82:	e01b      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x6a8>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	613b      	str	r3, [r7, #16]
  return result;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	e003      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	3301      	adds	r3, #1
 8004daa:	f003 021f 	and.w	r2, r3, #31
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	3b1e      	subs	r3, #30
 8004db6:	051b      	lsls	r3, r3, #20
 8004db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f7ff fa12 	bl	80041ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80be 	beq.w	8004f52 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dde:	d004      	beq.n	8004dea <HAL_ADC_ConfigChannel+0x6d6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10a      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x6ec>
 8004dea:	4b04      	ldr	r3, [pc, #16]	@ (8004dfc <HAL_ADC_ConfigChannel+0x6e8>)
 8004dec:	e009      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x6ee>
 8004dee:	bf00      	nop
 8004df0:	407f0000 	.word	0x407f0000
 8004df4:	80080000 	.word	0x80080000
 8004df8:	50000100 	.word	0x50000100
 8004dfc:	50000300 	.word	0x50000300
 8004e00:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <HAL_ADC_ConfigChannel+0x854>)
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff f91a 	bl	800403c <LL_ADC_GetCommonPathInternalCh>
 8004e08:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a56      	ldr	r2, [pc, #344]	@ (8004f6c <HAL_ADC_ConfigChannel+0x858>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <HAL_ADC_ConfigChannel+0x70c>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a55      	ldr	r2, [pc, #340]	@ (8004f70 <HAL_ADC_ConfigChannel+0x85c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d13a      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d134      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e34:	d005      	beq.n	8004e42 <HAL_ADC_ConfigChannel+0x72e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f74 <HAL_ADC_ConfigChannel+0x860>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	f040 8085 	bne.w	8004f4c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e4a:	d004      	beq.n	8004e56 <HAL_ADC_ConfigChannel+0x742>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a49      	ldr	r2, [pc, #292]	@ (8004f78 <HAL_ADC_ConfigChannel+0x864>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x746>
 8004e56:	4a49      	ldr	r2, [pc, #292]	@ (8004f7c <HAL_ADC_ConfigChannel+0x868>)
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x748>
 8004e5a:	4a43      	ldr	r2, [pc, #268]	@ (8004f68 <HAL_ADC_ConfigChannel+0x854>)
 8004e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7ff f8d5 	bl	8004016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e6c:	4b44      	ldr	r3, [pc, #272]	@ (8004f80 <HAL_ADC_ConfigChannel+0x86c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	4a44      	ldr	r2, [pc, #272]	@ (8004f84 <HAL_ADC_ConfigChannel+0x870>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	099b      	lsrs	r3, r3, #6
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e86:	e002      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f9      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e94:	e05a      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f88 <HAL_ADC_ConfigChannel+0x874>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d125      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11f      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a31      	ldr	r2, [pc, #196]	@ (8004f78 <HAL_ADC_ConfigChannel+0x864>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d104      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x7ac>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a34      	ldr	r2, [pc, #208]	@ (8004f8c <HAL_ADC_ConfigChannel+0x878>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d047      	beq.n	8004f50 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ec8:	d004      	beq.n	8004ed4 <HAL_ADC_ConfigChannel+0x7c0>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2a      	ldr	r2, [pc, #168]	@ (8004f78 <HAL_ADC_ConfigChannel+0x864>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x7c4>
 8004ed4:	4a29      	ldr	r2, [pc, #164]	@ (8004f7c <HAL_ADC_ConfigChannel+0x868>)
 8004ed6:	e000      	b.n	8004eda <HAL_ADC_ConfigChannel+0x7c6>
 8004ed8:	4a23      	ldr	r2, [pc, #140]	@ (8004f68 <HAL_ADC_ConfigChannel+0x854>)
 8004eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7ff f896 	bl	8004016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eea:	e031      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a27      	ldr	r2, [pc, #156]	@ (8004f90 <HAL_ADC_ConfigChannel+0x87c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d12d      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d127      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <HAL_ADC_ConfigChannel+0x864>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f14:	d004      	beq.n	8004f20 <HAL_ADC_ConfigChannel+0x80c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <HAL_ADC_ConfigChannel+0x864>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x810>
 8004f20:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <HAL_ADC_ConfigChannel+0x868>)
 8004f22:	e000      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x812>
 8004f24:	4a10      	ldr	r2, [pc, #64]	@ (8004f68 <HAL_ADC_ConfigChannel+0x854>)
 8004f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7ff f870 	bl	8004016 <LL_ADC_SetCommonPathInternalCh>
 8004f36:	e00c      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f4a:	e002      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	37d8      	adds	r7, #216	@ 0xd8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	50000700 	.word	0x50000700
 8004f6c:	c3210000 	.word	0xc3210000
 8004f70:	90c00010 	.word	0x90c00010
 8004f74:	50000600 	.word	0x50000600
 8004f78:	50000100 	.word	0x50000100
 8004f7c:	50000300 	.word	0x50000300
 8004f80:	2000020c 	.word	0x2000020c
 8004f84:	053e2d63 	.word	0x053e2d63
 8004f88:	c7520000 	.word	0xc7520000
 8004f8c:	50000500 	.word	0x50000500
 8004f90:	cb840000 	.word	0xcb840000

08004f94 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4904      	ldr	r1, [pc, #16]	@ (8004fb4 <LL_EXTI_EnableIT_0_31+0x20>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40010400 	.word	0x40010400

08004fb8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <LL_EXTI_EnableIT_32_63+0x20>)
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	4904      	ldr	r1, [pc, #16]	@ (8004fd8 <LL_EXTI_EnableIT_32_63+0x20>)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	620b      	str	r3, [r1, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40010400 	.word	0x40010400

08004fdc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <LL_EXTI_DisableIT_0_31+0x24>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	4904      	ldr	r1, [pc, #16]	@ (8005000 <LL_EXTI_DisableIT_0_31+0x24>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010400 	.word	0x40010400

08005004 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <LL_EXTI_DisableIT_32_63+0x24>)
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	43db      	mvns	r3, r3
 8005014:	4904      	ldr	r1, [pc, #16]	@ (8005028 <LL_EXTI_DisableIT_32_63+0x24>)
 8005016:	4013      	ands	r3, r2
 8005018:	620b      	str	r3, [r1, #32]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010400 	.word	0x40010400

0800502c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <LL_EXTI_EnableEvent_0_31+0x20>)
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <LL_EXTI_EnableEvent_0_31+0x20>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]

}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010400 	.word	0x40010400

08005050 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <LL_EXTI_EnableEvent_32_63+0x20>)
 800505a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800505c:	4904      	ldr	r1, [pc, #16]	@ (8005070 <LL_EXTI_EnableEvent_32_63+0x20>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4313      	orrs	r3, r2
 8005062:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40010400 	.word	0x40010400

08005074 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800507c:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <LL_EXTI_DisableEvent_0_31+0x24>)
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	43db      	mvns	r3, r3
 8005084:	4904      	ldr	r1, [pc, #16]	@ (8005098 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005086:	4013      	ands	r3, r2
 8005088:	604b      	str	r3, [r1, #4]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010400 	.word	0x40010400

0800509c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80050a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	4904      	ldr	r1, [pc, #16]	@ (80050c0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010400 	.word	0x40010400

080050c4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4904      	ldr	r1, [pc, #16]	@ (80050e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40010400 	.word	0x40010400

080050e8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80050f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050f4:	4904      	ldr	r1, [pc, #16]	@ (8005108 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40010400 	.word	0x40010400

0800510c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005114:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	43db      	mvns	r3, r3
 800511c:	4904      	ldr	r1, [pc, #16]	@ (8005130 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800511e:	4013      	ands	r3, r2
 8005120:	608b      	str	r3, [r1, #8]

}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010400 	.word	0x40010400

08005134 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800513e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	43db      	mvns	r3, r3
 8005144:	4904      	ldr	r1, [pc, #16]	@ (8005158 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005146:	4013      	ands	r3, r2
 8005148:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010400 	.word	0x40010400

0800515c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	4904      	ldr	r1, [pc, #16]	@ (800517c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4313      	orrs	r3, r2
 800516e:	60cb      	str	r3, [r1, #12]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40010400 	.word	0x40010400

08005180 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800518a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518c:	4904      	ldr	r1, [pc, #16]	@ (80051a0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4313      	orrs	r3, r2
 8005192:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40010400 	.word	0x40010400

080051a4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80051ac:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	43db      	mvns	r3, r3
 80051b4:	4904      	ldr	r1, [pc, #16]	@ (80051c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	60cb      	str	r3, [r1, #12]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010400 	.word	0x40010400

080051cc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80051d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	43db      	mvns	r3, r3
 80051dc:	4904      	ldr	r1, [pc, #16]	@ (80051f0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80051de:	4013      	ands	r3, r2
 80051e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010400 	.word	0x40010400

080051f4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80051fc:	4a04      	ldr	r2, [pc, #16]	@ (8005210 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6153      	str	r3, [r2, #20]
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010400 	.word	0x40010400

08005214 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800521c:	4a04      	ldr	r2, [pc, #16]	@ (8005230 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010400 	.word	0x40010400

08005234 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e181      	b.n	8005554 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525e:	d102      	bne.n	8005266 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e176      	b.n	8005554 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7f5b      	ldrb	r3, [r3, #29]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fd ff3b 	bl	80030f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800528c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b90      	ldr	r3, [pc, #576]	@ (80054f4 <HAL_COMP_Init+0x2c0>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	430b      	orrs	r3, r1
 80052be:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <HAL_COMP_Init+0xc8>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052d4:	4b88      	ldr	r3, [pc, #544]	@ (80054f8 <HAL_COMP_Init+0x2c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	099b      	lsrs	r3, r3, #6
 80052da:	4a88      	ldr	r2, [pc, #544]	@ (80054fc <HAL_COMP_Init+0x2c8>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	099b      	lsrs	r3, r3, #6
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80052ee:	e002      	b.n	80052f6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f9      	bne.n	80052f0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7f      	ldr	r2, [pc, #508]	@ (8005500 <HAL_COMP_Init+0x2cc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d028      	beq.n	8005358 <HAL_COMP_Init+0x124>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7e      	ldr	r2, [pc, #504]	@ (8005504 <HAL_COMP_Init+0x2d0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d020      	beq.n	8005352 <HAL_COMP_Init+0x11e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7c      	ldr	r2, [pc, #496]	@ (8005508 <HAL_COMP_Init+0x2d4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <HAL_COMP_Init+0x118>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7b      	ldr	r2, [pc, #492]	@ (800550c <HAL_COMP_Init+0x2d8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d010      	beq.n	8005346 <HAL_COMP_Init+0x112>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a79      	ldr	r2, [pc, #484]	@ (8005510 <HAL_COMP_Init+0x2dc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d008      	beq.n	8005340 <HAL_COMP_Init+0x10c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a78      	ldr	r2, [pc, #480]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d101      	bne.n	800533c <HAL_COMP_Init+0x108>
 8005338:	2301      	movs	r3, #1
 800533a:	e00f      	b.n	800535c <HAL_COMP_Init+0x128>
 800533c:	2302      	movs	r3, #2
 800533e:	e00d      	b.n	800535c <HAL_COMP_Init+0x128>
 8005340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005344:	e00a      	b.n	800535c <HAL_COMP_Init+0x128>
 8005346:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800534a:	e007      	b.n	800535c <HAL_COMP_Init+0x128>
 800534c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005350:	e004      	b.n	800535c <HAL_COMP_Init+0x128>
 8005352:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005356:	e001      	b.n	800535c <HAL_COMP_Init+0x128>
 8005358:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800535c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80b6 	beq.w	80054d8 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a65      	ldr	r2, [pc, #404]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_COMP_Init+0x158>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a64      	ldr	r2, [pc, #400]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800538c:	6938      	ldr	r0, [r7, #16]
 800538e:	f7ff feab 	bl	80050e8 <LL_EXTI_EnableRisingTrig_32_63>
 8005392:	e014      	b.n	80053be <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005394:	6938      	ldr	r0, [r7, #16]
 8005396:	f7ff fe95 	bl	80050c4 <LL_EXTI_EnableRisingTrig_0_31>
 800539a:	e010      	b.n	80053be <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a5c      	ldr	r2, [pc, #368]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_COMP_Init+0x17c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80053b0:	6938      	ldr	r0, [r7, #16]
 80053b2:	f7ff febf 	bl	8005134 <LL_EXTI_DisableRisingTrig_32_63>
 80053b6:	e002      	b.n	80053be <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80053b8:	6938      	ldr	r0, [r7, #16]
 80053ba:	f7ff fea7 	bl	800510c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a51      	ldr	r2, [pc, #324]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_COMP_Init+0x1aa>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a4f      	ldr	r2, [pc, #316]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d103      	bne.n	80053e6 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f7ff fece 	bl	8005180 <LL_EXTI_EnableFallingTrig_32_63>
 80053e4:	e014      	b.n	8005410 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80053e6:	6938      	ldr	r0, [r7, #16]
 80053e8:	f7ff feb8 	bl	800515c <LL_EXTI_EnableFallingTrig_0_31>
 80053ec:	e010      	b.n	8005410 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a48      	ldr	r2, [pc, #288]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_COMP_Init+0x1ce>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a46      	ldr	r2, [pc, #280]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d103      	bne.n	800540a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f7ff fee2 	bl	80051cc <LL_EXTI_DisableFallingTrig_32_63>
 8005408:	e002      	b.n	8005410 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f7ff feca 	bl	80051a4 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a3f      	ldr	r2, [pc, #252]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_COMP_Init+0x1f0>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3e      	ldr	r2, [pc, #248]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005424:	6938      	ldr	r0, [r7, #16]
 8005426:	f7ff fef5 	bl	8005214 <LL_EXTI_ClearFlag_32_63>
 800542a:	e002      	b.n	8005432 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800542c:	6938      	ldr	r0, [r7, #16]
 800542e:	f7ff fee1 	bl	80051f4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a34      	ldr	r2, [pc, #208]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_COMP_Init+0x21e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a32      	ldr	r2, [pc, #200]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d103      	bne.n	800545a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f7ff fdfc 	bl	8005050 <LL_EXTI_EnableEvent_32_63>
 8005458:	e014      	b.n	8005484 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f7ff fde6 	bl	800502c <LL_EXTI_EnableEvent_0_31>
 8005460:	e010      	b.n	8005484 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2b      	ldr	r2, [pc, #172]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_COMP_Init+0x242>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a29      	ldr	r2, [pc, #164]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d103      	bne.n	800547e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005476:	6938      	ldr	r0, [r7, #16]
 8005478:	f7ff fe10 	bl	800509c <LL_EXTI_DisableEvent_32_63>
 800547c:	e002      	b.n	8005484 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7ff fdf8 	bl	8005074 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_COMP_Init+0x270>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d103      	bne.n	80054ac <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f7ff fd87 	bl	8004fb8 <LL_EXTI_EnableIT_32_63>
 80054aa:	e04b      	b.n	8005544 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80054ac:	6938      	ldr	r0, [r7, #16]
 80054ae:	f7ff fd71 	bl	8004f94 <LL_EXTI_EnableIT_0_31>
 80054b2:	e047      	b.n	8005544 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_COMP_Init+0x294>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a15      	ldr	r2, [pc, #84]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d103      	bne.n	80054d0 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80054c8:	6938      	ldr	r0, [r7, #16]
 80054ca:	f7ff fd9b 	bl	8005004 <LL_EXTI_DisableIT_32_63>
 80054ce:	e039      	b.n	8005544 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80054d0:	6938      	ldr	r0, [r7, #16]
 80054d2:	f7ff fd83 	bl	8004fdc <LL_EXTI_DisableIT_0_31>
 80054d6:	e035      	b.n	8005544 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005514 <HAL_COMP_Init+0x2e0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_COMP_Init+0x2b8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005518 <HAL_COMP_Init+0x2e4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d117      	bne.n	800551c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80054ec:	6938      	ldr	r0, [r7, #16]
 80054ee:	f7ff fdd5 	bl	800509c <LL_EXTI_DisableEvent_32_63>
 80054f2:	e016      	b.n	8005522 <HAL_COMP_Init+0x2ee>
 80054f4:	ff007e0f 	.word	0xff007e0f
 80054f8:	2000020c 	.word	0x2000020c
 80054fc:	053e2d63 	.word	0x053e2d63
 8005500:	40010200 	.word	0x40010200
 8005504:	40010204 	.word	0x40010204
 8005508:	40010208 	.word	0x40010208
 800550c:	4001020c 	.word	0x4001020c
 8005510:	40010210 	.word	0x40010210
 8005514:	40010214 	.word	0x40010214
 8005518:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800551c:	6938      	ldr	r0, [r7, #16]
 800551e:	f7ff fda9 	bl	8005074 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a0e      	ldr	r2, [pc, #56]	@ (8005560 <HAL_COMP_Init+0x32c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_COMP_Init+0x302>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0c      	ldr	r2, [pc, #48]	@ (8005564 <HAL_COMP_Init+0x330>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d103      	bne.n	800553e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f7ff fd64 	bl	8005004 <LL_EXTI_DisableIT_32_63>
 800553c:	e002      	b.n	8005544 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f7ff fd4c 	bl	8004fdc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	7f5b      	ldrb	r3, [r3, #29]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40010214 	.word	0x40010214
 8005564:	40010218 	.word	0x40010218

08005568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005578:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <__NVIC_SetPriorityGrouping+0x44>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005584:	4013      	ands	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800559a:	4a04      	ldr	r2, [pc, #16]	@ (80055ac <__NVIC_SetPriorityGrouping+0x44>)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	60d3      	str	r3, [r2, #12]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055b4:	4b04      	ldr	r3, [pc, #16]	@ (80055c8 <__NVIC_GetPriorityGrouping+0x18>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f003 0307 	and.w	r3, r3, #7
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	db0b      	blt.n	80055f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	f003 021f 	and.w	r2, r3, #31
 80055e4:	4907      	ldr	r1, [pc, #28]	@ (8005604 <__NVIC_EnableIRQ+0x38>)
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2001      	movs	r0, #1
 80055ee:	fa00 f202 	lsl.w	r2, r0, r2
 80055f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000e100 	.word	0xe000e100

08005608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005618:	2b00      	cmp	r3, #0
 800561a:	db0a      	blt.n	8005632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	490c      	ldr	r1, [pc, #48]	@ (8005654 <__NVIC_SetPriority+0x4c>)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	440b      	add	r3, r1
 800562c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005630:	e00a      	b.n	8005648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	4908      	ldr	r1, [pc, #32]	@ (8005658 <__NVIC_SetPriority+0x50>)
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	3b04      	subs	r3, #4
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	440b      	add	r3, r1
 8005646:	761a      	strb	r2, [r3, #24]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000e100 	.word	0xe000e100
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	@ 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f1c3 0307 	rsb	r3, r3, #7
 8005676:	2b04      	cmp	r3, #4
 8005678:	bf28      	it	cs
 800567a:	2304      	movcs	r3, #4
 800567c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3304      	adds	r3, #4
 8005682:	2b06      	cmp	r3, #6
 8005684:	d902      	bls.n	800568c <NVIC_EncodePriority+0x30>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3b03      	subs	r3, #3
 800568a:	e000      	b.n	800568e <NVIC_EncodePriority+0x32>
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43da      	mvns	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	401a      	ands	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056a4:	f04f 31ff 	mov.w	r1, #4294967295
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43d9      	mvns	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b4:	4313      	orrs	r3, r2
         );
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3724      	adds	r7, #36	@ 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056d4:	d301      	bcc.n	80056da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056d6:	2301      	movs	r3, #1
 80056d8:	e00f      	b.n	80056fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056da:	4a0a      	ldr	r2, [pc, #40]	@ (8005704 <SysTick_Config+0x40>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3b01      	subs	r3, #1
 80056e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056e2:	210f      	movs	r1, #15
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	f7ff ff8e 	bl	8005608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <SysTick_Config+0x40>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056f2:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <SysTick_Config+0x40>)
 80056f4:	2207      	movs	r2, #7
 80056f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	e000e010 	.word	0xe000e010

08005708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ff29 	bl	8005568 <__NVIC_SetPriorityGrouping>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	4603      	mov	r3, r0
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800572c:	f7ff ff40 	bl	80055b0 <__NVIC_GetPriorityGrouping>
 8005730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	6978      	ldr	r0, [r7, #20]
 8005738:	f7ff ff90 	bl	800565c <NVIC_EncodePriority>
 800573c:	4602      	mov	r2, r0
 800573e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff ff5f 	bl	8005608 <__NVIC_SetPriority>
}
 800574a:	bf00      	nop
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	4603      	mov	r3, r0
 800575a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800575c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff33 	bl	80055cc <__NVIC_EnableIRQ>
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ffa4 	bl	80056c4 <SysTick_Config>
 800577c:	4603      	mov	r3, r0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e014      	b.n	80057c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fd fcfb 	bl	80031a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e056      	b.n	800588e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	795b      	ldrb	r3, [r3, #5]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_DAC_Start+0x20>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e050      	b.n	800588e <HAL_DAC_Start+0xc2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2201      	movs	r2, #1
 8005806:	409a      	lsls	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005810:	4b22      	ldr	r3, [pc, #136]	@ (800589c <HAL_DAC_Start+0xd0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	4a22      	ldr	r2, [pc, #136]	@ (80058a0 <HAL_DAC_Start+0xd4>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	099b      	lsrs	r3, r3, #6
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005822:	e002      	b.n	800582a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3b01      	subs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f9      	bne.n	8005824 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005840:	2b02      	cmp	r3, #2
 8005842:	d11d      	bne.n	8005880 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e014      	b.n	8005880 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2102      	movs	r1, #2
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0202 	orr.w	r2, r2, #2
 800587e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000020c 	.word	0x2000020c
 80058a0:	053e2d63 	.word	0x053e2d63

080058a4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e018      	b.n	80058f2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	3308      	adds	r3, #8
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e004      	b.n	80058e8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4413      	add	r3, r2
 80058e4:	3314      	adds	r3, #20
 80058e6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	461a      	mov	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	@ 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_DAC_ConfigChannel+0x1c>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e1a1      	b.n	8005c64 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	795b      	ldrb	r3, [r3, #5]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_DAC_ConfigChannel+0x32>
 800592e:	2302      	movs	r3, #2
 8005930:	e198      	b.n	8005c64 <HAL_DAC_ConfigChannel+0x364>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2202      	movs	r2, #2
 800593c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d17a      	bne.n	8005a3c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005946:	f7fe fb01 	bl	8003f4c <HAL_GetTick>
 800594a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d13d      	bne.n	80059ce <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005952:	e018      	b.n	8005986 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005954:	f7fe fafa 	bl	8003f4c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d911      	bls.n	8005986 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f043 0208 	orr.w	r2, r3, #8
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2203      	movs	r2, #3
 8005980:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e16e      	b.n	8005c64 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1df      	bne.n	8005954 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800599c:	641a      	str	r2, [r3, #64]	@ 0x40
 800599e:	e020      	b.n	80059e2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059a0:	f7fe fad4 	bl	8003f4c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d90f      	bls.n	80059ce <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da0a      	bge.n	80059ce <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f043 0208 	orr.w	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2203      	movs	r2, #3
 80059c8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e14a      	b.n	8005c64 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dbe3      	blt.n	80059a0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	ea02 0103 	and.w	r1, r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	409a      	lsls	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	21ff      	movs	r1, #255	@ 0xff
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	ea02 0103 	and.w	r1, r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	409a      	lsls	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d11d      	bne.n	8005a80 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	221f      	movs	r2, #31
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	4313      	orrs	r3, r2
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2207      	movs	r2, #7
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a98:	4013      	ands	r3, r2
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	e00f      	b.n	8005aca <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d102      	bne.n	8005ab8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	e008      	b.n	8005aca <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d102      	bne.n	8005ac6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	623b      	str	r3, [r7, #32]
 8005ac4:	e001      	b.n	8005aca <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aec:	4013      	ands	r3, r2
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d102      	bne.n	8005afe <HAL_DAC_ConfigChannel+0x1fe>
 8005af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005afc:	e000      	b.n	8005b00 <HAL_DAC_ConfigChannel+0x200>
 8005afe:	2300      	movs	r3, #0
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	4013      	ands	r3, r2
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	795b      	ldrb	r3, [r3, #5]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d102      	bne.n	8005b2a <HAL_DAC_ConfigChannel+0x22a>
 8005b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b28:	e000      	b.n	8005b2c <HAL_DAC_ConfigChannel+0x22c>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d114      	bne.n	8005b6c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005b42:	f003 fce7 	bl	8009514 <HAL_RCC_GetHCLKFreq>
 8005b46:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4a48      	ldr	r2, [pc, #288]	@ (8005c6c <HAL_DAC_ConfigChannel+0x36c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d904      	bls.n	8005b5a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b58:	e00f      	b.n	8005b7a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4a44      	ldr	r2, [pc, #272]	@ (8005c70 <HAL_DAC_ConfigChannel+0x370>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d90a      	bls.n	8005b78 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e006      	b.n	8005b7a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b72:	4313      	orrs	r3, r2
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b76:	e000      	b.n	8005b7a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005b78:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43da      	mvns	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	400a      	ands	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bcc:	4013      	ands	r3, r2
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be4:	4313      	orrs	r3, r2
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6819      	ldr	r1, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	22c0      	movs	r2, #192	@ 0xc0
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43da      	mvns	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	400a      	ands	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	089b      	lsrs	r3, r3, #2
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	089b      	lsrs	r3, r3, #2
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	ea02 0103 	and.w	r1, r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3728      	adds	r7, #40	@ 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	09896800 	.word	0x09896800
 8005c70:	04c4b400 	.word	0x04c4b400

08005c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e08d      	b.n	8005da2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b47      	ldr	r3, [pc, #284]	@ (8005dac <HAL_DMA_Init+0x138>)
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d80f      	bhi.n	8005cb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	4b45      	ldr	r3, [pc, #276]	@ (8005db0 <HAL_DMA_Init+0x13c>)
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4a45      	ldr	r2, [pc, #276]	@ (8005db4 <HAL_DMA_Init+0x140>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	009a      	lsls	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a42      	ldr	r2, [pc, #264]	@ (8005db8 <HAL_DMA_Init+0x144>)
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cb0:	e00e      	b.n	8005cd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b40      	ldr	r3, [pc, #256]	@ (8005dbc <HAL_DMA_Init+0x148>)
 8005cba:	4413      	add	r3, r2
 8005cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8005db4 <HAL_DMA_Init+0x140>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	009a      	lsls	r2, r3, #2
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc0 <HAL_DMA_Init+0x14c>)
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f9b6 	bl	8006094 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d30:	d102      	bne.n	8005d38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d010      	beq.n	8005d78 <HAL_DMA_Init+0x104>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d80c      	bhi.n	8005d78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9d6 	bl	8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	e008      	b.n	8005d8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40020407 	.word	0x40020407
 8005db0:	bffdfff8 	.word	0xbffdfff8
 8005db4:	cccccccd 	.word	0xcccccccd
 8005db8:	40020000 	.word	0x40020000
 8005dbc:	bffdfbf8 	.word	0xbffdfbf8
 8005dc0:	40020400 	.word	0x40020400

08005dc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_DMA_Start_IT+0x20>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e066      	b.n	8005eb2 <HAL_DMA_Start_IT+0xee>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d155      	bne.n	8005ea4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f8fb 	bl	8006018 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 020e 	orr.w	r2, r2, #14
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e00f      	b.n	8005e5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 020a 	orr.w	r2, r2, #10
 8005e5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e005      	b.n	8005eb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2204      	movs	r2, #4
 8005edc:	409a      	lsls	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d026      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x7a>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d021      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0204 	bic.w	r2, r2, #4
 8005f0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	f003 021f 	and.w	r2, r3, #31
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d071      	beq.n	800600e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f32:	e06c      	b.n	800600e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02e      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d029      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 020a 	bic.w	r2, r2, #10
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	2102      	movs	r1, #2
 8005f86:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d038      	beq.n	800600e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005fa4:	e033      	b.n	800600e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2208      	movs	r2, #8
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02a      	beq.n	8006010 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d025      	beq.n	8006010 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 020e 	bic.w	r2, r2, #14
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800600e:	bf00      	nop
 8006010:	bf00      	nop
}
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800602e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006040:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006046:	f003 021f 	and.w	r2, r3, #31
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2101      	movs	r1, #1
 8006050:	fa01 f202 	lsl.w	r2, r1, r2
 8006054:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b10      	cmp	r3, #16
 8006064:	d108      	bne.n	8006078 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006076:	e007      	b.n	8006088 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b16      	ldr	r3, [pc, #88]	@ (80060fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d802      	bhi.n	80060ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060a8:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e001      	b.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	3b08      	subs	r3, #8
 80060be:	4a12      	ldr	r2, [pc, #72]	@ (8006108 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	009a      	lsls	r2, r3, #2
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a0b      	ldr	r2, [pc, #44]	@ (800610c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2201      	movs	r2, #1
 80060e8:	409a      	lsls	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40020407 	.word	0x40020407
 8006100:	40020800 	.word	0x40020800
 8006104:	40020820 	.word	0x40020820
 8006108:	cccccccd 	.word	0xcccccccd
 800610c:	40020880 	.word	0x40020880

08006110 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a08      	ldr	r2, [pc, #32]	@ (8006154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006132:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3b01      	subs	r3, #1
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2201      	movs	r2, #1
 800613e:	409a      	lsls	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	1000823f 	.word	0x1000823f
 8006154:	40020940 	.word	0x40020940

08006158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006166:	e15a      	b.n	800641e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	4013      	ands	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 814c 	beq.w	8006418 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d005      	beq.n	8006198 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006194:	2b02      	cmp	r3, #2
 8006196:	d130      	bne.n	80061fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4013      	ands	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ce:	2201      	movs	r2, #1
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	f003 0201 	and.w	r2, r3, #1
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d017      	beq.n	8006236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	2203      	movs	r2, #3
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d123      	bne.n	800628a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	08da      	lsrs	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3208      	adds	r2, #8
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	220f      	movs	r2, #15
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	08da      	lsrs	r2, r3, #3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3208      	adds	r2, #8
 8006284:	6939      	ldr	r1, [r7, #16]
 8006286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 0203 	and.w	r2, r3, #3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80a6 	beq.w	8006418 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062cc:	4b5b      	ldr	r3, [pc, #364]	@ (800643c <HAL_GPIO_Init+0x2e4>)
 80062ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d0:	4a5a      	ldr	r2, [pc, #360]	@ (800643c <HAL_GPIO_Init+0x2e4>)
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80062d8:	4b58      	ldr	r3, [pc, #352]	@ (800643c <HAL_GPIO_Init+0x2e4>)
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e4:	4a56      	ldr	r2, [pc, #344]	@ (8006440 <HAL_GPIO_Init+0x2e8>)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	3302      	adds	r3, #2
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	220f      	movs	r2, #15
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4013      	ands	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800630e:	d01f      	beq.n	8006350 <HAL_GPIO_Init+0x1f8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a4c      	ldr	r2, [pc, #304]	@ (8006444 <HAL_GPIO_Init+0x2ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d019      	beq.n	800634c <HAL_GPIO_Init+0x1f4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a4b      	ldr	r2, [pc, #300]	@ (8006448 <HAL_GPIO_Init+0x2f0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <HAL_GPIO_Init+0x1f0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <HAL_GPIO_Init+0x2f4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00d      	beq.n	8006344 <HAL_GPIO_Init+0x1ec>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a49      	ldr	r2, [pc, #292]	@ (8006450 <HAL_GPIO_Init+0x2f8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <HAL_GPIO_Init+0x1e8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a48      	ldr	r2, [pc, #288]	@ (8006454 <HAL_GPIO_Init+0x2fc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_GPIO_Init+0x1e4>
 8006338:	2305      	movs	r3, #5
 800633a:	e00a      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 800633c:	2306      	movs	r3, #6
 800633e:	e008      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006340:	2304      	movs	r3, #4
 8006342:	e006      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006344:	2303      	movs	r3, #3
 8006346:	e004      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006348:	2302      	movs	r3, #2
 800634a:	e002      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006350:	2300      	movs	r3, #0
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	f002 0203 	and.w	r2, r2, #3
 8006358:	0092      	lsls	r2, r2, #2
 800635a:	4093      	lsls	r3, r2
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006362:	4937      	ldr	r1, [pc, #220]	@ (8006440 <HAL_GPIO_Init+0x2e8>)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	3302      	adds	r3, #2
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006370:	4b39      	ldr	r3, [pc, #228]	@ (8006458 <HAL_GPIO_Init+0x300>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	43db      	mvns	r3, r3
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4013      	ands	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006394:	4a30      	ldr	r2, [pc, #192]	@ (8006458 <HAL_GPIO_Init+0x300>)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800639a:	4b2f      	ldr	r3, [pc, #188]	@ (8006458 <HAL_GPIO_Init+0x300>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4013      	ands	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063be:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063c4:	4b24      	ldr	r3, [pc, #144]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4013      	ands	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4013      	ands	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006412:	4a11      	ldr	r2, [pc, #68]	@ (8006458 <HAL_GPIO_Init+0x300>)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3301      	adds	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f47f ae9d 	bne.w	8006168 <HAL_GPIO_Init+0x10>
  }
}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40021000 	.word	0x40021000
 8006440:	40010000 	.word	0x40010000
 8006444:	48000400 	.word	0x48000400
 8006448:	48000800 	.word	0x48000800
 800644c:	48000c00 	.word	0x48000c00
 8006450:	48001000 	.word	0x48001000
 8006454:	48001400 	.word	0x48001400
 8006458:	40010400 	.word	0x40010400

0800645c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	807b      	strh	r3, [r7, #2]
 8006468:	4613      	mov	r3, r2
 800646a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800646c:	787b      	ldrb	r3, [r7, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006478:	e002      	b.n	8006480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800647a:	887a      	ldrh	r2, [r7, #2]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006496:	4b08      	ldr	r3, [pc, #32]	@ (80064b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	4013      	ands	r3, r2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d006      	beq.n	80064b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064a2:	4a05      	ldr	r2, [pc, #20]	@ (80064b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f806 	bl	80064bc <HAL_GPIO_EXTI_Callback>
  }
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40010400 	.word	0x40010400

080064bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e08d      	b.n	8006600 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fc fed3 	bl	80032a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2224      	movs	r2, #36	@ 0x24
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006522:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006532:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006548:	609a      	str	r2, [r3, #8]
 800654a:	e006      	b.n	800655a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006558:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d108      	bne.n	8006574 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	e007      	b.n	8006584 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006582:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006596:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69d9      	ldr	r1, [r3, #28]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af02      	add	r7, sp, #8
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4603      	mov	r3, r0
 8006618:	817b      	strh	r3, [r7, #10]
 800661a:	460b      	mov	r3, r1
 800661c:	813b      	strh	r3, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b20      	cmp	r3, #32
 800662c:	f040 80fd 	bne.w	800682a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_I2C_Mem_Read+0x34>
 8006636:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d105      	bne.n	8006648 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006642:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0f1      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_I2C_Mem_Read+0x4e>
 8006652:	2302      	movs	r3, #2
 8006654:	e0ea      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800665e:	f7fd fc75 	bl	8003f4c <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2319      	movs	r3, #25
 800666a:	2201      	movs	r2, #1
 800666c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f95b 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0d5      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2222      	movs	r2, #34	@ 0x22
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2240      	movs	r2, #64	@ 0x40
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066a8:	88f8      	ldrh	r0, [r7, #6]
 80066aa:	893a      	ldrh	r2, [r7, #8]
 80066ac:	8979      	ldrh	r1, [r7, #10]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4603      	mov	r3, r0
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f8bf 	bl	800683c <I2C_RequestMemoryRead>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0ad      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2bff      	cmp	r3, #255	@ 0xff
 80066d8:	d90e      	bls.n	80066f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	22ff      	movs	r2, #255	@ 0xff
 80066de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	8979      	ldrh	r1, [r7, #10]
 80066e8:	4b52      	ldr	r3, [pc, #328]	@ (8006834 <HAL_I2C_Mem_Read+0x22c>)
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fadf 	bl	8006cb4 <I2C_TransferConfig>
 80066f6:	e00f      	b.n	8006718 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006706:	b2da      	uxtb	r2, r3
 8006708:	8979      	ldrh	r1, [r7, #10]
 800670a:	4b4a      	ldr	r3, [pc, #296]	@ (8006834 <HAL_I2C_Mem_Read+0x22c>)
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 face 	bl	8006cb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	2200      	movs	r2, #0
 8006720:	2104      	movs	r1, #4
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f902 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e07c      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d034      	beq.n	80067d8 <HAL_I2C_Mem_Read+0x1d0>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d130      	bne.n	80067d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	2200      	movs	r2, #0
 800677e:	2180      	movs	r1, #128	@ 0x80
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f8d3 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e04d      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2bff      	cmp	r3, #255	@ 0xff
 8006798:	d90e      	bls.n	80067b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22ff      	movs	r2, #255	@ 0xff
 800679e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	8979      	ldrh	r1, [r7, #10]
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fa7f 	bl	8006cb4 <I2C_TransferConfig>
 80067b6:	e00f      	b.n	80067d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	8979      	ldrh	r1, [r7, #10]
 80067ca:	2300      	movs	r3, #0
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fa6e 	bl	8006cb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d19a      	bne.n	8006718 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f940 	bl	8006a6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e01a      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2220      	movs	r2, #32
 80067fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <HAL_I2C_Mem_Read+0x230>)
 800680a:	400b      	ands	r3, r1
 800680c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	80002400 	.word	0x80002400
 8006838:	fe00e800 	.word	0xfe00e800

0800683c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	461a      	mov	r2, r3
 800684a:	4603      	mov	r3, r0
 800684c:	817b      	strh	r3, [r7, #10]
 800684e:	460b      	mov	r3, r1
 8006850:	813b      	strh	r3, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	8979      	ldrh	r1, [r7, #10]
 800685c:	4b20      	ldr	r3, [pc, #128]	@ (80068e0 <I2C_RequestMemoryRead+0xa4>)
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	2300      	movs	r3, #0
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fa26 	bl	8006cb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	69b9      	ldr	r1, [r7, #24]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f8b6 	bl	80069de <I2C_WaitOnTXISFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e02c      	b.n	80068d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006882:	893b      	ldrh	r3, [r7, #8]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28
 800688c:	e015      	b.n	80068ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800688e:	893b      	ldrh	r3, [r7, #8]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	b29b      	uxth	r3, r3
 8006894:	b2da      	uxtb	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f89c 	bl	80069de <I2C_WaitOnTXISFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e012      	b.n	80068d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068b0:	893b      	ldrh	r3, [r7, #8]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2140      	movs	r1, #64	@ 0x40
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f831 	bl	800692c <I2C_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	80002000 	.word	0x80002000

080068e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d103      	bne.n	8006902 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d007      	beq.n	8006920 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	619a      	str	r2, [r3, #24]
  }
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800693c:	e03b      	b.n	80069b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f8d6 	bl	8006af4 <I2C_IsErrorOccurred>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d02d      	beq.n	80069b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fd faf7 	bl	8003f4c <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnFlagUntilTimeout+0x44>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d122      	bne.n	80069b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4013      	ands	r3, r2
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	429a      	cmp	r2, r3
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	429a      	cmp	r2, r3
 800698c:	d113      	bne.n	80069b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e00f      	b.n	80069d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4013      	ands	r3, r2
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d0b4      	beq.n	800693e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069ea:	e033      	b.n	8006a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f87f 	bl	8006af4 <I2C_IsErrorOccurred>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e031      	b.n	8006a64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a06:	d025      	beq.n	8006a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a08:	f7fd faa0 	bl	8003f4c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d302      	bcc.n	8006a1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d11a      	bne.n	8006a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d013      	beq.n	8006a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e007      	b.n	8006a64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d1c4      	bne.n	80069ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a78:	e02f      	b.n	8006ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f838 	bl	8006af4 <I2C_IsErrorOccurred>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e02d      	b.n	8006aea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8e:	f7fd fa5d 	bl	8003f4c <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d11a      	bne.n	8006ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d013      	beq.n	8006ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab6:	f043 0220 	orr.w	r2, r3, #32
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e007      	b.n	8006aea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d1c8      	bne.n	8006a7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	@ 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d068      	beq.n	8006bf2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2210      	movs	r2, #16
 8006b26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b28:	e049      	b.n	8006bbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d045      	beq.n	8006bbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fd fa0b 	bl	8003f4c <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <I2C_IsErrorOccurred+0x54>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d13a      	bne.n	8006bbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b6a:	d121      	bne.n	8006bb0 <I2C_IsErrorOccurred+0xbc>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b72:	d01d      	beq.n	8006bb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b74:	7cfb      	ldrb	r3, [r7, #19]
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d01a      	beq.n	8006bb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b8a:	f7fd f9df 	bl	8003f4c <HAL_GetTick>
 8006b8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b90:	e00e      	b.n	8006bb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b92:	f7fd f9db 	bl	8003f4c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b19      	cmp	r3, #25
 8006b9e:	d907      	bls.n	8006bb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f043 0320 	orr.w	r3, r3, #32
 8006ba6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006bae:	e006      	b.n	8006bbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d1e9      	bne.n	8006b92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d003      	beq.n	8006bd4 <I2C_IsErrorOccurred+0xe0>
 8006bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0aa      	beq.n	8006b2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d103      	bne.n	8006be4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2220      	movs	r2, #32
 8006be2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	f043 0304 	orr.w	r3, r3, #4
 8006bea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f043 0308 	orr.w	r3, r3, #8
 8006c2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	f043 0302 	orr.w	r3, r3, #2
 8006c4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01c      	beq.n	8006ca2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fe3b 	bl	80068e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <I2C_IsErrorOccurred+0x1bc>)
 8006c7a:	400b      	ands	r3, r1
 8006c7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	@ 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	fe00e800 	.word	0xfe00e800

08006cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	607b      	str	r3, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	817b      	strh	r3, [r7, #10]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cc6:	897b      	ldrh	r3, [r7, #10]
 8006cc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ccc:	7a7b      	ldrb	r3, [r7, #9]
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ce2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	0d5b      	lsrs	r3, r3, #21
 8006cee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006cf2:	4b08      	ldr	r3, [pc, #32]	@ (8006d14 <I2C_TransferConfig+0x60>)
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	ea02 0103 	and.w	r1, r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	03ff63ff 	.word	0x03ff63ff

08006d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d138      	bne.n	8006da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e032      	b.n	8006da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2224      	movs	r2, #36	@ 0x24
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6819      	ldr	r1, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d139      	bne.n	8006e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e033      	b.n	8006e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2224      	movs	r2, #36	@ 0x24
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e000      	b.n	8006e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e38:	2302      	movs	r3, #2
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e0bb      	b.n	8006fd6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	d101      	bne.n	8006e6e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e0b3      	b.n	8006fd6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d101      	bne.n	8006e7e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e0ab      	b.n	8006fd6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e7e:	4b58      	ldr	r3, [pc, #352]	@ (8006fe0 <HAL_OPAMP_Init+0x198>)
 8006e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e82:	4a57      	ldr	r2, [pc, #348]	@ (8006fe0 <HAL_OPAMP_Init+0x198>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e8a:	4b55      	ldr	r3, [pc, #340]	@ (8006fe0 <HAL_OPAMP_Init+0x198>)
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fc faae 	bl	800340c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b40      	cmp	r3, #64	@ 0x40
 8006eb6:	d003      	beq.n	8006ec0 <HAL_OPAMP_Init+0x78>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b60      	cmp	r3, #96	@ 0x60
 8006ebe:	d133      	bne.n	8006f28 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 0110 	bic.w	r1, r3, #16
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	4b41      	ldr	r3, [pc, #260]	@ (8006fe4 <HAL_OPAMP_Init+0x19c>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6851      	ldr	r1, [r2, #4]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6892      	ldr	r2, [r2, #8]
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6912      	ldr	r2, [r2, #16]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	7d09      	ldrb	r1, [r1, #20]
 8006ef4:	2901      	cmp	r1, #1
 8006ef6:	d102      	bne.n	8006efe <HAL_OPAMP_Init+0xb6>
 8006ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006efc:	e000      	b.n	8006f00 <HAL_OPAMP_Init+0xb8>
 8006efe:	2100      	movs	r1, #0
 8006f00:	4311      	orrs	r1, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f06:	4311      	orrs	r1, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f0c:	4311      	orrs	r1, r2
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f12:	04d2      	lsls	r2, r2, #19
 8006f14:	4311      	orrs	r1, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f1a:	0612      	lsls	r2, r2, #24
 8006f1c:	4311      	orrs	r1, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	430b      	orrs	r3, r1
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e035      	b.n	8006f94 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 0110 	bic.w	r1, r3, #16
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4b27      	ldr	r3, [pc, #156]	@ (8006fe4 <HAL_OPAMP_Init+0x19c>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6851      	ldr	r1, [r2, #4]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6892      	ldr	r2, [r2, #8]
 8006f50:	4311      	orrs	r1, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68d2      	ldr	r2, [r2, #12]
 8006f56:	4311      	orrs	r1, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6912      	ldr	r2, [r2, #16]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	7d09      	ldrb	r1, [r1, #20]
 8006f62:	2901      	cmp	r1, #1
 8006f64:	d102      	bne.n	8006f6c <HAL_OPAMP_Init+0x124>
 8006f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f6a:	e000      	b.n	8006f6e <HAL_OPAMP_Init+0x126>
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4311      	orrs	r1, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f74:	4311      	orrs	r1, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f7a:	4311      	orrs	r1, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f80:	04d2      	lsls	r2, r2, #19
 8006f82:	4311      	orrs	r1, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f88:	0612      	lsls	r2, r2, #24
 8006f8a:	4311      	orrs	r1, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db10      	blt.n	8006fc0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	e0003e11 	.word	0xe0003e11

08006fe8 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	e01d      	b.n	800703c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b05      	cmp	r3, #5
 800700a:	d102      	bne.n	8007012 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
 8007010:	e014      	b.n	800703c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	d10c      	bne.n	8007038 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0201 	orr.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2204      	movs	r2, #4
 8007032:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007036:	e001      	b.n	800703c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0c0      	b.n	80071de <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f009 fbef 	bl	8010854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2203      	movs	r2, #3
 800707a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f005 ff73 	bl	800cf6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
 800708c:	e03e      	b.n	800710c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800708e:	7bfa      	ldrb	r2, [r7, #15]
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	440b      	add	r3, r1
 800709c:	3311      	adds	r3, #17
 800709e:	2201      	movs	r2, #1
 80070a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	440b      	add	r3, r1
 80070b0:	3310      	adds	r3, #16
 80070b2:	7bfa      	ldrb	r2, [r7, #15]
 80070b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070b6:	7bfa      	ldrb	r2, [r7, #15]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	440b      	add	r3, r1
 80070c4:	3313      	adds	r3, #19
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	440b      	add	r3, r1
 80070d8:	3320      	adds	r3, #32
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070de:	7bfa      	ldrb	r2, [r7, #15]
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	440b      	add	r3, r1
 80070ec:	3324      	adds	r3, #36	@ 0x24
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	440b      	add	r3, r1
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	3301      	adds	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	791b      	ldrb	r3, [r3, #4]
 8007110:	7bfa      	ldrb	r2, [r7, #15]
 8007112:	429a      	cmp	r2, r3
 8007114:	d3bb      	bcc.n	800708e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	e044      	b.n	80071a6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800711c:	7bfa      	ldrb	r2, [r7, #15]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007132:	7bfa      	ldrb	r2, [r7, #15]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	440b      	add	r3, r1
 8007140:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007144:	7bfa      	ldrb	r2, [r7, #15]
 8007146:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007148:	7bfa      	ldrb	r2, [r7, #15]
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	440b      	add	r3, r1
 8007156:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800715e:	7bfa      	ldrb	r2, [r7, #15]
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	440b      	add	r3, r1
 800716c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007174:	7bfa      	ldrb	r2, [r7, #15]
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	440b      	add	r3, r1
 8007182:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800718a:	7bfa      	ldrb	r2, [r7, #15]
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	440b      	add	r3, r1
 8007198:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	3301      	adds	r3, #1
 80071a4:	73fb      	strb	r3, [r7, #15]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	791b      	ldrb	r3, [r3, #4]
 80071aa:	7bfa      	ldrb	r2, [r7, #15]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d3b5      	bcc.n	800711c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80071bc:	f005 fef2 	bl	800cfa4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7a9b      	ldrb	r3, [r3, #10]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d102      	bne.n	80071dc <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fc0e 	bl	80089f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_PCD_Start+0x16>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e012      	b.n	8007222 <HAL_PCD_Start+0x3c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f005 fe99 	bl	800cf40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f007 fc76 	bl	800eb04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f007 fc7b 	bl	800eb32 <USB_ReadInterrupts>
 800723c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb06 	bl	800785a <PCD_EP_ISR_Handler>

    return;
 800724e:	e110      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007256:	2b00      	cmp	r3, #0
 8007258:	d013      	beq.n	8007282 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800726c:	b292      	uxth	r2, r2
 800726e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f009 fb7f 	bl	8010976 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007278:	2100      	movs	r1, #0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8fc 	bl	8007478 <HAL_PCD_SetAddress>

    return;
 8007280:	e0f7      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800729e:	b292      	uxth	r2, r2
 80072a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80072a4:	e0e5      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00c      	beq.n	80072ca <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072c2:	b292      	uxth	r2, r2
 80072c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80072c8:	e0d3      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d034      	beq.n	800733e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0204 	bic.w	r2, r2, #4
 80072e6:	b292      	uxth	r2, r2
 80072e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0208 	bic.w	r2, r2, #8
 80072fe:	b292      	uxth	r2, r2
 8007300:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800730a:	2b01      	cmp	r3, #1
 800730c:	d107      	bne.n	800731e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f009 fd1f 	bl	8010d5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f009 fb62 	bl	80109e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007336:	b292      	uxth	r2, r2
 8007338:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800733c:	e099      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007344:	2b00      	cmp	r3, #0
 8007346:	d027      	beq.n	8007398 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0208 	orr.w	r2, r2, #8
 800735a:	b292      	uxth	r2, r2
 800735c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007368:	b29a      	uxth	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007372:	b292      	uxth	r2, r2
 8007374:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0204 	orr.w	r2, r2, #4
 800738a:	b292      	uxth	r2, r2
 800738c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f009 fb0f 	bl	80109b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007396:	e06c      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d040      	beq.n	8007424 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073b4:	b292      	uxth	r2, r2
 80073b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d12b      	bne.n	800741c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0204 	orr.w	r2, r2, #4
 80073d6:	b292      	uxth	r2, r2
 80073d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0208 	orr.w	r2, r2, #8
 80073ee:	b292      	uxth	r2, r2
 80073f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007404:	b29b      	uxth	r3, r3
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007412:	2101      	movs	r1, #1
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f009 fca1 	bl	8010d5c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800741a:	e02a      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f009 fac9 	bl	80109b4 <HAL_PCD_SuspendCallback>
    return;
 8007422:	e026      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00f      	beq.n	800744e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007440:	b292      	uxth	r2, r2
 8007442:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f009 fa87 	bl	801095a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800744c:	e011      	b.n	8007472 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00c      	beq.n	8007472 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800746a:	b292      	uxth	r2, r2
 800746c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007470:	bf00      	nop
  }
}
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_PCD_SetAddress+0x1a>
 800748e:	2302      	movs	r3, #2
 8007490:	e012      	b.n	80074b8 <HAL_PCD_SetAddress+0x40>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f007 fb17 	bl	800eadc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	4608      	mov	r0, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	461a      	mov	r2, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	70fb      	strb	r3, [r7, #3]
 80074d2:	460b      	mov	r3, r1
 80074d4:	803b      	strh	r3, [r7, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da0e      	bge.n	8007504 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	f003 0207 	and.w	r2, r3, #7
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3310      	adds	r3, #16
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	705a      	strb	r2, [r3, #1]
 8007502:	e00e      	b.n	8007522 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	f003 0207 	and.w	r2, r3, #7
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800752e:	883b      	ldrh	r3, [r7, #0]
 8007530:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	78ba      	ldrb	r2, [r7, #2]
 800753c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800753e:	78bb      	ldrb	r3, [r7, #2]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d102      	bne.n	800754a <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_PCD_EP_Open+0x98>
 8007554:	2302      	movs	r3, #2
 8007556:	e00e      	b.n	8007576 <HAL_PCD_EP_Open+0xb6>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68f9      	ldr	r1, [r7, #12]
 8007566:	4618      	mov	r0, r3
 8007568:	f005 fd3a 	bl	800cfe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007574:	7afb      	ldrb	r3, [r7, #11]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800758a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800758e:	2b00      	cmp	r3, #0
 8007590:	da0e      	bge.n	80075b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 0207 	and.w	r2, r3, #7
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	3310      	adds	r3, #16
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	705a      	strb	r2, [r3, #1]
 80075ae:	e00e      	b.n	80075ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	f003 0207 	and.w	r2, r3, #7
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_PCD_EP_Close+0x6a>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e00e      	b.n	8007606 <HAL_PCD_EP_Close+0x88>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68f9      	ldr	r1, [r7, #12]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f006 f9da 	bl	800d9b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
 800761a:	460b      	mov	r3, r1
 800761c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	f003 0207 	and.w	r2, r3, #7
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	b2da      	uxtb	r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6979      	ldr	r1, [r7, #20]
 8007660:	4618      	mov	r0, r3
 8007662:	f006 fb92 	bl	800dd8a <USB_EPStartXfer>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	f003 0207 	and.w	r2, r3, #7
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	440b      	add	r3, r1
 800768e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007692:	681b      	ldr	r3, [r3, #0]
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	460b      	mov	r3, r1
 80076ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	f003 0207 	and.w	r2, r3, #7
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	3310      	adds	r3, #16
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2200      	movs	r2, #0
 80076e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2201      	movs	r2, #1
 80076ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6979      	ldr	r1, [r7, #20]
 80076fe:	4618      	mov	r0, r3
 8007700:	f006 fb43 	bl	800dd8a <USB_EPStartXfer>

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7912      	ldrb	r2, [r2, #4]
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e03e      	b.n	80077aa <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800772c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007730:	2b00      	cmp	r3, #0
 8007732:	da0e      	bge.n	8007752 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	f003 0207 	and.w	r2, r3, #7
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	3310      	adds	r3, #16
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4413      	add	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	705a      	strb	r2, [r3, #1]
 8007750:	e00c      	b.n	800776c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4413      	add	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_PCD_EP_SetStall+0x7e>
 8007788:	2302      	movs	r3, #2
 800778a:	e00e      	b.n	80077aa <HAL_PCD_EP_SetStall+0x9c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68f9      	ldr	r1, [r7, #12]
 800779a:	4618      	mov	r0, r3
 800779c:	f007 f8a4 	bl	800e8e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	460b      	mov	r3, r1
 80077bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7912      	ldrb	r2, [r2, #4]
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d901      	bls.n	80077d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e040      	b.n	8007852 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da0e      	bge.n	80077f6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	f003 0207 	and.w	r2, r3, #7
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	3310      	adds	r3, #16
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	705a      	strb	r2, [r3, #1]
 80077f4:	e00e      	b.n	8007814 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	f003 0207 	and.w	r2, r3, #7
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4413      	add	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	b2da      	uxtb	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_PCD_EP_ClrStall+0x82>
 8007830:	2302      	movs	r3, #2
 8007832:	e00e      	b.n	8007852 <HAL_PCD_EP_ClrStall+0xa0>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68f9      	ldr	r1, [r7, #12]
 8007842:	4618      	mov	r0, r3
 8007844:	f007 f8a1 	bl	800e98a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b092      	sub	sp, #72	@ 0x48
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007862:	e333      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800786c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800786e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800787a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800787e:	2b00      	cmp	r3, #0
 8007880:	f040 8108 	bne.w	8007a94 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007884:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b00      	cmp	r3, #0
 800788c:	d14c      	bne.n	8007928 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800789a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800789e:	813b      	strh	r3, [r7, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	893b      	ldrh	r3, [r7, #8]
 80078a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3310      	adds	r3, #16
 80078b6:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	4413      	add	r3, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	4413      	add	r3, r2
 80078d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80078e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	441a      	add	r2, r3
 80078ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80078ee:	2100      	movs	r1, #0
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f009 f818 	bl	8010926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7b1b      	ldrb	r3, [r3, #12]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 82e5 	beq.w	8007ecc <PCD_EP_ISR_Handler+0x672>
 8007902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 82e0 	bne.w	8007ecc <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7b1b      	ldrb	r3, [r3, #12]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007916:	b2da      	uxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	731a      	strb	r2, [r3, #12]
 8007926:	e2d1      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800792e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007938:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800793a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800793e:	2b00      	cmp	r3, #0
 8007940:	d032      	beq.n	80079a8 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	4413      	add	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	4413      	add	r3, r2
 800795c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007968:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6818      	ldr	r0, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007976:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800797a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800797c:	b29b      	uxth	r3, r3
 800797e:	f007 f92a 	bl	800ebd6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29a      	uxth	r2, r3
 800798a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800798e:	4013      	ands	r3, r2
 8007990:	817b      	strh	r3, [r7, #10]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	897a      	ldrh	r2, [r7, #10]
 8007998:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800799c:	b292      	uxth	r2, r2
 800799e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f008 ff93 	bl	80108cc <HAL_PCD_SetupStageCallback>
 80079a6:	e291      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80079a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f280 828d 	bge.w	8007ecc <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80079be:	4013      	ands	r3, r2
 80079c0:	81fb      	strh	r3, [r7, #14]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	89fa      	ldrh	r2, [r7, #14]
 80079c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079cc:	b292      	uxth	r2, r2
 80079ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d8:	b29b      	uxth	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	4413      	add	r3, r2
 80079ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80079f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80079f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d019      	beq.n	8007a34 <PCD_EP_ISR_Handler+0x1da>
 8007a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d015      	beq.n	8007a34 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a0e:	6959      	ldr	r1, [r3, #20]
 8007a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f007 f8dc 	bl	800ebd6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a20:	695a      	ldr	r2, [r3, #20]
 8007a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	441a      	add	r2, r3
 8007a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f008 ff5e 	bl	80108f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007a3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f040 8242 	bne.w	8007ecc <PCD_EP_ISR_Handler+0x672>
 8007a48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a52:	f000 823b 	beq.w	8007ecc <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a66:	81bb      	strh	r3, [r7, #12]
 8007a68:	89bb      	ldrh	r3, [r7, #12]
 8007a6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a6e:	81bb      	strh	r3, [r7, #12]
 8007a70:	89bb      	ldrh	r3, [r7, #12]
 8007a72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a76:	81bb      	strh	r3, [r7, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	89bb      	ldrh	r3, [r7, #12]
 8007a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	8013      	strh	r3, [r2, #0]
 8007a92:	e21b      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007aa6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f280 80f1 	bge.w	8007c92 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007ada:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ade:	b292      	uxth	r2, r2
 8007ae0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007ae2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4413      	add	r3, r2
 8007af6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007afa:	7b1b      	ldrb	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d123      	bne.n	8007b48 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4413      	add	r3, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b24:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8007b28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 808b 	beq.w	8007c48 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6818      	ldr	r0, [r3, #0]
 8007b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b38:	6959      	ldr	r1, [r3, #20]
 8007b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3c:	88da      	ldrh	r2, [r3, #6]
 8007b3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b42:	f007 f848 	bl	800ebd6 <USB_ReadPMA>
 8007b46:	e07f      	b.n	8007c48 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d109      	bne.n	8007b64 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007b50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b52:	461a      	mov	r2, r3
 8007b54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9c6 	bl	8007ee8 <HAL_PCD_EP_DB_Receive>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007b62:	e071      	b.n	8007c48 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d022      	beq.n	8007c04 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007be6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d02c      	beq.n	8007c48 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf4:	6959      	ldr	r1, [r3, #20]
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf8:	891a      	ldrh	r2, [r3, #8]
 8007bfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bfe:	f006 ffea 	bl	800ebd6 <USB_ReadPMA>
 8007c02:	e021      	b.n	8007c48 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4413      	add	r3, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007c2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c3a:	6959      	ldr	r1, [r3, #20]
 8007c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c3e:	895a      	ldrh	r2, [r3, #10]
 8007c40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c44:	f006 ffc7 	bl	800ebd6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c50:	441a      	add	r2, r3
 8007c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c58:	695a      	ldr	r2, [r3, #20]
 8007c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c5e:	441a      	add	r2, r3
 8007c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c62:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <PCD_EP_ISR_Handler+0x41e>
 8007c6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d206      	bcs.n	8007c86 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f008 fe36 	bl	80108f0 <HAL_PCD_DataOutStageCallback>
 8007c84:	e005      	b.n	8007c92 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f006 f87c 	bl	800dd8a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007c92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8117 	beq.w	8007ecc <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007c9e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	3310      	adds	r3, #16
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	4413      	add	r3, r2
 8007cb0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ccc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	441a      	add	r2, r3
 8007cdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	f040 80a1 	bne.w	8007e36 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfc:	7b1b      	ldrb	r3, [r3, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 8092 	beq.w	8007e28 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d046      	beq.n	8007d9c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d126      	bne.n	8007d64 <PCD_EP_ISR_Handler+0x50a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	00da      	lsls	r2, r3, #3
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	4413      	add	r3, r2
 8007d38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d3c:	613b      	str	r3, [r7, #16]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e061      	b.n	8007e28 <PCD_EP_ISR_Handler+0x5ce>
 8007d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d15d      	bne.n	8007e28 <PCD_EP_ISR_Handler+0x5ce>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	00da      	lsls	r2, r3, #3
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2200      	movs	r2, #0
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e045      	b.n	8007e28 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da4:	785b      	ldrb	r3, [r3, #1]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d126      	bne.n	8007df8 <PCD_EP_ISR_Handler+0x59e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbe:	4413      	add	r3, r2
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	00da      	lsls	r2, r3, #3
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	4413      	add	r3, r2
 8007dcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dd0:	623b      	str	r3, [r7, #32]
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	e017      	b.n	8007e28 <PCD_EP_ISR_Handler+0x5ce>
 8007df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d113      	bne.n	8007e28 <PCD_EP_ISR_Handler+0x5ce>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	4413      	add	r3, r2
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	00da      	lsls	r2, r3, #3
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	2200      	movs	r2, #0
 8007e26:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f008 fd79 	bl	8010926 <HAL_PCD_DataInStageCallback>
 8007e34:	e04a      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007e36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d13f      	bne.n	8007ec0 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4413      	add	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e64:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d906      	bls.n	8007e7e <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e7a:	619a      	str	r2, [r3, #24]
 8007e7c:	e002      	b.n	8007e84 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e80:	2200      	movs	r2, #0
 8007e82:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f008 fd47 	bl	8010926 <HAL_PCD_DataInStageCallback>
 8007e98:	e018      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e9c:	695a      	ldr	r2, [r3, #20]
 8007e9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007ea0:	441a      	add	r2, r3
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ea4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007eac:	441a      	add	r2, r3
 8007eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eb0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f005 ff66 	bl	800dd8a <USB_EPStartXfer>
 8007ebe:	e005      	b.n	8007ecc <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007ec0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f917 	bl	80080fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	b21b      	sxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f6ff acc3 	blt.w	8007864 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3748      	adds	r7, #72	@ 0x48
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d07c      	beq.n	8007ffa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	4413      	add	r3, r2
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	8b7b      	ldrh	r3, [r7, #26]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d306      	bcc.n	8007f3e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	8b7b      	ldrh	r3, [r7, #26]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	619a      	str	r2, [r3, #24]
 8007f3c:	e002      	b.n	8007f44 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d123      	bne.n	8007f94 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f66:	833b      	strh	r3, [r7, #24]
 8007f68:	8b3b      	ldrh	r3, [r7, #24]
 8007f6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f6e:	833b      	strh	r3, [r7, #24]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	8b3b      	ldrh	r3, [r7, #24]
 8007f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f94:	88fb      	ldrh	r3, [r7, #6]
 8007f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01f      	beq.n	8007fde <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	82fb      	strh	r3, [r7, #22]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	8afb      	ldrh	r3, [r7, #22]
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007fde:	8b7b      	ldrh	r3, [r7, #26]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8085 	beq.w	80080f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6959      	ldr	r1, [r3, #20]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	891a      	ldrh	r2, [r3, #8]
 8007ff2:	8b7b      	ldrh	r3, [r7, #26]
 8007ff4:	f006 fdef 	bl	800ebd6 <USB_ReadPMA>
 8007ff8:	e07a      	b.n	80080f0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	4413      	add	r3, r2
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	4413      	add	r3, r2
 8008014:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800801e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	8b7b      	ldrh	r3, [r7, #26]
 8008026:	429a      	cmp	r2, r3
 8008028:	d306      	bcc.n	8008038 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	8b7b      	ldrh	r3, [r7, #26]
 8008030:	1ad2      	subs	r2, r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	619a      	str	r2, [r3, #24]
 8008036:	e002      	b.n	800803e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d123      	bne.n	800808e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800805c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008060:	83fb      	strh	r3, [r7, #30]
 8008062:	8bfb      	ldrh	r3, [r7, #30]
 8008064:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008068:	83fb      	strh	r3, [r7, #30]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	441a      	add	r2, r3
 8008078:	8bfb      	ldrh	r3, [r7, #30]
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11f      	bne.n	80080d8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b2:	83bb      	strh	r3, [r7, #28]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	8bbb      	ldrh	r3, [r7, #28]
 80080c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80080d8:	8b7b      	ldrh	r3, [r7, #26]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d008      	beq.n	80080f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6959      	ldr	r1, [r3, #20]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	895a      	ldrh	r2, [r3, #10]
 80080ea:	8b7b      	ldrh	r3, [r7, #26]
 80080ec:	f006 fd73 	bl	800ebd6 <USB_ReadPMA>
    }
  }

  return count;
 80080f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b0a6      	sub	sp, #152	@ 0x98
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	4613      	mov	r3, r2
 8008106:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 81f7 	beq.w	8008502 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811c:	b29b      	uxth	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	4413      	add	r3, r2
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	6812      	ldr	r2, [r2, #0]
 800812c:	4413      	add	r3, r2
 800812e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008138:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008144:	429a      	cmp	r2, r3
 8008146:	d907      	bls.n	8008158 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	699a      	ldr	r2, [r3, #24]
 800814c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008150:	1ad2      	subs	r2, r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	619a      	str	r2, [r3, #24]
 8008156:	e002      	b.n	800815e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f040 80e1 	bne.w	800832a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d126      	bne.n	80081be <HAL_PCD_EP_DB_Transmit+0xc4>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	633b      	str	r3, [r7, #48]	@ 0x30
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800817e:	b29b      	uxth	r3, r3
 8008180:	461a      	mov	r2, r3
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	4413      	add	r3, r2
 8008186:	633b      	str	r3, [r7, #48]	@ 0x30
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	00da      	lsls	r2, r3, #3
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	4413      	add	r3, r2
 8008192:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a6:	801a      	strh	r2, [r3, #0]
 80081a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	e01a      	b.n	80081f4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d116      	bne.n	80081f4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081da:	4413      	add	r3, r2
 80081dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	00da      	lsls	r2, r3, #3
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	4413      	add	r3, r2
 80081e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	2200      	movs	r2, #0
 80081f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d126      	bne.n	8008250 <HAL_PCD_EP_DB_Transmit+0x156>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	623b      	str	r3, [r7, #32]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008210:	b29b      	uxth	r3, r3
 8008212:	461a      	mov	r2, r3
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	4413      	add	r3, r2
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	00da      	lsls	r2, r3, #3
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	4413      	add	r3, r2
 8008224:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008234:	b29a      	uxth	r2, r3
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008248:	b29a      	uxth	r2, r3
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	801a      	strh	r2, [r3, #0]
 800824e:	e017      	b.n	8008280 <HAL_PCD_EP_DB_Transmit+0x186>
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d113      	bne.n	8008280 <HAL_PCD_EP_DB_Transmit+0x186>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	4413      	add	r3, r2
 8008268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	00da      	lsls	r2, r3, #3
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	4413      	add	r3, r2
 8008274:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	2200      	movs	r2, #0
 800827e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	78db      	ldrb	r3, [r3, #3]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d123      	bne.n	80082d0 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800829e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082a2:	837b      	strh	r3, [r7, #26]
 80082a4:	8b7b      	ldrh	r3, [r7, #26]
 80082a6:	f083 0320 	eor.w	r3, r3, #32
 80082aa:	837b      	strh	r3, [r7, #26]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	8b7b      	ldrh	r3, [r7, #26]
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	4619      	mov	r1, r3
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f008 fb25 	bl	8010926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01f      	beq.n	8008326 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008300:	833b      	strh	r3, [r7, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	441a      	add	r2, r3
 8008310:	8b3b      	ldrh	r3, [r7, #24]
 8008312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800831a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800831e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008322:	b29b      	uxth	r3, r3
 8008324:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	e31f      	b.n	800896a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d021      	beq.n	8008378 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800834a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	441a      	add	r2, r3
 8008360:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800836c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008374:	b29b      	uxth	r3, r3
 8008376:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800837e:	2b01      	cmp	r3, #1
 8008380:	f040 82ca 	bne.w	8008918 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800838c:	441a      	add	r2, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	69da      	ldr	r2, [r3, #28]
 8008396:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800839a:	441a      	add	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6a1a      	ldr	r2, [r3, #32]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d309      	bcc.n	80083c0 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6a1a      	ldr	r2, [r3, #32]
 80083b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083b8:	1ad2      	subs	r2, r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	621a      	str	r2, [r3, #32]
 80083be:	e015      	b.n	80083ec <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d107      	bne.n	80083d8 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80083c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083cc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083d6:	e009      	b.n	80083ec <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2200      	movs	r2, #0
 80083ea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d15f      	bne.n	80084b4 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008402:	b29b      	uxth	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008408:	4413      	add	r3, r2
 800840a:	643b      	str	r3, [r7, #64]	@ 0x40
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	00da      	lsls	r2, r3, #3
 8008412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008414:	4413      	add	r3, r2
 8008416:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008426:	b29a      	uxth	r2, r3
 8008428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <HAL_PCD_EP_DB_Transmit+0x34e>
 8008432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008440:	b29a      	uxth	r2, r3
 8008442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	e051      	b.n	80084ec <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800844a:	2b3e      	cmp	r3, #62	@ 0x3e
 800844c:	d816      	bhi.n	800847c <HAL_PCD_EP_DB_Transmit+0x382>
 800844e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	653b      	str	r3, [r7, #80]	@ 0x50
 8008454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_PCD_EP_DB_Transmit+0x36a>
 800845e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008460:	3301      	adds	r3, #1
 8008462:	653b      	str	r3, [r7, #80]	@ 0x50
 8008464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29a      	uxth	r2, r3
 800846a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800846c:	b29b      	uxth	r3, r3
 800846e:	029b      	lsls	r3, r3, #10
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e037      	b.n	80084ec <HAL_PCD_EP_DB_Transmit+0x3f2>
 800847c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	653b      	str	r3, [r7, #80]	@ 0x50
 8008482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008484:	f003 031f 	and.w	r3, r3, #31
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <HAL_PCD_EP_DB_Transmit+0x398>
 800848c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800848e:	3b01      	subs	r3, #1
 8008490:	653b      	str	r3, [r7, #80]	@ 0x50
 8008492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29a      	uxth	r2, r3
 8008498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800849a:	b29b      	uxth	r3, r3
 800849c:	029b      	lsls	r3, r3, #10
 800849e:	b29b      	uxth	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	e01b      	b.n	80084ec <HAL_PCD_EP_DB_Transmit+0x3f2>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d117      	bne.n	80084ec <HAL_PCD_EP_DB_Transmit+0x3f2>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d0:	4413      	add	r3, r2
 80084d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00da      	lsls	r2, r3, #3
 80084da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084dc:	4413      	add	r3, r2
 80084de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084ea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6959      	ldr	r1, [r3, #20]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	891a      	ldrh	r2, [r3, #8]
 80084f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f006 fb29 	bl	800eb52 <USB_WritePMA>
 8008500:	e20a      	b.n	8008918 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800850a:	b29b      	uxth	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4413      	add	r3, r2
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	4413      	add	r3, r2
 800851c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008526:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008532:	429a      	cmp	r2, r3
 8008534:	d307      	bcc.n	8008546 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	619a      	str	r2, [r3, #24]
 8008544:	e002      	b.n	800854c <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 80f6 	bne.w	8008742 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d126      	bne.n	80085ac <HAL_PCD_EP_DB_Transmit+0x4b2>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	677b      	str	r3, [r7, #116]	@ 0x74
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800856c:	b29b      	uxth	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008572:	4413      	add	r3, r2
 8008574:	677b      	str	r3, [r7, #116]	@ 0x74
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	00da      	lsls	r2, r3, #3
 800857c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800857e:	4413      	add	r3, r2
 8008580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008584:	673b      	str	r3, [r7, #112]	@ 0x70
 8008586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008590:	b29a      	uxth	r2, r3
 8008592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e01a      	b.n	80085e2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d116      	bne.n	80085e2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085c8:	4413      	add	r3, r2
 80085ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	00da      	lsls	r2, r3, #3
 80085d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085d4:	4413      	add	r3, r2
 80085d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085de:	2200      	movs	r2, #0
 80085e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d12f      	bne.n	8008652 <HAL_PCD_EP_DB_Transmit+0x558>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008602:	b29b      	uxth	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800860a:	4413      	add	r3, r2
 800860c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	00da      	lsls	r2, r3, #3
 8008616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800861a:	4413      	add	r3, r2
 800861c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008648:	b29a      	uxth	r2, r3
 800864a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	e01c      	b.n	800868c <HAL_PCD_EP_DB_Transmit+0x592>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d118      	bne.n	800868c <HAL_PCD_EP_DB_Transmit+0x592>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008662:	b29b      	uxth	r3, r3
 8008664:	461a      	mov	r2, r3
 8008666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800866a:	4413      	add	r3, r2
 800866c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	00da      	lsls	r2, r3, #3
 8008676:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800867a:	4413      	add	r3, r2
 800867c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008688:	2200      	movs	r2, #0
 800868a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b02      	cmp	r3, #2
 8008692:	d127      	bne.n	80086e4 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ae:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80086b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80086b6:	f083 0320 	eor.w	r3, r3, #32
 80086ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	441a      	add	r2, r3
 80086cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f008 f91b 	bl	8010926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d121      	bne.n	800873e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29b      	uxth	r3, r3
 800870c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008714:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	441a      	add	r2, r3
 8008726:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e113      	b.n	800896a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d121      	bne.n	8008790 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008766:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	441a      	add	r2, r3
 8008778:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800877c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800878c:	b29b      	uxth	r3, r3
 800878e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008796:	2b01      	cmp	r3, #1
 8008798:	f040 80be 	bne.w	8008918 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087a4:	441a      	add	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	69da      	ldr	r2, [r3, #28]
 80087ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087b2:	441a      	add	r2, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d309      	bcc.n	80087d8 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	621a      	str	r2, [r3, #32]
 80087d6:	e015      	b.n	8008804 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d107      	bne.n	80087f0 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80087e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087e4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80087ee:	e009      	b.n	8008804 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2200      	movs	r2, #0
 80087fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d15f      	bne.n	80088d2 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008820:	b29b      	uxth	r3, r3
 8008822:	461a      	mov	r2, r3
 8008824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008826:	4413      	add	r3, r2
 8008828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008832:	4413      	add	r3, r2
 8008834:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008838:	667b      	str	r3, [r7, #100]	@ 0x64
 800883a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008844:	b29a      	uxth	r2, r3
 8008846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <HAL_PCD_EP_DB_Transmit+0x76c>
 8008850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885e:	b29a      	uxth	r2, r3
 8008860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	e04e      	b.n	8008904 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008868:	2b3e      	cmp	r3, #62	@ 0x3e
 800886a:	d816      	bhi.n	800889a <HAL_PCD_EP_DB_Transmit+0x7a0>
 800886c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	663b      	str	r3, [r7, #96]	@ 0x60
 8008872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <HAL_PCD_EP_DB_Transmit+0x788>
 800887c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800887e:	3301      	adds	r3, #1
 8008880:	663b      	str	r3, [r7, #96]	@ 0x60
 8008882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800888a:	b29b      	uxth	r3, r3
 800888c:	029b      	lsls	r3, r3, #10
 800888e:	b29b      	uxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e034      	b.n	8008904 <HAL_PCD_EP_DB_Transmit+0x80a>
 800889a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	663b      	str	r3, [r7, #96]	@ 0x60
 80088a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088a2:	f003 031f 	and.w	r3, r3, #31
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80088aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088ac:	3b01      	subs	r3, #1
 80088ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80088b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	029b      	lsls	r3, r3, #10
 80088bc:	b29b      	uxth	r3, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ce:	801a      	strh	r2, [r3, #0]
 80088d0:	e018      	b.n	8008904 <HAL_PCD_EP_DB_Transmit+0x80a>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d114      	bne.n	8008904 <HAL_PCD_EP_DB_Transmit+0x80a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088e8:	4413      	add	r3, r2
 80088ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	00da      	lsls	r2, r3, #3
 80088f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088f4:	4413      	add	r3, r2
 80088f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088fe:	b29a      	uxth	r2, r3
 8008900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008902:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6959      	ldr	r1, [r3, #20]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	895a      	ldrh	r2, [r3, #10]
 8008910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008912:	b29b      	uxth	r3, r3
 8008914:	f006 f91d 	bl	800eb52 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29b      	uxth	r3, r3
 800892a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800892e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008932:	82fb      	strh	r3, [r7, #22]
 8008934:	8afb      	ldrh	r3, [r7, #22]
 8008936:	f083 0310 	eor.w	r3, r3, #16
 800893a:	82fb      	strh	r3, [r7, #22]
 800893c:	8afb      	ldrh	r3, [r7, #22]
 800893e:	f083 0320 	eor.w	r3, r3, #32
 8008942:	82fb      	strh	r3, [r7, #22]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	441a      	add	r2, r3
 8008952:	8afb      	ldrh	r3, [r7, #22]
 8008954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800895c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008964:	b29b      	uxth	r3, r3
 8008966:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3798      	adds	r7, #152	@ 0x98
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008972:	b480      	push	{r7}
 8008974:	b087      	sub	sp, #28
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	607b      	str	r3, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	817b      	strh	r3, [r7, #10]
 8008980:	4613      	mov	r3, r2
 8008982:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008984:	897b      	ldrh	r3, [r7, #10]
 8008986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008990:	897b      	ldrh	r3, [r7, #10]
 8008992:	f003 0207 	and.w	r2, r3, #7
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	3310      	adds	r3, #16
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e009      	b.n	80089bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80089a8:	897a      	ldrh	r2, [r7, #10]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80089bc:	893b      	ldrh	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d107      	bne.n	80089d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2200      	movs	r2, #0
 80089c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	80da      	strh	r2, [r3, #6]
 80089d0:	e00b      	b.n	80089ea <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2201      	movs	r2, #1
 80089d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f043 0302 	orr.w	r3, r3, #2
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d141      	bne.n	8008ade <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a66:	d131      	bne.n	8008acc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a68:	4b47      	ldr	r3, [pc, #284]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6e:	4a46      	ldr	r2, [pc, #280]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a78:	4b43      	ldr	r3, [pc, #268]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a80:	4a41      	ldr	r2, [pc, #260]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a88:	4b40      	ldr	r3, [pc, #256]	@ (8008b8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2232      	movs	r2, #50	@ 0x32
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	4a3f      	ldr	r2, [pc, #252]	@ (8008b90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a94:	fba2 2303 	umull	r2, r3, r2, r3
 8008a98:	0c9b      	lsrs	r3, r3, #18
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a9e:	e002      	b.n	8008aa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aa6:	4b38      	ldr	r3, [pc, #224]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ab2:	d102      	bne.n	8008aba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f2      	bne.n	8008aa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008aba:	4b33      	ldr	r3, [pc, #204]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac6:	d158      	bne.n	8008b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e057      	b.n	8008b7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008acc:	4b2e      	ldr	r3, [pc, #184]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008adc:	e04d      	b.n	8008b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae4:	d141      	bne.n	8008b6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ae6:	4b28      	ldr	r3, [pc, #160]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008af2:	d131      	bne.n	8008b58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008af4:	4b24      	ldr	r3, [pc, #144]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008afa:	4a23      	ldr	r2, [pc, #140]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b04:	4b20      	ldr	r3, [pc, #128]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b14:	4b1d      	ldr	r3, [pc, #116]	@ (8008b8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2232      	movs	r2, #50	@ 0x32
 8008b1a:	fb02 f303 	mul.w	r3, r2, r3
 8008b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8008b90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b20:	fba2 2303 	umull	r2, r3, r2, r3
 8008b24:	0c9b      	lsrs	r3, r3, #18
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b2a:	e002      	b.n	8008b32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b32:	4b15      	ldr	r3, [pc, #84]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b3e:	d102      	bne.n	8008b46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f2      	bne.n	8008b2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b46:	4b10      	ldr	r3, [pc, #64]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b52:	d112      	bne.n	8008b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e011      	b.n	8008b7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b58:	4b0b      	ldr	r3, [pc, #44]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b68:	e007      	b.n	8008b7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b6a:	4b07      	ldr	r3, [pc, #28]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b72:	4a05      	ldr	r2, [pc, #20]	@ (8008b88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	40007000 	.word	0x40007000
 8008b8c:	2000020c 	.word	0x2000020c
 8008b90:	431bde83 	.word	0x431bde83

08008b94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008b98:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4a04      	ldr	r2, [pc, #16]	@ (8008bb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ba2:	6093      	str	r3, [r2, #8]
}
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40007000 	.word	0x40007000

08008bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e2fe      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d075      	beq.n	8008cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd2:	4b97      	ldr	r3, [pc, #604]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 030c 	and.w	r3, r3, #12
 8008bda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bdc:	4b94      	ldr	r3, [pc, #592]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b0c      	cmp	r3, #12
 8008bea:	d102      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x3e>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d002      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x44>
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d10b      	bne.n	8008c10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d05b      	beq.n	8008cbc <HAL_RCC_OscConfig+0x108>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d157      	bne.n	8008cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e2d9      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c18:	d106      	bne.n	8008c28 <HAL_RCC_OscConfig+0x74>
 8008c1a:	4b85      	ldr	r3, [pc, #532]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a84      	ldr	r2, [pc, #528]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	e01d      	b.n	8008c64 <HAL_RCC_OscConfig+0xb0>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c30:	d10c      	bne.n	8008c4c <HAL_RCC_OscConfig+0x98>
 8008c32:	4b7f      	ldr	r3, [pc, #508]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a7e      	ldr	r2, [pc, #504]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a7b      	ldr	r2, [pc, #492]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	e00b      	b.n	8008c64 <HAL_RCC_OscConfig+0xb0>
 8008c4c:	4b78      	ldr	r3, [pc, #480]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a77      	ldr	r2, [pc, #476]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	4b75      	ldr	r3, [pc, #468]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a74      	ldr	r2, [pc, #464]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d013      	beq.n	8008c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c6c:	f7fb f96e 	bl	8003f4c <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c74:	f7fb f96a 	bl	8003f4c <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b64      	cmp	r3, #100	@ 0x64
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e29e      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c86:	4b6a      	ldr	r3, [pc, #424]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f0      	beq.n	8008c74 <HAL_RCC_OscConfig+0xc0>
 8008c92:	e014      	b.n	8008cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c94:	f7fb f95a 	bl	8003f4c <HAL_GetTick>
 8008c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c9c:	f7fb f956 	bl	8003f4c <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b64      	cmp	r3, #100	@ 0x64
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e28a      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008cae:	4b60      	ldr	r3, [pc, #384]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f0      	bne.n	8008c9c <HAL_RCC_OscConfig+0xe8>
 8008cba:	e000      	b.n	8008cbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d075      	beq.n	8008db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cca:	4b59      	ldr	r3, [pc, #356]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 030c 	and.w	r3, r3, #12
 8008cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cd4:	4b56      	ldr	r3, [pc, #344]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b0c      	cmp	r3, #12
 8008ce2:	d102      	bne.n	8008cea <HAL_RCC_OscConfig+0x136>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d002      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x13c>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d11f      	bne.n	8008d30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_RCC_OscConfig+0x154>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e25d      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d08:	4b49      	ldr	r3, [pc, #292]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	4946      	ldr	r1, [pc, #280]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d1c:	4b45      	ldr	r3, [pc, #276]	@ (8008e34 <HAL_RCC_OscConfig+0x280>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fb f8c7 	bl	8003eb4 <HAL_InitTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d043      	beq.n	8008db4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e249      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d023      	beq.n	8008d80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d38:	4b3d      	ldr	r3, [pc, #244]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fb f902 	bl	8003f4c <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d4c:	f7fb f8fe 	bl	8003f4c <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e232      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d5e:	4b34      	ldr	r3, [pc, #208]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f0      	beq.n	8008d4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d6a:	4b31      	ldr	r3, [pc, #196]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	061b      	lsls	r3, r3, #24
 8008d78:	492d      	ldr	r1, [pc, #180]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	604b      	str	r3, [r1, #4]
 8008d7e:	e01a      	b.n	8008db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d80:	4b2b      	ldr	r3, [pc, #172]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a2a      	ldr	r2, [pc, #168]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008d86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8c:	f7fb f8de 	bl	8003f4c <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d92:	e008      	b.n	8008da6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d94:	f7fb f8da 	bl	8003f4c <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e20e      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008da6:	4b22      	ldr	r3, [pc, #136]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f0      	bne.n	8008d94 <HAL_RCC_OscConfig+0x1e0>
 8008db2:	e000      	b.n	8008db6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008db4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d041      	beq.n	8008e46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01c      	beq.n	8008e04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dca:	4b19      	ldr	r3, [pc, #100]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dd0:	4a17      	ldr	r2, [pc, #92]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dda:	f7fb f8b7 	bl	8003f4c <HAL_GetTick>
 8008dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008de0:	e008      	b.n	8008df4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008de2:	f7fb f8b3 	bl	8003f4c <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e1e7      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008df4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0ef      	beq.n	8008de2 <HAL_RCC_OscConfig+0x22e>
 8008e02:	e020      	b.n	8008e46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e04:	4b0a      	ldr	r3, [pc, #40]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e0a:	4a09      	ldr	r2, [pc, #36]	@ (8008e30 <HAL_RCC_OscConfig+0x27c>)
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e14:	f7fb f89a 	bl	8003f4c <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e1a:	e00d      	b.n	8008e38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e1c:	f7fb f896 	bl	8003f4c <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d906      	bls.n	8008e38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e1ca      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
 8008e2e:	bf00      	nop
 8008e30:	40021000 	.word	0x40021000
 8008e34:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e38:	4b8c      	ldr	r3, [pc, #560]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1ea      	bne.n	8008e1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80a6 	beq.w	8008fa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e54:	2300      	movs	r3, #0
 8008e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e58:	4b84      	ldr	r3, [pc, #528]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_RCC_OscConfig+0x2b4>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <HAL_RCC_OscConfig+0x2b6>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00d      	beq.n	8008e8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e72:	4a7e      	ldr	r2, [pc, #504]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e86:	2301      	movs	r3, #1
 8008e88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e8a:	4b79      	ldr	r3, [pc, #484]	@ (8009070 <HAL_RCC_OscConfig+0x4bc>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d118      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e96:	4b76      	ldr	r3, [pc, #472]	@ (8009070 <HAL_RCC_OscConfig+0x4bc>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a75      	ldr	r2, [pc, #468]	@ (8009070 <HAL_RCC_OscConfig+0x4bc>)
 8008e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ea2:	f7fb f853 	bl	8003f4c <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eaa:	f7fb f84f 	bl	8003f4c <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e183      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8009070 <HAL_RCC_OscConfig+0x4bc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d108      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x32e>
 8008ed0:	4b66      	ldr	r3, [pc, #408]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ed6:	4a65      	ldr	r2, [pc, #404]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ee0:	e024      	b.n	8008f2c <HAL_RCC_OscConfig+0x378>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	2b05      	cmp	r3, #5
 8008ee8:	d110      	bne.n	8008f0c <HAL_RCC_OscConfig+0x358>
 8008eea:	4b60      	ldr	r3, [pc, #384]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008ef2:	f043 0304 	orr.w	r3, r3, #4
 8008ef6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008efa:	4b5c      	ldr	r3, [pc, #368]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f00:	4a5a      	ldr	r2, [pc, #360]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f02:	f043 0301 	orr.w	r3, r3, #1
 8008f06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f0a:	e00f      	b.n	8008f2c <HAL_RCC_OscConfig+0x378>
 8008f0c:	4b57      	ldr	r3, [pc, #348]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f12:	4a56      	ldr	r2, [pc, #344]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f1c:	4b53      	ldr	r3, [pc, #332]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f22:	4a52      	ldr	r2, [pc, #328]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f24:	f023 0304 	bic.w	r3, r3, #4
 8008f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d016      	beq.n	8008f62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f34:	f7fb f80a 	bl	8003f4c <HAL_GetTick>
 8008f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f3a:	e00a      	b.n	8008f52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f3c:	f7fb f806 	bl	8003f4c <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e138      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f52:	4b46      	ldr	r3, [pc, #280]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ed      	beq.n	8008f3c <HAL_RCC_OscConfig+0x388>
 8008f60:	e015      	b.n	8008f8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f62:	f7fa fff3 	bl	8003f4c <HAL_GetTick>
 8008f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f68:	e00a      	b.n	8008f80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f6a:	f7fa ffef 	bl	8003f4c <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d901      	bls.n	8008f80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e121      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f80:	4b3a      	ldr	r3, [pc, #232]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1ed      	bne.n	8008f6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f8e:	7ffb      	ldrb	r3, [r7, #31]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d105      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f94:	4b35      	ldr	r3, [pc, #212]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f98:	4a34      	ldr	r2, [pc, #208]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d03c      	beq.n	8009026 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01c      	beq.n	8008fee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fba:	4a2c      	ldr	r2, [pc, #176]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008fbc:	f043 0301 	orr.w	r3, r3, #1
 8008fc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc4:	f7fa ffc2 	bl	8003f4c <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fcc:	f7fa ffbe 	bl	8003f4c <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e0f2      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fde:	4b23      	ldr	r3, [pc, #140]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0ef      	beq.n	8008fcc <HAL_RCC_OscConfig+0x418>
 8008fec:	e01b      	b.n	8009026 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fee:	4b1f      	ldr	r3, [pc, #124]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ffe:	f7fa ffa5 	bl	8003f4c <HAL_GetTick>
 8009002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009006:	f7fa ffa1 	bl	8003f4c <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e0d5      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009018:	4b14      	ldr	r3, [pc, #80]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 800901a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1ef      	bne.n	8009006 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80c9 	beq.w	80091c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009030:	4b0e      	ldr	r3, [pc, #56]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 030c 	and.w	r3, r3, #12
 8009038:	2b0c      	cmp	r3, #12
 800903a:	f000 8083 	beq.w	8009144 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d15e      	bne.n	8009104 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a08      	ldr	r2, [pc, #32]	@ (800906c <HAL_RCC_OscConfig+0x4b8>)
 800904c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009052:	f7fa ff7b 	bl	8003f4c <HAL_GetTick>
 8009056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009058:	e00c      	b.n	8009074 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800905a:	f7fa ff77 	bl	8003f4c <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d905      	bls.n	8009074 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e0ab      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
 800906c:	40021000 	.word	0x40021000
 8009070:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009074:	4b55      	ldr	r3, [pc, #340]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1ec      	bne.n	800905a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009080:	4b52      	ldr	r3, [pc, #328]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	4b52      	ldr	r3, [pc, #328]	@ (80091d0 <HAL_RCC_OscConfig+0x61c>)
 8009086:	4013      	ands	r3, r2
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6a11      	ldr	r1, [r2, #32]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009090:	3a01      	subs	r2, #1
 8009092:	0112      	lsls	r2, r2, #4
 8009094:	4311      	orrs	r1, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800909a:	0212      	lsls	r2, r2, #8
 800909c:	4311      	orrs	r1, r2
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090a2:	0852      	lsrs	r2, r2, #1
 80090a4:	3a01      	subs	r2, #1
 80090a6:	0552      	lsls	r2, r2, #21
 80090a8:	4311      	orrs	r1, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80090ae:	0852      	lsrs	r2, r2, #1
 80090b0:	3a01      	subs	r2, #1
 80090b2:	0652      	lsls	r2, r2, #25
 80090b4:	4311      	orrs	r1, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80090ba:	06d2      	lsls	r2, r2, #27
 80090bc:	430a      	orrs	r2, r1
 80090be:	4943      	ldr	r1, [pc, #268]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090c4:	4b41      	ldr	r3, [pc, #260]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a40      	ldr	r2, [pc, #256]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 80090ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090d0:	4b3e      	ldr	r3, [pc, #248]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	4a3d      	ldr	r2, [pc, #244]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 80090d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090dc:	f7fa ff36 	bl	8003f4c <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090e4:	f7fa ff32 	bl	8003f4c <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e066      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090f6:	4b35      	ldr	r3, [pc, #212]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0x530>
 8009102:	e05e      	b.n	80091c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009104:	4b31      	ldr	r3, [pc, #196]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a30      	ldr	r2, [pc, #192]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 800910a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800910e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009110:	f7fa ff1c 	bl	8003f4c <HAL_GetTick>
 8009114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009116:	e008      	b.n	800912a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009118:	f7fa ff18 	bl	8003f4c <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e04c      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800912a:	4b28      	ldr	r3, [pc, #160]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1f0      	bne.n	8009118 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009136:	4b25      	ldr	r3, [pc, #148]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	4924      	ldr	r1, [pc, #144]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 800913c:	4b25      	ldr	r3, [pc, #148]	@ (80091d4 <HAL_RCC_OscConfig+0x620>)
 800913e:	4013      	ands	r3, r2
 8009140:	60cb      	str	r3, [r1, #12]
 8009142:	e03e      	b.n	80091c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e039      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009150:	4b1e      	ldr	r3, [pc, #120]	@ (80091cc <HAL_RCC_OscConfig+0x618>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f003 0203 	and.w	r2, r3, #3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	429a      	cmp	r2, r3
 8009162:	d12c      	bne.n	80091be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916e:	3b01      	subs	r3, #1
 8009170:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009172:	429a      	cmp	r2, r3
 8009174:	d123      	bne.n	80091be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009180:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009182:	429a      	cmp	r2, r3
 8009184:	d11b      	bne.n	80091be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009192:	429a      	cmp	r2, r3
 8009194:	d113      	bne.n	80091be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	3b01      	subs	r3, #1
 80091a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d109      	bne.n	80091be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b4:	085b      	lsrs	r3, r3, #1
 80091b6:	3b01      	subs	r3, #1
 80091b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d001      	beq.n	80091c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e000      	b.n	80091c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	40021000 	.word	0x40021000
 80091d0:	019f800c 	.word	0x019f800c
 80091d4:	feeefffc 	.word	0xfeeefffc

080091d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80091e2:	2300      	movs	r3, #0
 80091e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e11e      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091f0:	4b91      	ldr	r3, [pc, #580]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d910      	bls.n	8009220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091fe:	4b8e      	ldr	r3, [pc, #568]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f023 020f 	bic.w	r2, r3, #15
 8009206:	498c      	ldr	r1, [pc, #560]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	4313      	orrs	r3, r2
 800920c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800920e:	4b8a      	ldr	r3, [pc, #552]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d001      	beq.n	8009220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e106      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d073      	beq.n	8009314 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d129      	bne.n	8009288 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009234:	4b81      	ldr	r3, [pc, #516]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0f4      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009244:	f000 f9ca 	bl	80095dc <RCC_GetSysClockFreqFromPLLSource>
 8009248:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	4a7c      	ldr	r2, [pc, #496]	@ (8009440 <HAL_RCC_ClockConfig+0x268>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d93f      	bls.n	80092d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009252:	4b7a      	ldr	r3, [pc, #488]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009266:	2b00      	cmp	r3, #0
 8009268:	d033      	beq.n	80092d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800926e:	2b00      	cmp	r3, #0
 8009270:	d12f      	bne.n	80092d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009272:	4b72      	ldr	r3, [pc, #456]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800927a:	4a70      	ldr	r2, [pc, #448]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 800927c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009280:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009282:	2380      	movs	r3, #128	@ 0x80
 8009284:	617b      	str	r3, [r7, #20]
 8009286:	e024      	b.n	80092d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d107      	bne.n	80092a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009290:	4b6a      	ldr	r3, [pc, #424]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e0c6      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092a0:	4b66      	ldr	r3, [pc, #408]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0be      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80092b0:	f000 f8ce 	bl	8009450 <HAL_RCC_GetSysClockFreq>
 80092b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	4a61      	ldr	r2, [pc, #388]	@ (8009440 <HAL_RCC_ClockConfig+0x268>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d909      	bls.n	80092d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80092be:	4b5f      	ldr	r3, [pc, #380]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092c6:	4a5d      	ldr	r2, [pc, #372]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80092c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092ce:	2380      	movs	r3, #128	@ 0x80
 80092d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092d2:	4b5a      	ldr	r3, [pc, #360]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f023 0203 	bic.w	r2, r3, #3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	4957      	ldr	r1, [pc, #348]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e4:	f7fa fe32 	bl	8003f4c <HAL_GetTick>
 80092e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ea:	e00a      	b.n	8009302 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092ec:	f7fa fe2e 	bl	8003f4c <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e095      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009302:	4b4e      	ldr	r3, [pc, #312]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f003 020c 	and.w	r2, r3, #12
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	429a      	cmp	r2, r3
 8009312:	d1eb      	bne.n	80092ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d023      	beq.n	8009368 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800932c:	4b43      	ldr	r3, [pc, #268]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	4a42      	ldr	r2, [pc, #264]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009332:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009336:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009344:	4b3d      	ldr	r3, [pc, #244]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800934c:	4a3b      	ldr	r2, [pc, #236]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 800934e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009352:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009354:	4b39      	ldr	r3, [pc, #228]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	4936      	ldr	r1, [pc, #216]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009362:	4313      	orrs	r3, r2
 8009364:	608b      	str	r3, [r1, #8]
 8009366:	e008      	b.n	800937a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b80      	cmp	r3, #128	@ 0x80
 800936c:	d105      	bne.n	800937a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800936e:	4b33      	ldr	r3, [pc, #204]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	4a32      	ldr	r2, [pc, #200]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 8009374:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009378:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800937a:	4b2f      	ldr	r3, [pc, #188]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	429a      	cmp	r2, r3
 8009386:	d21d      	bcs.n	80093c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009388:	4b2b      	ldr	r3, [pc, #172]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f023 020f 	bic.w	r2, r3, #15
 8009390:	4929      	ldr	r1, [pc, #164]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	4313      	orrs	r3, r2
 8009396:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009398:	f7fa fdd8 	bl	8003f4c <HAL_GetTick>
 800939c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800939e:	e00a      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093a0:	f7fa fdd4 	bl	8003f4c <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e03b      	b.n	800942e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093b6:	4b20      	ldr	r3, [pc, #128]	@ (8009438 <HAL_RCC_ClockConfig+0x260>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d1ed      	bne.n	80093a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d008      	beq.n	80093e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093d0:	4b1a      	ldr	r3, [pc, #104]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	4917      	ldr	r1, [pc, #92]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d009      	beq.n	8009402 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093ee:	4b13      	ldr	r3, [pc, #76]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	490f      	ldr	r1, [pc, #60]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009402:	f000 f825 	bl	8009450 <HAL_RCC_GetSysClockFreq>
 8009406:	4602      	mov	r2, r0
 8009408:	4b0c      	ldr	r3, [pc, #48]	@ (800943c <HAL_RCC_ClockConfig+0x264>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	091b      	lsrs	r3, r3, #4
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	490c      	ldr	r1, [pc, #48]	@ (8009444 <HAL_RCC_ClockConfig+0x26c>)
 8009414:	5ccb      	ldrb	r3, [r1, r3]
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	fa22 f303 	lsr.w	r3, r2, r3
 800941e:	4a0a      	ldr	r2, [pc, #40]	@ (8009448 <HAL_RCC_ClockConfig+0x270>)
 8009420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009422:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <HAL_RCC_ClockConfig+0x274>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f7fa fd44 	bl	8003eb4 <HAL_InitTick>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40022000 	.word	0x40022000
 800943c:	40021000 	.word	0x40021000
 8009440:	04c4b400 	.word	0x04c4b400
 8009444:	08022ebc 	.word	0x08022ebc
 8009448:	2000020c 	.word	0x2000020c
 800944c:	20000210 	.word	0x20000210

08009450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009456:	4b2c      	ldr	r3, [pc, #176]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 030c 	and.w	r3, r3, #12
 800945e:	2b04      	cmp	r3, #4
 8009460:	d102      	bne.n	8009468 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009462:	4b2a      	ldr	r3, [pc, #168]	@ (800950c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	e047      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009468:	4b27      	ldr	r3, [pc, #156]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 030c 	and.w	r3, r3, #12
 8009470:	2b08      	cmp	r3, #8
 8009472:	d102      	bne.n	800947a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009474:	4b26      	ldr	r3, [pc, #152]	@ (8009510 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009476:	613b      	str	r3, [r7, #16]
 8009478:	e03e      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800947a:	4b23      	ldr	r3, [pc, #140]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	2b0c      	cmp	r3, #12
 8009484:	d136      	bne.n	80094f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009486:	4b20      	ldr	r3, [pc, #128]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009490:	4b1d      	ldr	r3, [pc, #116]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	091b      	lsrs	r3, r3, #4
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	3301      	adds	r3, #1
 800949c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d10c      	bne.n	80094be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	4a16      	ldr	r2, [pc, #88]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ae:	68d2      	ldr	r2, [r2, #12]
 80094b0:	0a12      	lsrs	r2, r2, #8
 80094b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
 80094ba:	617b      	str	r3, [r7, #20]
      break;
 80094bc:	e00c      	b.n	80094d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094be:	4a13      	ldr	r2, [pc, #76]	@ (800950c <HAL_RCC_GetSysClockFreq+0xbc>)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	4a10      	ldr	r2, [pc, #64]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094c8:	68d2      	ldr	r2, [r2, #12]
 80094ca:	0a12      	lsrs	r2, r2, #8
 80094cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094d0:	fb02 f303 	mul.w	r3, r2, r3
 80094d4:	617b      	str	r3, [r7, #20]
      break;
 80094d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	0e5b      	lsrs	r3, r3, #25
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	3301      	adds	r3, #1
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f0:	613b      	str	r3, [r7, #16]
 80094f2:	e001      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094f8:	693b      	ldr	r3, [r7, #16]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40021000 	.word	0x40021000
 800950c:	00f42400 	.word	0x00f42400
 8009510:	007a1200 	.word	0x007a1200

08009514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009518:	4b03      	ldr	r3, [pc, #12]	@ (8009528 <HAL_RCC_GetHCLKFreq+0x14>)
 800951a:	681b      	ldr	r3, [r3, #0]
}
 800951c:	4618      	mov	r0, r3
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	2000020c 	.word	0x2000020c

0800952c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009530:	f7ff fff0 	bl	8009514 <HAL_RCC_GetHCLKFreq>
 8009534:	4602      	mov	r2, r0
 8009536:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	f003 0307 	and.w	r3, r3, #7
 8009540:	4904      	ldr	r1, [pc, #16]	@ (8009554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009542:	5ccb      	ldrb	r3, [r1, r3]
 8009544:	f003 031f 	and.w	r3, r3, #31
 8009548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800954c:	4618      	mov	r0, r3
 800954e:	bd80      	pop	{r7, pc}
 8009550:	40021000 	.word	0x40021000
 8009554:	08022ecc 	.word	0x08022ecc

08009558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800955c:	f7ff ffda 	bl	8009514 <HAL_RCC_GetHCLKFreq>
 8009560:	4602      	mov	r2, r0
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	0adb      	lsrs	r3, r3, #11
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	4904      	ldr	r1, [pc, #16]	@ (8009580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800956e:	5ccb      	ldrb	r3, [r1, r3]
 8009570:	f003 031f 	and.w	r3, r3, #31
 8009574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009578:	4618      	mov	r0, r3
 800957a:	bd80      	pop	{r7, pc}
 800957c:	40021000 	.word	0x40021000
 8009580:	08022ecc 	.word	0x08022ecc

08009584 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8009588:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <HAL_RCC_EnableCSS+0x1c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a04      	ldr	r2, [pc, #16]	@ (80095a0 <HAL_RCC_EnableCSS+0x1c>)
 800958e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009592:	6013      	str	r3, [r2, #0]
}
 8009594:	bf00      	nop
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	40021000 	.word	0x40021000

080095a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80095a8:	4b07      	ldr	r3, [pc, #28]	@ (80095c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095b4:	d105      	bne.n	80095c2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80095b6:	f000 f809 	bl	80095cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80095ba:	4b03      	ldr	r3, [pc, #12]	@ (80095c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80095bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095c0:	621a      	str	r2, [r3, #32]
  }
}
 80095c2:	bf00      	nop
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	40021000 	.word	0x40021000

080095cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095e2:	4b1e      	ldr	r3, [pc, #120]	@ (800965c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095ec:	4b1b      	ldr	r3, [pc, #108]	@ (800965c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	091b      	lsrs	r3, r3, #4
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	3301      	adds	r3, #1
 80095f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d10c      	bne.n	800961a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009600:	4a17      	ldr	r2, [pc, #92]	@ (8009660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	fbb2 f3f3 	udiv	r3, r2, r3
 8009608:	4a14      	ldr	r2, [pc, #80]	@ (800965c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800960a:	68d2      	ldr	r2, [r2, #12]
 800960c:	0a12      	lsrs	r2, r2, #8
 800960e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	617b      	str	r3, [r7, #20]
    break;
 8009618:	e00c      	b.n	8009634 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800961a:	4a12      	ldr	r2, [pc, #72]	@ (8009664 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009622:	4a0e      	ldr	r2, [pc, #56]	@ (800965c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009624:	68d2      	ldr	r2, [r2, #12]
 8009626:	0a12      	lsrs	r2, r2, #8
 8009628:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800962c:	fb02 f303 	mul.w	r3, r2, r3
 8009630:	617b      	str	r3, [r7, #20]
    break;
 8009632:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009634:	4b09      	ldr	r3, [pc, #36]	@ (800965c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	0e5b      	lsrs	r3, r3, #25
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	3301      	adds	r3, #1
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	fbb2 f3f3 	udiv	r3, r2, r3
 800964c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800964e:	687b      	ldr	r3, [r7, #4]
}
 8009650:	4618      	mov	r0, r3
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	40021000 	.word	0x40021000
 8009660:	007a1200 	.word	0x007a1200
 8009664:	00f42400 	.word	0x00f42400

08009668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009670:	2300      	movs	r3, #0
 8009672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009674:	2300      	movs	r3, #0
 8009676:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 8098 	beq.w	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009686:	2300      	movs	r3, #0
 8009688:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800968a:	4b43      	ldr	r3, [pc, #268]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800968c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10d      	bne.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009696:	4b40      	ldr	r3, [pc, #256]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800969a:	4a3f      	ldr	r2, [pc, #252]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800969c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80096a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096aa:	60bb      	str	r3, [r7, #8]
 80096ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096ae:	2301      	movs	r3, #1
 80096b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096b2:	4b3a      	ldr	r3, [pc, #232]	@ (800979c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a39      	ldr	r2, [pc, #228]	@ (800979c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096be:	f7fa fc45 	bl	8003f4c <HAL_GetTick>
 80096c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096c4:	e009      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096c6:	f7fa fc41 	bl	8003f4c <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d902      	bls.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	74fb      	strb	r3, [r7, #19]
        break;
 80096d8:	e005      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096da:	4b30      	ldr	r3, [pc, #192]	@ (800979c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0ef      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80096e6:	7cfb      	ldrb	r3, [r7, #19]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d159      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80096ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d01e      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	429a      	cmp	r2, r3
 8009706:	d019      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009708:	4b23      	ldr	r3, [pc, #140]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800970a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009714:	4b20      	ldr	r3, [pc, #128]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971a:	4a1f      	ldr	r2, [pc, #124]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800971c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009724:	4b1c      	ldr	r3, [pc, #112]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972a:	4a1b      	ldr	r2, [pc, #108]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800972c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009734:	4a18      	ldr	r2, [pc, #96]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d016      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009746:	f7fa fc01 	bl	8003f4c <HAL_GetTick>
 800974a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800974c:	e00b      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800974e:	f7fa fbfd 	bl	8003f4c <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800975c:	4293      	cmp	r3, r2
 800975e:	d902      	bls.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	74fb      	strb	r3, [r7, #19]
            break;
 8009764:	e006      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009766:	4b0c      	ldr	r3, [pc, #48]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0ec      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009774:	7cfb      	ldrb	r3, [r7, #19]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10b      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800977a:	4b07      	ldr	r3, [pc, #28]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800977c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009788:	4903      	ldr	r1, [pc, #12]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009790:	e008      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009792:	7cfb      	ldrb	r3, [r7, #19]
 8009794:	74bb      	strb	r3, [r7, #18]
 8009796:	e005      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009798:	40021000 	.word	0x40021000
 800979c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a0:	7cfb      	ldrb	r3, [r7, #19]
 80097a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097a4:	7c7b      	ldrb	r3, [r7, #17]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097aa:	4ba7      	ldr	r3, [pc, #668]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ae:	4aa6      	ldr	r2, [pc, #664]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00a      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097c2:	4ba1      	ldr	r3, [pc, #644]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c8:	f023 0203 	bic.w	r2, r3, #3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	499d      	ldr	r1, [pc, #628]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00a      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80097e4:	4b98      	ldr	r3, [pc, #608]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ea:	f023 020c 	bic.w	r2, r3, #12
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	4995      	ldr	r1, [pc, #596]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0304 	and.w	r3, r3, #4
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00a      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009806:	4b90      	ldr	r3, [pc, #576]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	498c      	ldr	r1, [pc, #560]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009816:	4313      	orrs	r3, r2
 8009818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00a      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009828:	4b87      	ldr	r3, [pc, #540]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800982a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800982e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	4984      	ldr	r1, [pc, #528]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009838:	4313      	orrs	r3, r2
 800983a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0310 	and.w	r3, r3, #16
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800984a:	4b7f      	ldr	r3, [pc, #508]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800984c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	497b      	ldr	r1, [pc, #492]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800985a:	4313      	orrs	r3, r2
 800985c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800986c:	4b76      	ldr	r3, [pc, #472]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009872:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	4973      	ldr	r1, [pc, #460]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800987c:	4313      	orrs	r3, r2
 800987e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800988e:	4b6e      	ldr	r3, [pc, #440]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	496a      	ldr	r1, [pc, #424]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00a      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098b0:	4b65      	ldr	r3, [pc, #404]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	4962      	ldr	r1, [pc, #392]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098d2:	4b5d      	ldr	r3, [pc, #372]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e0:	4959      	ldr	r1, [pc, #356]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098f4:	4b54      	ldr	r3, [pc, #336]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098fa:	f023 0203 	bic.w	r2, r3, #3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009902:	4951      	ldr	r1, [pc, #324]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009904:	4313      	orrs	r3, r2
 8009906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009916:	4b4c      	ldr	r3, [pc, #304]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009924:	4948      	ldr	r1, [pc, #288]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009926:	4313      	orrs	r3, r2
 8009928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009934:	2b00      	cmp	r3, #0
 8009936:	d015      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009938:	4b43      	ldr	r3, [pc, #268]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800993e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009946:	4940      	ldr	r1, [pc, #256]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009948:	4313      	orrs	r3, r2
 800994a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009956:	d105      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009958:	4b3b      	ldr	r3, [pc, #236]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	4a3a      	ldr	r2, [pc, #232]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800995e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009962:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800996c:	2b00      	cmp	r3, #0
 800996e:	d015      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009970:	4b35      	ldr	r3, [pc, #212]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009976:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997e:	4932      	ldr	r1, [pc, #200]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009980:	4313      	orrs	r3, r2
 8009982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800998e:	d105      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009990:	4b2d      	ldr	r3, [pc, #180]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	4a2c      	ldr	r2, [pc, #176]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800999a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d015      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099a8:	4b27      	ldr	r3, [pc, #156]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b6:	4924      	ldr	r1, [pc, #144]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099b8:	4313      	orrs	r3, r2
 80099ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099c6:	d105      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d015      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099e0:	4b19      	ldr	r3, [pc, #100]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ee:	4916      	ldr	r1, [pc, #88]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099fe:	d105      	bne.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a00:	4b11      	ldr	r3, [pc, #68]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a10      	ldr	r2, [pc, #64]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d019      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a18:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a26:	4908      	ldr	r1, [pc, #32]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a36:	d109      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a38:	4b03      	ldr	r3, [pc, #12]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	4a02      	ldr	r2, [pc, #8]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a42:	60d3      	str	r3, [r2, #12]
 8009a44:	e002      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a46:	bf00      	nop
 8009a48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d015      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a58:	4b29      	ldr	r3, [pc, #164]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a66:	4926      	ldr	r1, [pc, #152]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a76:	d105      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a78:	4b21      	ldr	r3, [pc, #132]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a20      	ldr	r2, [pc, #128]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d015      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009a90:	4b1b      	ldr	r3, [pc, #108]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a9e:	4918      	ldr	r1, [pc, #96]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aae:	d105      	bne.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ab0:	4b13      	ldr	r3, [pc, #76]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	4a12      	ldr	r2, [pc, #72]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d015      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ad6:	490a      	ldr	r1, [pc, #40]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ae6:	d105      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ae8:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	4a04      	ldr	r2, [pc, #16]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	40021000 	.word	0x40021000

08009b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e09d      	b.n	8009c52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d108      	bne.n	8009b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b26:	d009      	beq.n	8009b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	61da      	str	r2, [r3, #28]
 8009b2e:	e005      	b.n	8009b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7f9 fd32 	bl	80035c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b7c:	d902      	bls.n	8009b84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	e002      	b.n	8009b8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009b92:	d007      	beq.n	8009ba4 <HAL_SPI_Init+0xa0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b9c:	d002      	beq.n	8009ba4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be6:	ea42 0103 	orr.w	r1, r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	0c1b      	lsrs	r3, r3, #16
 8009c00:	f003 0204 	and.w	r2, r3, #4
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c12:	f003 0308 	and.w	r3, r3, #8
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c20:	ea42 0103 	orr.w	r1, r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69da      	ldr	r2, [r3, #28]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	603b      	str	r3, [r7, #0]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c6a:	f7fa f96f 	bl	8003f4c <HAL_GetTick>
 8009c6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d001      	beq.n	8009c84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009c80:	2302      	movs	r3, #2
 8009c82:	e15c      	b.n	8009f3e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d002      	beq.n	8009c90 <HAL_SPI_Transmit+0x36>
 8009c8a:	88fb      	ldrh	r3, [r7, #6]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e154      	b.n	8009f3e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_SPI_Transmit+0x48>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e14d      	b.n	8009f3e <HAL_SPI_Transmit+0x2e4>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2203      	movs	r2, #3
 8009cae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	88fa      	ldrh	r2, [r7, #6]
 8009cc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	88fa      	ldrh	r2, [r7, #6]
 8009cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cf4:	d10f      	bne.n	8009d16 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d007      	beq.n	8009d34 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d3c:	d952      	bls.n	8009de4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <HAL_SPI_Transmit+0xf2>
 8009d46:	8b7b      	ldrh	r3, [r7, #26]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d145      	bne.n	8009dd8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d50:	881a      	ldrh	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	1c9a      	adds	r2, r3, #2
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d70:	e032      	b.n	8009dd8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d112      	bne.n	8009da6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	881a      	ldrh	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d90:	1c9a      	adds	r2, r3, #2
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009da4:	e018      	b.n	8009dd8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009da6:	f7fa f8d1 	bl	8003f4c <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d803      	bhi.n	8009dbe <HAL_SPI_Transmit+0x164>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbc:	d102      	bne.n	8009dc4 <HAL_SPI_Transmit+0x16a>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e0b2      	b.n	8009f3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1c7      	bne.n	8009d72 <HAL_SPI_Transmit+0x118>
 8009de2:	e083      	b.n	8009eec <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <HAL_SPI_Transmit+0x198>
 8009dec:	8b7b      	ldrh	r3, [r7, #26]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d177      	bne.n	8009ee2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d912      	bls.n	8009e22 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	881a      	ldrh	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0c:	1c9a      	adds	r2, r3, #2
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	3b02      	subs	r3, #2
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e20:	e05f      	b.n	8009ee2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	330c      	adds	r3, #12
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3b01      	subs	r3, #1
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009e48:	e04b      	b.n	8009ee2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d12b      	bne.n	8009eb0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d912      	bls.n	8009e88 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e66:	881a      	ldrh	r2, [r3, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e72:	1c9a      	adds	r2, r3, #2
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	3b02      	subs	r3, #2
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e86:	e02c      	b.n	8009ee2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	330c      	adds	r3, #12
 8009e92:	7812      	ldrb	r2, [r2, #0]
 8009e94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009eae:	e018      	b.n	8009ee2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eb0:	f7fa f84c 	bl	8003f4c <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d803      	bhi.n	8009ec8 <HAL_SPI_Transmit+0x26e>
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d102      	bne.n	8009ece <HAL_SPI_Transmit+0x274>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e02d      	b.n	8009f3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1ae      	bne.n	8009e4a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 fad5 	bl	800a4a0 <SPI_EndRxTxTransaction>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2220      	movs	r2, #32
 8009f00:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3720      	adds	r7, #32
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d001      	beq.n	8009f66 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009f62:	2302      	movs	r3, #2
 8009f64:	e0d4      	b.n	800a110 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_SPI_Transmit_DMA+0x2a>
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e0cc      	b.n	800a110 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_SPI_Transmit_DMA+0x3c>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e0c5      	b.n	800a110 <HAL_SPI_Transmit_DMA+0x1c8>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2203      	movs	r2, #3
 8009f90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	88fa      	ldrh	r2, [r7, #6]
 8009faa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fd6:	d10f      	bne.n	8009ff8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fe6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ff6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffc:	4a46      	ldr	r2, [pc, #280]	@ (800a118 <HAL_SPI_Transmit_DMA+0x1d0>)
 8009ffe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a004:	4a45      	ldr	r2, [pc, #276]	@ (800a11c <HAL_SPI_Transmit_DMA+0x1d4>)
 800a006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00c:	4a44      	ldr	r2, [pc, #272]	@ (800a120 <HAL_SPI_Transmit_DMA+0x1d8>)
 800a00e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a014:	2200      	movs	r2, #0
 800a016:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a026:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a030:	d82d      	bhi.n	800a08e <HAL_SPI_Transmit_DMA+0x146>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a03c:	d127      	bne.n	800a08e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a042:	b29b      	uxth	r3, r3
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10f      	bne.n	800a06c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a05a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a060:	b29b      	uxth	r3, r3
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a06a:	e010      	b.n	800a08e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a07a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a080:	b29b      	uxth	r3, r3
 800a082:	085b      	lsrs	r3, r3, #1
 800a084:	b29b      	uxth	r3, r3
 800a086:	3301      	adds	r3, #1
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a096:	4619      	mov	r1, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	330c      	adds	r3, #12
 800a09e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a0a6:	f7fb fe8d 	bl	8005dc4 <HAL_DMA_Start_IT>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0b4:	f043 0210 	orr.w	r2, r3, #16
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e023      	b.n	800a110 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d2:	2b40      	cmp	r3, #64	@ 0x40
 800a0d4:	d007      	beq.n	800a0e6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0e4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 0220 	orr.w	r2, r2, #32
 800a0fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f042 0202 	orr.w	r2, r2, #2
 800a10c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	0800a207 	.word	0x0800a207
 800a11c:	0800a161 	.word	0x0800a161
 800a120:	0800a223 	.word	0x0800a223

0800a124 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a16e:	f7f9 feed 	bl	8003f4c <HAL_GetTick>
 800a172:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0320 	and.w	r3, r3, #32
 800a17e:	2b20      	cmp	r3, #32
 800a180:	d03b      	beq.n	800a1fa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 0220 	bic.w	r2, r2, #32
 800a190:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0202 	bic.w	r2, r2, #2
 800a1a0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	2164      	movs	r1, #100	@ 0x64
 800a1a6:	6978      	ldr	r0, [r7, #20]
 800a1a8:	f000 f97a 	bl	800a4a0 <SPI_EndRxTxTransaction>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d005      	beq.n	800a1be <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1b6:	f043 0220 	orr.w	r2, r3, #32
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10a      	bne.n	800a1dc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	60fb      	str	r3, [r7, #12]
 800a1da:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	f7ff ffaa 	bl	800a14c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a1f8:	e002      	b.n	800a200 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a1fa:	6978      	ldr	r0, [r7, #20]
 800a1fc:	f7ff ff92 	bl	800a124 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff ff8f 	bl	800a138 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a21a:	bf00      	nop
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0203 	bic.w	r2, r2, #3
 800a23e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a244:	f043 0210 	orr.w	r2, r3, #16
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff ff79 	bl	800a14c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	603b      	str	r3, [r7, #0]
 800a270:	4613      	mov	r3, r2
 800a272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a274:	f7f9 fe6a 	bl	8003f4c <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4413      	add	r3, r2
 800a282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a284:	f7f9 fe62 	bl	8003f4c <HAL_GetTick>
 800a288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a28a:	4b39      	ldr	r3, [pc, #228]	@ (800a370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	015b      	lsls	r3, r3, #5
 800a290:	0d1b      	lsrs	r3, r3, #20
 800a292:	69fa      	ldr	r2, [r7, #28]
 800a294:	fb02 f303 	mul.w	r3, r2, r3
 800a298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a29a:	e054      	b.n	800a346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a2:	d050      	beq.n	800a346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2a4:	f7f9 fe52 	bl	8003f4c <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d902      	bls.n	800a2ba <SPI_WaitFlagStateUntilTimeout+0x56>
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d13d      	bne.n	800a336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a2c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2d2:	d111      	bne.n	800a2f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2dc:	d004      	beq.n	800a2e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2e6:	d107      	bne.n	800a2f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a300:	d10f      	bne.n	800a322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e017      	b.n	800a366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	3b01      	subs	r3, #1
 800a344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4013      	ands	r3, r2
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	429a      	cmp	r2, r3
 800a354:	bf0c      	ite	eq
 800a356:	2301      	moveq	r3, #1
 800a358:	2300      	movne	r3, #0
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	429a      	cmp	r2, r3
 800a362:	d19b      	bne.n	800a29c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	2000020c 	.word	0x2000020c

0800a374 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b08a      	sub	sp, #40	@ 0x28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a386:	f7f9 fde1 	bl	8003f4c <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38e:	1a9b      	subs	r3, r3, r2
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	4413      	add	r3, r2
 800a394:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a396:	f7f9 fdd9 	bl	8003f4c <HAL_GetTick>
 800a39a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a3a4:	4b3d      	ldr	r3, [pc, #244]	@ (800a49c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	00da      	lsls	r2, r3, #3
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	0d1b      	lsrs	r3, r3, #20
 800a3b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a3bc:	e060      	b.n	800a480 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a3c4:	d107      	bne.n	800a3d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d104      	bne.n	800a3d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d050      	beq.n	800a480 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3de:	f7f9 fdb5 	bl	8003f4c <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d902      	bls.n	800a3f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d13d      	bne.n	800a470 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a402:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a40c:	d111      	bne.n	800a432 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a416:	d004      	beq.n	800a422 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a420:	d107      	bne.n	800a432 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a430:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a43a:	d10f      	bne.n	800a45c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a45a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e010      	b.n	800a492 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	4013      	ands	r3, r2
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d196      	bne.n	800a3be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3728      	adds	r7, #40	@ 0x28
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	2000020c 	.word	0x2000020c

0800a4a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff ff5b 	bl	800a374 <SPI_WaitFifoStateUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d007      	beq.n	800a4d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4c8:	f043 0220 	orr.w	r2, r3, #32
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e027      	b.n	800a524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2180      	movs	r1, #128	@ 0x80
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7ff fec0 	bl	800a264 <SPI_WaitFlagStateUntilTimeout>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d007      	beq.n	800a4fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ee:	f043 0220 	orr.w	r2, r3, #32
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e014      	b.n	800a524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2200      	movs	r2, #0
 800a502:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7ff ff34 	bl	800a374 <SPI_WaitFifoStateUntilTimeout>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d007      	beq.n	800a522 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a516:	f043 0220 	orr.w	r2, r3, #32
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e000      	b.n	800a524 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e049      	b.n	800a5d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7f9 f998 	bl	8003888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f001 f822 	bl	800b5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b082      	sub	sp, #8
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e049      	b.n	800a680 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f841 	bl	800a688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2202      	movs	r2, #2
 800a60a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f000 ffcb 	bl	800b5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d109      	bne.n	800a6c0 <HAL_TIM_PWM_Start+0x24>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	bf14      	ite	ne
 800a6b8:	2301      	movne	r3, #1
 800a6ba:	2300      	moveq	r3, #0
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	e03c      	b.n	800a73a <HAL_TIM_PWM_Start+0x9e>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d109      	bne.n	800a6da <HAL_TIM_PWM_Start+0x3e>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	bf14      	ite	ne
 800a6d2:	2301      	movne	r3, #1
 800a6d4:	2300      	moveq	r3, #0
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	e02f      	b.n	800a73a <HAL_TIM_PWM_Start+0x9e>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d109      	bne.n	800a6f4 <HAL_TIM_PWM_Start+0x58>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	bf14      	ite	ne
 800a6ec:	2301      	movne	r3, #1
 800a6ee:	2300      	moveq	r3, #0
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	e022      	b.n	800a73a <HAL_TIM_PWM_Start+0x9e>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b0c      	cmp	r3, #12
 800a6f8:	d109      	bne.n	800a70e <HAL_TIM_PWM_Start+0x72>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b01      	cmp	r3, #1
 800a704:	bf14      	ite	ne
 800a706:	2301      	movne	r3, #1
 800a708:	2300      	moveq	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	e015      	b.n	800a73a <HAL_TIM_PWM_Start+0x9e>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b10      	cmp	r3, #16
 800a712:	d109      	bne.n	800a728 <HAL_TIM_PWM_Start+0x8c>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	bf14      	ite	ne
 800a720:	2301      	movne	r3, #1
 800a722:	2300      	moveq	r3, #0
 800a724:	b2db      	uxtb	r3, r3
 800a726:	e008      	b.n	800a73a <HAL_TIM_PWM_Start+0x9e>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b01      	cmp	r3, #1
 800a732:	bf14      	ite	ne
 800a734:	2301      	movne	r3, #1
 800a736:	2300      	moveq	r3, #0
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e0a6      	b.n	800a890 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <HAL_TIM_PWM_Start+0xb6>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a750:	e023      	b.n	800a79a <HAL_TIM_PWM_Start+0xfe>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b04      	cmp	r3, #4
 800a756:	d104      	bne.n	800a762 <HAL_TIM_PWM_Start+0xc6>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2202      	movs	r2, #2
 800a75c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a760:	e01b      	b.n	800a79a <HAL_TIM_PWM_Start+0xfe>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b08      	cmp	r3, #8
 800a766:	d104      	bne.n	800a772 <HAL_TIM_PWM_Start+0xd6>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2202      	movs	r2, #2
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a770:	e013      	b.n	800a79a <HAL_TIM_PWM_Start+0xfe>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b0c      	cmp	r3, #12
 800a776:	d104      	bne.n	800a782 <HAL_TIM_PWM_Start+0xe6>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a780:	e00b      	b.n	800a79a <HAL_TIM_PWM_Start+0xfe>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b10      	cmp	r3, #16
 800a786:	d104      	bne.n	800a792 <HAL_TIM_PWM_Start+0xf6>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2202      	movs	r2, #2
 800a78c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a790:	e003      	b.n	800a79a <HAL_TIM_PWM_Start+0xfe>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2202      	movs	r2, #2
 800a796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 fb80 	bl	800bea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a898 <HAL_TIM_PWM_Start+0x1fc>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d018      	beq.n	800a7e4 <HAL_TIM_PWM_Start+0x148>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a39      	ldr	r2, [pc, #228]	@ (800a89c <HAL_TIM_PWM_Start+0x200>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d013      	beq.n	800a7e4 <HAL_TIM_PWM_Start+0x148>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a37      	ldr	r2, [pc, #220]	@ (800a8a0 <HAL_TIM_PWM_Start+0x204>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00e      	beq.n	800a7e4 <HAL_TIM_PWM_Start+0x148>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a36      	ldr	r2, [pc, #216]	@ (800a8a4 <HAL_TIM_PWM_Start+0x208>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d009      	beq.n	800a7e4 <HAL_TIM_PWM_Start+0x148>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a34      	ldr	r2, [pc, #208]	@ (800a8a8 <HAL_TIM_PWM_Start+0x20c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d004      	beq.n	800a7e4 <HAL_TIM_PWM_Start+0x148>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a33      	ldr	r2, [pc, #204]	@ (800a8ac <HAL_TIM_PWM_Start+0x210>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d101      	bne.n	800a7e8 <HAL_TIM_PWM_Start+0x14c>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <HAL_TIM_PWM_Start+0x14e>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d007      	beq.n	800a7fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a25      	ldr	r2, [pc, #148]	@ (800a898 <HAL_TIM_PWM_Start+0x1fc>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d022      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a810:	d01d      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a26      	ldr	r2, [pc, #152]	@ (800a8b0 <HAL_TIM_PWM_Start+0x214>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d018      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a24      	ldr	r2, [pc, #144]	@ (800a8b4 <HAL_TIM_PWM_Start+0x218>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a23      	ldr	r2, [pc, #140]	@ (800a8b8 <HAL_TIM_PWM_Start+0x21c>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d00e      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a19      	ldr	r2, [pc, #100]	@ (800a89c <HAL_TIM_PWM_Start+0x200>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d009      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a18      	ldr	r2, [pc, #96]	@ (800a8a0 <HAL_TIM_PWM_Start+0x204>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d004      	beq.n	800a84e <HAL_TIM_PWM_Start+0x1b2>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a18      	ldr	r2, [pc, #96]	@ (800a8ac <HAL_TIM_PWM_Start+0x210>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d115      	bne.n	800a87a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	4b19      	ldr	r3, [pc, #100]	@ (800a8bc <HAL_TIM_PWM_Start+0x220>)
 800a856:	4013      	ands	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b06      	cmp	r3, #6
 800a85e:	d015      	beq.n	800a88c <HAL_TIM_PWM_Start+0x1f0>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a866:	d011      	beq.n	800a88c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a878:	e008      	b.n	800a88c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 0201 	orr.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	e000      	b.n	800a88e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a88c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	40012c00 	.word	0x40012c00
 800a89c:	40013400 	.word	0x40013400
 800a8a0:	40014000 	.word	0x40014000
 800a8a4:	40014400 	.word	0x40014400
 800a8a8:	40014800 	.word	0x40014800
 800a8ac:	40015000 	.word	0x40015000
 800a8b0:	40000400 	.word	0x40000400
 800a8b4:	40000800 	.word	0x40000800
 800a8b8:	40000c00 	.word	0x40000c00
 800a8bc:	00010007 	.word	0x00010007

0800a8c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <HAL_TIM_PWM_Start_DMA+0x2c>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2301      	moveq	r3, #1
 800a8e6:	2300      	movne	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	e03c      	b.n	800a966 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d109      	bne.n	800a906 <HAL_TIM_PWM_Start_DMA+0x46>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	bf0c      	ite	eq
 800a8fe:	2301      	moveq	r3, #1
 800a900:	2300      	movne	r3, #0
 800a902:	b2db      	uxtb	r3, r3
 800a904:	e02f      	b.n	800a966 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d109      	bne.n	800a920 <HAL_TIM_PWM_Start_DMA+0x60>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b02      	cmp	r3, #2
 800a916:	bf0c      	ite	eq
 800a918:	2301      	moveq	r3, #1
 800a91a:	2300      	movne	r3, #0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	e022      	b.n	800a966 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b0c      	cmp	r3, #12
 800a924:	d109      	bne.n	800a93a <HAL_TIM_PWM_Start_DMA+0x7a>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	bf0c      	ite	eq
 800a932:	2301      	moveq	r3, #1
 800a934:	2300      	movne	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	e015      	b.n	800a966 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b10      	cmp	r3, #16
 800a93e:	d109      	bne.n	800a954 <HAL_TIM_PWM_Start_DMA+0x94>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	bf0c      	ite	eq
 800a94c:	2301      	moveq	r3, #1
 800a94e:	2300      	movne	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	e008      	b.n	800a966 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	bf0c      	ite	eq
 800a960:	2301      	moveq	r3, #1
 800a962:	2300      	movne	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800a96a:	2302      	movs	r3, #2
 800a96c:	e1b5      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	bf0c      	ite	eq
 800a980:	2301      	moveq	r3, #1
 800a982:	2300      	movne	r3, #0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	e03c      	b.n	800aa02 <HAL_TIM_PWM_Start_DMA+0x142>
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d109      	bne.n	800a9a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b01      	cmp	r3, #1
 800a998:	bf0c      	ite	eq
 800a99a:	2301      	moveq	r3, #1
 800a99c:	2300      	movne	r3, #0
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	e02f      	b.n	800aa02 <HAL_TIM_PWM_Start_DMA+0x142>
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d109      	bne.n	800a9bc <HAL_TIM_PWM_Start_DMA+0xfc>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	bf0c      	ite	eq
 800a9b4:	2301      	moveq	r3, #1
 800a9b6:	2300      	movne	r3, #0
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	e022      	b.n	800aa02 <HAL_TIM_PWM_Start_DMA+0x142>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b0c      	cmp	r3, #12
 800a9c0:	d109      	bne.n	800a9d6 <HAL_TIM_PWM_Start_DMA+0x116>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	bf0c      	ite	eq
 800a9ce:	2301      	moveq	r3, #1
 800a9d0:	2300      	movne	r3, #0
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	e015      	b.n	800aa02 <HAL_TIM_PWM_Start_DMA+0x142>
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2b10      	cmp	r3, #16
 800a9da:	d109      	bne.n	800a9f0 <HAL_TIM_PWM_Start_DMA+0x130>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	bf0c      	ite	eq
 800a9e8:	2301      	moveq	r3, #1
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	e008      	b.n	800aa02 <HAL_TIM_PWM_Start_DMA+0x142>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	bf0c      	ite	eq
 800a9fc:	2301      	moveq	r3, #1
 800a9fe:	2300      	movne	r3, #0
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d034      	beq.n	800aa70 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <HAL_TIM_PWM_Start_DMA+0x152>
 800aa0c:	887b      	ldrh	r3, [r7, #2]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d101      	bne.n	800aa16 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e161      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d104      	bne.n	800aa26 <HAL_TIM_PWM_Start_DMA+0x166>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa24:	e026      	b.n	800aa74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d104      	bne.n	800aa36 <HAL_TIM_PWM_Start_DMA+0x176>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa34:	e01e      	b.n	800aa74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d104      	bne.n	800aa46 <HAL_TIM_PWM_Start_DMA+0x186>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa44:	e016      	b.n	800aa74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b0c      	cmp	r3, #12
 800aa4a:	d104      	bne.n	800aa56 <HAL_TIM_PWM_Start_DMA+0x196>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa54:	e00e      	b.n	800aa74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b10      	cmp	r3, #16
 800aa5a:	d104      	bne.n	800aa66 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa64:	e006      	b.n	800aa74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa6e:	e001      	b.n	800aa74 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e132      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b0c      	cmp	r3, #12
 800aa78:	f200 80ae 	bhi.w	800abd8 <HAL_TIM_PWM_Start_DMA+0x318>
 800aa7c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aab9 	.word	0x0800aab9
 800aa88:	0800abd9 	.word	0x0800abd9
 800aa8c:	0800abd9 	.word	0x0800abd9
 800aa90:	0800abd9 	.word	0x0800abd9
 800aa94:	0800ab01 	.word	0x0800ab01
 800aa98:	0800abd9 	.word	0x0800abd9
 800aa9c:	0800abd9 	.word	0x0800abd9
 800aaa0:	0800abd9 	.word	0x0800abd9
 800aaa4:	0800ab49 	.word	0x0800ab49
 800aaa8:	0800abd9 	.word	0x0800abd9
 800aaac:	0800abd9 	.word	0x0800abd9
 800aab0:	0800abd9 	.word	0x0800abd9
 800aab4:	0800ab91 	.word	0x0800ab91
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabc:	4a89      	ldr	r2, [pc, #548]	@ (800ace4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800aabe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac4:	4a88      	ldr	r2, [pc, #544]	@ (800ace8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800aac6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aacc:	4a87      	ldr	r2, [pc, #540]	@ (800acec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aace:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3334      	adds	r3, #52	@ 0x34
 800aadc:	461a      	mov	r2, r3
 800aade:	887b      	ldrh	r3, [r7, #2]
 800aae0:	f7fb f970 	bl	8005dc4 <HAL_DMA_Start_IT>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e0f5      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68da      	ldr	r2, [r3, #12]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aafc:	60da      	str	r2, [r3, #12]
      break;
 800aafe:	e06e      	b.n	800abde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab04:	4a77      	ldr	r2, [pc, #476]	@ (800ace4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ab06:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0c:	4a76      	ldr	r2, [pc, #472]	@ (800ace8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ab0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab14:	4a75      	ldr	r2, [pc, #468]	@ (800acec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ab16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3338      	adds	r3, #56	@ 0x38
 800ab24:	461a      	mov	r2, r3
 800ab26:	887b      	ldrh	r3, [r7, #2]
 800ab28:	f7fb f94c 	bl	8005dc4 <HAL_DMA_Start_IT>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e0d1      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab44:	60da      	str	r2, [r3, #12]
      break;
 800ab46:	e04a      	b.n	800abde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4c:	4a65      	ldr	r2, [pc, #404]	@ (800ace4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ab4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab54:	4a64      	ldr	r2, [pc, #400]	@ (800ace8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ab56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5c:	4a63      	ldr	r2, [pc, #396]	@ (800acec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ab5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	333c      	adds	r3, #60	@ 0x3c
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	887b      	ldrh	r3, [r7, #2]
 800ab70:	f7fb f928 	bl	8005dc4 <HAL_DMA_Start_IT>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e0ad      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68da      	ldr	r2, [r3, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab8c:	60da      	str	r2, [r3, #12]
      break;
 800ab8e:	e026      	b.n	800abde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab94:	4a53      	ldr	r2, [pc, #332]	@ (800ace4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ab96:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9c:	4a52      	ldr	r2, [pc, #328]	@ (800ace8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ab9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba4:	4a51      	ldr	r2, [pc, #324]	@ (800acec <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aba6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3340      	adds	r3, #64	@ 0x40
 800abb4:	461a      	mov	r2, r3
 800abb6:	887b      	ldrh	r3, [r7, #2]
 800abb8:	f7fb f904 	bl	8005dc4 <HAL_DMA_Start_IT>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e089      	b.n	800acda <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68da      	ldr	r2, [r3, #12]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800abd4:	60da      	str	r2, [r3, #12]
      break;
 800abd6:	e002      	b.n	800abde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
      break;
 800abdc:	bf00      	nop
  }

  if (status == HAL_OK)
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d179      	bne.n	800acd8 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2201      	movs	r2, #1
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	4618      	mov	r0, r3
 800abee:	f001 f95b 	bl	800bea8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a3e      	ldr	r2, [pc, #248]	@ (800acf0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d018      	beq.n	800ac2e <HAL_TIM_PWM_Start_DMA+0x36e>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a3c      	ldr	r2, [pc, #240]	@ (800acf4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <HAL_TIM_PWM_Start_DMA+0x36e>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a3b      	ldr	r2, [pc, #236]	@ (800acf8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00e      	beq.n	800ac2e <HAL_TIM_PWM_Start_DMA+0x36e>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a39      	ldr	r2, [pc, #228]	@ (800acfc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d009      	beq.n	800ac2e <HAL_TIM_PWM_Start_DMA+0x36e>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a38      	ldr	r2, [pc, #224]	@ (800ad00 <HAL_TIM_PWM_Start_DMA+0x440>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d004      	beq.n	800ac2e <HAL_TIM_PWM_Start_DMA+0x36e>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a36      	ldr	r2, [pc, #216]	@ (800ad04 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d101      	bne.n	800ac32 <HAL_TIM_PWM_Start_DMA+0x372>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e000      	b.n	800ac34 <HAL_TIM_PWM_Start_DMA+0x374>
 800ac32:	2300      	movs	r3, #0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a28      	ldr	r2, [pc, #160]	@ (800acf0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d022      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac5a:	d01d      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a29      	ldr	r2, [pc, #164]	@ (800ad08 <HAL_TIM_PWM_Start_DMA+0x448>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d018      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a28      	ldr	r2, [pc, #160]	@ (800ad0c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d013      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a26      	ldr	r2, [pc, #152]	@ (800ad10 <HAL_TIM_PWM_Start_DMA+0x450>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00e      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a1d      	ldr	r2, [pc, #116]	@ (800acf4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d009      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a1b      	ldr	r2, [pc, #108]	@ (800acf8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d004      	beq.n	800ac98 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a1c      	ldr	r2, [pc, #112]	@ (800ad04 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d115      	bne.n	800acc4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ad14 <HAL_TIM_PWM_Start_DMA+0x454>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2b06      	cmp	r3, #6
 800aca8:	d015      	beq.n	800acd6 <HAL_TIM_PWM_Start_DMA+0x416>
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb0:	d011      	beq.n	800acd6 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f042 0201 	orr.w	r2, r2, #1
 800acc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acc2:	e008      	b.n	800acd6 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f042 0201 	orr.w	r2, r2, #1
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	e000      	b.n	800acd8 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acd6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	0800b4a3 	.word	0x0800b4a3
 800ace8:	0800b54b 	.word	0x0800b54b
 800acec:	0800b411 	.word	0x0800b411
 800acf0:	40012c00 	.word	0x40012c00
 800acf4:	40013400 	.word	0x40013400
 800acf8:	40014000 	.word	0x40014000
 800acfc:	40014400 	.word	0x40014400
 800ad00:	40014800 	.word	0x40014800
 800ad04:	40015000 	.word	0x40015000
 800ad08:	40000400 	.word	0x40000400
 800ad0c:	40000800 	.word	0x40000800
 800ad10:	40000c00 	.word	0x40000c00
 800ad14:	00010007 	.word	0x00010007

0800ad18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e097      	b.n	800ae5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7f8 fcaf 	bl	80036a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6812      	ldr	r2, [r2, #0]
 800ad58:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ad5c:	f023 0307 	bic.w	r3, r3, #7
 800ad60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	f000 fc21 	bl	800b5b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad9a:	f023 0303 	bic.w	r3, r3, #3
 800ad9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	689a      	ldr	r2, [r3, #8]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	021b      	lsls	r3, r3, #8
 800adaa:	4313      	orrs	r3, r2
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800adb8:	f023 030c 	bic.w	r3, r3, #12
 800adbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800adc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800adc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68da      	ldr	r2, [r3, #12]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	021b      	lsls	r3, r3, #8
 800add4:	4313      	orrs	r3, r2
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	4313      	orrs	r3, r2
 800adda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	011a      	lsls	r2, r3, #4
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	031b      	lsls	r3, r3, #12
 800ade8:	4313      	orrs	r3, r2
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800adf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800adfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d110      	bne.n	800aeb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d102      	bne.n	800aea0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae9a:	7b7b      	ldrb	r3, [r7, #13]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d001      	beq.n	800aea4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e069      	b.n	800af78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeb4:	e031      	b.n	800af1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	d110      	bne.n	800aede <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d102      	bne.n	800aec8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aec2:	7b3b      	ldrb	r3, [r7, #12]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d001      	beq.n	800aecc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e055      	b.n	800af78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aedc:	e01d      	b.n	800af1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d108      	bne.n	800aef6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d105      	bne.n	800aef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeea:	7b7b      	ldrb	r3, [r7, #13]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d102      	bne.n	800aef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aef0:	7b3b      	ldrb	r3, [r7, #12]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d001      	beq.n	800aefa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e03e      	b.n	800af78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2202      	movs	r2, #2
 800aefe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2202      	movs	r2, #2
 800af06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2202      	movs	r2, #2
 800af0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2202      	movs	r2, #2
 800af16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <HAL_TIM_Encoder_Start+0xc4>
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b04      	cmp	r3, #4
 800af24:	d008      	beq.n	800af38 <HAL_TIM_Encoder_Start+0xd4>
 800af26:	e00f      	b.n	800af48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2201      	movs	r2, #1
 800af2e:	2100      	movs	r1, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f000 ffb9 	bl	800bea8 <TIM_CCxChannelCmd>
      break;
 800af36:	e016      	b.n	800af66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2201      	movs	r2, #1
 800af3e:	2104      	movs	r1, #4
 800af40:	4618      	mov	r0, r3
 800af42:	f000 ffb1 	bl	800bea8 <TIM_CCxChannelCmd>
      break;
 800af46:	e00e      	b.n	800af66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2201      	movs	r2, #1
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f000 ffa9 	bl	800bea8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2201      	movs	r2, #1
 800af5c:	2104      	movs	r1, #4
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 ffa2 	bl	800bea8 <TIM_CCxChannelCmd>
      break;
 800af64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f042 0201 	orr.w	r2, r2, #1
 800af74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e0ff      	b.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b14      	cmp	r3, #20
 800afaa:	f200 80f0 	bhi.w	800b18e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800afae:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800b009 	.word	0x0800b009
 800afb8:	0800b18f 	.word	0x0800b18f
 800afbc:	0800b18f 	.word	0x0800b18f
 800afc0:	0800b18f 	.word	0x0800b18f
 800afc4:	0800b049 	.word	0x0800b049
 800afc8:	0800b18f 	.word	0x0800b18f
 800afcc:	0800b18f 	.word	0x0800b18f
 800afd0:	0800b18f 	.word	0x0800b18f
 800afd4:	0800b08b 	.word	0x0800b08b
 800afd8:	0800b18f 	.word	0x0800b18f
 800afdc:	0800b18f 	.word	0x0800b18f
 800afe0:	0800b18f 	.word	0x0800b18f
 800afe4:	0800b0cb 	.word	0x0800b0cb
 800afe8:	0800b18f 	.word	0x0800b18f
 800afec:	0800b18f 	.word	0x0800b18f
 800aff0:	0800b18f 	.word	0x0800b18f
 800aff4:	0800b10d 	.word	0x0800b10d
 800aff8:	0800b18f 	.word	0x0800b18f
 800affc:	0800b18f 	.word	0x0800b18f
 800b000:	0800b18f 	.word	0x0800b18f
 800b004:	0800b14d 	.word	0x0800b14d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68b9      	ldr	r1, [r7, #8]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fb84 	bl	800b71c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0208 	orr.w	r2, r2, #8
 800b022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	699a      	ldr	r2, [r3, #24]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f022 0204 	bic.w	r2, r2, #4
 800b032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6999      	ldr	r1, [r3, #24]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	691a      	ldr	r2, [r3, #16]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	619a      	str	r2, [r3, #24]
      break;
 800b046:	e0a5      	b.n	800b194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fbfe 	bl	800b850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	699a      	ldr	r2, [r3, #24]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6999      	ldr	r1, [r3, #24]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	021a      	lsls	r2, r3, #8
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	619a      	str	r2, [r3, #24]
      break;
 800b088:	e084      	b.n	800b194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68b9      	ldr	r1, [r7, #8]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 fc71 	bl	800b978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f042 0208 	orr.w	r2, r2, #8
 800b0a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69da      	ldr	r2, [r3, #28]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 0204 	bic.w	r2, r2, #4
 800b0b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69d9      	ldr	r1, [r3, #28]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	691a      	ldr	r2, [r3, #16]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	61da      	str	r2, [r3, #28]
      break;
 800b0c8:	e064      	b.n	800b194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68b9      	ldr	r1, [r7, #8]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 fce3 	bl	800ba9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69da      	ldr	r2, [r3, #28]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69da      	ldr	r2, [r3, #28]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69d9      	ldr	r1, [r3, #28]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	021a      	lsls	r2, r3, #8
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	61da      	str	r2, [r3, #28]
      break;
 800b10a:	e043      	b.n	800b194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68b9      	ldr	r1, [r7, #8]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fd56 	bl	800bbc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0208 	orr.w	r2, r2, #8
 800b126:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 0204 	bic.w	r2, r2, #4
 800b136:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	691a      	ldr	r2, [r3, #16]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	430a      	orrs	r2, r1
 800b148:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b14a:	e023      	b.n	800b194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68b9      	ldr	r1, [r7, #8]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fda0 	bl	800bc98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b166:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b176:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	021a      	lsls	r2, r3, #8
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b18c:	e002      	b.n	800b194 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]
      break;
 800b192:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop

0800b1a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <HAL_TIM_ConfigClockSource+0x1c>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e0f6      	b.n	800b3b2 <HAL_TIM_ConfigClockSource+0x20a>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b1e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a6f      	ldr	r2, [pc, #444]	@ (800b3bc <HAL_TIM_ConfigClockSource+0x214>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	f000 80c1 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b204:	4a6d      	ldr	r2, [pc, #436]	@ (800b3bc <HAL_TIM_ConfigClockSource+0x214>)
 800b206:	4293      	cmp	r3, r2
 800b208:	f200 80c6 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b20c:	4a6c      	ldr	r2, [pc, #432]	@ (800b3c0 <HAL_TIM_ConfigClockSource+0x218>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	f000 80b9 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b214:	4a6a      	ldr	r2, [pc, #424]	@ (800b3c0 <HAL_TIM_ConfigClockSource+0x218>)
 800b216:	4293      	cmp	r3, r2
 800b218:	f200 80be 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b21c:	4a69      	ldr	r2, [pc, #420]	@ (800b3c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	f000 80b1 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b224:	4a67      	ldr	r2, [pc, #412]	@ (800b3c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	f200 80b6 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b22c:	4a66      	ldr	r2, [pc, #408]	@ (800b3c8 <HAL_TIM_ConfigClockSource+0x220>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	f000 80a9 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b234:	4a64      	ldr	r2, [pc, #400]	@ (800b3c8 <HAL_TIM_ConfigClockSource+0x220>)
 800b236:	4293      	cmp	r3, r2
 800b238:	f200 80ae 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b23c:	4a63      	ldr	r2, [pc, #396]	@ (800b3cc <HAL_TIM_ConfigClockSource+0x224>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	f000 80a1 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b244:	4a61      	ldr	r2, [pc, #388]	@ (800b3cc <HAL_TIM_ConfigClockSource+0x224>)
 800b246:	4293      	cmp	r3, r2
 800b248:	f200 80a6 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b24c:	4a60      	ldr	r2, [pc, #384]	@ (800b3d0 <HAL_TIM_ConfigClockSource+0x228>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	f000 8099 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b254:	4a5e      	ldr	r2, [pc, #376]	@ (800b3d0 <HAL_TIM_ConfigClockSource+0x228>)
 800b256:	4293      	cmp	r3, r2
 800b258:	f200 809e 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b25c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b260:	f000 8091 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b264:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b268:	f200 8096 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b26c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b270:	f000 8089 	beq.w	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b274:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b278:	f200 808e 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b27c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b280:	d03e      	beq.n	800b300 <HAL_TIM_ConfigClockSource+0x158>
 800b282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b286:	f200 8087 	bhi.w	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28e:	f000 8086 	beq.w	800b39e <HAL_TIM_ConfigClockSource+0x1f6>
 800b292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b296:	d87f      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b298:	2b70      	cmp	r3, #112	@ 0x70
 800b29a:	d01a      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x12a>
 800b29c:	2b70      	cmp	r3, #112	@ 0x70
 800b29e:	d87b      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2a0:	2b60      	cmp	r3, #96	@ 0x60
 800b2a2:	d050      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0x19e>
 800b2a4:	2b60      	cmp	r3, #96	@ 0x60
 800b2a6:	d877      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2a8:	2b50      	cmp	r3, #80	@ 0x50
 800b2aa:	d03c      	beq.n	800b326 <HAL_TIM_ConfigClockSource+0x17e>
 800b2ac:	2b50      	cmp	r3, #80	@ 0x50
 800b2ae:	d873      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2b0:	2b40      	cmp	r3, #64	@ 0x40
 800b2b2:	d058      	beq.n	800b366 <HAL_TIM_ConfigClockSource+0x1be>
 800b2b4:	2b40      	cmp	r3, #64	@ 0x40
 800b2b6:	d86f      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2b8:	2b30      	cmp	r3, #48	@ 0x30
 800b2ba:	d064      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b2bc:	2b30      	cmp	r3, #48	@ 0x30
 800b2be:	d86b      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2c0:	2b20      	cmp	r3, #32
 800b2c2:	d060      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b2c4:	2b20      	cmp	r3, #32
 800b2c6:	d867      	bhi.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d05c      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b2cc:	2b10      	cmp	r3, #16
 800b2ce:	d05a      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x1de>
 800b2d0:	e062      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2e2:	f000 fdc1 	bl	800be68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	609a      	str	r2, [r3, #8]
      break;
 800b2fe:	e04f      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b310:	f000 fdaa 	bl	800be68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689a      	ldr	r2, [r3, #8]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b322:	609a      	str	r2, [r3, #8]
      break;
 800b324:	e03c      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b332:	461a      	mov	r2, r3
 800b334:	f000 fd1c 	bl	800bd70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2150      	movs	r1, #80	@ 0x50
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fd75 	bl	800be2e <TIM_ITRx_SetConfig>
      break;
 800b344:	e02c      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b352:	461a      	mov	r2, r3
 800b354:	f000 fd3b 	bl	800bdce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2160      	movs	r1, #96	@ 0x60
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fd65 	bl	800be2e <TIM_ITRx_SetConfig>
      break;
 800b364:	e01c      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b372:	461a      	mov	r2, r3
 800b374:	f000 fcfc 	bl	800bd70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2140      	movs	r1, #64	@ 0x40
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fd55 	bl	800be2e <TIM_ITRx_SetConfig>
      break;
 800b384:	e00c      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	4610      	mov	r0, r2
 800b392:	f000 fd4c 	bl	800be2e <TIM_ITRx_SetConfig>
      break;
 800b396:	e003      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
      break;
 800b39c:	e000      	b.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b39e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	00100070 	.word	0x00100070
 800b3c0:	00100060 	.word	0x00100060
 800b3c4:	00100050 	.word	0x00100050
 800b3c8:	00100040 	.word	0x00100040
 800b3cc:	00100030 	.word	0x00100030
 800b3d0:	00100020 	.word	0x00100020

0800b3d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	429a      	cmp	r2, r3
 800b426:	d107      	bne.n	800b438 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2201      	movs	r2, #1
 800b42c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b436:	e02a      	b.n	800b48e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d107      	bne.n	800b452 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2202      	movs	r2, #2
 800b446:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b450:	e01d      	b.n	800b48e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d107      	bne.n	800b46c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2204      	movs	r2, #4
 800b460:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b46a:	e010      	b.n	800b48e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	429a      	cmp	r2, r3
 800b474:	d107      	bne.n	800b486 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2208      	movs	r2, #8
 800b47a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b484:	e003      	b.n	800b48e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff ffb4 	bl	800b3fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	771a      	strb	r2, [r3, #28]
}
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d10b      	bne.n	800b4d2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	69db      	ldr	r3, [r3, #28]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d136      	bne.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4d0:	e031      	b.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d10b      	bne.n	800b4f4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	69db      	ldr	r3, [r3, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d125      	bne.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4f2:	e020      	b.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d10b      	bne.n	800b516 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2204      	movs	r2, #4
 800b502:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	69db      	ldr	r3, [r3, #28]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d114      	bne.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b514:	e00f      	b.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d10a      	bne.n	800b536 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2208      	movs	r2, #8
 800b524:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d103      	bne.n	800b536 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff ff4c 	bl	800b3d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	771a      	strb	r2, [r3, #28]
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d103      	bne.n	800b56a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	771a      	strb	r2, [r3, #28]
 800b568:	e019      	b.n	800b59e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	429a      	cmp	r2, r3
 800b572:	d103      	bne.n	800b57c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2202      	movs	r2, #2
 800b578:	771a      	strb	r2, [r3, #28]
 800b57a:	e010      	b.n	800b59e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	429a      	cmp	r2, r3
 800b584:	d103      	bne.n	800b58e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2204      	movs	r2, #4
 800b58a:	771a      	strb	r2, [r3, #28]
 800b58c:	e007      	b.n	800b59e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	429a      	cmp	r2, r3
 800b596:	d102      	bne.n	800b59e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2208      	movs	r2, #8
 800b59c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff ff22 	bl	800b3e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	771a      	strb	r2, [r3, #28]
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a4c      	ldr	r2, [pc, #304]	@ (800b6f8 <TIM_Base_SetConfig+0x144>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d017      	beq.n	800b5fc <TIM_Base_SetConfig+0x48>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5d2:	d013      	beq.n	800b5fc <TIM_Base_SetConfig+0x48>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a49      	ldr	r2, [pc, #292]	@ (800b6fc <TIM_Base_SetConfig+0x148>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00f      	beq.n	800b5fc <TIM_Base_SetConfig+0x48>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a48      	ldr	r2, [pc, #288]	@ (800b700 <TIM_Base_SetConfig+0x14c>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00b      	beq.n	800b5fc <TIM_Base_SetConfig+0x48>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a47      	ldr	r2, [pc, #284]	@ (800b704 <TIM_Base_SetConfig+0x150>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d007      	beq.n	800b5fc <TIM_Base_SetConfig+0x48>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a46      	ldr	r2, [pc, #280]	@ (800b708 <TIM_Base_SetConfig+0x154>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_Base_SetConfig+0x48>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a45      	ldr	r2, [pc, #276]	@ (800b70c <TIM_Base_SetConfig+0x158>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d108      	bne.n	800b60e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a39      	ldr	r2, [pc, #228]	@ (800b6f8 <TIM_Base_SetConfig+0x144>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d023      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b61c:	d01f      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a36      	ldr	r2, [pc, #216]	@ (800b6fc <TIM_Base_SetConfig+0x148>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d01b      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a35      	ldr	r2, [pc, #212]	@ (800b700 <TIM_Base_SetConfig+0x14c>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d017      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a34      	ldr	r2, [pc, #208]	@ (800b704 <TIM_Base_SetConfig+0x150>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d013      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a33      	ldr	r2, [pc, #204]	@ (800b708 <TIM_Base_SetConfig+0x154>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d00f      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a33      	ldr	r2, [pc, #204]	@ (800b710 <TIM_Base_SetConfig+0x15c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d00b      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a32      	ldr	r2, [pc, #200]	@ (800b714 <TIM_Base_SetConfig+0x160>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d007      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a31      	ldr	r2, [pc, #196]	@ (800b718 <TIM_Base_SetConfig+0x164>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d003      	beq.n	800b65e <TIM_Base_SetConfig+0xaa>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a2c      	ldr	r2, [pc, #176]	@ (800b70c <TIM_Base_SetConfig+0x158>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d108      	bne.n	800b670 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a18      	ldr	r2, [pc, #96]	@ (800b6f8 <TIM_Base_SetConfig+0x144>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d013      	beq.n	800b6c4 <TIM_Base_SetConfig+0x110>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a1a      	ldr	r2, [pc, #104]	@ (800b708 <TIM_Base_SetConfig+0x154>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d00f      	beq.n	800b6c4 <TIM_Base_SetConfig+0x110>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a1a      	ldr	r2, [pc, #104]	@ (800b710 <TIM_Base_SetConfig+0x15c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00b      	beq.n	800b6c4 <TIM_Base_SetConfig+0x110>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a19      	ldr	r2, [pc, #100]	@ (800b714 <TIM_Base_SetConfig+0x160>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d007      	beq.n	800b6c4 <TIM_Base_SetConfig+0x110>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a18      	ldr	r2, [pc, #96]	@ (800b718 <TIM_Base_SetConfig+0x164>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d003      	beq.n	800b6c4 <TIM_Base_SetConfig+0x110>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a13      	ldr	r2, [pc, #76]	@ (800b70c <TIM_Base_SetConfig+0x158>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d103      	bne.n	800b6cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d105      	bne.n	800b6ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	f023 0201 	bic.w	r2, r3, #1
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	611a      	str	r2, [r3, #16]
  }
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	40012c00 	.word	0x40012c00
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00
 800b708:	40013400 	.word	0x40013400
 800b70c:	40015000 	.word	0x40015000
 800b710:	40014000 	.word	0x40014000
 800b714:	40014400 	.word	0x40014400
 800b718:	40014800 	.word	0x40014800

0800b71c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	f023 0201 	bic.w	r2, r3, #1
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f023 0303 	bic.w	r3, r3, #3
 800b756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	4313      	orrs	r3, r2
 800b760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f023 0302 	bic.w	r3, r3, #2
 800b768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a30      	ldr	r2, [pc, #192]	@ (800b838 <TIM_OC1_SetConfig+0x11c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d013      	beq.n	800b7a4 <TIM_OC1_SetConfig+0x88>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a2f      	ldr	r2, [pc, #188]	@ (800b83c <TIM_OC1_SetConfig+0x120>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00f      	beq.n	800b7a4 <TIM_OC1_SetConfig+0x88>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a2e      	ldr	r2, [pc, #184]	@ (800b840 <TIM_OC1_SetConfig+0x124>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d00b      	beq.n	800b7a4 <TIM_OC1_SetConfig+0x88>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a2d      	ldr	r2, [pc, #180]	@ (800b844 <TIM_OC1_SetConfig+0x128>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d007      	beq.n	800b7a4 <TIM_OC1_SetConfig+0x88>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a2c      	ldr	r2, [pc, #176]	@ (800b848 <TIM_OC1_SetConfig+0x12c>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d003      	beq.n	800b7a4 <TIM_OC1_SetConfig+0x88>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a2b      	ldr	r2, [pc, #172]	@ (800b84c <TIM_OC1_SetConfig+0x130>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d10c      	bne.n	800b7be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f023 0308 	bic.w	r3, r3, #8
 800b7aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f023 0304 	bic.w	r3, r3, #4
 800b7bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b838 <TIM_OC1_SetConfig+0x11c>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d013      	beq.n	800b7ee <TIM_OC1_SetConfig+0xd2>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b83c <TIM_OC1_SetConfig+0x120>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00f      	beq.n	800b7ee <TIM_OC1_SetConfig+0xd2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a1b      	ldr	r2, [pc, #108]	@ (800b840 <TIM_OC1_SetConfig+0x124>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d00b      	beq.n	800b7ee <TIM_OC1_SetConfig+0xd2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a1a      	ldr	r2, [pc, #104]	@ (800b844 <TIM_OC1_SetConfig+0x128>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d007      	beq.n	800b7ee <TIM_OC1_SetConfig+0xd2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a19      	ldr	r2, [pc, #100]	@ (800b848 <TIM_OC1_SetConfig+0x12c>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d003      	beq.n	800b7ee <TIM_OC1_SetConfig+0xd2>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a18      	ldr	r2, [pc, #96]	@ (800b84c <TIM_OC1_SetConfig+0x130>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d111      	bne.n	800b812 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	621a      	str	r2, [r3, #32]
}
 800b82c:	bf00      	nop
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	40012c00 	.word	0x40012c00
 800b83c:	40013400 	.word	0x40013400
 800b840:	40014000 	.word	0x40014000
 800b844:	40014400 	.word	0x40014400
 800b848:	40014800 	.word	0x40014800
 800b84c:	40015000 	.word	0x40015000

0800b850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	f023 0210 	bic.w	r2, r3, #16
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b87e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	021b      	lsls	r3, r3, #8
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4313      	orrs	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f023 0320 	bic.w	r3, r3, #32
 800b89e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a2c      	ldr	r2, [pc, #176]	@ (800b960 <TIM_OC2_SetConfig+0x110>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d007      	beq.n	800b8c4 <TIM_OC2_SetConfig+0x74>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a2b      	ldr	r2, [pc, #172]	@ (800b964 <TIM_OC2_SetConfig+0x114>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d003      	beq.n	800b8c4 <TIM_OC2_SetConfig+0x74>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a2a      	ldr	r2, [pc, #168]	@ (800b968 <TIM_OC2_SetConfig+0x118>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d10d      	bne.n	800b8e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b960 <TIM_OC2_SetConfig+0x110>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d013      	beq.n	800b910 <TIM_OC2_SetConfig+0xc0>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b964 <TIM_OC2_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_OC2_SetConfig+0xc0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b96c <TIM_OC2_SetConfig+0x11c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00b      	beq.n	800b910 <TIM_OC2_SetConfig+0xc0>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b970 <TIM_OC2_SetConfig+0x120>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_OC2_SetConfig+0xc0>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a1c      	ldr	r2, [pc, #112]	@ (800b974 <TIM_OC2_SetConfig+0x124>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_OC2_SetConfig+0xc0>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a17      	ldr	r2, [pc, #92]	@ (800b968 <TIM_OC2_SetConfig+0x118>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d113      	bne.n	800b938 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b91e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	4313      	orrs	r3, r2
 800b92a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4313      	orrs	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	621a      	str	r2, [r3, #32]
}
 800b952:	bf00      	nop
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	40012c00 	.word	0x40012c00
 800b964:	40013400 	.word	0x40013400
 800b968:	40015000 	.word	0x40015000
 800b96c:	40014000 	.word	0x40014000
 800b970:	40014400 	.word	0x40014400
 800b974:	40014800 	.word	0x40014800

0800b978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0303 	bic.w	r3, r3, #3
 800b9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2b      	ldr	r2, [pc, #172]	@ (800ba84 <TIM_OC3_SetConfig+0x10c>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d007      	beq.n	800b9ea <TIM_OC3_SetConfig+0x72>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a2a      	ldr	r2, [pc, #168]	@ (800ba88 <TIM_OC3_SetConfig+0x110>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d003      	beq.n	800b9ea <TIM_OC3_SetConfig+0x72>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a29      	ldr	r2, [pc, #164]	@ (800ba8c <TIM_OC3_SetConfig+0x114>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d10d      	bne.n	800ba06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	021b      	lsls	r3, r3, #8
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a1e      	ldr	r2, [pc, #120]	@ (800ba84 <TIM_OC3_SetConfig+0x10c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d013      	beq.n	800ba36 <TIM_OC3_SetConfig+0xbe>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a1d      	ldr	r2, [pc, #116]	@ (800ba88 <TIM_OC3_SetConfig+0x110>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d00f      	beq.n	800ba36 <TIM_OC3_SetConfig+0xbe>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a1d      	ldr	r2, [pc, #116]	@ (800ba90 <TIM_OC3_SetConfig+0x118>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d00b      	beq.n	800ba36 <TIM_OC3_SetConfig+0xbe>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a1c      	ldr	r2, [pc, #112]	@ (800ba94 <TIM_OC3_SetConfig+0x11c>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d007      	beq.n	800ba36 <TIM_OC3_SetConfig+0xbe>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a1b      	ldr	r2, [pc, #108]	@ (800ba98 <TIM_OC3_SetConfig+0x120>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d003      	beq.n	800ba36 <TIM_OC3_SetConfig+0xbe>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a16      	ldr	r2, [pc, #88]	@ (800ba8c <TIM_OC3_SetConfig+0x114>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d113      	bne.n	800ba5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	011b      	lsls	r3, r3, #4
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	621a      	str	r2, [r3, #32]
}
 800ba78:	bf00      	nop
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	40012c00 	.word	0x40012c00
 800ba88:	40013400 	.word	0x40013400
 800ba8c:	40015000 	.word	0x40015000
 800ba90:	40014000 	.word	0x40014000
 800ba94:	40014400 	.word	0x40014400
 800ba98:	40014800 	.word	0x40014800

0800ba9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800baca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	031b      	lsls	r3, r3, #12
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a2c      	ldr	r2, [pc, #176]	@ (800bbac <TIM_OC4_SetConfig+0x110>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d007      	beq.n	800bb10 <TIM_OC4_SetConfig+0x74>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a2b      	ldr	r2, [pc, #172]	@ (800bbb0 <TIM_OC4_SetConfig+0x114>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d003      	beq.n	800bb10 <TIM_OC4_SetConfig+0x74>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a2a      	ldr	r2, [pc, #168]	@ (800bbb4 <TIM_OC4_SetConfig+0x118>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d10d      	bne.n	800bb2c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	031b      	lsls	r3, r3, #12
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a1f      	ldr	r2, [pc, #124]	@ (800bbac <TIM_OC4_SetConfig+0x110>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d013      	beq.n	800bb5c <TIM_OC4_SetConfig+0xc0>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb0 <TIM_OC4_SetConfig+0x114>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d00f      	beq.n	800bb5c <TIM_OC4_SetConfig+0xc0>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb8 <TIM_OC4_SetConfig+0x11c>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d00b      	beq.n	800bb5c <TIM_OC4_SetConfig+0xc0>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a1d      	ldr	r2, [pc, #116]	@ (800bbbc <TIM_OC4_SetConfig+0x120>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d007      	beq.n	800bb5c <TIM_OC4_SetConfig+0xc0>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a1c      	ldr	r2, [pc, #112]	@ (800bbc0 <TIM_OC4_SetConfig+0x124>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d003      	beq.n	800bb5c <TIM_OC4_SetConfig+0xc0>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a17      	ldr	r2, [pc, #92]	@ (800bbb4 <TIM_OC4_SetConfig+0x118>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d113      	bne.n	800bb84 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	019b      	lsls	r3, r3, #6
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	019b      	lsls	r3, r3, #6
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	621a      	str	r2, [r3, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	40012c00 	.word	0x40012c00
 800bbb0:	40013400 	.word	0x40013400
 800bbb4:	40015000 	.word	0x40015000
 800bbb8:	40014000 	.word	0x40014000
 800bbbc:	40014400 	.word	0x40014400
 800bbc0:	40014800 	.word	0x40014800

0800bbc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bc08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	041b      	lsls	r3, r3, #16
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a19      	ldr	r2, [pc, #100]	@ (800bc80 <TIM_OC5_SetConfig+0xbc>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d013      	beq.n	800bc46 <TIM_OC5_SetConfig+0x82>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a18      	ldr	r2, [pc, #96]	@ (800bc84 <TIM_OC5_SetConfig+0xc0>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d00f      	beq.n	800bc46 <TIM_OC5_SetConfig+0x82>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a17      	ldr	r2, [pc, #92]	@ (800bc88 <TIM_OC5_SetConfig+0xc4>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d00b      	beq.n	800bc46 <TIM_OC5_SetConfig+0x82>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a16      	ldr	r2, [pc, #88]	@ (800bc8c <TIM_OC5_SetConfig+0xc8>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d007      	beq.n	800bc46 <TIM_OC5_SetConfig+0x82>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a15      	ldr	r2, [pc, #84]	@ (800bc90 <TIM_OC5_SetConfig+0xcc>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d003      	beq.n	800bc46 <TIM_OC5_SetConfig+0x82>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a14      	ldr	r2, [pc, #80]	@ (800bc94 <TIM_OC5_SetConfig+0xd0>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d109      	bne.n	800bc5a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	021b      	lsls	r3, r3, #8
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	621a      	str	r2, [r3, #32]
}
 800bc74:	bf00      	nop
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	40012c00 	.word	0x40012c00
 800bc84:	40013400 	.word	0x40013400
 800bc88:	40014000 	.word	0x40014000
 800bc8c:	40014400 	.word	0x40014400
 800bc90:	40014800 	.word	0x40014800
 800bc94:	40015000 	.word	0x40015000

0800bc98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bcc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	051b      	lsls	r3, r3, #20
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a1a      	ldr	r2, [pc, #104]	@ (800bd58 <TIM_OC6_SetConfig+0xc0>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d013      	beq.n	800bd1c <TIM_OC6_SetConfig+0x84>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a19      	ldr	r2, [pc, #100]	@ (800bd5c <TIM_OC6_SetConfig+0xc4>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00f      	beq.n	800bd1c <TIM_OC6_SetConfig+0x84>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a18      	ldr	r2, [pc, #96]	@ (800bd60 <TIM_OC6_SetConfig+0xc8>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d00b      	beq.n	800bd1c <TIM_OC6_SetConfig+0x84>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a17      	ldr	r2, [pc, #92]	@ (800bd64 <TIM_OC6_SetConfig+0xcc>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d007      	beq.n	800bd1c <TIM_OC6_SetConfig+0x84>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a16      	ldr	r2, [pc, #88]	@ (800bd68 <TIM_OC6_SetConfig+0xd0>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d003      	beq.n	800bd1c <TIM_OC6_SetConfig+0x84>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a15      	ldr	r2, [pc, #84]	@ (800bd6c <TIM_OC6_SetConfig+0xd4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d109      	bne.n	800bd30 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	029b      	lsls	r3, r3, #10
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	621a      	str	r2, [r3, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	40012c00 	.word	0x40012c00
 800bd5c:	40013400 	.word	0x40013400
 800bd60:	40014000 	.word	0x40014000
 800bd64:	40014400 	.word	0x40014400
 800bd68:	40014800 	.word	0x40014800
 800bd6c:	40015000 	.word	0x40015000

0800bd70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	f023 0201 	bic.w	r2, r3, #1
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f023 030a 	bic.w	r3, r3, #10
 800bdac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	621a      	str	r2, [r3, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	371c      	adds	r7, #28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b087      	sub	sp, #28
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6a1b      	ldr	r3, [r3, #32]
 800bdde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	f023 0210 	bic.w	r2, r3, #16
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bdf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	031b      	lsls	r3, r3, #12
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800be0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	4313      	orrs	r3, r2
 800be14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	621a      	str	r2, [r3, #32]
}
 800be22:	bf00      	nop
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be2e:	b480      	push	{r7}
 800be30:	b085      	sub	sp, #20
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800be44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4313      	orrs	r3, r2
 800be50:	f043 0307 	orr.w	r3, r3, #7
 800be54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	609a      	str	r2, [r3, #8]
}
 800be5c:	bf00      	nop
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be68:	b480      	push	{r7}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	021a      	lsls	r2, r3, #8
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	431a      	orrs	r2, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4313      	orrs	r3, r2
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	4313      	orrs	r3, r2
 800be94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	609a      	str	r2, [r3, #8]
}
 800be9c:	bf00      	nop
 800be9e:	371c      	adds	r7, #28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f003 031f 	and.w	r3, r3, #31
 800beba:	2201      	movs	r2, #1
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6a1a      	ldr	r2, [r3, #32]
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	43db      	mvns	r3, r3
 800beca:	401a      	ands	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6a1a      	ldr	r2, [r3, #32]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	fa01 f303 	lsl.w	r3, r1, r3
 800bee0:	431a      	orrs	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	621a      	str	r2, [r3, #32]
}
 800bee6:	bf00      	nop
 800bee8:	371c      	adds	r7, #28
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
	...

0800bef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d101      	bne.n	800bf0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	e074      	b.n	800bff6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a34      	ldr	r2, [pc, #208]	@ (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d009      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a33      	ldr	r2, [pc, #204]	@ (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d004      	beq.n	800bf4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a31      	ldr	r2, [pc, #196]	@ (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d108      	bne.n	800bf5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bf62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a21      	ldr	r2, [pc, #132]	@ (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d022      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8c:	d01d      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a1f      	ldr	r2, [pc, #124]	@ (800c010 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d018      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a1d      	ldr	r2, [pc, #116]	@ (800c014 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d013      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a1c      	ldr	r2, [pc, #112]	@ (800c018 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d00e      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a15      	ldr	r2, [pc, #84]	@ (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d009      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a18      	ldr	r2, [pc, #96]	@ (800c01c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d004      	beq.n	800bfca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a11      	ldr	r2, [pc, #68]	@ (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d10c      	bne.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	40012c00 	.word	0x40012c00
 800c008:	40013400 	.word	0x40013400
 800c00c:	40015000 	.word	0x40015000
 800c010:	40000400 	.word	0x40000400
 800c014:	40000800 	.word	0x40000800
 800c018:	40000c00 	.word	0x40000c00
 800c01c:	40014000 	.word	0x40014000

0800c020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c034:	2b01      	cmp	r3, #1
 800c036:	d101      	bne.n	800c03c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c038:	2302      	movs	r3, #2
 800c03a:	e078      	b.n	800c12e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	4313      	orrs	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4313      	orrs	r3, r2
 800c07a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	695b      	ldr	r3, [r3, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	041b      	lsls	r3, r3, #16
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	69db      	ldr	r3, [r3, #28]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a1c      	ldr	r2, [pc, #112]	@ (800c13c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d009      	beq.n	800c0e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a1b      	ldr	r2, [pc, #108]	@ (800c140 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d004      	beq.n	800c0e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a19      	ldr	r2, [pc, #100]	@ (800c144 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d11c      	bne.n	800c11c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ec:	051b      	lsls	r3, r3, #20
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	6a1b      	ldr	r3, [r3, #32]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c118:	4313      	orrs	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	40012c00 	.word	0x40012c00
 800c140:	40013400 	.word	0x40013400
 800c144:	40015000 	.word	0x40015000

0800c148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e042      	b.n	800c1e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c160:	2b00      	cmp	r3, #0
 800c162:	d106      	bne.n	800c172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7f7 f8f3 	bl	8003358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2224      	movs	r2, #36	@ 0x24
 800c176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f022 0201 	bic.w	r2, r2, #1
 800c188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fbb2 	bl	800c8fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f8b3 	bl	800c304 <UART_SetConfig>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e01b      	b.n	800c1e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	689a      	ldr	r2, [r3, #8]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f042 0201 	orr.w	r2, r2, #1
 800c1d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fc31 	bl	800ca40 <UART_CheckIdleState>
 800c1de:	4603      	mov	r3, r0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08a      	sub	sp, #40	@ 0x28
 800c1ec:	af02      	add	r7, sp, #8
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1fe:	2b20      	cmp	r3, #32
 800c200:	d17b      	bne.n	800c2fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <HAL_UART_Transmit+0x26>
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e074      	b.n	800c2fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2221      	movs	r2, #33	@ 0x21
 800c21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c222:	f7f7 fe93 	bl	8003f4c <HAL_GetTick>
 800c226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	88fa      	ldrh	r2, [r7, #6]
 800c22c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	88fa      	ldrh	r2, [r7, #6]
 800c234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c240:	d108      	bne.n	800c254 <HAL_UART_Transmit+0x6c>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d104      	bne.n	800c254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	61bb      	str	r3, [r7, #24]
 800c252:	e003      	b.n	800c25c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c25c:	e030      	b.n	800c2c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2200      	movs	r2, #0
 800c266:	2180      	movs	r1, #128	@ 0x80
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 fc93 	bl	800cb94 <UART_WaitOnFlagUntilTimeout>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d005      	beq.n	800c280 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2220      	movs	r2, #32
 800c278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e03d      	b.n	800c2fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c294:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	3302      	adds	r3, #2
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	e007      	b.n	800c2ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1c8      	bne.n	800c25e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	2140      	movs	r1, #64	@ 0x40
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f000 fc5c 	bl	800cb94 <UART_WaitOnFlagUntilTimeout>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d005      	beq.n	800c2ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e006      	b.n	800c2fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2220      	movs	r2, #32
 800c2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e000      	b.n	800c2fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c2fa:	2302      	movs	r3, #2
  }
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c308:	b08c      	sub	sp, #48	@ 0x30
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	689a      	ldr	r2, [r3, #8]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	431a      	orrs	r2, r3
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	431a      	orrs	r2, r3
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	69db      	ldr	r3, [r3, #28]
 800c328:	4313      	orrs	r3, r2
 800c32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4baa      	ldr	r3, [pc, #680]	@ (800c5dc <UART_SetConfig+0x2d8>)
 800c334:	4013      	ands	r3, r2
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	68da      	ldr	r2, [r3, #12]
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	430a      	orrs	r2, r1
 800c354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	699b      	ldr	r3, [r3, #24]
 800c35a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a9f      	ldr	r2, [pc, #636]	@ (800c5e0 <UART_SetConfig+0x2dc>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d004      	beq.n	800c370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c36c:	4313      	orrs	r3, r2
 800c36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c37a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	6812      	ldr	r2, [r2, #0]
 800c382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c384:	430b      	orrs	r3, r1
 800c386:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38e:	f023 010f 	bic.w	r1, r3, #15
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a90      	ldr	r2, [pc, #576]	@ (800c5e4 <UART_SetConfig+0x2e0>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d125      	bne.n	800c3f4 <UART_SetConfig+0xf0>
 800c3a8:	4b8f      	ldr	r3, [pc, #572]	@ (800c5e8 <UART_SetConfig+0x2e4>)
 800c3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3ae:	f003 0303 	and.w	r3, r3, #3
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d81a      	bhi.n	800c3ec <UART_SetConfig+0xe8>
 800c3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3bc <UART_SetConfig+0xb8>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3cd 	.word	0x0800c3cd
 800c3c0:	0800c3dd 	.word	0x0800c3dd
 800c3c4:	0800c3d5 	.word	0x0800c3d5
 800c3c8:	0800c3e5 	.word	0x0800c3e5
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3d2:	e116      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3da:	e112      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c3dc:	2304      	movs	r3, #4
 800c3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3e2:	e10e      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c3e4:	2308      	movs	r3, #8
 800c3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ea:	e10a      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c3ec:	2310      	movs	r3, #16
 800c3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3f2:	e106      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a7c      	ldr	r2, [pc, #496]	@ (800c5ec <UART_SetConfig+0x2e8>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d138      	bne.n	800c470 <UART_SetConfig+0x16c>
 800c3fe:	4b7a      	ldr	r3, [pc, #488]	@ (800c5e8 <UART_SetConfig+0x2e4>)
 800c400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c404:	f003 030c 	and.w	r3, r3, #12
 800c408:	2b0c      	cmp	r3, #12
 800c40a:	d82d      	bhi.n	800c468 <UART_SetConfig+0x164>
 800c40c:	a201      	add	r2, pc, #4	@ (adr r2, 800c414 <UART_SetConfig+0x110>)
 800c40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c412:	bf00      	nop
 800c414:	0800c449 	.word	0x0800c449
 800c418:	0800c469 	.word	0x0800c469
 800c41c:	0800c469 	.word	0x0800c469
 800c420:	0800c469 	.word	0x0800c469
 800c424:	0800c459 	.word	0x0800c459
 800c428:	0800c469 	.word	0x0800c469
 800c42c:	0800c469 	.word	0x0800c469
 800c430:	0800c469 	.word	0x0800c469
 800c434:	0800c451 	.word	0x0800c451
 800c438:	0800c469 	.word	0x0800c469
 800c43c:	0800c469 	.word	0x0800c469
 800c440:	0800c469 	.word	0x0800c469
 800c444:	0800c461 	.word	0x0800c461
 800c448:	2300      	movs	r3, #0
 800c44a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c44e:	e0d8      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c450:	2302      	movs	r3, #2
 800c452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c456:	e0d4      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c458:	2304      	movs	r3, #4
 800c45a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c45e:	e0d0      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c460:	2308      	movs	r3, #8
 800c462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c466:	e0cc      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c468:	2310      	movs	r3, #16
 800c46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c46e:	e0c8      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a5e      	ldr	r2, [pc, #376]	@ (800c5f0 <UART_SetConfig+0x2ec>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d125      	bne.n	800c4c6 <UART_SetConfig+0x1c2>
 800c47a:	4b5b      	ldr	r3, [pc, #364]	@ (800c5e8 <UART_SetConfig+0x2e4>)
 800c47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c480:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c484:	2b30      	cmp	r3, #48	@ 0x30
 800c486:	d016      	beq.n	800c4b6 <UART_SetConfig+0x1b2>
 800c488:	2b30      	cmp	r3, #48	@ 0x30
 800c48a:	d818      	bhi.n	800c4be <UART_SetConfig+0x1ba>
 800c48c:	2b20      	cmp	r3, #32
 800c48e:	d00a      	beq.n	800c4a6 <UART_SetConfig+0x1a2>
 800c490:	2b20      	cmp	r3, #32
 800c492:	d814      	bhi.n	800c4be <UART_SetConfig+0x1ba>
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <UART_SetConfig+0x19a>
 800c498:	2b10      	cmp	r3, #16
 800c49a:	d008      	beq.n	800c4ae <UART_SetConfig+0x1aa>
 800c49c:	e00f      	b.n	800c4be <UART_SetConfig+0x1ba>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4a4:	e0ad      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ac:	e0a9      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c4ae:	2304      	movs	r3, #4
 800c4b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4b4:	e0a5      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4bc:	e0a1      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c4be:	2310      	movs	r3, #16
 800c4c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4c4:	e09d      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a4a      	ldr	r2, [pc, #296]	@ (800c5f4 <UART_SetConfig+0x2f0>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d125      	bne.n	800c51c <UART_SetConfig+0x218>
 800c4d0:	4b45      	ldr	r3, [pc, #276]	@ (800c5e8 <UART_SetConfig+0x2e4>)
 800c4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c4da:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4dc:	d016      	beq.n	800c50c <UART_SetConfig+0x208>
 800c4de:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4e0:	d818      	bhi.n	800c514 <UART_SetConfig+0x210>
 800c4e2:	2b80      	cmp	r3, #128	@ 0x80
 800c4e4:	d00a      	beq.n	800c4fc <UART_SetConfig+0x1f8>
 800c4e6:	2b80      	cmp	r3, #128	@ 0x80
 800c4e8:	d814      	bhi.n	800c514 <UART_SetConfig+0x210>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <UART_SetConfig+0x1f0>
 800c4ee:	2b40      	cmp	r3, #64	@ 0x40
 800c4f0:	d008      	beq.n	800c504 <UART_SetConfig+0x200>
 800c4f2:	e00f      	b.n	800c514 <UART_SetConfig+0x210>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4fa:	e082      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c502:	e07e      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c504:	2304      	movs	r3, #4
 800c506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c50a:	e07a      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c50c:	2308      	movs	r3, #8
 800c50e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c512:	e076      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c514:	2310      	movs	r3, #16
 800c516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c51a:	e072      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a35      	ldr	r2, [pc, #212]	@ (800c5f8 <UART_SetConfig+0x2f4>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d12a      	bne.n	800c57c <UART_SetConfig+0x278>
 800c526:	4b30      	ldr	r3, [pc, #192]	@ (800c5e8 <UART_SetConfig+0x2e4>)
 800c528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c52c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c530:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c534:	d01a      	beq.n	800c56c <UART_SetConfig+0x268>
 800c536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c53a:	d81b      	bhi.n	800c574 <UART_SetConfig+0x270>
 800c53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c540:	d00c      	beq.n	800c55c <UART_SetConfig+0x258>
 800c542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c546:	d815      	bhi.n	800c574 <UART_SetConfig+0x270>
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <UART_SetConfig+0x250>
 800c54c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c550:	d008      	beq.n	800c564 <UART_SetConfig+0x260>
 800c552:	e00f      	b.n	800c574 <UART_SetConfig+0x270>
 800c554:	2300      	movs	r3, #0
 800c556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c55a:	e052      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c55c:	2302      	movs	r3, #2
 800c55e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c562:	e04e      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c564:	2304      	movs	r3, #4
 800c566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c56a:	e04a      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c56c:	2308      	movs	r3, #8
 800c56e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c572:	e046      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c574:	2310      	movs	r3, #16
 800c576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c57a:	e042      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a17      	ldr	r2, [pc, #92]	@ (800c5e0 <UART_SetConfig+0x2dc>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d13a      	bne.n	800c5fc <UART_SetConfig+0x2f8>
 800c586:	4b18      	ldr	r3, [pc, #96]	@ (800c5e8 <UART_SetConfig+0x2e4>)
 800c588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c58c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c590:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c594:	d01a      	beq.n	800c5cc <UART_SetConfig+0x2c8>
 800c596:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c59a:	d81b      	bhi.n	800c5d4 <UART_SetConfig+0x2d0>
 800c59c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5a0:	d00c      	beq.n	800c5bc <UART_SetConfig+0x2b8>
 800c5a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5a6:	d815      	bhi.n	800c5d4 <UART_SetConfig+0x2d0>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <UART_SetConfig+0x2b0>
 800c5ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5b0:	d008      	beq.n	800c5c4 <UART_SetConfig+0x2c0>
 800c5b2:	e00f      	b.n	800c5d4 <UART_SetConfig+0x2d0>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5ba:	e022      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5c2:	e01e      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5ca:	e01a      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c5cc:	2308      	movs	r3, #8
 800c5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5d2:	e016      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c5d4:	2310      	movs	r3, #16
 800c5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5da:	e012      	b.n	800c602 <UART_SetConfig+0x2fe>
 800c5dc:	cfff69f3 	.word	0xcfff69f3
 800c5e0:	40008000 	.word	0x40008000
 800c5e4:	40013800 	.word	0x40013800
 800c5e8:	40021000 	.word	0x40021000
 800c5ec:	40004400 	.word	0x40004400
 800c5f0:	40004800 	.word	0x40004800
 800c5f4:	40004c00 	.word	0x40004c00
 800c5f8:	40005000 	.word	0x40005000
 800c5fc:	2310      	movs	r3, #16
 800c5fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4aae      	ldr	r2, [pc, #696]	@ (800c8c0 <UART_SetConfig+0x5bc>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	f040 8097 	bne.w	800c73c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c60e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c612:	2b08      	cmp	r3, #8
 800c614:	d823      	bhi.n	800c65e <UART_SetConfig+0x35a>
 800c616:	a201      	add	r2, pc, #4	@ (adr r2, 800c61c <UART_SetConfig+0x318>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c641 	.word	0x0800c641
 800c620:	0800c65f 	.word	0x0800c65f
 800c624:	0800c649 	.word	0x0800c649
 800c628:	0800c65f 	.word	0x0800c65f
 800c62c:	0800c64f 	.word	0x0800c64f
 800c630:	0800c65f 	.word	0x0800c65f
 800c634:	0800c65f 	.word	0x0800c65f
 800c638:	0800c65f 	.word	0x0800c65f
 800c63c:	0800c657 	.word	0x0800c657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c640:	f7fc ff74 	bl	800952c <HAL_RCC_GetPCLK1Freq>
 800c644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c646:	e010      	b.n	800c66a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c648:	4b9e      	ldr	r3, [pc, #632]	@ (800c8c4 <UART_SetConfig+0x5c0>)
 800c64a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c64c:	e00d      	b.n	800c66a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c64e:	f7fc feff 	bl	8009450 <HAL_RCC_GetSysClockFreq>
 800c652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c654:	e009      	b.n	800c66a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c65a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c65c:	e005      	b.n	800c66a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 8130 	beq.w	800c8d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c676:	4a94      	ldr	r2, [pc, #592]	@ (800c8c8 <UART_SetConfig+0x5c4>)
 800c678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c67c:	461a      	mov	r2, r3
 800c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c680:	fbb3 f3f2 	udiv	r3, r3, r2
 800c684:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	4613      	mov	r3, r2
 800c68c:	005b      	lsls	r3, r3, #1
 800c68e:	4413      	add	r3, r2
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	429a      	cmp	r2, r3
 800c694:	d305      	bcc.n	800c6a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c69c:	69ba      	ldr	r2, [r7, #24]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d903      	bls.n	800c6aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c6a8:	e113      	b.n	800c8d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	60bb      	str	r3, [r7, #8]
 800c6b0:	60fa      	str	r2, [r7, #12]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b6:	4a84      	ldr	r2, [pc, #528]	@ (800c8c8 <UART_SetConfig+0x5c4>)
 800c6b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2200      	movs	r2, #0
 800c6c0:	603b      	str	r3, [r7, #0]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6cc:	f7f4 fb04 	bl	8000cd8 <__aeabi_uldivmod>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f04f 0200 	mov.w	r2, #0
 800c6dc:	f04f 0300 	mov.w	r3, #0
 800c6e0:	020b      	lsls	r3, r1, #8
 800c6e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6e6:	0202      	lsls	r2, r0, #8
 800c6e8:	6979      	ldr	r1, [r7, #20]
 800c6ea:	6849      	ldr	r1, [r1, #4]
 800c6ec:	0849      	lsrs	r1, r1, #1
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	eb12 0804 	adds.w	r8, r2, r4
 800c6f8:	eb43 0905 	adc.w	r9, r3, r5
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	469a      	mov	sl, r3
 800c704:	4693      	mov	fp, r2
 800c706:	4652      	mov	r2, sl
 800c708:	465b      	mov	r3, fp
 800c70a:	4640      	mov	r0, r8
 800c70c:	4649      	mov	r1, r9
 800c70e:	f7f4 fae3 	bl	8000cd8 <__aeabi_uldivmod>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4613      	mov	r3, r2
 800c718:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c720:	d308      	bcc.n	800c734 <UART_SetConfig+0x430>
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c728:	d204      	bcs.n	800c734 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6a3a      	ldr	r2, [r7, #32]
 800c730:	60da      	str	r2, [r3, #12]
 800c732:	e0ce      	b.n	800c8d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c73a:	e0ca      	b.n	800c8d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c744:	d166      	bne.n	800c814 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c746:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c74a:	2b08      	cmp	r3, #8
 800c74c:	d827      	bhi.n	800c79e <UART_SetConfig+0x49a>
 800c74e:	a201      	add	r2, pc, #4	@ (adr r2, 800c754 <UART_SetConfig+0x450>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c781 	.word	0x0800c781
 800c75c:	0800c789 	.word	0x0800c789
 800c760:	0800c79f 	.word	0x0800c79f
 800c764:	0800c78f 	.word	0x0800c78f
 800c768:	0800c79f 	.word	0x0800c79f
 800c76c:	0800c79f 	.word	0x0800c79f
 800c770:	0800c79f 	.word	0x0800c79f
 800c774:	0800c797 	.word	0x0800c797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c778:	f7fc fed8 	bl	800952c <HAL_RCC_GetPCLK1Freq>
 800c77c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c77e:	e014      	b.n	800c7aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c780:	f7fc feea 	bl	8009558 <HAL_RCC_GetPCLK2Freq>
 800c784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c786:	e010      	b.n	800c7aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c788:	4b4e      	ldr	r3, [pc, #312]	@ (800c8c4 <UART_SetConfig+0x5c0>)
 800c78a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c78c:	e00d      	b.n	800c7aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c78e:	f7fc fe5f 	bl	8009450 <HAL_RCC_GetSysClockFreq>
 800c792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c794:	e009      	b.n	800c7aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c79a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c79c:	e005      	b.n	800c7aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c7a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8090 	beq.w	800c8d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b6:	4a44      	ldr	r2, [pc, #272]	@ (800c8c8 <UART_SetConfig+0x5c4>)
 800c7b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7c4:	005a      	lsls	r2, r3, #1
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	085b      	lsrs	r3, r3, #1
 800c7cc:	441a      	add	r2, r3
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	2b0f      	cmp	r3, #15
 800c7dc:	d916      	bls.n	800c80c <UART_SetConfig+0x508>
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7e4:	d212      	bcs.n	800c80c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f023 030f 	bic.w	r3, r3, #15
 800c7ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	085b      	lsrs	r3, r3, #1
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	8bfb      	ldrh	r3, [r7, #30]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	8bfa      	ldrh	r2, [r7, #30]
 800c808:	60da      	str	r2, [r3, #12]
 800c80a:	e062      	b.n	800c8d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c812:	e05e      	b.n	800c8d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c814:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c818:	2b08      	cmp	r3, #8
 800c81a:	d828      	bhi.n	800c86e <UART_SetConfig+0x56a>
 800c81c:	a201      	add	r2, pc, #4	@ (adr r2, 800c824 <UART_SetConfig+0x520>)
 800c81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c822:	bf00      	nop
 800c824:	0800c849 	.word	0x0800c849
 800c828:	0800c851 	.word	0x0800c851
 800c82c:	0800c859 	.word	0x0800c859
 800c830:	0800c86f 	.word	0x0800c86f
 800c834:	0800c85f 	.word	0x0800c85f
 800c838:	0800c86f 	.word	0x0800c86f
 800c83c:	0800c86f 	.word	0x0800c86f
 800c840:	0800c86f 	.word	0x0800c86f
 800c844:	0800c867 	.word	0x0800c867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c848:	f7fc fe70 	bl	800952c <HAL_RCC_GetPCLK1Freq>
 800c84c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c84e:	e014      	b.n	800c87a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c850:	f7fc fe82 	bl	8009558 <HAL_RCC_GetPCLK2Freq>
 800c854:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c856:	e010      	b.n	800c87a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c858:	4b1a      	ldr	r3, [pc, #104]	@ (800c8c4 <UART_SetConfig+0x5c0>)
 800c85a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c85c:	e00d      	b.n	800c87a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c85e:	f7fc fdf7 	bl	8009450 <HAL_RCC_GetSysClockFreq>
 800c862:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c864:	e009      	b.n	800c87a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c86a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c86c:	e005      	b.n	800c87a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c86e:	2300      	movs	r3, #0
 800c870:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c878:	bf00      	nop
    }

    if (pclk != 0U)
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d028      	beq.n	800c8d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c884:	4a10      	ldr	r2, [pc, #64]	@ (800c8c8 <UART_SetConfig+0x5c4>)
 800c886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c88a:	461a      	mov	r2, r3
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	085b      	lsrs	r3, r3, #1
 800c898:	441a      	add	r2, r3
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	2b0f      	cmp	r3, #15
 800c8a8:	d910      	bls.n	800c8cc <UART_SetConfig+0x5c8>
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8b0:	d20c      	bcs.n	800c8cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	60da      	str	r2, [r3, #12]
 800c8bc:	e009      	b.n	800c8d2 <UART_SetConfig+0x5ce>
 800c8be:	bf00      	nop
 800c8c0:	40008000 	.word	0x40008000
 800c8c4:	00f42400 	.word	0x00f42400
 800c8c8:	08022ed4 	.word	0x08022ed4
      }
      else
      {
        ret = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c8ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3730      	adds	r7, #48	@ 0x30
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c8fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c908:	f003 0308 	and.w	r3, r3, #8
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00a      	beq.n	800c926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92a:	f003 0301 	and.w	r3, r3, #1
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00a      	beq.n	800c948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00a      	beq.n	800c96a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	430a      	orrs	r2, r1
 800c968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c96e:	f003 0304 	and.w	r3, r3, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00a      	beq.n	800c98c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	430a      	orrs	r2, r1
 800c98a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c990:	f003 0310 	and.w	r3, r3, #16
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00a      	beq.n	800c9ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	430a      	orrs	r2, r1
 800c9ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b2:	f003 0320 	and.w	r3, r3, #32
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00a      	beq.n	800c9d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d01a      	beq.n	800ca12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9fa:	d10a      	bne.n	800ca12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00a      	beq.n	800ca34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	430a      	orrs	r2, r1
 800ca32:	605a      	str	r2, [r3, #4]
  }
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b098      	sub	sp, #96	@ 0x60
 800ca44:	af02      	add	r7, sp, #8
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca50:	f7f7 fa7c 	bl	8003f4c <HAL_GetTick>
 800ca54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 0308 	and.w	r3, r3, #8
 800ca60:	2b08      	cmp	r3, #8
 800ca62:	d12f      	bne.n	800cac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f88e 	bl	800cb94 <UART_WaitOnFlagUntilTimeout>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d022      	beq.n	800cac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca86:	e853 3f00 	ldrex	r3, [r3]
 800ca8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca92:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800caa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800caa4:	e841 2300 	strex	r3, r2, [r1]
 800caa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800caaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1e6      	bne.n	800ca7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2220      	movs	r2, #32
 800cab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e063      	b.n	800cb8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f003 0304 	and.w	r3, r3, #4
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d149      	bne.n	800cb66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cada:	2200      	movs	r2, #0
 800cadc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 f857 	bl	800cb94 <UART_WaitOnFlagUntilTimeout>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d03c      	beq.n	800cb66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf4:	e853 3f00 	ldrex	r3, [r3]
 800caf8:	623b      	str	r3, [r7, #32]
   return(result);
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb12:	e841 2300 	strex	r3, r2, [r1]
 800cb16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1e6      	bne.n	800caec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3308      	adds	r3, #8
 800cb24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	e853 3f00 	ldrex	r3, [r3]
 800cb2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f023 0301 	bic.w	r3, r3, #1
 800cb34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb3e:	61fa      	str	r2, [r7, #28]
 800cb40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb42:	69b9      	ldr	r1, [r7, #24]
 800cb44:	69fa      	ldr	r2, [r7, #28]
 800cb46:	e841 2300 	strex	r3, r2, [r1]
 800cb4a:	617b      	str	r3, [r7, #20]
   return(result);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1e5      	bne.n	800cb1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2220      	movs	r2, #32
 800cb56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e012      	b.n	800cb8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2220      	movs	r2, #32
 800cb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3758      	adds	r7, #88	@ 0x58
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	4613      	mov	r3, r2
 800cba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cba4:	e04f      	b.n	800cc46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbac:	d04b      	beq.n	800cc46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbae:	f7f7 f9cd 	bl	8003f4c <HAL_GetTick>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	69ba      	ldr	r2, [r7, #24]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d302      	bcc.n	800cbc4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	e04e      	b.n	800cc66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0304 	and.w	r3, r3, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d037      	beq.n	800cc46 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2b80      	cmp	r3, #128	@ 0x80
 800cbda:	d034      	beq.n	800cc46 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2b40      	cmp	r3, #64	@ 0x40
 800cbe0:	d031      	beq.n	800cc46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	69db      	ldr	r3, [r3, #28]
 800cbe8:	f003 0308 	and.w	r3, r3, #8
 800cbec:	2b08      	cmp	r3, #8
 800cbee:	d110      	bne.n	800cc12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2208      	movs	r2, #8
 800cbf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f000 f838 	bl	800cc6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2208      	movs	r2, #8
 800cc02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e029      	b.n	800cc66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc20:	d111      	bne.n	800cc46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 f81e 	bl	800cc6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2220      	movs	r2, #32
 800cc36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e00f      	b.n	800cc66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69da      	ldr	r2, [r3, #28]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	4013      	ands	r3, r2
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	bf0c      	ite	eq
 800cc56:	2301      	moveq	r3, #1
 800cc58:	2300      	movne	r3, #0
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	79fb      	ldrb	r3, [r7, #7]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d0a0      	beq.n	800cba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b095      	sub	sp, #84	@ 0x54
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc7e:	e853 3f00 	ldrex	r3, [r3]
 800cc82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	461a      	mov	r2, r3
 800cc92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc94:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc9c:	e841 2300 	strex	r3, r2, [r1]
 800cca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1e6      	bne.n	800cc76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3308      	adds	r3, #8
 800ccae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	e853 3f00 	ldrex	r3, [r3]
 800ccb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccbe:	f023 0301 	bic.w	r3, r3, #1
 800ccc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3308      	adds	r3, #8
 800ccca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd4:	e841 2300 	strex	r3, r2, [r1]
 800ccd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1e3      	bne.n	800cca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d118      	bne.n	800cd1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	e853 3f00 	ldrex	r3, [r3]
 800ccf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f023 0310 	bic.w	r3, r3, #16
 800ccfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd06:	61bb      	str	r3, [r7, #24]
 800cd08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0a:	6979      	ldr	r1, [r7, #20]
 800cd0c:	69ba      	ldr	r2, [r7, #24]
 800cd0e:	e841 2300 	strex	r3, r2, [r1]
 800cd12:	613b      	str	r3, [r7, #16]
   return(result);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1e6      	bne.n	800cce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2220      	movs	r2, #32
 800cd1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cd2e:	bf00      	nop
 800cd30:	3754      	adds	r7, #84	@ 0x54
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b085      	sub	sp, #20
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d101      	bne.n	800cd50 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e027      	b.n	800cda0 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2224      	movs	r2, #36	@ 0x24
 800cd5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f022 0201 	bic.w	r2, r2, #1
 800cd76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d101      	bne.n	800cdc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e02d      	b.n	800ce20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2224      	movs	r2, #36	@ 0x24
 800cdd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f022 0201 	bic.w	r2, r2, #1
 800cdea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	430a      	orrs	r2, r1
 800cdfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f84f 	bl	800cea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2220      	movs	r2, #32
 800ce12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d101      	bne.n	800ce40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e02d      	b.n	800ce9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2224      	movs	r2, #36	@ 0x24
 800ce4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0201 	bic.w	r2, r2, #1
 800ce66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	430a      	orrs	r2, r1
 800ce7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f811 	bl	800cea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d108      	bne.n	800cec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cec4:	e031      	b.n	800cf2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cec6:	2308      	movs	r3, #8
 800cec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ceca:	2308      	movs	r3, #8
 800cecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	0e5b      	lsrs	r3, r3, #25
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0307 	and.w	r3, r3, #7
 800cedc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	0f5b      	lsrs	r3, r3, #29
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 0307 	and.w	r3, r3, #7
 800ceec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
 800cef0:	7b3a      	ldrb	r2, [r7, #12]
 800cef2:	4911      	ldr	r1, [pc, #68]	@ (800cf38 <UARTEx_SetNbDataToProcess+0x94>)
 800cef4:	5c8a      	ldrb	r2, [r1, r2]
 800cef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cefa:	7b3a      	ldrb	r2, [r7, #12]
 800cefc:	490f      	ldr	r1, [pc, #60]	@ (800cf3c <UARTEx_SetNbDataToProcess+0x98>)
 800cefe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf00:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	7b7a      	ldrb	r2, [r7, #13]
 800cf10:	4909      	ldr	r1, [pc, #36]	@ (800cf38 <UARTEx_SetNbDataToProcess+0x94>)
 800cf12:	5c8a      	ldrb	r2, [r1, r2]
 800cf14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf18:	7b7a      	ldrb	r2, [r7, #13]
 800cf1a:	4908      	ldr	r1, [pc, #32]	@ (800cf3c <UARTEx_SetNbDataToProcess+0x98>)
 800cf1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf2a:	bf00      	nop
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	08022eec 	.word	0x08022eec
 800cf3c:	08022ef4 	.word	0x08022ef4

0800cf40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf50:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b085      	sub	sp, #20
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	43db      	mvns	r3, r3
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	1d3b      	adds	r3, r7, #4
 800cfae:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b0a7      	sub	sp, #156	@ 0x9c
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	881b      	ldrh	r3, [r3, #0]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d006:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	78db      	ldrb	r3, [r3, #3]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d81f      	bhi.n	800d052 <USB_ActivateEndpoint+0x72>
 800d012:	a201      	add	r2, pc, #4	@ (adr r2, 800d018 <USB_ActivateEndpoint+0x38>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d029 	.word	0x0800d029
 800d01c:	0800d045 	.word	0x0800d045
 800d020:	0800d05b 	.word	0x0800d05b
 800d024:	0800d037 	.word	0x0800d037
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d028:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d02c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d030:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800d034:	e012      	b.n	800d05c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d036:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d03a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d03e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800d042:	e00b      	b.n	800d05c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d044:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d04c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800d050:	e004      	b.n	800d05c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800d058:	e000      	b.n	800d05c <USB_ActivateEndpoint+0x7c>
      break;
 800d05a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	441a      	add	r2, r3
 800d066:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d06a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d06e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	b21b      	sxth	r3, r3
 800d08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d096:	b21a      	sxth	r2, r3
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	b21b      	sxth	r3, r3
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	b21b      	sxth	r3, r3
 800d0a2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	441a      	add	r2, r3
 800d0b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800d0b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	7b1b      	ldrb	r3, [r3, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 8180 	bne.w	800d3d2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	785b      	ldrb	r3, [r3, #1]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f000 8084 	beq.w	800d1e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	61bb      	str	r3, [r7, #24]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	61bb      	str	r3, [r7, #24]
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	00da      	lsls	r2, r3, #3
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0fe:	617b      	str	r3, [r7, #20]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	88db      	ldrh	r3, [r3, #6]
 800d104:	085b      	lsrs	r3, r3, #1
 800d106:	b29b      	uxth	r3, r3
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	827b      	strh	r3, [r7, #18]
 800d11e:	8a7b      	ldrh	r3, [r7, #18]
 800d120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d124:	2b00      	cmp	r3, #0
 800d126:	d01b      	beq.n	800d160 <USB_ActivateEndpoint+0x180>
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4413      	add	r3, r2
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	b29b      	uxth	r3, r3
 800d136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d13a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d13e:	823b      	strh	r3, [r7, #16]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	441a      	add	r2, r3
 800d14a:	8a3b      	ldrh	r3, [r7, #16]
 800d14c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	78db      	ldrb	r3, [r3, #3]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d020      	beq.n	800d1aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	b29b      	uxth	r3, r3
 800d176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d17a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d17e:	81bb      	strh	r3, [r7, #12]
 800d180:	89bb      	ldrh	r3, [r7, #12]
 800d182:	f083 0320 	eor.w	r3, r3, #32
 800d186:	81bb      	strh	r3, [r7, #12]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	441a      	add	r2, r3
 800d192:	89bb      	ldrh	r3, [r7, #12]
 800d194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d19c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	8013      	strh	r3, [r2, #0]
 800d1a8:	e3f9      	b.n	800d99e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1c0:	81fb      	strh	r3, [r7, #14]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	441a      	add	r2, r3
 800d1cc:	89fb      	ldrh	r3, [r7, #14]
 800d1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	8013      	strh	r3, [r2, #0]
 800d1e2:	e3dc      	b.n	800d99e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	4413      	add	r3, r2
 800d1f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	00da      	lsls	r2, r3, #3
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	4413      	add	r3, r2
 800d202:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	88db      	ldrh	r3, [r3, #6]
 800d20c:	085b      	lsrs	r3, r3, #1
 800d20e:	b29b      	uxth	r3, r3
 800d210:	005b      	lsls	r3, r3, #1
 800d212:	b29a      	uxth	r2, r3
 800d214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d216:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d222:	b29b      	uxth	r3, r3
 800d224:	461a      	mov	r2, r3
 800d226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d228:	4413      	add	r3, r2
 800d22a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	00da      	lsls	r2, r3, #3
 800d232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d234:	4413      	add	r3, r2
 800d236:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d23a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b29b      	uxth	r3, r3
 800d242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d246:	b29a      	uxth	r2, r3
 800d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24a:	801a      	strh	r2, [r3, #0]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10a      	bne.n	800d26a <USB_ActivateEndpoint+0x28a>
 800d254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	b29b      	uxth	r3, r3
 800d25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d262:	b29a      	uxth	r2, r3
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	801a      	strh	r2, [r3, #0]
 800d268:	e041      	b.n	800d2ee <USB_ActivateEndpoint+0x30e>
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d270:	d81c      	bhi.n	800d2ac <USB_ActivateEndpoint+0x2cc>
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	d004      	beq.n	800d292 <USB_ActivateEndpoint+0x2b2>
 800d288:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d28c:	3301      	adds	r3, #1
 800d28e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	b29a      	uxth	r2, r3
 800d298:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	029b      	lsls	r3, r3, #10
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a8:	801a      	strh	r2, [r3, #0]
 800d2aa:	e020      	b.n	800d2ee <USB_ActivateEndpoint+0x30e>
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	095b      	lsrs	r3, r3, #5
 800d2b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	f003 031f 	and.w	r3, r3, #31
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d104      	bne.n	800d2cc <USB_ActivateEndpoint+0x2ec>
 800d2c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	029b      	lsls	r3, r3, #10
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d2fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d01b      	beq.n	800d33e <USB_ActivateEndpoint+0x35e>
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	b29b      	uxth	r3, r3
 800d314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d31c:	843b      	strh	r3, [r7, #32]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	441a      	add	r2, r3
 800d328:	8c3b      	ldrh	r3, [r7, #32]
 800d32a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d32e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d332:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d124      	bne.n	800d390 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	b29b      	uxth	r3, r3
 800d354:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d35c:	83bb      	strh	r3, [r7, #28]
 800d35e:	8bbb      	ldrh	r3, [r7, #28]
 800d360:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d364:	83bb      	strh	r3, [r7, #28]
 800d366:	8bbb      	ldrh	r3, [r7, #28]
 800d368:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d36c:	83bb      	strh	r3, [r7, #28]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	441a      	add	r2, r3
 800d378:	8bbb      	ldrh	r3, [r7, #28]
 800d37a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d37e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	8013      	strh	r3, [r2, #0]
 800d38e:	e306      	b.n	800d99e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3a6:	83fb      	strh	r3, [r7, #30]
 800d3a8:	8bfb      	ldrh	r3, [r7, #30]
 800d3aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3ae:	83fb      	strh	r3, [r7, #30]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	441a      	add	r2, r3
 800d3ba:	8bfb      	ldrh	r3, [r7, #30]
 800d3bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	8013      	strh	r3, [r2, #0]
 800d3d0:	e2e5      	b.n	800d99e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	78db      	ldrb	r3, [r3, #3]
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d11e      	bne.n	800d418 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d3ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3f0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	441a      	add	r2, r3
 800d3fe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800d402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d40a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d412:	b29b      	uxth	r3, r3
 800d414:	8013      	strh	r3, [r2, #0]
 800d416:	e01d      	b.n	800d454 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	4413      	add	r3, r2
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	b29b      	uxth	r3, r3
 800d426:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d42e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	441a      	add	r2, r3
 800d43c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800d440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d450:	b29b      	uxth	r3, r3
 800d452:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d45e:	b29b      	uxth	r3, r3
 800d460:	461a      	mov	r2, r3
 800d462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d464:	4413      	add	r3, r2
 800d466:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	00da      	lsls	r2, r3, #3
 800d46e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d470:	4413      	add	r3, r2
 800d472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d476:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	891b      	ldrh	r3, [r3, #8]
 800d47c:	085b      	lsrs	r3, r3, #1
 800d47e:	b29b      	uxth	r3, r3
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d486:	801a      	strh	r2, [r3, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d492:	b29b      	uxth	r3, r3
 800d494:	461a      	mov	r2, r3
 800d496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d498:	4413      	add	r3, r2
 800d49a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	00da      	lsls	r2, r3, #3
 800d4a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4a4:	4413      	add	r3, r2
 800d4a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d4aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	895b      	ldrh	r3, [r3, #10]
 800d4b0:	085b      	lsrs	r3, r3, #1
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	785b      	ldrb	r3, [r3, #1]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f040 81af 	bne.w	800d824 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d4d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800d4da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d01d      	beq.n	800d51e <USB_ActivateEndpoint+0x53e>
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4f8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	441a      	add	r2, r3
 800d506:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800d50a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d50e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d512:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	4413      	add	r3, r2
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800d52e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800d532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d536:	2b00      	cmp	r3, #0
 800d538:	d01d      	beq.n	800d576 <USB_ActivateEndpoint+0x596>
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4413      	add	r3, r2
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	b29b      	uxth	r3, r3
 800d548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d54c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d550:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	441a      	add	r2, r3
 800d55e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d56a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d56e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d572:	b29b      	uxth	r3, r3
 800d574:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	785b      	ldrb	r3, [r3, #1]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d16b      	bne.n	800d656 <USB_ActivateEndpoint+0x676>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d588:	b29b      	uxth	r3, r3
 800d58a:	461a      	mov	r2, r3
 800d58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d58e:	4413      	add	r3, r2
 800d590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	00da      	lsls	r2, r3, #3
 800d598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d59a:	4413      	add	r3, r2
 800d59c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5b0:	801a      	strh	r2, [r3, #0]
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10a      	bne.n	800d5d0 <USB_ActivateEndpoint+0x5f0>
 800d5ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5cc:	801a      	strh	r2, [r3, #0]
 800d5ce:	e05d      	b.n	800d68c <USB_ActivateEndpoint+0x6ac>
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5d6:	d81c      	bhi.n	800d612 <USB_ActivateEndpoint+0x632>
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	085b      	lsrs	r3, r3, #1
 800d5de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <USB_ActivateEndpoint+0x618>
 800d5ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d602:	b29b      	uxth	r3, r3
 800d604:	029b      	lsls	r3, r3, #10
 800d606:	b29b      	uxth	r3, r3
 800d608:	4313      	orrs	r3, r2
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d60e:	801a      	strh	r2, [r3, #0]
 800d610:	e03c      	b.n	800d68c <USB_ActivateEndpoint+0x6ac>
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	095b      	lsrs	r3, r3, #5
 800d618:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	f003 031f 	and.w	r3, r3, #31
 800d624:	2b00      	cmp	r3, #0
 800d626:	d104      	bne.n	800d632 <USB_ActivateEndpoint+0x652>
 800d628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d62c:	3b01      	subs	r3, #1
 800d62e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d634:	881b      	ldrh	r3, [r3, #0]
 800d636:	b29a      	uxth	r2, r3
 800d638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	029b      	lsls	r3, r3, #10
 800d640:	b29b      	uxth	r3, r3
 800d642:	4313      	orrs	r3, r2
 800d644:	b29b      	uxth	r3, r3
 800d646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d64a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d64e:	b29a      	uxth	r2, r3
 800d650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d652:	801a      	strh	r2, [r3, #0]
 800d654:	e01a      	b.n	800d68c <USB_ActivateEndpoint+0x6ac>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	785b      	ldrb	r3, [r3, #1]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d116      	bne.n	800d68c <USB_ActivateEndpoint+0x6ac>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	657b      	str	r3, [r7, #84]	@ 0x54
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d668:	b29b      	uxth	r3, r3
 800d66a:	461a      	mov	r2, r3
 800d66c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d66e:	4413      	add	r3, r2
 800d670:	657b      	str	r3, [r7, #84]	@ 0x54
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	00da      	lsls	r2, r3, #3
 800d678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d67a:	4413      	add	r3, r2
 800d67c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d680:	653b      	str	r3, [r7, #80]	@ 0x50
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	b29a      	uxth	r2, r3
 800d688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d68a:	801a      	strh	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	785b      	ldrb	r3, [r3, #1]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d16b      	bne.n	800d770 <USB_ActivateEndpoint+0x790>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a8:	4413      	add	r3, r2
 800d6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	00da      	lsls	r2, r3, #3
 800d6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ca:	801a      	strh	r2, [r3, #0]
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <USB_ActivateEndpoint+0x70a>
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e6:	801a      	strh	r2, [r3, #0]
 800d6e8:	e05b      	b.n	800d7a2 <USB_ActivateEndpoint+0x7c2>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6f0:	d81c      	bhi.n	800d72c <USB_ActivateEndpoint+0x74c>
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	085b      	lsrs	r3, r3, #1
 800d6f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <USB_ActivateEndpoint+0x732>
 800d708:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d70c:	3301      	adds	r3, #1
 800d70e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	b29a      	uxth	r2, r3
 800d718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	029b      	lsls	r3, r3, #10
 800d720:	b29b      	uxth	r3, r3
 800d722:	4313      	orrs	r3, r2
 800d724:	b29a      	uxth	r2, r3
 800d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d728:	801a      	strh	r2, [r3, #0]
 800d72a:	e03a      	b.n	800d7a2 <USB_ActivateEndpoint+0x7c2>
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	095b      	lsrs	r3, r3, #5
 800d732:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	f003 031f 	and.w	r3, r3, #31
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <USB_ActivateEndpoint+0x76c>
 800d742:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d746:	3b01      	subs	r3, #1
 800d748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	b29a      	uxth	r2, r3
 800d752:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d756:	b29b      	uxth	r3, r3
 800d758:	029b      	lsls	r3, r3, #10
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	4313      	orrs	r3, r2
 800d75e:	b29b      	uxth	r3, r3
 800d760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d768:	b29a      	uxth	r2, r3
 800d76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76c:	801a      	strh	r2, [r3, #0]
 800d76e:	e018      	b.n	800d7a2 <USB_ActivateEndpoint+0x7c2>
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	785b      	ldrb	r3, [r3, #1]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d114      	bne.n	800d7a2 <USB_ActivateEndpoint+0x7c2>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d77e:	b29b      	uxth	r3, r3
 800d780:	461a      	mov	r2, r3
 800d782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d784:	4413      	add	r3, r2
 800d786:	647b      	str	r3, [r7, #68]	@ 0x44
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	00da      	lsls	r2, r3, #3
 800d78e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d790:	4413      	add	r3, r2
 800d792:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d796:	643b      	str	r3, [r7, #64]	@ 0x40
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7a0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d7b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d7ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d7c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d7c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d7c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	441a      	add	r2, r3
 800d7d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	881b      	ldrh	r3, [r3, #0]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d800:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	441a      	add	r2, r3
 800d80c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d80e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d81a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d81e:	b29b      	uxth	r3, r3
 800d820:	8013      	strh	r3, [r2, #0]
 800d822:	e0bc      	b.n	800d99e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d834:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01d      	beq.n	800d87c <USB_ActivateEndpoint+0x89c>
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d856:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	441a      	add	r2, r3
 800d864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d86c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d870:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d878:	b29b      	uxth	r3, r3
 800d87a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800d88c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800d890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d894:	2b00      	cmp	r3, #0
 800d896:	d01d      	beq.n	800d8d4 <USB_ActivateEndpoint+0x8f4>
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	881b      	ldrh	r3, [r3, #0]
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8ae:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	441a      	add	r2, r3
 800d8bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d8c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	78db      	ldrb	r3, [r3, #3]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d024      	beq.n	800d926 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d8f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8fa:	f083 0320 	eor.w	r3, r3, #32
 800d8fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	441a      	add	r2, r3
 800d90c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d91c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d920:	b29b      	uxth	r3, r3
 800d922:	8013      	strh	r3, [r2, #0]
 800d924:	e01d      	b.n	800d962 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	b29b      	uxth	r3, r3
 800d934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d93c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	441a      	add	r2, r3
 800d94a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d94e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d95e:	b29b      	uxth	r3, r3
 800d960:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4413      	add	r3, r2
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	b29b      	uxth	r3, r3
 800d970:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d978:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	441a      	add	r2, r3
 800d986:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d98a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d98e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d99e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	379c      	adds	r7, #156	@ 0x9c
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b08d      	sub	sp, #52	@ 0x34
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	7b1b      	ldrb	r3, [r3, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f040 808e 	bne.w	800dae0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	785b      	ldrb	r3, [r3, #1]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d044      	beq.n	800da56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	81bb      	strh	r3, [r7, #12]
 800d9da:	89bb      	ldrh	r3, [r7, #12]
 800d9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d01b      	beq.n	800da1c <USB_DeactivateEndpoint+0x6c>
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9fa:	817b      	strh	r3, [r7, #10]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	441a      	add	r2, r3
 800da06:	897b      	ldrh	r3, [r7, #10]
 800da08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800da18:	b29b      	uxth	r3, r3
 800da1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4413      	add	r3, r2
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da32:	813b      	strh	r3, [r7, #8]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	441a      	add	r2, r3
 800da3e:	893b      	ldrh	r3, [r7, #8]
 800da40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da50:	b29b      	uxth	r3, r3
 800da52:	8013      	strh	r3, [r2, #0]
 800da54:	e192      	b.n	800dd7c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4413      	add	r3, r2
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	827b      	strh	r3, [r7, #18]
 800da64:	8a7b      	ldrh	r3, [r7, #18]
 800da66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d01b      	beq.n	800daa6 <USB_DeactivateEndpoint+0xf6>
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	4413      	add	r3, r2
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da84:	823b      	strh	r3, [r7, #16]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	441a      	add	r2, r3
 800da90:	8a3b      	ldrh	r3, [r7, #16]
 800da92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	4413      	add	r3, r2
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dabc:	81fb      	strh	r3, [r7, #14]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	441a      	add	r2, r3
 800dac8:	89fb      	ldrh	r3, [r7, #14]
 800daca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dada:	b29b      	uxth	r3, r3
 800dadc:	8013      	strh	r3, [r2, #0]
 800dade:	e14d      	b.n	800dd7c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	785b      	ldrb	r3, [r3, #1]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f040 80a5 	bne.w	800dc34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4413      	add	r3, r2
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	843b      	strh	r3, [r7, #32]
 800daf8:	8c3b      	ldrh	r3, [r7, #32]
 800dafa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d01b      	beq.n	800db3a <USB_DeactivateEndpoint+0x18a>
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db18:	83fb      	strh	r3, [r7, #30]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	441a      	add	r2, r3
 800db24:	8bfb      	ldrh	r3, [r7, #30]
 800db26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800db32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db36:	b29b      	uxth	r3, r3
 800db38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	881b      	ldrh	r3, [r3, #0]
 800db46:	83bb      	strh	r3, [r7, #28]
 800db48:	8bbb      	ldrh	r3, [r7, #28]
 800db4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d01b      	beq.n	800db8a <USB_DeactivateEndpoint+0x1da>
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db68:	837b      	strh	r3, [r7, #26]
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	441a      	add	r2, r3
 800db74:	8b7b      	ldrh	r3, [r7, #26]
 800db76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db86:	b29b      	uxth	r3, r3
 800db88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	b29b      	uxth	r3, r3
 800db98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dba0:	833b      	strh	r3, [r7, #24]
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	441a      	add	r2, r3
 800dbac:	8b3b      	ldrh	r3, [r7, #24]
 800dbae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dbd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbd8:	82fb      	strh	r3, [r7, #22]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	441a      	add	r2, r3
 800dbe4:	8afb      	ldrh	r3, [r7, #22]
 800dbe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	4413      	add	r3, r2
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc10:	82bb      	strh	r3, [r7, #20]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	441a      	add	r2, r3
 800dc1c:	8abb      	ldrh	r3, [r7, #20]
 800dc1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	8013      	strh	r3, [r2, #0]
 800dc32:	e0a3      	b.n	800dd7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800dc42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dc44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d01b      	beq.n	800dc84 <USB_DeactivateEndpoint+0x2d4>
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4413      	add	r3, r2
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc62:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	441a      	add	r2, r3
 800dc6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800dc70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800dc92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dc94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d01b      	beq.n	800dcd4 <USB_DeactivateEndpoint+0x324>
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	441a      	add	r2, r3
 800dcbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dcc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dccc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	441a      	add	r2, r3
 800dcf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dcf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	441a      	add	r2, r3
 800dd2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	441a      	add	r2, r3
 800dd66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3734      	adds	r7, #52	@ 0x34
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b0ac      	sub	sp, #176	@ 0xb0
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	785b      	ldrb	r3, [r3, #1]
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	f040 84ca 	bne.w	800e732 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	699a      	ldr	r2, [r3, #24]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d904      	bls.n	800ddb4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ddb2:	e003      	b.n	800ddbc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	7b1b      	ldrb	r3, [r3, #12]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d122      	bne.n	800de0a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	6959      	ldr	r1, [r3, #20]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	88da      	ldrh	r2, [r3, #6]
 800ddcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 febd 	bl	800eb52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	613b      	str	r3, [r7, #16]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	461a      	mov	r2, r3
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	4413      	add	r3, r2
 800ddea:	613b      	str	r3, [r7, #16]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	00da      	lsls	r2, r3, #3
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de00:	b29a      	uxth	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	801a      	strh	r2, [r3, #0]
 800de06:	f000 bc6f 	b.w	800e6e8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	78db      	ldrb	r3, [r3, #3]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	f040 831e 	bne.w	800e450 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	6a1a      	ldr	r2, [r3, #32]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	f240 82cf 	bls.w	800e3c0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4413      	add	r3, r2
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	441a      	add	r2, r3
 800de46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800de56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	6a1a      	ldr	r2, [r3, #32]
 800de62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	881b      	ldrh	r3, [r3, #0]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 814f 	beq.w	800e122 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	633b      	str	r3, [r7, #48]	@ 0x30
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d16b      	bne.n	800df68 <USB_EPStartXfer+0x1de>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea0:	4413      	add	r3, r2
 800dea2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	00da      	lsls	r2, r3, #3
 800deaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deac:	4413      	add	r3, r2
 800deae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800deb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	881b      	ldrh	r3, [r3, #0]
 800deb8:	b29b      	uxth	r3, r3
 800deba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800debe:	b29a      	uxth	r2, r3
 800dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec2:	801a      	strh	r2, [r3, #0]
 800dec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10a      	bne.n	800dee2 <USB_EPStartXfer+0x158>
 800decc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ded6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deda:	b29a      	uxth	r2, r3
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	801a      	strh	r2, [r3, #0]
 800dee0:	e05b      	b.n	800df9a <USB_EPStartXfer+0x210>
 800dee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dee6:	2b3e      	cmp	r3, #62	@ 0x3e
 800dee8:	d81c      	bhi.n	800df24 <USB_EPStartXfer+0x19a>
 800deea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800deee:	085b      	lsrs	r3, r3, #1
 800def0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800def4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	2b00      	cmp	r3, #0
 800defe:	d004      	beq.n	800df0a <USB_EPStartXfer+0x180>
 800df00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df04:	3301      	adds	r3, #1
 800df06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	b29a      	uxth	r2, r3
 800df10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df14:	b29b      	uxth	r3, r3
 800df16:	029b      	lsls	r3, r3, #10
 800df18:	b29b      	uxth	r3, r3
 800df1a:	4313      	orrs	r3, r2
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	801a      	strh	r2, [r3, #0]
 800df22:	e03a      	b.n	800df9a <USB_EPStartXfer+0x210>
 800df24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df28:	095b      	lsrs	r3, r3, #5
 800df2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df32:	f003 031f 	and.w	r3, r3, #31
 800df36:	2b00      	cmp	r3, #0
 800df38:	d104      	bne.n	800df44 <USB_EPStartXfer+0x1ba>
 800df3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df3e:	3b01      	subs	r3, #1
 800df40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df4e:	b29b      	uxth	r3, r3
 800df50:	029b      	lsls	r3, r3, #10
 800df52:	b29b      	uxth	r3, r3
 800df54:	4313      	orrs	r3, r2
 800df56:	b29b      	uxth	r3, r3
 800df58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df60:	b29a      	uxth	r2, r3
 800df62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df64:	801a      	strh	r2, [r3, #0]
 800df66:	e018      	b.n	800df9a <USB_EPStartXfer+0x210>
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	785b      	ldrb	r3, [r3, #1]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d114      	bne.n	800df9a <USB_EPStartXfer+0x210>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df76:	b29b      	uxth	r3, r3
 800df78:	461a      	mov	r2, r3
 800df7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7c:	4413      	add	r3, r2
 800df7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	00da      	lsls	r2, r3, #3
 800df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df88:	4413      	add	r3, r2
 800df8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df94:	b29a      	uxth	r2, r3
 800df96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	895b      	ldrh	r3, [r3, #10]
 800df9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	6959      	ldr	r1, [r3, #20]
 800dfa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fdce 	bl	800eb52 <USB_WritePMA>
            ep->xfer_buff += len;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	695a      	ldr	r2, [r3, #20]
 800dfba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfbe:	441a      	add	r2, r3
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	6a1a      	ldr	r2, [r3, #32]
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d907      	bls.n	800dfe0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	6a1a      	ldr	r2, [r3, #32]
 800dfd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfd8:	1ad2      	subs	r2, r2, r3
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	621a      	str	r2, [r3, #32]
 800dfde:	e006      	b.n	800dfee <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	6a1b      	ldr	r3, [r3, #32]
 800dfe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2200      	movs	r2, #0
 800dfec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	785b      	ldrb	r3, [r3, #1]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d16b      	bne.n	800e0ce <USB_EPStartXfer+0x344>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	61bb      	str	r3, [r7, #24]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e000:	b29b      	uxth	r3, r3
 800e002:	461a      	mov	r2, r3
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	4413      	add	r3, r2
 800e008:	61bb      	str	r3, [r7, #24]
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	00da      	lsls	r2, r3, #3
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	4413      	add	r3, r2
 800e014:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	b29b      	uxth	r3, r3
 800e020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e024:	b29a      	uxth	r2, r3
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	801a      	strh	r2, [r3, #0]
 800e02a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10a      	bne.n	800e048 <USB_EPStartXfer+0x2be>
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	b29b      	uxth	r3, r3
 800e038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e040:	b29a      	uxth	r2, r3
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	801a      	strh	r2, [r3, #0]
 800e046:	e05d      	b.n	800e104 <USB_EPStartXfer+0x37a>
 800e048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e04c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e04e:	d81c      	bhi.n	800e08a <USB_EPStartXfer+0x300>
 800e050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e054:	085b      	lsrs	r3, r3, #1
 800e056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e05a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <USB_EPStartXfer+0x2e6>
 800e066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e06a:	3301      	adds	r3, #1
 800e06c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	b29a      	uxth	r2, r3
 800e076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	029b      	lsls	r3, r3, #10
 800e07e:	b29b      	uxth	r3, r3
 800e080:	4313      	orrs	r3, r2
 800e082:	b29a      	uxth	r2, r3
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	801a      	strh	r2, [r3, #0]
 800e088:	e03c      	b.n	800e104 <USB_EPStartXfer+0x37a>
 800e08a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e08e:	095b      	lsrs	r3, r3, #5
 800e090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e098:	f003 031f 	and.w	r3, r3, #31
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d104      	bne.n	800e0aa <USB_EPStartXfer+0x320>
 800e0a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	029b      	lsls	r3, r3, #10
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	801a      	strh	r2, [r3, #0]
 800e0cc:	e01a      	b.n	800e104 <USB_EPStartXfer+0x37a>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	785b      	ldrb	r3, [r3, #1]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d116      	bne.n	800e104 <USB_EPStartXfer+0x37a>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	623b      	str	r3, [r7, #32]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	6a3b      	ldr	r3, [r7, #32]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	623b      	str	r3, [r7, #32]
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	00da      	lsls	r2, r3, #3
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0f8:	61fb      	str	r3, [r7, #28]
 800e0fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	891b      	ldrh	r3, [r3, #8]
 800e108:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	6959      	ldr	r1, [r3, #20]
 800e110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e114:	b29b      	uxth	r3, r3
 800e116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fd19 	bl	800eb52 <USB_WritePMA>
 800e120:	e2e2      	b.n	800e6e8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	785b      	ldrb	r3, [r3, #1]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d16b      	bne.n	800e202 <USB_EPStartXfer+0x478>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e134:	b29b      	uxth	r3, r3
 800e136:	461a      	mov	r2, r3
 800e138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e13a:	4413      	add	r3, r2
 800e13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	00da      	lsls	r2, r3, #3
 800e144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e146:	4413      	add	r3, r2
 800e148:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e14c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	b29b      	uxth	r3, r3
 800e154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e158:	b29a      	uxth	r2, r3
 800e15a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e15c:	801a      	strh	r2, [r3, #0]
 800e15e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10a      	bne.n	800e17c <USB_EPStartXfer+0x3f2>
 800e166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e174:	b29a      	uxth	r2, r3
 800e176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e178:	801a      	strh	r2, [r3, #0]
 800e17a:	e05d      	b.n	800e238 <USB_EPStartXfer+0x4ae>
 800e17c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e180:	2b3e      	cmp	r3, #62	@ 0x3e
 800e182:	d81c      	bhi.n	800e1be <USB_EPStartXfer+0x434>
 800e184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e188:	085b      	lsrs	r3, r3, #1
 800e18a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <USB_EPStartXfer+0x41a>
 800e19a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e19e:	3301      	adds	r3, #1
 800e1a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	029b      	lsls	r3, r3, #10
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ba:	801a      	strh	r2, [r3, #0]
 800e1bc:	e03c      	b.n	800e238 <USB_EPStartXfer+0x4ae>
 800e1be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1c2:	095b      	lsrs	r3, r3, #5
 800e1c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1cc:	f003 031f 	and.w	r3, r3, #31
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d104      	bne.n	800e1de <USB_EPStartXfer+0x454>
 800e1d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	029b      	lsls	r3, r3, #10
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1fe:	801a      	strh	r2, [r3, #0]
 800e200:	e01a      	b.n	800e238 <USB_EPStartXfer+0x4ae>
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	785b      	ldrb	r3, [r3, #1]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d116      	bne.n	800e238 <USB_EPStartXfer+0x4ae>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e214:	b29b      	uxth	r3, r3
 800e216:	461a      	mov	r2, r3
 800e218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e21a:	4413      	add	r3, r2
 800e21c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	00da      	lsls	r2, r3, #3
 800e224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e226:	4413      	add	r3, r2
 800e228:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e22e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e232:	b29a      	uxth	r2, r3
 800e234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e236:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	891b      	ldrh	r3, [r3, #8]
 800e23c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	6959      	ldr	r1, [r3, #20]
 800e244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e248:	b29b      	uxth	r3, r3
 800e24a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fc7f 	bl	800eb52 <USB_WritePMA>
            ep->xfer_buff += len;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	695a      	ldr	r2, [r3, #20]
 800e258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e25c:	441a      	add	r2, r3
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	6a1a      	ldr	r2, [r3, #32]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d907      	bls.n	800e27e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	6a1a      	ldr	r2, [r3, #32]
 800e272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e276:	1ad2      	subs	r2, r2, r3
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	621a      	str	r2, [r3, #32]
 800e27c:	e006      	b.n	800e28c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2200      	movs	r2, #0
 800e28a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	785b      	ldrb	r3, [r3, #1]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d16b      	bne.n	800e370 <USB_EPStartXfer+0x5e6>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	4413      	add	r3, r2
 800e2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	00da      	lsls	r2, r3, #3
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ca:	801a      	strh	r2, [r3, #0]
 800e2cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <USB_EPStartXfer+0x560>
 800e2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2d6:	881b      	ldrh	r3, [r3, #0]
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e6:	801a      	strh	r2, [r3, #0]
 800e2e8:	e05b      	b.n	800e3a2 <USB_EPStartXfer+0x618>
 800e2ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2f0:	d81c      	bhi.n	800e32c <USB_EPStartXfer+0x5a2>
 800e2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2f6:	085b      	lsrs	r3, r3, #1
 800e2f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e2fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	d004      	beq.n	800e312 <USB_EPStartXfer+0x588>
 800e308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e30c:	3301      	adds	r3, #1
 800e30e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e314:	881b      	ldrh	r3, [r3, #0]
 800e316:	b29a      	uxth	r2, r3
 800e318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	029b      	lsls	r3, r3, #10
 800e320:	b29b      	uxth	r3, r3
 800e322:	4313      	orrs	r3, r2
 800e324:	b29a      	uxth	r2, r3
 800e326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e328:	801a      	strh	r2, [r3, #0]
 800e32a:	e03a      	b.n	800e3a2 <USB_EPStartXfer+0x618>
 800e32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e330:	095b      	lsrs	r3, r3, #5
 800e332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e33a:	f003 031f 	and.w	r3, r3, #31
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d104      	bne.n	800e34c <USB_EPStartXfer+0x5c2>
 800e342:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e346:	3b01      	subs	r3, #1
 800e348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	b29a      	uxth	r2, r3
 800e352:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e356:	b29b      	uxth	r3, r3
 800e358:	029b      	lsls	r3, r3, #10
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	4313      	orrs	r3, r2
 800e35e:	b29b      	uxth	r3, r3
 800e360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e368:	b29a      	uxth	r2, r3
 800e36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e36c:	801a      	strh	r2, [r3, #0]
 800e36e:	e018      	b.n	800e3a2 <USB_EPStartXfer+0x618>
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	785b      	ldrb	r3, [r3, #1]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d114      	bne.n	800e3a2 <USB_EPStartXfer+0x618>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e37e:	b29b      	uxth	r3, r3
 800e380:	461a      	mov	r2, r3
 800e382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e384:	4413      	add	r3, r2
 800e386:	643b      	str	r3, [r7, #64]	@ 0x40
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	00da      	lsls	r2, r3, #3
 800e38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e390:	4413      	add	r3, r2
 800e392:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	895b      	ldrh	r3, [r3, #10]
 800e3a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	6959      	ldr	r1, [r3, #20]
 800e3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fbca 	bl	800eb52 <USB_WritePMA>
 800e3be:	e193      	b.n	800e6e8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	6a1b      	ldr	r3, [r3, #32]
 800e3c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e3da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3de:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	441a      	add	r2, r3
 800e3ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e3f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e400:	b29b      	uxth	r3, r3
 800e402:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e40e:	b29b      	uxth	r3, r3
 800e410:	461a      	mov	r2, r3
 800e412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e414:	4413      	add	r3, r2
 800e416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	00da      	lsls	r2, r3, #3
 800e41e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e420:	4413      	add	r3, r2
 800e422:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e426:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e430:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	891b      	ldrh	r3, [r3, #8]
 800e436:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	6959      	ldr	r1, [r3, #20]
 800e43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e442:	b29b      	uxth	r3, r3
 800e444:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fb82 	bl	800eb52 <USB_WritePMA>
 800e44e:	e14b      	b.n	800e6e8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	6a1a      	ldr	r2, [r3, #32]
 800e454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e458:	1ad2      	subs	r2, r2, r3
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	881b      	ldrh	r3, [r3, #0]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 809a 	beq.w	800e5aa <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	673b      	str	r3, [r7, #112]	@ 0x70
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	785b      	ldrb	r3, [r3, #1]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d16b      	bne.n	800e55a <USB_EPStartXfer+0x7d0>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	461a      	mov	r2, r3
 800e490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e492:	4413      	add	r3, r2
 800e494:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	00da      	lsls	r2, r3, #3
 800e49c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e49e:	4413      	add	r3, r2
 800e4a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e4a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e4a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4b0:	b29a      	uxth	r2, r3
 800e4b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4b4:	801a      	strh	r2, [r3, #0]
 800e4b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10a      	bne.n	800e4d4 <USB_EPStartXfer+0x74a>
 800e4be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4d0:	801a      	strh	r2, [r3, #0]
 800e4d2:	e05b      	b.n	800e58c <USB_EPStartXfer+0x802>
 800e4d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4da:	d81c      	bhi.n	800e516 <USB_EPStartXfer+0x78c>
 800e4dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4e0:	085b      	lsrs	r3, r3, #1
 800e4e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d004      	beq.n	800e4fc <USB_EPStartXfer+0x772>
 800e4f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	b29a      	uxth	r2, r3
 800e502:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e506:	b29b      	uxth	r3, r3
 800e508:	029b      	lsls	r3, r3, #10
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	4313      	orrs	r3, r2
 800e50e:	b29a      	uxth	r2, r3
 800e510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e512:	801a      	strh	r2, [r3, #0]
 800e514:	e03a      	b.n	800e58c <USB_EPStartXfer+0x802>
 800e516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e51a:	095b      	lsrs	r3, r3, #5
 800e51c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e524:	f003 031f 	and.w	r3, r3, #31
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <USB_EPStartXfer+0x7ac>
 800e52c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e530:	3b01      	subs	r3, #1
 800e532:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e538:	881b      	ldrh	r3, [r3, #0]
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e540:	b29b      	uxth	r3, r3
 800e542:	029b      	lsls	r3, r3, #10
 800e544:	b29b      	uxth	r3, r3
 800e546:	4313      	orrs	r3, r2
 800e548:	b29b      	uxth	r3, r3
 800e54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e552:	b29a      	uxth	r2, r3
 800e554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e556:	801a      	strh	r2, [r3, #0]
 800e558:	e018      	b.n	800e58c <USB_EPStartXfer+0x802>
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	785b      	ldrb	r3, [r3, #1]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d114      	bne.n	800e58c <USB_EPStartXfer+0x802>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e568:	b29b      	uxth	r3, r3
 800e56a:	461a      	mov	r2, r3
 800e56c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e56e:	4413      	add	r3, r2
 800e570:	673b      	str	r3, [r7, #112]	@ 0x70
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	00da      	lsls	r2, r3, #3
 800e578:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e57a:	4413      	add	r3, r2
 800e57c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e580:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e586:	b29a      	uxth	r2, r3
 800e588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e58a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	895b      	ldrh	r3, [r3, #10]
 800e590:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	6959      	ldr	r1, [r3, #20]
 800e598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fad5 	bl	800eb52 <USB_WritePMA>
 800e5a8:	e09e      	b.n	800e6e8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	785b      	ldrb	r3, [r3, #1]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d16b      	bne.n	800e68a <USB_EPStartXfer+0x900>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	461a      	mov	r2, r3
 800e5c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e5c2:	4413      	add	r3, r2
 800e5c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	00da      	lsls	r2, r3, #3
 800e5cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e5ce:	4413      	add	r3, r2
 800e5d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e5d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5e4:	801a      	strh	r2, [r3, #0]
 800e5e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10a      	bne.n	800e604 <USB_EPStartXfer+0x87a>
 800e5ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e600:	801a      	strh	r2, [r3, #0]
 800e602:	e063      	b.n	800e6cc <USB_EPStartXfer+0x942>
 800e604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e608:	2b3e      	cmp	r3, #62	@ 0x3e
 800e60a:	d81c      	bhi.n	800e646 <USB_EPStartXfer+0x8bc>
 800e60c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e610:	085b      	lsrs	r3, r3, #1
 800e612:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d004      	beq.n	800e62c <USB_EPStartXfer+0x8a2>
 800e622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e626:	3301      	adds	r3, #1
 800e628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e62c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e62e:	881b      	ldrh	r3, [r3, #0]
 800e630:	b29a      	uxth	r2, r3
 800e632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e636:	b29b      	uxth	r3, r3
 800e638:	029b      	lsls	r3, r3, #10
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	4313      	orrs	r3, r2
 800e63e:	b29a      	uxth	r2, r3
 800e640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e642:	801a      	strh	r2, [r3, #0]
 800e644:	e042      	b.n	800e6cc <USB_EPStartXfer+0x942>
 800e646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e64a:	095b      	lsrs	r3, r3, #5
 800e64c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e654:	f003 031f 	and.w	r3, r3, #31
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d104      	bne.n	800e666 <USB_EPStartXfer+0x8dc>
 800e65c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e660:	3b01      	subs	r3, #1
 800e662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e670:	b29b      	uxth	r3, r3
 800e672:	029b      	lsls	r3, r3, #10
 800e674:	b29b      	uxth	r3, r3
 800e676:	4313      	orrs	r3, r2
 800e678:	b29b      	uxth	r3, r3
 800e67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e682:	b29a      	uxth	r2, r3
 800e684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e686:	801a      	strh	r2, [r3, #0]
 800e688:	e020      	b.n	800e6cc <USB_EPStartXfer+0x942>
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	785b      	ldrb	r3, [r3, #1]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d11c      	bne.n	800e6cc <USB_EPStartXfer+0x942>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	00da      	lsls	r2, r3, #3
 800e6b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e6b6:	4413      	add	r3, r2
 800e6b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e6bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e6c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e6ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	891b      	ldrh	r3, [r3, #8]
 800e6d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	6959      	ldr	r1, [r3, #20]
 800e6d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fa35 	bl	800eb52 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	881b      	ldrh	r3, [r3, #0]
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e6fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6fe:	817b      	strh	r3, [r7, #10]
 800e700:	897b      	ldrh	r3, [r7, #10]
 800e702:	f083 0310 	eor.w	r3, r3, #16
 800e706:	817b      	strh	r3, [r7, #10]
 800e708:	897b      	ldrh	r3, [r7, #10]
 800e70a:	f083 0320 	eor.w	r3, r3, #32
 800e70e:	817b      	strh	r3, [r7, #10]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	441a      	add	r2, r3
 800e71a:	897b      	ldrh	r3, [r7, #10]
 800e71c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	8013      	strh	r3, [r2, #0]
 800e730:	e0d5      	b.n	800e8de <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	7b1b      	ldrb	r3, [r3, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d156      	bne.n	800e7e8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	699b      	ldr	r3, [r3, #24]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d122      	bne.n	800e788 <USB_EPStartXfer+0x9fe>
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	78db      	ldrb	r3, [r3, #3]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d11e      	bne.n	800e788 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	881b      	ldrh	r3, [r3, #0]
 800e756:	b29b      	uxth	r3, r3
 800e758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e75c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e760:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	441a      	add	r2, r3
 800e76e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e77a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e782:	b29b      	uxth	r3, r3
 800e784:	8013      	strh	r3, [r2, #0]
 800e786:	e01d      	b.n	800e7c4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4413      	add	r3, r2
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	b29b      	uxth	r3, r3
 800e796:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e79a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e79e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	441a      	add	r2, r3
 800e7ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e7b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	699a      	ldr	r2, [r3, #24]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d907      	bls.n	800e7e0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	699a      	ldr	r2, [r3, #24]
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	1ad2      	subs	r2, r2, r3
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	619a      	str	r2, [r3, #24]
 800e7de:	e054      	b.n	800e88a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	619a      	str	r2, [r3, #24]
 800e7e6:	e050      	b.n	800e88a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	78db      	ldrb	r3, [r3, #3]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d142      	bne.n	800e876 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d048      	beq.n	800e88a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e808:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e80c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d005      	beq.n	800e820 <USB_EPStartXfer+0xa96>
 800e814:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10b      	bne.n	800e838 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e820:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d12e      	bne.n	800e88a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e82c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e834:	2b00      	cmp	r3, #0
 800e836:	d128      	bne.n	800e88a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	b29b      	uxth	r3, r3
 800e846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e84a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e84e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	441a      	add	r2, r3
 800e85c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800e860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e86c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e870:	b29b      	uxth	r3, r3
 800e872:	8013      	strh	r3, [r2, #0]
 800e874:	e009      	b.n	800e88a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	78db      	ldrb	r3, [r3, #3]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d103      	bne.n	800e886 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2200      	movs	r2, #0
 800e882:	619a      	str	r2, [r3, #24]
 800e884:	e001      	b.n	800e88a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e02a      	b.n	800e8e0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	4413      	add	r3, r2
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	b29b      	uxth	r3, r3
 800e898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e8a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e8a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e8ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e8b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e8b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e8b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	441a      	add	r2, r3
 800e8c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e8ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	37b0      	adds	r7, #176	@ 0xb0
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	785b      	ldrb	r3, [r3, #1]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d020      	beq.n	800e93c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	b29b      	uxth	r3, r3
 800e908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e90c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e910:	81bb      	strh	r3, [r7, #12]
 800e912:	89bb      	ldrh	r3, [r7, #12]
 800e914:	f083 0310 	eor.w	r3, r3, #16
 800e918:	81bb      	strh	r3, [r7, #12]
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	441a      	add	r2, r3
 800e924:	89bb      	ldrh	r3, [r7, #12]
 800e926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e92a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e92e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e936:	b29b      	uxth	r3, r3
 800e938:	8013      	strh	r3, [r2, #0]
 800e93a:	e01f      	b.n	800e97c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	4413      	add	r3, r2
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	b29b      	uxth	r3, r3
 800e94a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e94e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e952:	81fb      	strh	r3, [r7, #14]
 800e954:	89fb      	ldrh	r3, [r7, #14]
 800e956:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e95a:	81fb      	strh	r3, [r7, #14]
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	441a      	add	r2, r3
 800e966:	89fb      	ldrh	r3, [r7, #14]
 800e968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e96c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e978:	b29b      	uxth	r3, r3
 800e97a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3714      	adds	r7, #20
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e98a:	b480      	push	{r7}
 800e98c:	b087      	sub	sp, #28
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	785b      	ldrb	r3, [r3, #1]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d04c      	beq.n	800ea36 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	4413      	add	r3, r2
 800e9a6:	881b      	ldrh	r3, [r3, #0]
 800e9a8:	823b      	strh	r3, [r7, #16]
 800e9aa:	8a3b      	ldrh	r3, [r7, #16]
 800e9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d01b      	beq.n	800e9ec <USB_EPClearStall+0x62>
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9ca:	81fb      	strh	r3, [r7, #14]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	441a      	add	r2, r3
 800e9d6:	89fb      	ldrh	r3, [r7, #14]
 800e9d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	78db      	ldrb	r3, [r3, #3]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d06c      	beq.n	800eace <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea0a:	81bb      	strh	r3, [r7, #12]
 800ea0c:	89bb      	ldrh	r3, [r7, #12]
 800ea0e:	f083 0320 	eor.w	r3, r3, #32
 800ea12:	81bb      	strh	r3, [r7, #12]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	441a      	add	r2, r3
 800ea1e:	89bb      	ldrh	r3, [r7, #12]
 800ea20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	8013      	strh	r3, [r2, #0]
 800ea34:	e04b      	b.n	800eace <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	4413      	add	r3, r2
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	82fb      	strh	r3, [r7, #22]
 800ea44:	8afb      	ldrh	r3, [r7, #22]
 800ea46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d01b      	beq.n	800ea86 <USB_EPClearStall+0xfc>
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	881b      	ldrh	r3, [r3, #0]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea64:	82bb      	strh	r3, [r7, #20]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	441a      	add	r2, r3
 800ea70:	8abb      	ldrh	r3, [r7, #20]
 800ea72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	881b      	ldrh	r3, [r3, #0]
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea9c:	827b      	strh	r3, [r7, #18]
 800ea9e:	8a7b      	ldrh	r3, [r7, #18]
 800eaa0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eaa4:	827b      	strh	r3, [r7, #18]
 800eaa6:	8a7b      	ldrh	r3, [r7, #18]
 800eaa8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eaac:	827b      	strh	r3, [r7, #18]
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	441a      	add	r2, r3
 800eab8:	8a7b      	ldrh	r3, [r7, #18]
 800eaba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eabe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	371c      	adds	r7, #28
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800eae8:	78fb      	ldrb	r3, [r7, #3]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d103      	bne.n	800eaf6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2280      	movs	r2, #128	@ 0x80
 800eaf2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800eb32:	b480      	push	{r7}
 800eb34:	b085      	sub	sp, #20
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800eb44:	68fb      	ldr	r3, [r7, #12]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3714      	adds	r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b08b      	sub	sp, #44	@ 0x2c
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	60b9      	str	r1, [r7, #8]
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	461a      	mov	r2, r3
 800eb60:	460b      	mov	r3, r1
 800eb62:	80fb      	strh	r3, [r7, #6]
 800eb64:	4613      	mov	r3, r2
 800eb66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800eb68:	88bb      	ldrh	r3, [r7, #4]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	085b      	lsrs	r3, r3, #1
 800eb6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eb78:	88fa      	ldrh	r2, [r7, #6]
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb82:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb88:	e01b      	b.n	800ebc2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	3301      	adds	r3, #1
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	021b      	lsls	r3, r3, #8
 800eb98:	b21a      	sxth	r2, r3
 800eb9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	b21b      	sxth	r3, r3
 800eba2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800eba4:	6a3b      	ldr	r3, [r7, #32]
 800eba6:	8a7a      	ldrh	r2, [r7, #18]
 800eba8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	3302      	adds	r3, #2
 800ebae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ebbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1e0      	bne.n	800eb8a <USB_WritePMA+0x38>
  }
}
 800ebc8:	bf00      	nop
 800ebca:	bf00      	nop
 800ebcc:	372c      	adds	r7, #44	@ 0x2c
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b08b      	sub	sp, #44	@ 0x2c
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	60b9      	str	r1, [r7, #8]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	80fb      	strh	r3, [r7, #6]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ebec:	88bb      	ldrh	r3, [r7, #4]
 800ebee:	085b      	lsrs	r3, r3, #1
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ebfc:	88fa      	ldrh	r2, [r7, #6]
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ec06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec0c:	e018      	b.n	800ec40 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ec0e:	6a3b      	ldr	r3, [r7, #32]
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	3302      	adds	r3, #2
 800ec1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	3301      	adds	r3, #1
 800ec28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	0a1b      	lsrs	r3, r3, #8
 800ec2e:	b2da      	uxtb	r2, r3
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	3301      	adds	r3, #1
 800ec38:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1e3      	bne.n	800ec0e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ec46:	88bb      	ldrh	r3, [r7, #4]
 800ec48:	f003 0301 	and.w	r3, r3, #1
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d007      	beq.n	800ec62 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ec52:	6a3b      	ldr	r3, [r7, #32]
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	701a      	strb	r2, [r3, #0]
  }
}
 800ec62:	bf00      	nop
 800ec64:	372c      	adds	r7, #44	@ 0x2c
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr

0800ec6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	460b      	mov	r3, r1
 800ec78:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ec7a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ec7e:	f002 f8a3 	bl	8010dc8 <USBD_static_malloc>
 800ec82:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d105      	bne.n	800ec96 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ec92:	2302      	movs	r3, #2
 800ec94:	e066      	b.n	800ed64 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	7c1b      	ldrb	r3, [r3, #16]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d119      	bne.n	800ecda <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ecaa:	2202      	movs	r2, #2
 800ecac:	2181      	movs	r1, #129	@ 0x81
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f001 ff31 	bl	8010b16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ecba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f001 ff27 	bl	8010b16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2210      	movs	r2, #16
 800ecd4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ecd8:	e016      	b.n	800ed08 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ecda:	2340      	movs	r3, #64	@ 0x40
 800ecdc:	2202      	movs	r2, #2
 800ecde:	2181      	movs	r1, #129	@ 0x81
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f001 ff18 	bl	8010b16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ecec:	2340      	movs	r3, #64	@ 0x40
 800ecee:	2202      	movs	r2, #2
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f001 ff0f 	bl	8010b16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2210      	movs	r2, #16
 800ed04:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ed08:	2308      	movs	r3, #8
 800ed0a:	2203      	movs	r2, #3
 800ed0c:	2182      	movs	r1, #130	@ 0x82
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f001 ff01 	bl	8010b16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	7c1b      	ldrb	r3, [r3, #16]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d109      	bne.n	800ed52 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ed44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed48:	2101      	movs	r1, #1
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f001 ffd2 	bl	8010cf4 <USBD_LL_PrepareReceive>
 800ed50:	e007      	b.n	800ed62 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ed58:	2340      	movs	r3, #64	@ 0x40
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f001 ffc9 	bl	8010cf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ed78:	2181      	movs	r1, #129	@ 0x81
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f001 fef1 	bl	8010b62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ed86:	2101      	movs	r1, #1
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f001 feea 	bl	8010b62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ed96:	2182      	movs	r1, #130	@ 0x82
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f001 fee2 	bl	8010b62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00e      	beq.n	800edd6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edc8:	4618      	mov	r0, r3
 800edca:	f002 f80b 	bl	8010de4 <USBD_static_free>
    pdev->pClassData = NULL;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800edf2:	2300      	movs	r3, #0
 800edf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800edf6:	2300      	movs	r3, #0
 800edf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e0af      	b.n	800ef68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d03f      	beq.n	800ee94 <USBD_CDC_Setup+0xb4>
 800ee14:	2b20      	cmp	r3, #32
 800ee16:	f040 809f 	bne.w	800ef58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	88db      	ldrh	r3, [r3, #6]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d02e      	beq.n	800ee80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	b25b      	sxtb	r3, r3
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	da16      	bge.n	800ee5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ee38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee3a:	683a      	ldr	r2, [r7, #0]
 800ee3c:	88d2      	ldrh	r2, [r2, #6]
 800ee3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	88db      	ldrh	r3, [r3, #6]
 800ee44:	2b07      	cmp	r3, #7
 800ee46:	bf28      	it	cs
 800ee48:	2307      	movcs	r3, #7
 800ee4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	89fa      	ldrh	r2, [r7, #14]
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f001 fa9d 	bl	8010392 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ee58:	e085      	b.n	800ef66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	785a      	ldrb	r2, [r3, #1]
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	88db      	ldrh	r3, [r3, #6]
 800ee68:	b2da      	uxtb	r2, r3
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ee70:	6939      	ldr	r1, [r7, #16]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	88db      	ldrh	r3, [r3, #6]
 800ee76:	461a      	mov	r2, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f001 fab6 	bl	80103ea <USBD_CtlPrepareRx>
      break;
 800ee7e:	e072      	b.n	800ef66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	683a      	ldr	r2, [r7, #0]
 800ee8a:	7850      	ldrb	r0, [r2, #1]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	4798      	blx	r3
      break;
 800ee92:	e068      	b.n	800ef66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	785b      	ldrb	r3, [r3, #1]
 800ee98:	2b0b      	cmp	r3, #11
 800ee9a:	d852      	bhi.n	800ef42 <USBD_CDC_Setup+0x162>
 800ee9c:	a201      	add	r2, pc, #4	@ (adr r2, 800eea4 <USBD_CDC_Setup+0xc4>)
 800ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea2:	bf00      	nop
 800eea4:	0800eed5 	.word	0x0800eed5
 800eea8:	0800ef51 	.word	0x0800ef51
 800eeac:	0800ef43 	.word	0x0800ef43
 800eeb0:	0800ef43 	.word	0x0800ef43
 800eeb4:	0800ef43 	.word	0x0800ef43
 800eeb8:	0800ef43 	.word	0x0800ef43
 800eebc:	0800ef43 	.word	0x0800ef43
 800eec0:	0800ef43 	.word	0x0800ef43
 800eec4:	0800ef43 	.word	0x0800ef43
 800eec8:	0800ef43 	.word	0x0800ef43
 800eecc:	0800eeff 	.word	0x0800eeff
 800eed0:	0800ef29 	.word	0x0800ef29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b03      	cmp	r3, #3
 800eede:	d107      	bne.n	800eef0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eee0:	f107 030a 	add.w	r3, r7, #10
 800eee4:	2202      	movs	r2, #2
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f001 fa52 	bl	8010392 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eeee:	e032      	b.n	800ef56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f001 f9dc 	bl	80102b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800eef8:	2303      	movs	r3, #3
 800eefa:	75fb      	strb	r3, [r7, #23]
          break;
 800eefc:	e02b      	b.n	800ef56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d107      	bne.n	800ef1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ef0a:	f107 030d 	add.w	r3, r7, #13
 800ef0e:	2201      	movs	r2, #1
 800ef10:	4619      	mov	r1, r3
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f001 fa3d 	bl	8010392 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ef18:	e01d      	b.n	800ef56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f001 f9c7 	bl	80102b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800ef22:	2303      	movs	r3, #3
 800ef24:	75fb      	strb	r3, [r7, #23]
          break;
 800ef26:	e016      	b.n	800ef56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b03      	cmp	r3, #3
 800ef32:	d00f      	beq.n	800ef54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f001 f9ba 	bl	80102b0 <USBD_CtlError>
            ret = USBD_FAIL;
 800ef3c:	2303      	movs	r3, #3
 800ef3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ef40:	e008      	b.n	800ef54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ef42:	6839      	ldr	r1, [r7, #0]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f001 f9b3 	bl	80102b0 <USBD_CtlError>
          ret = USBD_FAIL;
 800ef4a:	2303      	movs	r3, #3
 800ef4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ef4e:	e002      	b.n	800ef56 <USBD_CDC_Setup+0x176>
          break;
 800ef50:	bf00      	nop
 800ef52:	e008      	b.n	800ef66 <USBD_CDC_Setup+0x186>
          break;
 800ef54:	bf00      	nop
      }
      break;
 800ef56:	e006      	b.n	800ef66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ef58:	6839      	ldr	r1, [r7, #0]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f001 f9a8 	bl	80102b0 <USBD_CtlError>
      ret = USBD_FAIL;
 800ef60:	2303      	movs	r3, #3
 800ef62:	75fb      	strb	r3, [r7, #23]
      break;
 800ef64:	bf00      	nop
  }

  return (uint8_t)ret;
 800ef66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ef82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d101      	bne.n	800ef92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef8e:	2303      	movs	r3, #3
 800ef90:	e04f      	b.n	800f032 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ef9a:	78fa      	ldrb	r2, [r7, #3]
 800ef9c:	6879      	ldr	r1, [r7, #4]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	440b      	add	r3, r1
 800efa8:	3318      	adds	r3, #24
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d029      	beq.n	800f004 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800efb0:	78fa      	ldrb	r2, [r7, #3]
 800efb2:	6879      	ldr	r1, [r7, #4]
 800efb4:	4613      	mov	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	4413      	add	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	440b      	add	r3, r1
 800efbe:	3318      	adds	r3, #24
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	78f9      	ldrb	r1, [r7, #3]
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	460b      	mov	r3, r1
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	440b      	add	r3, r1
 800efcc:	00db      	lsls	r3, r3, #3
 800efce:	4403      	add	r3, r0
 800efd0:	3320      	adds	r3, #32
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	fbb2 f1f3 	udiv	r1, r2, r3
 800efd8:	fb01 f303 	mul.w	r3, r1, r3
 800efdc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d110      	bne.n	800f004 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800efe2:	78fa      	ldrb	r2, [r7, #3]
 800efe4:	6879      	ldr	r1, [r7, #4]
 800efe6:	4613      	mov	r3, r2
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	4413      	add	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	440b      	add	r3, r1
 800eff0:	3318      	adds	r3, #24
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eff6:	78f9      	ldrb	r1, [r7, #3]
 800eff8:	2300      	movs	r3, #0
 800effa:	2200      	movs	r2, #0
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f001 fe58 	bl	8010cb2 <USBD_LL_Transmit>
 800f002:	e015      	b.n	800f030 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	2200      	movs	r2, #0
 800f008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f012:	691b      	ldr	r3, [r3, #16]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00b      	beq.n	800f030 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f02c:	78fa      	ldrb	r2, [r7, #3]
 800f02e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b084      	sub	sp, #16
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	460b      	mov	r3, r1
 800f044:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f04c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f054:	2b00      	cmp	r3, #0
 800f056:	d101      	bne.n	800f05c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f058:	2303      	movs	r3, #3
 800f05a:	e015      	b.n	800f088 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f05c:	78fb      	ldrb	r3, [r7, #3]
 800f05e:	4619      	mov	r1, r3
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f001 fe68 	bl	8010d36 <USBD_LL_GetRxDataSize>
 800f066:	4602      	mov	r2, r0
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f082:	4611      	mov	r1, r2
 800f084:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f09e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d101      	bne.n	800f0aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f0a6:	2303      	movs	r3, #3
 800f0a8:	e01a      	b.n	800f0e0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d014      	beq.n	800f0de <USBD_CDC_EP0_RxReady+0x4e>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f0ba:	2bff      	cmp	r3, #255	@ 0xff
 800f0bc:	d00f      	beq.n	800f0de <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800f0cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f0d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	22ff      	movs	r2, #255	@ 0xff
 800f0da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2243      	movs	r2, #67	@ 0x43
 800f0f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f0f6:	4b03      	ldr	r3, [pc, #12]	@ (800f104 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	200002a0 	.word	0x200002a0

0800f108 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2243      	movs	r2, #67	@ 0x43
 800f114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f116:	4b03      	ldr	r3, [pc, #12]	@ (800f124 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f118:	4618      	mov	r0, r3
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	2000025c 	.word	0x2000025c

0800f128 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2243      	movs	r2, #67	@ 0x43
 800f134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f136:	4b03      	ldr	r3, [pc, #12]	@ (800f144 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f138:	4618      	mov	r0, r3
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr
 800f144:	200002e4 	.word	0x200002e4

0800f148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	220a      	movs	r2, #10
 800f154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f156:	4b03      	ldr	r3, [pc, #12]	@ (800f164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f158:	4618      	mov	r0, r3
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	20000218 	.word	0x20000218

0800f168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d101      	bne.n	800f17c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f178:	2303      	movs	r3, #3
 800f17a:	e004      	b.n	800f186 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f192:	b480      	push	{r7}
 800f194:	b087      	sub	sp, #28
 800f196:	af00      	add	r7, sp, #0
 800f198:	60f8      	str	r0, [r7, #12]
 800f19a:	60b9      	str	r1, [r7, #8]
 800f19c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d101      	bne.n	800f1b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	e008      	b.n	800f1c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	371c      	adds	r7, #28
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f1ce:	b480      	push	{r7}
 800f1d0:	b085      	sub	sp, #20
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
 800f1d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	e004      	b.n	800f1f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f20e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f21a:	2303      	movs	r3, #3
 800f21c:	e016      	b.n	800f24c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	7c1b      	ldrb	r3, [r3, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d109      	bne.n	800f23a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f22c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f230:	2101      	movs	r1, #1
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f001 fd5e 	bl	8010cf4 <USBD_LL_PrepareReceive>
 800f238:	e007      	b.n	800f24a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f240:	2340      	movs	r3, #64	@ 0x40
 800f242:	2101      	movs	r1, #1
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f001 fd55 	bl	8010cf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	4613      	mov	r3, r2
 800f260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f268:	2303      	movs	r3, #3
 800f26a:	e01f      	b.n	800f2ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2200      	movs	r2, #0
 800f278:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d003      	beq.n	800f292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2201      	movs	r2, #1
 800f296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	79fa      	ldrb	r2, [r7, #7]
 800f29e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f001 fbbd 	bl	8010a20 <USBD_LL_Init>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3718      	adds	r7, #24
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	e016      	b.n	800f2fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00b      	beq.n	800f2f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2e8:	f107 020e 	add.w	r2, r7, #14
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	4798      	blx	r3
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b082      	sub	sp, #8
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f001 fbe8 	bl	8010ae0 <USBD_LL_Start>
 800f310:	4603      	mov	r3, r0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f31a:	b480      	push	{r7}
 800f31c:	b083      	sub	sp, #12
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f33c:	2303      	movs	r3, #3
 800f33e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f346:	2b00      	cmp	r3, #0
 800f348:	d009      	beq.n	800f35e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	78fa      	ldrb	r2, [r7, #3]
 800f354:	4611      	mov	r1, r2
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	4798      	blx	r3
 800f35a:	4603      	mov	r3, r0
 800f35c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	460b      	mov	r3, r1
 800f372:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d007      	beq.n	800f38e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	78fa      	ldrb	r2, [r7, #3]
 800f388:	4611      	mov	r1, r2
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	4798      	blx	r3
  }

  return USBD_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f000 ff46 	bl	801023c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f3be:	461a      	mov	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f3cc:	f003 031f 	and.w	r3, r3, #31
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d01a      	beq.n	800f40a <USBD_LL_SetupStage+0x72>
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d822      	bhi.n	800f41e <USBD_LL_SetupStage+0x86>
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <USBD_LL_SetupStage+0x4a>
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d00a      	beq.n	800f3f6 <USBD_LL_SetupStage+0x5e>
 800f3e0:	e01d      	b.n	800f41e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f9ee 	bl	800f7cc <USBD_StdDevReq>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f3f4:	e020      	b.n	800f438 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fa52 	bl	800f8a8 <USBD_StdItfReq>
 800f404:	4603      	mov	r3, r0
 800f406:	73fb      	strb	r3, [r7, #15]
      break;
 800f408:	e016      	b.n	800f438 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 fa91 	bl	800f93a <USBD_StdEPReq>
 800f418:	4603      	mov	r3, r0
 800f41a:	73fb      	strb	r3, [r7, #15]
      break;
 800f41c:	e00c      	b.n	800f438 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f424:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f001 fbb7 	bl	8010ba0 <USBD_LL_StallEP>
 800f432:	4603      	mov	r3, r0
 800f434:	73fb      	strb	r3, [r7, #15]
      break;
 800f436:	bf00      	nop
  }

  return ret;
 800f438:	7bfb      	ldrb	r3, [r7, #15]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b086      	sub	sp, #24
 800f446:	af00      	add	r7, sp, #0
 800f448:	60f8      	str	r0, [r7, #12]
 800f44a:	460b      	mov	r3, r1
 800f44c:	607a      	str	r2, [r7, #4]
 800f44e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f450:	7afb      	ldrb	r3, [r7, #11]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d138      	bne.n	800f4c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f45c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f464:	2b03      	cmp	r3, #3
 800f466:	d14a      	bne.n	800f4fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	689a      	ldr	r2, [r3, #8]
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	429a      	cmp	r2, r3
 800f472:	d913      	bls.n	800f49c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	689a      	ldr	r2, [r3, #8]
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	1ad2      	subs	r2, r2, r3
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	68da      	ldr	r2, [r3, #12]
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	4293      	cmp	r3, r2
 800f48c:	bf28      	it	cs
 800f48e:	4613      	movcs	r3, r2
 800f490:	461a      	mov	r2, r3
 800f492:	6879      	ldr	r1, [r7, #4]
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f000 ffc5 	bl	8010424 <USBD_CtlContinueRx>
 800f49a:	e030      	b.n	800f4fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d10b      	bne.n	800f4c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4ba:	691b      	ldr	r3, [r3, #16]
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f000 ffc0 	bl	8010446 <USBD_CtlSendStatus>
 800f4c6:	e01a      	b.n	800f4fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b03      	cmp	r3, #3
 800f4d2:	d114      	bne.n	800f4fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00e      	beq.n	800f4fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	7afa      	ldrb	r2, [r7, #11]
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	4798      	blx	r3
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f4fa:	7dfb      	ldrb	r3, [r7, #23]
 800f4fc:	e000      	b.n	800f500 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	460b      	mov	r3, r1
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f516:	7afb      	ldrb	r3, [r7, #11]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d16b      	bne.n	800f5f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	3314      	adds	r3, #20
 800f520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f528:	2b02      	cmp	r3, #2
 800f52a:	d156      	bne.n	800f5da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	689a      	ldr	r2, [r3, #8]
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	429a      	cmp	r2, r3
 800f536:	d914      	bls.n	800f562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	689a      	ldr	r2, [r3, #8]
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	1ad2      	subs	r2, r2, r3
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	461a      	mov	r2, r3
 800f54c:	6879      	ldr	r1, [r7, #4]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f000 ff3a 	bl	80103c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f554:	2300      	movs	r3, #0
 800f556:	2200      	movs	r2, #0
 800f558:	2100      	movs	r1, #0
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f001 fbca 	bl	8010cf4 <USBD_LL_PrepareReceive>
 800f560:	e03b      	b.n	800f5da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	68da      	ldr	r2, [r3, #12]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d11c      	bne.n	800f5a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f576:	429a      	cmp	r2, r3
 800f578:	d316      	bcc.n	800f5a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f584:	429a      	cmp	r2, r3
 800f586:	d20f      	bcs.n	800f5a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f588:	2200      	movs	r2, #0
 800f58a:	2100      	movs	r1, #0
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f000 ff1b 	bl	80103c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f59a:	2300      	movs	r3, #0
 800f59c:	2200      	movs	r2, #0
 800f59e:	2100      	movs	r1, #0
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f001 fba7 	bl	8010cf4 <USBD_LL_PrepareReceive>
 800f5a6:	e018      	b.n	800f5da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b03      	cmp	r3, #3
 800f5b2:	d10b      	bne.n	800f5cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d005      	beq.n	800f5cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5cc:	2180      	movs	r1, #128	@ 0x80
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f001 fae6 	bl	8010ba0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f000 ff49 	bl	801046c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d122      	bne.n	800f62a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f7ff fe98 	bl	800f31a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f5f2:	e01a      	b.n	800f62a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b03      	cmp	r3, #3
 800f5fe:	d114      	bne.n	800f62a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f606:	695b      	ldr	r3, [r3, #20]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00e      	beq.n	800f62a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	7afa      	ldrb	r2, [r7, #11]
 800f616:	4611      	mov	r1, r2
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	4798      	blx	r3
 800f61c:	4603      	mov	r3, r0
 800f61e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f620:	7dfb      	ldrb	r3, [r7, #23]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d001      	beq.n	800f62a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	e000      	b.n	800f62c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f660:	2b00      	cmp	r3, #0
 800f662:	d101      	bne.n	800f668 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f664:	2303      	movs	r3, #3
 800f666:	e02f      	b.n	800f6c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00f      	beq.n	800f692 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d009      	beq.n	800f692 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	6852      	ldr	r2, [r2, #4]
 800f68a:	b2d2      	uxtb	r2, r2
 800f68c:	4611      	mov	r1, r2
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f692:	2340      	movs	r3, #64	@ 0x40
 800f694:	2200      	movs	r2, #0
 800f696:	2100      	movs	r1, #0
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f001 fa3c 	bl	8010b16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2240      	movs	r2, #64	@ 0x40
 800f6aa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6ae:	2340      	movs	r3, #64	@ 0x40
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	2180      	movs	r1, #128	@ 0x80
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f001 fa2e 	bl	8010b16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2240      	movs	r2, #64	@ 0x40
 800f6c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	78fa      	ldrb	r2, [r7, #3]
 800f6e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6fe:	b2da      	uxtb	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2204      	movs	r2, #4
 800f70a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b04      	cmp	r3, #4
 800f72e:	d106      	bne.n	800f73e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f736:	b2da      	uxtb	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d101      	bne.n	800f762 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f75e:	2303      	movs	r3, #3
 800f760:	e012      	b.n	800f788 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d10b      	bne.n	800f786 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d005      	beq.n	800f786 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f786:	2300      	movs	r3, #0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f7ae:	8a3b      	ldrh	r3, [r7, #16]
 800f7b0:	021b      	lsls	r3, r3, #8
 800f7b2:	b21a      	sxth	r2, r3
 800f7b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	b21b      	sxth	r3, r3
 800f7bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f7be:	89fb      	ldrh	r3, [r7, #14]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	371c      	adds	r7, #28
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f7e2:	2b40      	cmp	r3, #64	@ 0x40
 800f7e4:	d005      	beq.n	800f7f2 <USBD_StdDevReq+0x26>
 800f7e6:	2b40      	cmp	r3, #64	@ 0x40
 800f7e8:	d853      	bhi.n	800f892 <USBD_StdDevReq+0xc6>
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00b      	beq.n	800f806 <USBD_StdDevReq+0x3a>
 800f7ee:	2b20      	cmp	r3, #32
 800f7f0:	d14f      	bne.n	800f892 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	4798      	blx	r3
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
      break;
 800f804:	e04a      	b.n	800f89c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	785b      	ldrb	r3, [r3, #1]
 800f80a:	2b09      	cmp	r3, #9
 800f80c:	d83b      	bhi.n	800f886 <USBD_StdDevReq+0xba>
 800f80e:	a201      	add	r2, pc, #4	@ (adr r2, 800f814 <USBD_StdDevReq+0x48>)
 800f810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f814:	0800f869 	.word	0x0800f869
 800f818:	0800f87d 	.word	0x0800f87d
 800f81c:	0800f887 	.word	0x0800f887
 800f820:	0800f873 	.word	0x0800f873
 800f824:	0800f887 	.word	0x0800f887
 800f828:	0800f847 	.word	0x0800f847
 800f82c:	0800f83d 	.word	0x0800f83d
 800f830:	0800f887 	.word	0x0800f887
 800f834:	0800f85f 	.word	0x0800f85f
 800f838:	0800f851 	.word	0x0800f851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f9de 	bl	800fc00 <USBD_GetDescriptor>
          break;
 800f844:	e024      	b.n	800f890 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f846:	6839      	ldr	r1, [r7, #0]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 fb6d 	bl	800ff28 <USBD_SetAddress>
          break;
 800f84e:	e01f      	b.n	800f890 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fbac 	bl	800ffb0 <USBD_SetConfig>
 800f858:	4603      	mov	r3, r0
 800f85a:	73fb      	strb	r3, [r7, #15]
          break;
 800f85c:	e018      	b.n	800f890 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 fc4b 	bl	80100fc <USBD_GetConfig>
          break;
 800f866:	e013      	b.n	800f890 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fc7c 	bl	8010168 <USBD_GetStatus>
          break;
 800f870:	e00e      	b.n	800f890 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f872:	6839      	ldr	r1, [r7, #0]
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 fcab 	bl	80101d0 <USBD_SetFeature>
          break;
 800f87a:	e009      	b.n	800f890 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f87c:	6839      	ldr	r1, [r7, #0]
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 fcba 	bl	80101f8 <USBD_ClrFeature>
          break;
 800f884:	e004      	b.n	800f890 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fd11 	bl	80102b0 <USBD_CtlError>
          break;
 800f88e:	bf00      	nop
      }
      break;
 800f890:	e004      	b.n	800f89c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 fd0b 	bl	80102b0 <USBD_CtlError>
      break;
 800f89a:	bf00      	nop
  }

  return ret;
 800f89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3710      	adds	r7, #16
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop

0800f8a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f8be:	2b40      	cmp	r3, #64	@ 0x40
 800f8c0:	d005      	beq.n	800f8ce <USBD_StdItfReq+0x26>
 800f8c2:	2b40      	cmp	r3, #64	@ 0x40
 800f8c4:	d82f      	bhi.n	800f926 <USBD_StdItfReq+0x7e>
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <USBD_StdItfReq+0x26>
 800f8ca:	2b20      	cmp	r3, #32
 800f8cc:	d12b      	bne.n	800f926 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d81d      	bhi.n	800f918 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	889b      	ldrh	r3, [r3, #4]
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d813      	bhi.n	800f90e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	6839      	ldr	r1, [r7, #0]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	4798      	blx	r3
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	88db      	ldrh	r3, [r3, #6]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d110      	bne.n	800f922 <USBD_StdItfReq+0x7a>
 800f900:	7bfb      	ldrb	r3, [r7, #15]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d10d      	bne.n	800f922 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fd9d 	bl	8010446 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f90c:	e009      	b.n	800f922 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 fccd 	bl	80102b0 <USBD_CtlError>
          break;
 800f916:	e004      	b.n	800f922 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f000 fcc8 	bl	80102b0 <USBD_CtlError>
          break;
 800f920:	e000      	b.n	800f924 <USBD_StdItfReq+0x7c>
          break;
 800f922:	bf00      	nop
      }
      break;
 800f924:	e004      	b.n	800f930 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fcc1 	bl	80102b0 <USBD_CtlError>
      break;
 800f92e:	bf00      	nop
  }

  return ret;
 800f930:	7bfb      	ldrb	r3, [r7, #15]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b084      	sub	sp, #16
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f944:	2300      	movs	r3, #0
 800f946:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	889b      	ldrh	r3, [r3, #4]
 800f94c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f956:	2b40      	cmp	r3, #64	@ 0x40
 800f958:	d007      	beq.n	800f96a <USBD_StdEPReq+0x30>
 800f95a:	2b40      	cmp	r3, #64	@ 0x40
 800f95c:	f200 8145 	bhi.w	800fbea <USBD_StdEPReq+0x2b0>
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00c      	beq.n	800f97e <USBD_StdEPReq+0x44>
 800f964:	2b20      	cmp	r3, #32
 800f966:	f040 8140 	bne.w	800fbea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	4798      	blx	r3
 800f978:	4603      	mov	r3, r0
 800f97a:	73fb      	strb	r3, [r7, #15]
      break;
 800f97c:	e13a      	b.n	800fbf4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	785b      	ldrb	r3, [r3, #1]
 800f982:	2b03      	cmp	r3, #3
 800f984:	d007      	beq.n	800f996 <USBD_StdEPReq+0x5c>
 800f986:	2b03      	cmp	r3, #3
 800f988:	f300 8129 	bgt.w	800fbde <USBD_StdEPReq+0x2a4>
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d07f      	beq.n	800fa90 <USBD_StdEPReq+0x156>
 800f990:	2b01      	cmp	r3, #1
 800f992:	d03c      	beq.n	800fa0e <USBD_StdEPReq+0xd4>
 800f994:	e123      	b.n	800fbde <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	2b02      	cmp	r3, #2
 800f9a0:	d002      	beq.n	800f9a8 <USBD_StdEPReq+0x6e>
 800f9a2:	2b03      	cmp	r3, #3
 800f9a4:	d016      	beq.n	800f9d4 <USBD_StdEPReq+0x9a>
 800f9a6:	e02c      	b.n	800fa02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00d      	beq.n	800f9ca <USBD_StdEPReq+0x90>
 800f9ae:	7bbb      	ldrb	r3, [r7, #14]
 800f9b0:	2b80      	cmp	r3, #128	@ 0x80
 800f9b2:	d00a      	beq.n	800f9ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f001 f8f1 	bl	8010ba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9be:	2180      	movs	r1, #128	@ 0x80
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f001 f8ed 	bl	8010ba0 <USBD_LL_StallEP>
 800f9c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9c8:	e020      	b.n	800fa0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f9ca:	6839      	ldr	r1, [r7, #0]
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 fc6f 	bl	80102b0 <USBD_CtlError>
              break;
 800f9d2:	e01b      	b.n	800fa0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	885b      	ldrh	r3, [r3, #2]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10e      	bne.n	800f9fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f9dc:	7bbb      	ldrb	r3, [r7, #14]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00b      	beq.n	800f9fa <USBD_StdEPReq+0xc0>
 800f9e2:	7bbb      	ldrb	r3, [r7, #14]
 800f9e4:	2b80      	cmp	r3, #128	@ 0x80
 800f9e6:	d008      	beq.n	800f9fa <USBD_StdEPReq+0xc0>
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	88db      	ldrh	r3, [r3, #6]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d104      	bne.n	800f9fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9f0:	7bbb      	ldrb	r3, [r7, #14]
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f001 f8d3 	bl	8010ba0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fd23 	bl	8010446 <USBD_CtlSendStatus>

              break;
 800fa00:	e004      	b.n	800fa0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fa02:	6839      	ldr	r1, [r7, #0]
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 fc53 	bl	80102b0 <USBD_CtlError>
              break;
 800fa0a:	bf00      	nop
          }
          break;
 800fa0c:	e0ec      	b.n	800fbe8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d002      	beq.n	800fa20 <USBD_StdEPReq+0xe6>
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d016      	beq.n	800fa4c <USBD_StdEPReq+0x112>
 800fa1e:	e030      	b.n	800fa82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00d      	beq.n	800fa42 <USBD_StdEPReq+0x108>
 800fa26:	7bbb      	ldrb	r3, [r7, #14]
 800fa28:	2b80      	cmp	r3, #128	@ 0x80
 800fa2a:	d00a      	beq.n	800fa42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa2c:	7bbb      	ldrb	r3, [r7, #14]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f001 f8b5 	bl	8010ba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa36:	2180      	movs	r1, #128	@ 0x80
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f001 f8b1 	bl	8010ba0 <USBD_LL_StallEP>
 800fa3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa40:	e025      	b.n	800fa8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 fc33 	bl	80102b0 <USBD_CtlError>
              break;
 800fa4a:	e020      	b.n	800fa8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	885b      	ldrh	r3, [r3, #2]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d11b      	bne.n	800fa8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fa54:	7bbb      	ldrb	r3, [r7, #14]
 800fa56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d004      	beq.n	800fa68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fa5e:	7bbb      	ldrb	r3, [r7, #14]
 800fa60:	4619      	mov	r1, r3
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f001 f8bb 	bl	8010bde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 fcec 	bl	8010446 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa74:	689b      	ldr	r3, [r3, #8]
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	4798      	blx	r3
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fa80:	e004      	b.n	800fa8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fc13 	bl	80102b0 <USBD_CtlError>
              break;
 800fa8a:	e000      	b.n	800fa8e <USBD_StdEPReq+0x154>
              break;
 800fa8c:	bf00      	nop
          }
          break;
 800fa8e:	e0ab      	b.n	800fbe8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d002      	beq.n	800faa2 <USBD_StdEPReq+0x168>
 800fa9c:	2b03      	cmp	r3, #3
 800fa9e:	d032      	beq.n	800fb06 <USBD_StdEPReq+0x1cc>
 800faa0:	e097      	b.n	800fbd2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800faa2:	7bbb      	ldrb	r3, [r7, #14]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d007      	beq.n	800fab8 <USBD_StdEPReq+0x17e>
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
 800faaa:	2b80      	cmp	r3, #128	@ 0x80
 800faac:	d004      	beq.n	800fab8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800faae:	6839      	ldr	r1, [r7, #0]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 fbfd 	bl	80102b0 <USBD_CtlError>
                break;
 800fab6:	e091      	b.n	800fbdc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	da0b      	bge.n	800fad8 <USBD_StdEPReq+0x19e>
 800fac0:	7bbb      	ldrb	r3, [r7, #14]
 800fac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fac6:	4613      	mov	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4413      	add	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	3310      	adds	r3, #16
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	4413      	add	r3, r2
 800fad4:	3304      	adds	r3, #4
 800fad6:	e00b      	b.n	800faf0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fad8:	7bbb      	ldrb	r3, [r7, #14]
 800fada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fade:	4613      	mov	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	4413      	add	r3, r2
 800faee:	3304      	adds	r3, #4
 800faf0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	2202      	movs	r2, #2
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fc47 	bl	8010392 <USBD_CtlSendData>
              break;
 800fb04:	e06a      	b.n	800fbdc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fb06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	da11      	bge.n	800fb32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fb0e:	7bbb      	ldrb	r3, [r7, #14]
 800fb10:	f003 020f 	and.w	r2, r3, #15
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	4613      	mov	r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	4413      	add	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	440b      	add	r3, r1
 800fb20:	3324      	adds	r3, #36	@ 0x24
 800fb22:	881b      	ldrh	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d117      	bne.n	800fb58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb28:	6839      	ldr	r1, [r7, #0]
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 fbc0 	bl	80102b0 <USBD_CtlError>
                  break;
 800fb30:	e054      	b.n	800fbdc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fb32:	7bbb      	ldrb	r3, [r7, #14]
 800fb34:	f003 020f 	and.w	r2, r3, #15
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	4413      	add	r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	440b      	add	r3, r1
 800fb44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d104      	bne.n	800fb58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb4e:	6839      	ldr	r1, [r7, #0]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fbad 	bl	80102b0 <USBD_CtlError>
                  break;
 800fb56:	e041      	b.n	800fbdc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	da0b      	bge.n	800fb78 <USBD_StdEPReq+0x23e>
 800fb60:	7bbb      	ldrb	r3, [r7, #14]
 800fb62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fb66:	4613      	mov	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4413      	add	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	3310      	adds	r3, #16
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	4413      	add	r3, r2
 800fb74:	3304      	adds	r3, #4
 800fb76:	e00b      	b.n	800fb90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb78:	7bbb      	ldrb	r3, [r7, #14]
 800fb7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb7e:	4613      	mov	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	3304      	adds	r3, #4
 800fb90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <USBD_StdEPReq+0x264>
 800fb98:	7bbb      	ldrb	r3, [r7, #14]
 800fb9a:	2b80      	cmp	r3, #128	@ 0x80
 800fb9c:	d103      	bne.n	800fba6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2200      	movs	r2, #0
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	e00e      	b.n	800fbc4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fba6:	7bbb      	ldrb	r3, [r7, #14]
 800fba8:	4619      	mov	r1, r3
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f001 f836 	bl	8010c1c <USBD_LL_IsStallEP>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d003      	beq.n	800fbbe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	2201      	movs	r2, #1
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	e002      	b.n	800fbc4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fbe1 	bl	8010392 <USBD_CtlSendData>
              break;
 800fbd0:	e004      	b.n	800fbdc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fbd2:	6839      	ldr	r1, [r7, #0]
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 fb6b 	bl	80102b0 <USBD_CtlError>
              break;
 800fbda:	bf00      	nop
          }
          break;
 800fbdc:	e004      	b.n	800fbe8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fbde:	6839      	ldr	r1, [r7, #0]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 fb65 	bl	80102b0 <USBD_CtlError>
          break;
 800fbe6:	bf00      	nop
      }
      break;
 800fbe8:	e004      	b.n	800fbf4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fbea:	6839      	ldr	r1, [r7, #0]
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 fb5f 	bl	80102b0 <USBD_CtlError>
      break;
 800fbf2:	bf00      	nop
  }

  return ret;
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
	...

0800fc00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fc12:	2300      	movs	r3, #0
 800fc14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	885b      	ldrh	r3, [r3, #2]
 800fc1a:	0a1b      	lsrs	r3, r3, #8
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	2b0e      	cmp	r3, #14
 800fc22:	f200 8152 	bhi.w	800feca <USBD_GetDescriptor+0x2ca>
 800fc26:	a201      	add	r2, pc, #4	@ (adr r2, 800fc2c <USBD_GetDescriptor+0x2c>)
 800fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2c:	0800fc9d 	.word	0x0800fc9d
 800fc30:	0800fcb5 	.word	0x0800fcb5
 800fc34:	0800fcf5 	.word	0x0800fcf5
 800fc38:	0800fecb 	.word	0x0800fecb
 800fc3c:	0800fecb 	.word	0x0800fecb
 800fc40:	0800fe6b 	.word	0x0800fe6b
 800fc44:	0800fe97 	.word	0x0800fe97
 800fc48:	0800fecb 	.word	0x0800fecb
 800fc4c:	0800fecb 	.word	0x0800fecb
 800fc50:	0800fecb 	.word	0x0800fecb
 800fc54:	0800fecb 	.word	0x0800fecb
 800fc58:	0800fecb 	.word	0x0800fecb
 800fc5c:	0800fecb 	.word	0x0800fecb
 800fc60:	0800fecb 	.word	0x0800fecb
 800fc64:	0800fc69 	.word	0x0800fc69
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc6e:	69db      	ldr	r3, [r3, #28]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00b      	beq.n	800fc8c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	7c12      	ldrb	r2, [r2, #16]
 800fc80:	f107 0108 	add.w	r1, r7, #8
 800fc84:	4610      	mov	r0, r2
 800fc86:	4798      	blx	r3
 800fc88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc8a:	e126      	b.n	800feda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fb0e 	bl	80102b0 <USBD_CtlError>
        err++;
 800fc94:	7afb      	ldrb	r3, [r7, #11]
 800fc96:	3301      	adds	r3, #1
 800fc98:	72fb      	strb	r3, [r7, #11]
      break;
 800fc9a:	e11e      	b.n	800feda <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	7c12      	ldrb	r2, [r2, #16]
 800fca8:	f107 0108 	add.w	r1, r7, #8
 800fcac:	4610      	mov	r0, r2
 800fcae:	4798      	blx	r3
 800fcb0:	60f8      	str	r0, [r7, #12]
      break;
 800fcb2:	e112      	b.n	800feda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7c1b      	ldrb	r3, [r3, #16]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10d      	bne.n	800fcd8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcc4:	f107 0208 	add.w	r2, r7, #8
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
 800fccc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	2202      	movs	r2, #2
 800fcd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fcd6:	e100      	b.n	800feda <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fce0:	f107 0208 	add.w	r2, r7, #8
 800fce4:	4610      	mov	r0, r2
 800fce6:	4798      	blx	r3
 800fce8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3301      	adds	r3, #1
 800fcee:	2202      	movs	r2, #2
 800fcf0:	701a      	strb	r2, [r3, #0]
      break;
 800fcf2:	e0f2      	b.n	800feda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	885b      	ldrh	r3, [r3, #2]
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	2b05      	cmp	r3, #5
 800fcfc:	f200 80ac 	bhi.w	800fe58 <USBD_GetDescriptor+0x258>
 800fd00:	a201      	add	r2, pc, #4	@ (adr r2, 800fd08 <USBD_GetDescriptor+0x108>)
 800fd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd06:	bf00      	nop
 800fd08:	0800fd21 	.word	0x0800fd21
 800fd0c:	0800fd55 	.word	0x0800fd55
 800fd10:	0800fd89 	.word	0x0800fd89
 800fd14:	0800fdbd 	.word	0x0800fdbd
 800fd18:	0800fdf1 	.word	0x0800fdf1
 800fd1c:	0800fe25 	.word	0x0800fe25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00b      	beq.n	800fd44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	7c12      	ldrb	r2, [r2, #16]
 800fd38:	f107 0108 	add.w	r1, r7, #8
 800fd3c:	4610      	mov	r0, r2
 800fd3e:	4798      	blx	r3
 800fd40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd42:	e091      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd44:	6839      	ldr	r1, [r7, #0]
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 fab2 	bl	80102b0 <USBD_CtlError>
            err++;
 800fd4c:	7afb      	ldrb	r3, [r7, #11]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	72fb      	strb	r3, [r7, #11]
          break;
 800fd52:	e089      	b.n	800fe68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00b      	beq.n	800fd78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd66:	689b      	ldr	r3, [r3, #8]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	7c12      	ldrb	r2, [r2, #16]
 800fd6c:	f107 0108 	add.w	r1, r7, #8
 800fd70:	4610      	mov	r0, r2
 800fd72:	4798      	blx	r3
 800fd74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd76:	e077      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd78:	6839      	ldr	r1, [r7, #0]
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 fa98 	bl	80102b0 <USBD_CtlError>
            err++;
 800fd80:	7afb      	ldrb	r3, [r7, #11]
 800fd82:	3301      	adds	r3, #1
 800fd84:	72fb      	strb	r3, [r7, #11]
          break;
 800fd86:	e06f      	b.n	800fe68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d00b      	beq.n	800fdac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	7c12      	ldrb	r2, [r2, #16]
 800fda0:	f107 0108 	add.w	r1, r7, #8
 800fda4:	4610      	mov	r0, r2
 800fda6:	4798      	blx	r3
 800fda8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdaa:	e05d      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fdac:	6839      	ldr	r1, [r7, #0]
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fa7e 	bl	80102b0 <USBD_CtlError>
            err++;
 800fdb4:	7afb      	ldrb	r3, [r7, #11]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	72fb      	strb	r3, [r7, #11]
          break;
 800fdba:	e055      	b.n	800fe68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00b      	beq.n	800fde0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	7c12      	ldrb	r2, [r2, #16]
 800fdd4:	f107 0108 	add.w	r1, r7, #8
 800fdd8:	4610      	mov	r0, r2
 800fdda:	4798      	blx	r3
 800fddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdde:	e043      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fde0:	6839      	ldr	r1, [r7, #0]
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fa64 	bl	80102b0 <USBD_CtlError>
            err++;
 800fde8:	7afb      	ldrb	r3, [r7, #11]
 800fdea:	3301      	adds	r3, #1
 800fdec:	72fb      	strb	r3, [r7, #11]
          break;
 800fdee:	e03b      	b.n	800fe68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdf6:	695b      	ldr	r3, [r3, #20]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00b      	beq.n	800fe14 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	7c12      	ldrb	r2, [r2, #16]
 800fe08:	f107 0108 	add.w	r1, r7, #8
 800fe0c:	4610      	mov	r0, r2
 800fe0e:	4798      	blx	r3
 800fe10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe12:	e029      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe14:	6839      	ldr	r1, [r7, #0]
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fa4a 	bl	80102b0 <USBD_CtlError>
            err++;
 800fe1c:	7afb      	ldrb	r3, [r7, #11]
 800fe1e:	3301      	adds	r3, #1
 800fe20:	72fb      	strb	r3, [r7, #11]
          break;
 800fe22:	e021      	b.n	800fe68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00b      	beq.n	800fe48 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe36:	699b      	ldr	r3, [r3, #24]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	7c12      	ldrb	r2, [r2, #16]
 800fe3c:	f107 0108 	add.w	r1, r7, #8
 800fe40:	4610      	mov	r0, r2
 800fe42:	4798      	blx	r3
 800fe44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe46:	e00f      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 fa30 	bl	80102b0 <USBD_CtlError>
            err++;
 800fe50:	7afb      	ldrb	r3, [r7, #11]
 800fe52:	3301      	adds	r3, #1
 800fe54:	72fb      	strb	r3, [r7, #11]
          break;
 800fe56:	e007      	b.n	800fe68 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fe58:	6839      	ldr	r1, [r7, #0]
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fa28 	bl	80102b0 <USBD_CtlError>
          err++;
 800fe60:	7afb      	ldrb	r3, [r7, #11]
 800fe62:	3301      	adds	r3, #1
 800fe64:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fe66:	bf00      	nop
      }
      break;
 800fe68:	e037      	b.n	800feda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	7c1b      	ldrb	r3, [r3, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d109      	bne.n	800fe86 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe7a:	f107 0208 	add.w	r2, r7, #8
 800fe7e:	4610      	mov	r0, r2
 800fe80:	4798      	blx	r3
 800fe82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe84:	e029      	b.n	800feda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe86:	6839      	ldr	r1, [r7, #0]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fa11 	bl	80102b0 <USBD_CtlError>
        err++;
 800fe8e:	7afb      	ldrb	r3, [r7, #11]
 800fe90:	3301      	adds	r3, #1
 800fe92:	72fb      	strb	r3, [r7, #11]
      break;
 800fe94:	e021      	b.n	800feda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7c1b      	ldrb	r3, [r3, #16]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d10d      	bne.n	800feba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fea6:	f107 0208 	add.w	r2, r7, #8
 800feaa:	4610      	mov	r0, r2
 800feac:	4798      	blx	r3
 800feae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	3301      	adds	r3, #1
 800feb4:	2207      	movs	r2, #7
 800feb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800feb8:	e00f      	b.n	800feda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 f9f7 	bl	80102b0 <USBD_CtlError>
        err++;
 800fec2:	7afb      	ldrb	r3, [r7, #11]
 800fec4:	3301      	adds	r3, #1
 800fec6:	72fb      	strb	r3, [r7, #11]
      break;
 800fec8:	e007      	b.n	800feda <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800feca:	6839      	ldr	r1, [r7, #0]
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f9ef 	bl	80102b0 <USBD_CtlError>
      err++;
 800fed2:	7afb      	ldrb	r3, [r7, #11]
 800fed4:	3301      	adds	r3, #1
 800fed6:	72fb      	strb	r3, [r7, #11]
      break;
 800fed8:	bf00      	nop
  }

  if (err != 0U)
 800feda:	7afb      	ldrb	r3, [r7, #11]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d11e      	bne.n	800ff1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	88db      	ldrh	r3, [r3, #6]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d016      	beq.n	800ff16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fee8:	893b      	ldrh	r3, [r7, #8]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00e      	beq.n	800ff0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	88da      	ldrh	r2, [r3, #6]
 800fef2:	893b      	ldrh	r3, [r7, #8]
 800fef4:	4293      	cmp	r3, r2
 800fef6:	bf28      	it	cs
 800fef8:	4613      	movcs	r3, r2
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fefe:	893b      	ldrh	r3, [r7, #8]
 800ff00:	461a      	mov	r2, r3
 800ff02:	68f9      	ldr	r1, [r7, #12]
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 fa44 	bl	8010392 <USBD_CtlSendData>
 800ff0a:	e009      	b.n	800ff20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f9ce 	bl	80102b0 <USBD_CtlError>
 800ff14:	e004      	b.n	800ff20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 fa95 	bl	8010446 <USBD_CtlSendStatus>
 800ff1c:	e000      	b.n	800ff20 <USBD_GetDescriptor+0x320>
    return;
 800ff1e:	bf00      	nop
  }
}
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop

0800ff28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	889b      	ldrh	r3, [r3, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d131      	bne.n	800ff9e <USBD_SetAddress+0x76>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	88db      	ldrh	r3, [r3, #6]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d12d      	bne.n	800ff9e <USBD_SetAddress+0x76>
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	885b      	ldrh	r3, [r3, #2]
 800ff46:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff48:	d829      	bhi.n	800ff9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	885b      	ldrh	r3, [r3, #2]
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	2b03      	cmp	r3, #3
 800ff60:	d104      	bne.n	800ff6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ff62:	6839      	ldr	r1, [r7, #0]
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 f9a3 	bl	80102b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff6a:	e01d      	b.n	800ffa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	7bfa      	ldrb	r2, [r7, #15]
 800ff70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ff74:	7bfb      	ldrb	r3, [r7, #15]
 800ff76:	4619      	mov	r1, r3
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 fe7b 	bl	8010c74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 fa61 	bl	8010446 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d004      	beq.n	800ff94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff92:	e009      	b.n	800ffa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff9c:	e004      	b.n	800ffa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ff9e:	6839      	ldr	r1, [r7, #0]
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 f985 	bl	80102b0 <USBD_CtlError>
  }
}
 800ffa6:	bf00      	nop
 800ffa8:	bf00      	nop
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	885b      	ldrh	r3, [r3, #2]
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	4b4c      	ldr	r3, [pc, #304]	@ (80100f8 <USBD_SetConfig+0x148>)
 800ffc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ffc8:	4b4b      	ldr	r3, [pc, #300]	@ (80100f8 <USBD_SetConfig+0x148>)
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d905      	bls.n	800ffdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ffd0:	6839      	ldr	r1, [r7, #0]
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f96c 	bl	80102b0 <USBD_CtlError>
    return USBD_FAIL;
 800ffd8:	2303      	movs	r3, #3
 800ffda:	e088      	b.n	80100ee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	d002      	beq.n	800ffee <USBD_SetConfig+0x3e>
 800ffe8:	2b03      	cmp	r3, #3
 800ffea:	d025      	beq.n	8010038 <USBD_SetConfig+0x88>
 800ffec:	e071      	b.n	80100d2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ffee:	4b42      	ldr	r3, [pc, #264]	@ (80100f8 <USBD_SetConfig+0x148>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d01c      	beq.n	8010030 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fff6:	4b40      	ldr	r3, [pc, #256]	@ (80100f8 <USBD_SetConfig+0x148>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010000:	4b3d      	ldr	r3, [pc, #244]	@ (80100f8 <USBD_SetConfig+0x148>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	4619      	mov	r1, r3
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f7ff f992 	bl	800f330 <USBD_SetClassConfig>
 801000c:	4603      	mov	r3, r0
 801000e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010010:	7bfb      	ldrb	r3, [r7, #15]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d004      	beq.n	8010020 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010016:	6839      	ldr	r1, [r7, #0]
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f949 	bl	80102b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801001e:	e065      	b.n	80100ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fa10 	bl	8010446 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2203      	movs	r2, #3
 801002a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801002e:	e05d      	b.n	80100ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 fa08 	bl	8010446 <USBD_CtlSendStatus>
      break;
 8010036:	e059      	b.n	80100ec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010038:	4b2f      	ldr	r3, [pc, #188]	@ (80100f8 <USBD_SetConfig+0x148>)
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d112      	bne.n	8010066 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2202      	movs	r2, #2
 8010044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010048:	4b2b      	ldr	r3, [pc, #172]	@ (80100f8 <USBD_SetConfig+0x148>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	461a      	mov	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010052:	4b29      	ldr	r3, [pc, #164]	@ (80100f8 <USBD_SetConfig+0x148>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff f985 	bl	800f368 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f9f1 	bl	8010446 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010064:	e042      	b.n	80100ec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010066:	4b24      	ldr	r3, [pc, #144]	@ (80100f8 <USBD_SetConfig+0x148>)
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	461a      	mov	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	429a      	cmp	r2, r3
 8010072:	d02a      	beq.n	80100ca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	b2db      	uxtb	r3, r3
 801007a:	4619      	mov	r1, r3
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff f973 	bl	800f368 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010082:	4b1d      	ldr	r3, [pc, #116]	@ (80100f8 <USBD_SetConfig+0x148>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801008c:	4b1a      	ldr	r3, [pc, #104]	@ (80100f8 <USBD_SetConfig+0x148>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	4619      	mov	r1, r3
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f7ff f94c 	bl	800f330 <USBD_SetClassConfig>
 8010098:	4603      	mov	r3, r0
 801009a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801009c:	7bfb      	ldrb	r3, [r7, #15]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00f      	beq.n	80100c2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f903 	bl	80102b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff f958 	bl	800f368 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2202      	movs	r2, #2
 80100bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80100c0:	e014      	b.n	80100ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 f9bf 	bl	8010446 <USBD_CtlSendStatus>
      break;
 80100c8:	e010      	b.n	80100ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 f9bb 	bl	8010446 <USBD_CtlSendStatus>
      break;
 80100d0:	e00c      	b.n	80100ec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80100d2:	6839      	ldr	r1, [r7, #0]
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f8eb 	bl	80102b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80100da:	4b07      	ldr	r3, [pc, #28]	@ (80100f8 <USBD_SetConfig+0x148>)
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	4619      	mov	r1, r3
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff f941 	bl	800f368 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80100e6:	2303      	movs	r3, #3
 80100e8:	73fb      	strb	r3, [r7, #15]
      break;
 80100ea:	bf00      	nop
  }

  return ret;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	20001ab0 	.word	0x20001ab0

080100fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	88db      	ldrh	r3, [r3, #6]
 801010a:	2b01      	cmp	r3, #1
 801010c:	d004      	beq.n	8010118 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 f8cd 	bl	80102b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010116:	e023      	b.n	8010160 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b02      	cmp	r3, #2
 8010122:	dc02      	bgt.n	801012a <USBD_GetConfig+0x2e>
 8010124:	2b00      	cmp	r3, #0
 8010126:	dc03      	bgt.n	8010130 <USBD_GetConfig+0x34>
 8010128:	e015      	b.n	8010156 <USBD_GetConfig+0x5a>
 801012a:	2b03      	cmp	r3, #3
 801012c:	d00b      	beq.n	8010146 <USBD_GetConfig+0x4a>
 801012e:	e012      	b.n	8010156 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	3308      	adds	r3, #8
 801013a:	2201      	movs	r2, #1
 801013c:	4619      	mov	r1, r3
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 f927 	bl	8010392 <USBD_CtlSendData>
        break;
 8010144:	e00c      	b.n	8010160 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3304      	adds	r3, #4
 801014a:	2201      	movs	r2, #1
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f91f 	bl	8010392 <USBD_CtlSendData>
        break;
 8010154:	e004      	b.n	8010160 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010156:	6839      	ldr	r1, [r7, #0]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f000 f8a9 	bl	80102b0 <USBD_CtlError>
        break;
 801015e:	bf00      	nop
}
 8010160:	bf00      	nop
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010178:	b2db      	uxtb	r3, r3
 801017a:	3b01      	subs	r3, #1
 801017c:	2b02      	cmp	r3, #2
 801017e:	d81e      	bhi.n	80101be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	88db      	ldrh	r3, [r3, #6]
 8010184:	2b02      	cmp	r3, #2
 8010186:	d004      	beq.n	8010192 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010188:	6839      	ldr	r1, [r7, #0]
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 f890 	bl	80102b0 <USBD_CtlError>
        break;
 8010190:	e01a      	b.n	80101c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2201      	movs	r2, #1
 8010196:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d005      	beq.n	80101ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	f043 0202 	orr.w	r2, r3, #2
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	330c      	adds	r3, #12
 80101b2:	2202      	movs	r2, #2
 80101b4:	4619      	mov	r1, r3
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f8eb 	bl	8010392 <USBD_CtlSendData>
      break;
 80101bc:	e004      	b.n	80101c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80101be:	6839      	ldr	r1, [r7, #0]
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 f875 	bl	80102b0 <USBD_CtlError>
      break;
 80101c6:	bf00      	nop
  }
}
 80101c8:	bf00      	nop
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	885b      	ldrh	r3, [r3, #2]
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d106      	bne.n	80101f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2201      	movs	r2, #1
 80101e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 f92b 	bl	8010446 <USBD_CtlSendStatus>
  }
}
 80101f0:	bf00      	nop
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010208:	b2db      	uxtb	r3, r3
 801020a:	3b01      	subs	r3, #1
 801020c:	2b02      	cmp	r3, #2
 801020e:	d80b      	bhi.n	8010228 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	885b      	ldrh	r3, [r3, #2]
 8010214:	2b01      	cmp	r3, #1
 8010216:	d10c      	bne.n	8010232 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f910 	bl	8010446 <USBD_CtlSendStatus>
      }
      break;
 8010226:	e004      	b.n	8010232 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010228:	6839      	ldr	r1, [r7, #0]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f840 	bl	80102b0 <USBD_CtlError>
      break;
 8010230:	e000      	b.n	8010234 <USBD_ClrFeature+0x3c>
      break;
 8010232:	bf00      	nop
  }
}
 8010234:	bf00      	nop
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	781a      	ldrb	r2, [r3, #0]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	3301      	adds	r3, #1
 8010256:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	781a      	ldrb	r2, [r3, #0]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	3301      	adds	r3, #1
 8010264:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7ff fa92 	bl	800f790 <SWAPBYTE>
 801026c:	4603      	mov	r3, r0
 801026e:	461a      	mov	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	3301      	adds	r3, #1
 8010278:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3301      	adds	r3, #1
 801027e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f7ff fa85 	bl	800f790 <SWAPBYTE>
 8010286:	4603      	mov	r3, r0
 8010288:	461a      	mov	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	3301      	adds	r3, #1
 8010292:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	3301      	adds	r3, #1
 8010298:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f7ff fa78 	bl	800f790 <SWAPBYTE>
 80102a0:	4603      	mov	r3, r0
 80102a2:	461a      	mov	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	80da      	strh	r2, [r3, #6]
}
 80102a8:	bf00      	nop
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80102ba:	2180      	movs	r1, #128	@ 0x80
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fc6f 	bl	8010ba0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80102c2:	2100      	movs	r1, #0
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fc6b 	bl	8010ba0 <USBD_LL_StallEP>
}
 80102ca:	bf00      	nop
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b086      	sub	sp, #24
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	60f8      	str	r0, [r7, #12]
 80102da:	60b9      	str	r1, [r7, #8]
 80102dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80102de:	2300      	movs	r3, #0
 80102e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d036      	beq.n	8010356 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80102ec:	6938      	ldr	r0, [r7, #16]
 80102ee:	f000 f836 	bl	801035e <USBD_GetLen>
 80102f2:	4603      	mov	r3, r0
 80102f4:	3301      	adds	r3, #1
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	005b      	lsls	r3, r3, #1
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010300:	7dfb      	ldrb	r3, [r7, #23]
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	4413      	add	r3, r2
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	7812      	ldrb	r2, [r2, #0]
 801030a:	701a      	strb	r2, [r3, #0]
  idx++;
 801030c:	7dfb      	ldrb	r3, [r7, #23]
 801030e:	3301      	adds	r3, #1
 8010310:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	4413      	add	r3, r2
 8010318:	2203      	movs	r2, #3
 801031a:	701a      	strb	r2, [r3, #0]
  idx++;
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	3301      	adds	r3, #1
 8010320:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010322:	e013      	b.n	801034c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010324:	7dfb      	ldrb	r3, [r7, #23]
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	4413      	add	r3, r2
 801032a:	693a      	ldr	r2, [r7, #16]
 801032c:	7812      	ldrb	r2, [r2, #0]
 801032e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	3301      	adds	r3, #1
 8010334:	613b      	str	r3, [r7, #16]
    idx++;
 8010336:	7dfb      	ldrb	r3, [r7, #23]
 8010338:	3301      	adds	r3, #1
 801033a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801033c:	7dfb      	ldrb	r3, [r7, #23]
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	4413      	add	r3, r2
 8010342:	2200      	movs	r2, #0
 8010344:	701a      	strb	r2, [r3, #0]
    idx++;
 8010346:	7dfb      	ldrb	r3, [r7, #23]
 8010348:	3301      	adds	r3, #1
 801034a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1e7      	bne.n	8010324 <USBD_GetString+0x52>
 8010354:	e000      	b.n	8010358 <USBD_GetString+0x86>
    return;
 8010356:	bf00      	nop
  }
}
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801035e:	b480      	push	{r7}
 8010360:	b085      	sub	sp, #20
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010366:	2300      	movs	r3, #0
 8010368:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801036e:	e005      	b.n	801037c <USBD_GetLen+0x1e>
  {
    len++;
 8010370:	7bfb      	ldrb	r3, [r7, #15]
 8010372:	3301      	adds	r3, #1
 8010374:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	3301      	adds	r3, #1
 801037a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1f5      	bne.n	8010370 <USBD_GetLen+0x12>
  }

  return len;
 8010384:	7bfb      	ldrb	r3, [r7, #15]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr

08010392 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	60f8      	str	r0, [r7, #12]
 801039a:	60b9      	str	r1, [r7, #8]
 801039c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2202      	movs	r2, #2
 80103a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	68ba      	ldr	r2, [r7, #8]
 80103b6:	2100      	movs	r1, #0
 80103b8:	68f8      	ldr	r0, [r7, #12]
 80103ba:	f000 fc7a 	bl	8010cb2 <USBD_LL_Transmit>

  return USBD_OK;
 80103be:	2300      	movs	r3, #0
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	2100      	movs	r1, #0
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	f000 fc69 	bl	8010cb2 <USBD_LL_Transmit>

  return USBD_OK;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b084      	sub	sp, #16
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	60f8      	str	r0, [r7, #12]
 80103f2:	60b9      	str	r1, [r7, #8]
 80103f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2203      	movs	r2, #3
 80103fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	68ba      	ldr	r2, [r7, #8]
 8010412:	2100      	movs	r1, #0
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f000 fc6d 	bl	8010cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	68ba      	ldr	r2, [r7, #8]
 8010434:	2100      	movs	r1, #0
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	f000 fc5c 	bl	8010cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b082      	sub	sp, #8
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2204      	movs	r2, #4
 8010452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010456:	2300      	movs	r3, #0
 8010458:	2200      	movs	r2, #0
 801045a:	2100      	movs	r1, #0
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 fc28 	bl	8010cb2 <USBD_LL_Transmit>

  return USBD_OK;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2205      	movs	r2, #5
 8010478:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801047c:	2300      	movs	r3, #0
 801047e:	2200      	movs	r2, #0
 8010480:	2100      	movs	r1, #0
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 fc36 	bl	8010cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
	...

08010494 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010498:	2200      	movs	r2, #0
 801049a:	4912      	ldr	r1, [pc, #72]	@ (80104e4 <MX_USB_Device_Init+0x50>)
 801049c:	4812      	ldr	r0, [pc, #72]	@ (80104e8 <MX_USB_Device_Init+0x54>)
 801049e:	f7fe fed9 	bl	800f254 <USBD_Init>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 80104a8:	f7f2 f8d8 	bl	800265c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80104ac:	490f      	ldr	r1, [pc, #60]	@ (80104ec <MX_USB_Device_Init+0x58>)
 80104ae:	480e      	ldr	r0, [pc, #56]	@ (80104e8 <MX_USB_Device_Init+0x54>)
 80104b0:	f7fe ff00 	bl	800f2b4 <USBD_RegisterClass>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80104ba:	f7f2 f8cf 	bl	800265c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80104be:	490c      	ldr	r1, [pc, #48]	@ (80104f0 <MX_USB_Device_Init+0x5c>)
 80104c0:	4809      	ldr	r0, [pc, #36]	@ (80104e8 <MX_USB_Device_Init+0x54>)
 80104c2:	f7fe fe51 	bl	800f168 <USBD_CDC_RegisterInterface>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d001      	beq.n	80104d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80104cc:	f7f2 f8c6 	bl	800265c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80104d0:	4805      	ldr	r0, [pc, #20]	@ (80104e8 <MX_USB_Device_Init+0x54>)
 80104d2:	f7fe ff16 	bl	800f302 <USBD_Start>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80104dc:	f7f2 f8be 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80104e0:	bf00      	nop
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	2000033c 	.word	0x2000033c
 80104e8:	20001ab4 	.word	0x20001ab4
 80104ec:	20000224 	.word	0x20000224
 80104f0:	20000328 	.word	0x20000328

080104f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80104f8:	2200      	movs	r2, #0
 80104fa:	4905      	ldr	r1, [pc, #20]	@ (8010510 <CDC_Init_FS+0x1c>)
 80104fc:	4805      	ldr	r0, [pc, #20]	@ (8010514 <CDC_Init_FS+0x20>)
 80104fe:	f7fe fe48 	bl	800f192 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010502:	4905      	ldr	r1, [pc, #20]	@ (8010518 <CDC_Init_FS+0x24>)
 8010504:	4803      	ldr	r0, [pc, #12]	@ (8010514 <CDC_Init_FS+0x20>)
 8010506:	f7fe fe62 	bl	800f1ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801050a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801050c:	4618      	mov	r0, r3
 801050e:	bd80      	pop	{r7, pc}
 8010510:	20002184 	.word	0x20002184
 8010514:	20001ab4 	.word	0x20001ab4
 8010518:	20001d84 	.word	0x20001d84

0801051c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801051c:	b480      	push	{r7}
 801051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010520:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010522:	4618      	mov	r0, r3
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801052c:	b480      	push	{r7}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	4603      	mov	r3, r0
 8010534:	6039      	str	r1, [r7, #0]
 8010536:	71fb      	strb	r3, [r7, #7]
 8010538:	4613      	mov	r3, r2
 801053a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801053c:	79fb      	ldrb	r3, [r7, #7]
 801053e:	2b23      	cmp	r3, #35	@ 0x23
 8010540:	d84a      	bhi.n	80105d8 <CDC_Control_FS+0xac>
 8010542:	a201      	add	r2, pc, #4	@ (adr r2, 8010548 <CDC_Control_FS+0x1c>)
 8010544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010548:	080105d9 	.word	0x080105d9
 801054c:	080105d9 	.word	0x080105d9
 8010550:	080105d9 	.word	0x080105d9
 8010554:	080105d9 	.word	0x080105d9
 8010558:	080105d9 	.word	0x080105d9
 801055c:	080105d9 	.word	0x080105d9
 8010560:	080105d9 	.word	0x080105d9
 8010564:	080105d9 	.word	0x080105d9
 8010568:	080105d9 	.word	0x080105d9
 801056c:	080105d9 	.word	0x080105d9
 8010570:	080105d9 	.word	0x080105d9
 8010574:	080105d9 	.word	0x080105d9
 8010578:	080105d9 	.word	0x080105d9
 801057c:	080105d9 	.word	0x080105d9
 8010580:	080105d9 	.word	0x080105d9
 8010584:	080105d9 	.word	0x080105d9
 8010588:	080105d9 	.word	0x080105d9
 801058c:	080105d9 	.word	0x080105d9
 8010590:	080105d9 	.word	0x080105d9
 8010594:	080105d9 	.word	0x080105d9
 8010598:	080105d9 	.word	0x080105d9
 801059c:	080105d9 	.word	0x080105d9
 80105a0:	080105d9 	.word	0x080105d9
 80105a4:	080105d9 	.word	0x080105d9
 80105a8:	080105d9 	.word	0x080105d9
 80105ac:	080105d9 	.word	0x080105d9
 80105b0:	080105d9 	.word	0x080105d9
 80105b4:	080105d9 	.word	0x080105d9
 80105b8:	080105d9 	.word	0x080105d9
 80105bc:	080105d9 	.word	0x080105d9
 80105c0:	080105d9 	.word	0x080105d9
 80105c4:	080105d9 	.word	0x080105d9
 80105c8:	080105d9 	.word	0x080105d9
 80105cc:	080105d9 	.word	0x080105d9
 80105d0:	080105d9 	.word	0x080105d9
 80105d4:	080105d9 	.word	0x080105d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80105d8:	bf00      	nop
  }

  return (USBD_OK);
 80105da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80105dc:	4618      	mov	r0, r3
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80105f2:	6879      	ldr	r1, [r7, #4]
 80105f4:	4805      	ldr	r0, [pc, #20]	@ (801060c <CDC_Receive_FS+0x24>)
 80105f6:	f7fe fdea 	bl	800f1ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80105fa:	4804      	ldr	r0, [pc, #16]	@ (801060c <CDC_Receive_FS+0x24>)
 80105fc:	f7fe fe00 	bl	800f200 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010600:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010602:	4618      	mov	r0, r3
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	20001ab4 	.word	0x20001ab4

08010610 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010610:	b480      	push	{r7}
 8010612:	b087      	sub	sp, #28
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	4613      	mov	r3, r2
 801061c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801061e:	2300      	movs	r3, #0
 8010620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010626:	4618      	mov	r0, r3
 8010628:	371c      	adds	r7, #28
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
	...

08010634 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	4603      	mov	r3, r0
 801063c:	6039      	str	r1, [r7, #0]
 801063e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	2212      	movs	r2, #18
 8010644:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010646:	4b03      	ldr	r3, [pc, #12]	@ (8010654 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010648:	4618      	mov	r0, r3
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr
 8010654:	2000035c 	.word	0x2000035c

08010658 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	6039      	str	r1, [r7, #0]
 8010662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	2204      	movs	r2, #4
 8010668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801066a:	4b03      	ldr	r3, [pc, #12]	@ (8010678 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801066c:	4618      	mov	r0, r3
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr
 8010678:	20000370 	.word	0x20000370

0801067c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	4603      	mov	r3, r0
 8010684:	6039      	str	r1, [r7, #0]
 8010686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801068e:	683a      	ldr	r2, [r7, #0]
 8010690:	4907      	ldr	r1, [pc, #28]	@ (80106b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010692:	4808      	ldr	r0, [pc, #32]	@ (80106b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010694:	f7ff fe1d 	bl	80102d2 <USBD_GetString>
 8010698:	e004      	b.n	80106a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	4904      	ldr	r1, [pc, #16]	@ (80106b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 801069e:	4805      	ldr	r0, [pc, #20]	@ (80106b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80106a0:	f7ff fe17 	bl	80102d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106a4:	4b02      	ldr	r3, [pc, #8]	@ (80106b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	20002584 	.word	0x20002584
 80106b4:	080156d8 	.word	0x080156d8

080106b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	4603      	mov	r3, r0
 80106c0:	6039      	str	r1, [r7, #0]
 80106c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	4904      	ldr	r1, [pc, #16]	@ (80106d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80106c8:	4804      	ldr	r0, [pc, #16]	@ (80106dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80106ca:	f7ff fe02 	bl	80102d2 <USBD_GetString>
  return USBD_StrDesc;
 80106ce:	4b02      	ldr	r3, [pc, #8]	@ (80106d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	20002584 	.word	0x20002584
 80106dc:	080156f0 	.word	0x080156f0

080106e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	4603      	mov	r3, r0
 80106e8:	6039      	str	r1, [r7, #0]
 80106ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	221a      	movs	r2, #26
 80106f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106f2:	f000 f843 	bl	801077c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80106f6:	4b02      	ldr	r3, [pc, #8]	@ (8010700 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	20000374 	.word	0x20000374

08010704 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	4603      	mov	r3, r0
 801070c:	6039      	str	r1, [r7, #0]
 801070e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010710:	79fb      	ldrb	r3, [r7, #7]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d105      	bne.n	8010722 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	4907      	ldr	r1, [pc, #28]	@ (8010738 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801071a:	4808      	ldr	r0, [pc, #32]	@ (801073c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801071c:	f7ff fdd9 	bl	80102d2 <USBD_GetString>
 8010720:	e004      	b.n	801072c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	4904      	ldr	r1, [pc, #16]	@ (8010738 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010726:	4805      	ldr	r0, [pc, #20]	@ (801073c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010728:	f7ff fdd3 	bl	80102d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801072c:	4b02      	ldr	r3, [pc, #8]	@ (8010738 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801072e:	4618      	mov	r0, r3
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	20002584 	.word	0x20002584
 801073c:	08015704 	.word	0x08015704

08010740 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	4603      	mov	r3, r0
 8010748:	6039      	str	r1, [r7, #0]
 801074a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801074c:	79fb      	ldrb	r3, [r7, #7]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d105      	bne.n	801075e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010752:	683a      	ldr	r2, [r7, #0]
 8010754:	4907      	ldr	r1, [pc, #28]	@ (8010774 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010756:	4808      	ldr	r0, [pc, #32]	@ (8010778 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010758:	f7ff fdbb 	bl	80102d2 <USBD_GetString>
 801075c:	e004      	b.n	8010768 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801075e:	683a      	ldr	r2, [r7, #0]
 8010760:	4904      	ldr	r1, [pc, #16]	@ (8010774 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010762:	4805      	ldr	r0, [pc, #20]	@ (8010778 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010764:	f7ff fdb5 	bl	80102d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010768:	4b02      	ldr	r3, [pc, #8]	@ (8010774 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801076a:	4618      	mov	r0, r3
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	20002584 	.word	0x20002584
 8010778:	08015710 	.word	0x08015710

0801077c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010782:	4b0f      	ldr	r3, [pc, #60]	@ (80107c0 <Get_SerialNum+0x44>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010788:	4b0e      	ldr	r3, [pc, #56]	@ (80107c4 <Get_SerialNum+0x48>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801078e:	4b0e      	ldr	r3, [pc, #56]	@ (80107c8 <Get_SerialNum+0x4c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4413      	add	r3, r2
 801079a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d009      	beq.n	80107b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80107a2:	2208      	movs	r2, #8
 80107a4:	4909      	ldr	r1, [pc, #36]	@ (80107cc <Get_SerialNum+0x50>)
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f000 f814 	bl	80107d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80107ac:	2204      	movs	r2, #4
 80107ae:	4908      	ldr	r1, [pc, #32]	@ (80107d0 <Get_SerialNum+0x54>)
 80107b0:	68b8      	ldr	r0, [r7, #8]
 80107b2:	f000 f80f 	bl	80107d4 <IntToUnicode>
  }
}
 80107b6:	bf00      	nop
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	1fff7590 	.word	0x1fff7590
 80107c4:	1fff7594 	.word	0x1fff7594
 80107c8:	1fff7598 	.word	0x1fff7598
 80107cc:	20000376 	.word	0x20000376
 80107d0:	20000386 	.word	0x20000386

080107d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b087      	sub	sp, #28
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	4613      	mov	r3, r2
 80107e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107e6:	2300      	movs	r3, #0
 80107e8:	75fb      	strb	r3, [r7, #23]
 80107ea:	e027      	b.n	801083c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	0f1b      	lsrs	r3, r3, #28
 80107f0:	2b09      	cmp	r3, #9
 80107f2:	d80b      	bhi.n	801080c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	0f1b      	lsrs	r3, r3, #28
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	7dfb      	ldrb	r3, [r7, #23]
 80107fc:	005b      	lsls	r3, r3, #1
 80107fe:	4619      	mov	r1, r3
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	440b      	add	r3, r1
 8010804:	3230      	adds	r2, #48	@ 0x30
 8010806:	b2d2      	uxtb	r2, r2
 8010808:	701a      	strb	r2, [r3, #0]
 801080a:	e00a      	b.n	8010822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	0f1b      	lsrs	r3, r3, #28
 8010810:	b2da      	uxtb	r2, r3
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	4619      	mov	r1, r3
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	440b      	add	r3, r1
 801081c:	3237      	adds	r2, #55	@ 0x37
 801081e:	b2d2      	uxtb	r2, r2
 8010820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	011b      	lsls	r3, r3, #4
 8010826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010828:	7dfb      	ldrb	r3, [r7, #23]
 801082a:	005b      	lsls	r3, r3, #1
 801082c:	3301      	adds	r3, #1
 801082e:	68ba      	ldr	r2, [r7, #8]
 8010830:	4413      	add	r3, r2
 8010832:	2200      	movs	r2, #0
 8010834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010836:	7dfb      	ldrb	r3, [r7, #23]
 8010838:	3301      	adds	r3, #1
 801083a:	75fb      	strb	r3, [r7, #23]
 801083c:	7dfa      	ldrb	r2, [r7, #23]
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	429a      	cmp	r2, r3
 8010842:	d3d3      	bcc.n	80107ec <IntToUnicode+0x18>
  }
}
 8010844:	bf00      	nop
 8010846:	bf00      	nop
 8010848:	371c      	adds	r7, #28
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
	...

08010854 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b098      	sub	sp, #96	@ 0x60
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801085c:	f107 030c 	add.w	r3, r7, #12
 8010860:	2254      	movs	r2, #84	@ 0x54
 8010862:	2100      	movs	r1, #0
 8010864:	4618      	mov	r0, r3
 8010866:	f001 fb7d 	bl	8011f64 <memset>
  if(pcdHandle->Instance==USB)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a15      	ldr	r2, [pc, #84]	@ (80108c4 <HAL_PCD_MspInit+0x70>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d122      	bne.n	80108ba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010878:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801087a:	2300      	movs	r3, #0
 801087c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801087e:	f107 030c 	add.w	r3, r7, #12
 8010882:	4618      	mov	r0, r3
 8010884:	f7f8 fef0 	bl	8009668 <HAL_RCCEx_PeriphCLKConfig>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d001      	beq.n	8010892 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801088e:	f7f1 fee5 	bl	800265c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010892:	4b0d      	ldr	r3, [pc, #52]	@ (80108c8 <HAL_PCD_MspInit+0x74>)
 8010894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010896:	4a0c      	ldr	r2, [pc, #48]	@ (80108c8 <HAL_PCD_MspInit+0x74>)
 8010898:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801089c:	6593      	str	r3, [r2, #88]	@ 0x58
 801089e:	4b0a      	ldr	r3, [pc, #40]	@ (80108c8 <HAL_PCD_MspInit+0x74>)
 80108a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108a6:	60bb      	str	r3, [r7, #8]
 80108a8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80108aa:	2200      	movs	r2, #0
 80108ac:	2100      	movs	r1, #0
 80108ae:	2014      	movs	r0, #20
 80108b0:	f7f4 ff35 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80108b4:	2014      	movs	r0, #20
 80108b6:	f7f4 ff4c 	bl	8005752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80108ba:	bf00      	nop
 80108bc:	3760      	adds	r7, #96	@ 0x60
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	40005c00 	.word	0x40005c00
 80108c8:	40021000 	.word	0x40021000

080108cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80108e0:	4619      	mov	r1, r3
 80108e2:	4610      	mov	r0, r2
 80108e4:	f7fe fd58 	bl	800f398 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80108e8:	bf00      	nop
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	460b      	mov	r3, r1
 80108fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010902:	78fa      	ldrb	r2, [r7, #3]
 8010904:	6879      	ldr	r1, [r7, #4]
 8010906:	4613      	mov	r3, r2
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	4413      	add	r3, r2
 801090c:	00db      	lsls	r3, r3, #3
 801090e:	440b      	add	r3, r1
 8010910:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	78fb      	ldrb	r3, [r7, #3]
 8010918:	4619      	mov	r1, r3
 801091a:	f7fe fd92 	bl	800f442 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801091e:	bf00      	nop
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010926:	b580      	push	{r7, lr}
 8010928:	b082      	sub	sp, #8
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	460b      	mov	r3, r1
 8010930:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010938:	78fa      	ldrb	r2, [r7, #3]
 801093a:	6879      	ldr	r1, [r7, #4]
 801093c:	4613      	mov	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	00db      	lsls	r3, r3, #3
 8010944:	440b      	add	r3, r1
 8010946:	3324      	adds	r3, #36	@ 0x24
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	78fb      	ldrb	r3, [r7, #3]
 801094c:	4619      	mov	r1, r3
 801094e:	f7fe fddb 	bl	800f508 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010952:	bf00      	nop
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe feef 	bl	800f74c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801096e:	bf00      	nop
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b084      	sub	sp, #16
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801097e:	2301      	movs	r3, #1
 8010980:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	795b      	ldrb	r3, [r3, #5]
 8010986:	2b02      	cmp	r3, #2
 8010988:	d001      	beq.n	801098e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801098a:	f7f1 fe67 	bl	800265c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010994:	7bfa      	ldrb	r2, [r7, #15]
 8010996:	4611      	mov	r1, r2
 8010998:	4618      	mov	r0, r3
 801099a:	f7fe fe99 	bl	800f6d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fe fe45 	bl	800f634 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80109aa:	bf00      	nop
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
	...

080109b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe fe94 	bl	800f6f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	7a5b      	ldrb	r3, [r3, #9]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d005      	beq.n	80109dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d0:	4b04      	ldr	r3, [pc, #16]	@ (80109e4 <HAL_PCD_SuspendCallback+0x30>)
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	4a03      	ldr	r2, [pc, #12]	@ (80109e4 <HAL_PCD_SuspendCallback+0x30>)
 80109d6:	f043 0306 	orr.w	r3, r3, #6
 80109da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80109dc:	bf00      	nop
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	e000ed00 	.word	0xe000ed00

080109e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	7a5b      	ldrb	r3, [r3, #9]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d007      	beq.n	8010a08 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109f8:	4b08      	ldr	r3, [pc, #32]	@ (8010a1c <HAL_PCD_ResumeCallback+0x34>)
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	4a07      	ldr	r2, [pc, #28]	@ (8010a1c <HAL_PCD_ResumeCallback+0x34>)
 80109fe:	f023 0306 	bic.w	r3, r3, #6
 8010a02:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010a04:	f000 f9f8 	bl	8010df8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fe fe84 	bl	800f71c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	e000ed00 	.word	0xe000ed00

08010a20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010a28:	4a2b      	ldr	r2, [pc, #172]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	4a29      	ldr	r2, [pc, #164]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010a38:	4b27      	ldr	r3, [pc, #156]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a3a:	4a28      	ldr	r2, [pc, #160]	@ (8010adc <USBD_LL_Init+0xbc>)
 8010a3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010a3e:	4b26      	ldr	r3, [pc, #152]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a40:	2208      	movs	r2, #8
 8010a42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010a44:	4b24      	ldr	r3, [pc, #144]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a46:	2202      	movs	r2, #2
 8010a48:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a4a:	4b23      	ldr	r3, [pc, #140]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a4c:	2202      	movs	r2, #2
 8010a4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010a50:	4b21      	ldr	r3, [pc, #132]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010a56:	4b20      	ldr	r3, [pc, #128]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a58:	2200      	movs	r2, #0
 8010a5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a5e:	2200      	movs	r2, #0
 8010a60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010a62:	4b1d      	ldr	r3, [pc, #116]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010a68:	481b      	ldr	r0, [pc, #108]	@ (8010ad8 <USBD_LL_Init+0xb8>)
 8010a6a:	f7f6 faee 	bl	800704a <HAL_PCD_Init>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d001      	beq.n	8010a78 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010a74:	f7f1 fdf2 	bl	800265c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a7e:	2318      	movs	r3, #24
 8010a80:	2200      	movs	r2, #0
 8010a82:	2100      	movs	r1, #0
 8010a84:	f7f7 ff75 	bl	8008972 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a8e:	2358      	movs	r3, #88	@ 0x58
 8010a90:	2200      	movs	r2, #0
 8010a92:	2180      	movs	r1, #128	@ 0x80
 8010a94:	f7f7 ff6d 	bl	8008972 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a9e:	23c0      	movs	r3, #192	@ 0xc0
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	2181      	movs	r1, #129	@ 0x81
 8010aa4:	f7f7 ff65 	bl	8008972 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010aae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	2101      	movs	r1, #1
 8010ab6:	f7f7 ff5c 	bl	8008972 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	2182      	movs	r1, #130	@ 0x82
 8010ac8:	f7f7 ff53 	bl	8008972 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	20002784 	.word	0x20002784
 8010adc:	40005c00 	.word	0x40005c00

08010ae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b084      	sub	sp, #16
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aec:	2300      	movs	r3, #0
 8010aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7f6 fb75 	bl	80071e6 <HAL_PCD_Start>
 8010afc:	4603      	mov	r3, r0
 8010afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b00:	7bfb      	ldrb	r3, [r7, #15]
 8010b02:	4618      	mov	r0, r3
 8010b04:	f000 f97e 	bl	8010e04 <USBD_Get_USB_Status>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b084      	sub	sp, #16
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	4608      	mov	r0, r1
 8010b20:	4611      	mov	r1, r2
 8010b22:	461a      	mov	r2, r3
 8010b24:	4603      	mov	r3, r0
 8010b26:	70fb      	strb	r3, [r7, #3]
 8010b28:	460b      	mov	r3, r1
 8010b2a:	70bb      	strb	r3, [r7, #2]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b34:	2300      	movs	r3, #0
 8010b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b3e:	78bb      	ldrb	r3, [r7, #2]
 8010b40:	883a      	ldrh	r2, [r7, #0]
 8010b42:	78f9      	ldrb	r1, [r7, #3]
 8010b44:	f7f6 fcbc 	bl	80074c0 <HAL_PCD_EP_Open>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f000 f958 	bl	8010e04 <USBD_Get_USB_Status>
 8010b54:	4603      	mov	r3, r0
 8010b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b084      	sub	sp, #16
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b7c:	78fa      	ldrb	r2, [r7, #3]
 8010b7e:	4611      	mov	r1, r2
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7f6 fcfc 	bl	800757e <HAL_PCD_EP_Close>
 8010b86:	4603      	mov	r3, r0
 8010b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b8a:	7bfb      	ldrb	r3, [r7, #15]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f000 f939 	bl	8010e04 <USBD_Get_USB_Status>
 8010b92:	4603      	mov	r3, r0
 8010b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	460b      	mov	r3, r1
 8010baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bac:	2300      	movs	r3, #0
 8010bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bba:	78fa      	ldrb	r2, [r7, #3]
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7f6 fda5 	bl	800770e <HAL_PCD_EP_SetStall>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f000 f91a 	bl	8010e04 <USBD_Get_USB_Status>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b084      	sub	sp, #16
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	460b      	mov	r3, r1
 8010be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bf8:	78fa      	ldrb	r2, [r7, #3]
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7f6 fdd8 	bl	80077b2 <HAL_PCD_EP_ClrStall>
 8010c02:	4603      	mov	r3, r0
 8010c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c06:	7bfb      	ldrb	r3, [r7, #15]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f000 f8fb 	bl	8010e04 <USBD_Get_USB_Status>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3710      	adds	r7, #16
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	460b      	mov	r3, r1
 8010c26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	da0b      	bge.n	8010c50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c3e:	68f9      	ldr	r1, [r7, #12]
 8010c40:	4613      	mov	r3, r2
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	4413      	add	r3, r2
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	440b      	add	r3, r1
 8010c4a:	3312      	adds	r3, #18
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	e00b      	b.n	8010c68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c50:	78fb      	ldrb	r3, [r7, #3]
 8010c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c56:	68f9      	ldr	r1, [r7, #12]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	440b      	add	r3, r1
 8010c62:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010c66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3714      	adds	r7, #20
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c80:	2300      	movs	r3, #0
 8010c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c84:	2300      	movs	r3, #0
 8010c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c8e:	78fa      	ldrb	r2, [r7, #3]
 8010c90:	4611      	mov	r1, r2
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7f6 fbf0 	bl	8007478 <HAL_PCD_SetAddress>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c9c:	7bfb      	ldrb	r3, [r7, #15]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f000 f8b0 	bl	8010e04 <USBD_Get_USB_Status>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b086      	sub	sp, #24
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	60f8      	str	r0, [r7, #12]
 8010cba:	607a      	str	r2, [r7, #4]
 8010cbc:	603b      	str	r3, [r7, #0]
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010cd0:	7af9      	ldrb	r1, [r7, #11]
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	f7f6 fce3 	bl	80076a0 <HAL_PCD_EP_Transmit>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cde:	7dfb      	ldrb	r3, [r7, #23]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f000 f88f 	bl	8010e04 <USBD_Get_USB_Status>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cea:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3718      	adds	r7, #24
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	607a      	str	r2, [r7, #4]
 8010cfe:	603b      	str	r3, [r7, #0]
 8010d00:	460b      	mov	r3, r1
 8010d02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d04:	2300      	movs	r3, #0
 8010d06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d12:	7af9      	ldrb	r1, [r7, #11]
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	f7f6 fc79 	bl	800760e <HAL_PCD_EP_Receive>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f000 f86e 	bl	8010e04 <USBD_Get_USB_Status>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b082      	sub	sp, #8
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	460b      	mov	r3, r1
 8010d40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d48:	78fa      	ldrb	r2, [r7, #3]
 8010d4a:	4611      	mov	r1, r2
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7f6 fc8f 	bl	8007670 <HAL_PCD_EP_GetRxCount>
 8010d52:	4603      	mov	r3, r0
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	460b      	mov	r3, r1
 8010d66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010d68:	78fb      	ldrb	r3, [r7, #3]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d002      	beq.n	8010d74 <HAL_PCDEx_LPM_Callback+0x18>
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d013      	beq.n	8010d9a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010d72:	e023      	b.n	8010dbc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	7a5b      	ldrb	r3, [r3, #9]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d007      	beq.n	8010d8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010d7c:	f000 f83c 	bl	8010df8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d80:	4b10      	ldr	r3, [pc, #64]	@ (8010dc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d82:	691b      	ldr	r3, [r3, #16]
 8010d84:	4a0f      	ldr	r2, [pc, #60]	@ (8010dc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d86:	f023 0306 	bic.w	r3, r3, #6
 8010d8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe fcc2 	bl	800f71c <USBD_LL_Resume>
    break;
 8010d98:	e010      	b.n	8010dbc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fe fca5 	bl	800f6f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	7a5b      	ldrb	r3, [r3, #9]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d005      	beq.n	8010dba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010dae:	4b05      	ldr	r3, [pc, #20]	@ (8010dc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	4a04      	ldr	r2, [pc, #16]	@ (8010dc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010db4:	f043 0306 	orr.w	r3, r3, #6
 8010db8:	6113      	str	r3, [r2, #16]
    break;
 8010dba:	bf00      	nop
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	e000ed00 	.word	0xe000ed00

08010dc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010dd0:	4b03      	ldr	r3, [pc, #12]	@ (8010de0 <USBD_static_malloc+0x18>)
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	370c      	adds	r7, #12
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	20002a60 	.word	0x20002a60

08010de4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]

}
 8010dec:	bf00      	nop
 8010dee:	370c      	adds	r7, #12
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010dfc:	f7f0 fc9e 	bl	800173c <SystemClock_Config>
}
 8010e00:	bf00      	nop
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b085      	sub	sp, #20
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e12:	79fb      	ldrb	r3, [r7, #7]
 8010e14:	2b03      	cmp	r3, #3
 8010e16:	d817      	bhi.n	8010e48 <USBD_Get_USB_Status+0x44>
 8010e18:	a201      	add	r2, pc, #4	@ (adr r2, 8010e20 <USBD_Get_USB_Status+0x1c>)
 8010e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1e:	bf00      	nop
 8010e20:	08010e31 	.word	0x08010e31
 8010e24:	08010e37 	.word	0x08010e37
 8010e28:	08010e3d 	.word	0x08010e3d
 8010e2c:	08010e43 	.word	0x08010e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73fb      	strb	r3, [r7, #15]
    break;
 8010e34:	e00b      	b.n	8010e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e36:	2303      	movs	r3, #3
 8010e38:	73fb      	strb	r3, [r7, #15]
    break;
 8010e3a:	e008      	b.n	8010e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e40:	e005      	b.n	8010e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e42:	2303      	movs	r3, #3
 8010e44:	73fb      	strb	r3, [r7, #15]
    break;
 8010e46:	e002      	b.n	8010e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e48:	2303      	movs	r3, #3
 8010e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e4c:	bf00      	nop
  }
  return usb_status;
 8010e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <__cvt>:
 8010e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e60:	ec57 6b10 	vmov	r6, r7, d0
 8010e64:	2f00      	cmp	r7, #0
 8010e66:	460c      	mov	r4, r1
 8010e68:	4619      	mov	r1, r3
 8010e6a:	463b      	mov	r3, r7
 8010e6c:	bfbb      	ittet	lt
 8010e6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010e72:	461f      	movlt	r7, r3
 8010e74:	2300      	movge	r3, #0
 8010e76:	232d      	movlt	r3, #45	@ 0x2d
 8010e78:	700b      	strb	r3, [r1, #0]
 8010e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010e80:	4691      	mov	r9, r2
 8010e82:	f023 0820 	bic.w	r8, r3, #32
 8010e86:	bfbc      	itt	lt
 8010e88:	4632      	movlt	r2, r6
 8010e8a:	4616      	movlt	r6, r2
 8010e8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e90:	d005      	beq.n	8010e9e <__cvt+0x42>
 8010e92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010e96:	d100      	bne.n	8010e9a <__cvt+0x3e>
 8010e98:	3401      	adds	r4, #1
 8010e9a:	2102      	movs	r1, #2
 8010e9c:	e000      	b.n	8010ea0 <__cvt+0x44>
 8010e9e:	2103      	movs	r1, #3
 8010ea0:	ab03      	add	r3, sp, #12
 8010ea2:	9301      	str	r3, [sp, #4]
 8010ea4:	ab02      	add	r3, sp, #8
 8010ea6:	9300      	str	r3, [sp, #0]
 8010ea8:	ec47 6b10 	vmov	d0, r6, r7
 8010eac:	4653      	mov	r3, sl
 8010eae:	4622      	mov	r2, r4
 8010eb0:	f001 f966 	bl	8012180 <_dtoa_r>
 8010eb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010eb8:	4605      	mov	r5, r0
 8010eba:	d119      	bne.n	8010ef0 <__cvt+0x94>
 8010ebc:	f019 0f01 	tst.w	r9, #1
 8010ec0:	d00e      	beq.n	8010ee0 <__cvt+0x84>
 8010ec2:	eb00 0904 	add.w	r9, r0, r4
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	2300      	movs	r3, #0
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f7ef fe23 	bl	8000b18 <__aeabi_dcmpeq>
 8010ed2:	b108      	cbz	r0, 8010ed8 <__cvt+0x7c>
 8010ed4:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ed8:	2230      	movs	r2, #48	@ 0x30
 8010eda:	9b03      	ldr	r3, [sp, #12]
 8010edc:	454b      	cmp	r3, r9
 8010ede:	d31e      	bcc.n	8010f1e <__cvt+0xc2>
 8010ee0:	9b03      	ldr	r3, [sp, #12]
 8010ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ee4:	1b5b      	subs	r3, r3, r5
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	6013      	str	r3, [r2, #0]
 8010eea:	b004      	add	sp, #16
 8010eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010ef4:	eb00 0904 	add.w	r9, r0, r4
 8010ef8:	d1e5      	bne.n	8010ec6 <__cvt+0x6a>
 8010efa:	7803      	ldrb	r3, [r0, #0]
 8010efc:	2b30      	cmp	r3, #48	@ 0x30
 8010efe:	d10a      	bne.n	8010f16 <__cvt+0xba>
 8010f00:	2200      	movs	r2, #0
 8010f02:	2300      	movs	r3, #0
 8010f04:	4630      	mov	r0, r6
 8010f06:	4639      	mov	r1, r7
 8010f08:	f7ef fe06 	bl	8000b18 <__aeabi_dcmpeq>
 8010f0c:	b918      	cbnz	r0, 8010f16 <__cvt+0xba>
 8010f0e:	f1c4 0401 	rsb	r4, r4, #1
 8010f12:	f8ca 4000 	str.w	r4, [sl]
 8010f16:	f8da 3000 	ldr.w	r3, [sl]
 8010f1a:	4499      	add	r9, r3
 8010f1c:	e7d3      	b.n	8010ec6 <__cvt+0x6a>
 8010f1e:	1c59      	adds	r1, r3, #1
 8010f20:	9103      	str	r1, [sp, #12]
 8010f22:	701a      	strb	r2, [r3, #0]
 8010f24:	e7d9      	b.n	8010eda <__cvt+0x7e>

08010f26 <__exponent>:
 8010f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f28:	2900      	cmp	r1, #0
 8010f2a:	bfba      	itte	lt
 8010f2c:	4249      	neglt	r1, r1
 8010f2e:	232d      	movlt	r3, #45	@ 0x2d
 8010f30:	232b      	movge	r3, #43	@ 0x2b
 8010f32:	2909      	cmp	r1, #9
 8010f34:	7002      	strb	r2, [r0, #0]
 8010f36:	7043      	strb	r3, [r0, #1]
 8010f38:	dd29      	ble.n	8010f8e <__exponent+0x68>
 8010f3a:	f10d 0307 	add.w	r3, sp, #7
 8010f3e:	461d      	mov	r5, r3
 8010f40:	270a      	movs	r7, #10
 8010f42:	461a      	mov	r2, r3
 8010f44:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f48:	fb07 1416 	mls	r4, r7, r6, r1
 8010f4c:	3430      	adds	r4, #48	@ 0x30
 8010f4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010f52:	460c      	mov	r4, r1
 8010f54:	2c63      	cmp	r4, #99	@ 0x63
 8010f56:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	dcf1      	bgt.n	8010f42 <__exponent+0x1c>
 8010f5e:	3130      	adds	r1, #48	@ 0x30
 8010f60:	1e94      	subs	r4, r2, #2
 8010f62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010f66:	1c41      	adds	r1, r0, #1
 8010f68:	4623      	mov	r3, r4
 8010f6a:	42ab      	cmp	r3, r5
 8010f6c:	d30a      	bcc.n	8010f84 <__exponent+0x5e>
 8010f6e:	f10d 0309 	add.w	r3, sp, #9
 8010f72:	1a9b      	subs	r3, r3, r2
 8010f74:	42ac      	cmp	r4, r5
 8010f76:	bf88      	it	hi
 8010f78:	2300      	movhi	r3, #0
 8010f7a:	3302      	adds	r3, #2
 8010f7c:	4403      	add	r3, r0
 8010f7e:	1a18      	subs	r0, r3, r0
 8010f80:	b003      	add	sp, #12
 8010f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010f88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f8c:	e7ed      	b.n	8010f6a <__exponent+0x44>
 8010f8e:	2330      	movs	r3, #48	@ 0x30
 8010f90:	3130      	adds	r1, #48	@ 0x30
 8010f92:	7083      	strb	r3, [r0, #2]
 8010f94:	70c1      	strb	r1, [r0, #3]
 8010f96:	1d03      	adds	r3, r0, #4
 8010f98:	e7f1      	b.n	8010f7e <__exponent+0x58>
	...

08010f9c <_printf_float>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	b08d      	sub	sp, #52	@ 0x34
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010fa8:	4616      	mov	r6, r2
 8010faa:	461f      	mov	r7, r3
 8010fac:	4605      	mov	r5, r0
 8010fae:	f000 ffe1 	bl	8011f74 <_localeconv_r>
 8010fb2:	6803      	ldr	r3, [r0, #0]
 8010fb4:	9304      	str	r3, [sp, #16]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ef f982 	bl	80002c0 <strlen>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8010fc4:	9005      	str	r0, [sp, #20]
 8010fc6:	3307      	adds	r3, #7
 8010fc8:	f023 0307 	bic.w	r3, r3, #7
 8010fcc:	f103 0208 	add.w	r2, r3, #8
 8010fd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010fd4:	f8d4 b000 	ldr.w	fp, [r4]
 8010fd8:	f8c8 2000 	str.w	r2, [r8]
 8010fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fe0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010fe4:	9307      	str	r3, [sp, #28]
 8010fe6:	f8cd 8018 	str.w	r8, [sp, #24]
 8010fea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8011264 <_printf_float+0x2c8>)
 8010ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ff8:	f7ef fdc0 	bl	8000b7c <__aeabi_dcmpun>
 8010ffc:	bb70      	cbnz	r0, 801105c <_printf_float+0xc0>
 8010ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011002:	4b98      	ldr	r3, [pc, #608]	@ (8011264 <_printf_float+0x2c8>)
 8011004:	f04f 32ff 	mov.w	r2, #4294967295
 8011008:	f7ef fd9a 	bl	8000b40 <__aeabi_dcmple>
 801100c:	bb30      	cbnz	r0, 801105c <_printf_float+0xc0>
 801100e:	2200      	movs	r2, #0
 8011010:	2300      	movs	r3, #0
 8011012:	4640      	mov	r0, r8
 8011014:	4649      	mov	r1, r9
 8011016:	f7ef fd89 	bl	8000b2c <__aeabi_dcmplt>
 801101a:	b110      	cbz	r0, 8011022 <_printf_float+0x86>
 801101c:	232d      	movs	r3, #45	@ 0x2d
 801101e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011022:	4a91      	ldr	r2, [pc, #580]	@ (8011268 <_printf_float+0x2cc>)
 8011024:	4b91      	ldr	r3, [pc, #580]	@ (801126c <_printf_float+0x2d0>)
 8011026:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801102a:	bf94      	ite	ls
 801102c:	4690      	movls	r8, r2
 801102e:	4698      	movhi	r8, r3
 8011030:	2303      	movs	r3, #3
 8011032:	6123      	str	r3, [r4, #16]
 8011034:	f02b 0304 	bic.w	r3, fp, #4
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	f04f 0900 	mov.w	r9, #0
 801103e:	9700      	str	r7, [sp, #0]
 8011040:	4633      	mov	r3, r6
 8011042:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011044:	4621      	mov	r1, r4
 8011046:	4628      	mov	r0, r5
 8011048:	f000 f9d2 	bl	80113f0 <_printf_common>
 801104c:	3001      	adds	r0, #1
 801104e:	f040 808d 	bne.w	801116c <_printf_float+0x1d0>
 8011052:	f04f 30ff 	mov.w	r0, #4294967295
 8011056:	b00d      	add	sp, #52	@ 0x34
 8011058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105c:	4642      	mov	r2, r8
 801105e:	464b      	mov	r3, r9
 8011060:	4640      	mov	r0, r8
 8011062:	4649      	mov	r1, r9
 8011064:	f7ef fd8a 	bl	8000b7c <__aeabi_dcmpun>
 8011068:	b140      	cbz	r0, 801107c <_printf_float+0xe0>
 801106a:	464b      	mov	r3, r9
 801106c:	2b00      	cmp	r3, #0
 801106e:	bfbc      	itt	lt
 8011070:	232d      	movlt	r3, #45	@ 0x2d
 8011072:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011076:	4a7e      	ldr	r2, [pc, #504]	@ (8011270 <_printf_float+0x2d4>)
 8011078:	4b7e      	ldr	r3, [pc, #504]	@ (8011274 <_printf_float+0x2d8>)
 801107a:	e7d4      	b.n	8011026 <_printf_float+0x8a>
 801107c:	6863      	ldr	r3, [r4, #4]
 801107e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011082:	9206      	str	r2, [sp, #24]
 8011084:	1c5a      	adds	r2, r3, #1
 8011086:	d13b      	bne.n	8011100 <_printf_float+0x164>
 8011088:	2306      	movs	r3, #6
 801108a:	6063      	str	r3, [r4, #4]
 801108c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011090:	2300      	movs	r3, #0
 8011092:	6022      	str	r2, [r4, #0]
 8011094:	9303      	str	r3, [sp, #12]
 8011096:	ab0a      	add	r3, sp, #40	@ 0x28
 8011098:	e9cd a301 	strd	sl, r3, [sp, #4]
 801109c:	ab09      	add	r3, sp, #36	@ 0x24
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	6861      	ldr	r1, [r4, #4]
 80110a2:	ec49 8b10 	vmov	d0, r8, r9
 80110a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80110aa:	4628      	mov	r0, r5
 80110ac:	f7ff fed6 	bl	8010e5c <__cvt>
 80110b0:	9b06      	ldr	r3, [sp, #24]
 80110b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80110b4:	2b47      	cmp	r3, #71	@ 0x47
 80110b6:	4680      	mov	r8, r0
 80110b8:	d129      	bne.n	801110e <_printf_float+0x172>
 80110ba:	1cc8      	adds	r0, r1, #3
 80110bc:	db02      	blt.n	80110c4 <_printf_float+0x128>
 80110be:	6863      	ldr	r3, [r4, #4]
 80110c0:	4299      	cmp	r1, r3
 80110c2:	dd41      	ble.n	8011148 <_printf_float+0x1ac>
 80110c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80110c8:	fa5f fa8a 	uxtb.w	sl, sl
 80110cc:	3901      	subs	r1, #1
 80110ce:	4652      	mov	r2, sl
 80110d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80110d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80110d6:	f7ff ff26 	bl	8010f26 <__exponent>
 80110da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110dc:	1813      	adds	r3, r2, r0
 80110de:	2a01      	cmp	r2, #1
 80110e0:	4681      	mov	r9, r0
 80110e2:	6123      	str	r3, [r4, #16]
 80110e4:	dc02      	bgt.n	80110ec <_printf_float+0x150>
 80110e6:	6822      	ldr	r2, [r4, #0]
 80110e8:	07d2      	lsls	r2, r2, #31
 80110ea:	d501      	bpl.n	80110f0 <_printf_float+0x154>
 80110ec:	3301      	adds	r3, #1
 80110ee:	6123      	str	r3, [r4, #16]
 80110f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d0a2      	beq.n	801103e <_printf_float+0xa2>
 80110f8:	232d      	movs	r3, #45	@ 0x2d
 80110fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110fe:	e79e      	b.n	801103e <_printf_float+0xa2>
 8011100:	9a06      	ldr	r2, [sp, #24]
 8011102:	2a47      	cmp	r2, #71	@ 0x47
 8011104:	d1c2      	bne.n	801108c <_printf_float+0xf0>
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1c0      	bne.n	801108c <_printf_float+0xf0>
 801110a:	2301      	movs	r3, #1
 801110c:	e7bd      	b.n	801108a <_printf_float+0xee>
 801110e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011112:	d9db      	bls.n	80110cc <_printf_float+0x130>
 8011114:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011118:	d118      	bne.n	801114c <_printf_float+0x1b0>
 801111a:	2900      	cmp	r1, #0
 801111c:	6863      	ldr	r3, [r4, #4]
 801111e:	dd0b      	ble.n	8011138 <_printf_float+0x19c>
 8011120:	6121      	str	r1, [r4, #16]
 8011122:	b913      	cbnz	r3, 801112a <_printf_float+0x18e>
 8011124:	6822      	ldr	r2, [r4, #0]
 8011126:	07d0      	lsls	r0, r2, #31
 8011128:	d502      	bpl.n	8011130 <_printf_float+0x194>
 801112a:	3301      	adds	r3, #1
 801112c:	440b      	add	r3, r1
 801112e:	6123      	str	r3, [r4, #16]
 8011130:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011132:	f04f 0900 	mov.w	r9, #0
 8011136:	e7db      	b.n	80110f0 <_printf_float+0x154>
 8011138:	b913      	cbnz	r3, 8011140 <_printf_float+0x1a4>
 801113a:	6822      	ldr	r2, [r4, #0]
 801113c:	07d2      	lsls	r2, r2, #31
 801113e:	d501      	bpl.n	8011144 <_printf_float+0x1a8>
 8011140:	3302      	adds	r3, #2
 8011142:	e7f4      	b.n	801112e <_printf_float+0x192>
 8011144:	2301      	movs	r3, #1
 8011146:	e7f2      	b.n	801112e <_printf_float+0x192>
 8011148:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801114c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801114e:	4299      	cmp	r1, r3
 8011150:	db05      	blt.n	801115e <_printf_float+0x1c2>
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	6121      	str	r1, [r4, #16]
 8011156:	07d8      	lsls	r0, r3, #31
 8011158:	d5ea      	bpl.n	8011130 <_printf_float+0x194>
 801115a:	1c4b      	adds	r3, r1, #1
 801115c:	e7e7      	b.n	801112e <_printf_float+0x192>
 801115e:	2900      	cmp	r1, #0
 8011160:	bfd4      	ite	le
 8011162:	f1c1 0202 	rsble	r2, r1, #2
 8011166:	2201      	movgt	r2, #1
 8011168:	4413      	add	r3, r2
 801116a:	e7e0      	b.n	801112e <_printf_float+0x192>
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	055a      	lsls	r2, r3, #21
 8011170:	d407      	bmi.n	8011182 <_printf_float+0x1e6>
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	4642      	mov	r2, r8
 8011176:	4631      	mov	r1, r6
 8011178:	4628      	mov	r0, r5
 801117a:	47b8      	blx	r7
 801117c:	3001      	adds	r0, #1
 801117e:	d12b      	bne.n	80111d8 <_printf_float+0x23c>
 8011180:	e767      	b.n	8011052 <_printf_float+0xb6>
 8011182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011186:	f240 80dd 	bls.w	8011344 <_printf_float+0x3a8>
 801118a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801118e:	2200      	movs	r2, #0
 8011190:	2300      	movs	r3, #0
 8011192:	f7ef fcc1 	bl	8000b18 <__aeabi_dcmpeq>
 8011196:	2800      	cmp	r0, #0
 8011198:	d033      	beq.n	8011202 <_printf_float+0x266>
 801119a:	4a37      	ldr	r2, [pc, #220]	@ (8011278 <_printf_float+0x2dc>)
 801119c:	2301      	movs	r3, #1
 801119e:	4631      	mov	r1, r6
 80111a0:	4628      	mov	r0, r5
 80111a2:	47b8      	blx	r7
 80111a4:	3001      	adds	r0, #1
 80111a6:	f43f af54 	beq.w	8011052 <_printf_float+0xb6>
 80111aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80111ae:	4543      	cmp	r3, r8
 80111b0:	db02      	blt.n	80111b8 <_printf_float+0x21c>
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	07d8      	lsls	r0, r3, #31
 80111b6:	d50f      	bpl.n	80111d8 <_printf_float+0x23c>
 80111b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111bc:	4631      	mov	r1, r6
 80111be:	4628      	mov	r0, r5
 80111c0:	47b8      	blx	r7
 80111c2:	3001      	adds	r0, #1
 80111c4:	f43f af45 	beq.w	8011052 <_printf_float+0xb6>
 80111c8:	f04f 0900 	mov.w	r9, #0
 80111cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80111d0:	f104 0a1a 	add.w	sl, r4, #26
 80111d4:	45c8      	cmp	r8, r9
 80111d6:	dc09      	bgt.n	80111ec <_printf_float+0x250>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	079b      	lsls	r3, r3, #30
 80111dc:	f100 8103 	bmi.w	80113e6 <_printf_float+0x44a>
 80111e0:	68e0      	ldr	r0, [r4, #12]
 80111e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111e4:	4298      	cmp	r0, r3
 80111e6:	bfb8      	it	lt
 80111e8:	4618      	movlt	r0, r3
 80111ea:	e734      	b.n	8011056 <_printf_float+0xba>
 80111ec:	2301      	movs	r3, #1
 80111ee:	4652      	mov	r2, sl
 80111f0:	4631      	mov	r1, r6
 80111f2:	4628      	mov	r0, r5
 80111f4:	47b8      	blx	r7
 80111f6:	3001      	adds	r0, #1
 80111f8:	f43f af2b 	beq.w	8011052 <_printf_float+0xb6>
 80111fc:	f109 0901 	add.w	r9, r9, #1
 8011200:	e7e8      	b.n	80111d4 <_printf_float+0x238>
 8011202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011204:	2b00      	cmp	r3, #0
 8011206:	dc39      	bgt.n	801127c <_printf_float+0x2e0>
 8011208:	4a1b      	ldr	r2, [pc, #108]	@ (8011278 <_printf_float+0x2dc>)
 801120a:	2301      	movs	r3, #1
 801120c:	4631      	mov	r1, r6
 801120e:	4628      	mov	r0, r5
 8011210:	47b8      	blx	r7
 8011212:	3001      	adds	r0, #1
 8011214:	f43f af1d 	beq.w	8011052 <_printf_float+0xb6>
 8011218:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801121c:	ea59 0303 	orrs.w	r3, r9, r3
 8011220:	d102      	bne.n	8011228 <_printf_float+0x28c>
 8011222:	6823      	ldr	r3, [r4, #0]
 8011224:	07d9      	lsls	r1, r3, #31
 8011226:	d5d7      	bpl.n	80111d8 <_printf_float+0x23c>
 8011228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801122c:	4631      	mov	r1, r6
 801122e:	4628      	mov	r0, r5
 8011230:	47b8      	blx	r7
 8011232:	3001      	adds	r0, #1
 8011234:	f43f af0d 	beq.w	8011052 <_printf_float+0xb6>
 8011238:	f04f 0a00 	mov.w	sl, #0
 801123c:	f104 0b1a 	add.w	fp, r4, #26
 8011240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011242:	425b      	negs	r3, r3
 8011244:	4553      	cmp	r3, sl
 8011246:	dc01      	bgt.n	801124c <_printf_float+0x2b0>
 8011248:	464b      	mov	r3, r9
 801124a:	e793      	b.n	8011174 <_printf_float+0x1d8>
 801124c:	2301      	movs	r3, #1
 801124e:	465a      	mov	r2, fp
 8011250:	4631      	mov	r1, r6
 8011252:	4628      	mov	r0, r5
 8011254:	47b8      	blx	r7
 8011256:	3001      	adds	r0, #1
 8011258:	f43f aefb 	beq.w	8011052 <_printf_float+0xb6>
 801125c:	f10a 0a01 	add.w	sl, sl, #1
 8011260:	e7ee      	b.n	8011240 <_printf_float+0x2a4>
 8011262:	bf00      	nop
 8011264:	7fefffff 	.word	0x7fefffff
 8011268:	08022efc 	.word	0x08022efc
 801126c:	08022f00 	.word	0x08022f00
 8011270:	08022f04 	.word	0x08022f04
 8011274:	08022f08 	.word	0x08022f08
 8011278:	08022f0c 	.word	0x08022f0c
 801127c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801127e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011282:	4553      	cmp	r3, sl
 8011284:	bfa8      	it	ge
 8011286:	4653      	movge	r3, sl
 8011288:	2b00      	cmp	r3, #0
 801128a:	4699      	mov	r9, r3
 801128c:	dc36      	bgt.n	80112fc <_printf_float+0x360>
 801128e:	f04f 0b00 	mov.w	fp, #0
 8011292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011296:	f104 021a 	add.w	r2, r4, #26
 801129a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801129c:	9306      	str	r3, [sp, #24]
 801129e:	eba3 0309 	sub.w	r3, r3, r9
 80112a2:	455b      	cmp	r3, fp
 80112a4:	dc31      	bgt.n	801130a <_printf_float+0x36e>
 80112a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112a8:	459a      	cmp	sl, r3
 80112aa:	dc3a      	bgt.n	8011322 <_printf_float+0x386>
 80112ac:	6823      	ldr	r3, [r4, #0]
 80112ae:	07da      	lsls	r2, r3, #31
 80112b0:	d437      	bmi.n	8011322 <_printf_float+0x386>
 80112b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112b4:	ebaa 0903 	sub.w	r9, sl, r3
 80112b8:	9b06      	ldr	r3, [sp, #24]
 80112ba:	ebaa 0303 	sub.w	r3, sl, r3
 80112be:	4599      	cmp	r9, r3
 80112c0:	bfa8      	it	ge
 80112c2:	4699      	movge	r9, r3
 80112c4:	f1b9 0f00 	cmp.w	r9, #0
 80112c8:	dc33      	bgt.n	8011332 <_printf_float+0x396>
 80112ca:	f04f 0800 	mov.w	r8, #0
 80112ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112d2:	f104 0b1a 	add.w	fp, r4, #26
 80112d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d8:	ebaa 0303 	sub.w	r3, sl, r3
 80112dc:	eba3 0309 	sub.w	r3, r3, r9
 80112e0:	4543      	cmp	r3, r8
 80112e2:	f77f af79 	ble.w	80111d8 <_printf_float+0x23c>
 80112e6:	2301      	movs	r3, #1
 80112e8:	465a      	mov	r2, fp
 80112ea:	4631      	mov	r1, r6
 80112ec:	4628      	mov	r0, r5
 80112ee:	47b8      	blx	r7
 80112f0:	3001      	adds	r0, #1
 80112f2:	f43f aeae 	beq.w	8011052 <_printf_float+0xb6>
 80112f6:	f108 0801 	add.w	r8, r8, #1
 80112fa:	e7ec      	b.n	80112d6 <_printf_float+0x33a>
 80112fc:	4642      	mov	r2, r8
 80112fe:	4631      	mov	r1, r6
 8011300:	4628      	mov	r0, r5
 8011302:	47b8      	blx	r7
 8011304:	3001      	adds	r0, #1
 8011306:	d1c2      	bne.n	801128e <_printf_float+0x2f2>
 8011308:	e6a3      	b.n	8011052 <_printf_float+0xb6>
 801130a:	2301      	movs	r3, #1
 801130c:	4631      	mov	r1, r6
 801130e:	4628      	mov	r0, r5
 8011310:	9206      	str	r2, [sp, #24]
 8011312:	47b8      	blx	r7
 8011314:	3001      	adds	r0, #1
 8011316:	f43f ae9c 	beq.w	8011052 <_printf_float+0xb6>
 801131a:	9a06      	ldr	r2, [sp, #24]
 801131c:	f10b 0b01 	add.w	fp, fp, #1
 8011320:	e7bb      	b.n	801129a <_printf_float+0x2fe>
 8011322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011326:	4631      	mov	r1, r6
 8011328:	4628      	mov	r0, r5
 801132a:	47b8      	blx	r7
 801132c:	3001      	adds	r0, #1
 801132e:	d1c0      	bne.n	80112b2 <_printf_float+0x316>
 8011330:	e68f      	b.n	8011052 <_printf_float+0xb6>
 8011332:	9a06      	ldr	r2, [sp, #24]
 8011334:	464b      	mov	r3, r9
 8011336:	4442      	add	r2, r8
 8011338:	4631      	mov	r1, r6
 801133a:	4628      	mov	r0, r5
 801133c:	47b8      	blx	r7
 801133e:	3001      	adds	r0, #1
 8011340:	d1c3      	bne.n	80112ca <_printf_float+0x32e>
 8011342:	e686      	b.n	8011052 <_printf_float+0xb6>
 8011344:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011348:	f1ba 0f01 	cmp.w	sl, #1
 801134c:	dc01      	bgt.n	8011352 <_printf_float+0x3b6>
 801134e:	07db      	lsls	r3, r3, #31
 8011350:	d536      	bpl.n	80113c0 <_printf_float+0x424>
 8011352:	2301      	movs	r3, #1
 8011354:	4642      	mov	r2, r8
 8011356:	4631      	mov	r1, r6
 8011358:	4628      	mov	r0, r5
 801135a:	47b8      	blx	r7
 801135c:	3001      	adds	r0, #1
 801135e:	f43f ae78 	beq.w	8011052 <_printf_float+0xb6>
 8011362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011366:	4631      	mov	r1, r6
 8011368:	4628      	mov	r0, r5
 801136a:	47b8      	blx	r7
 801136c:	3001      	adds	r0, #1
 801136e:	f43f ae70 	beq.w	8011052 <_printf_float+0xb6>
 8011372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011376:	2200      	movs	r2, #0
 8011378:	2300      	movs	r3, #0
 801137a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801137e:	f7ef fbcb 	bl	8000b18 <__aeabi_dcmpeq>
 8011382:	b9c0      	cbnz	r0, 80113b6 <_printf_float+0x41a>
 8011384:	4653      	mov	r3, sl
 8011386:	f108 0201 	add.w	r2, r8, #1
 801138a:	4631      	mov	r1, r6
 801138c:	4628      	mov	r0, r5
 801138e:	47b8      	blx	r7
 8011390:	3001      	adds	r0, #1
 8011392:	d10c      	bne.n	80113ae <_printf_float+0x412>
 8011394:	e65d      	b.n	8011052 <_printf_float+0xb6>
 8011396:	2301      	movs	r3, #1
 8011398:	465a      	mov	r2, fp
 801139a:	4631      	mov	r1, r6
 801139c:	4628      	mov	r0, r5
 801139e:	47b8      	blx	r7
 80113a0:	3001      	adds	r0, #1
 80113a2:	f43f ae56 	beq.w	8011052 <_printf_float+0xb6>
 80113a6:	f108 0801 	add.w	r8, r8, #1
 80113aa:	45d0      	cmp	r8, sl
 80113ac:	dbf3      	blt.n	8011396 <_printf_float+0x3fa>
 80113ae:	464b      	mov	r3, r9
 80113b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80113b4:	e6df      	b.n	8011176 <_printf_float+0x1da>
 80113b6:	f04f 0800 	mov.w	r8, #0
 80113ba:	f104 0b1a 	add.w	fp, r4, #26
 80113be:	e7f4      	b.n	80113aa <_printf_float+0x40e>
 80113c0:	2301      	movs	r3, #1
 80113c2:	4642      	mov	r2, r8
 80113c4:	e7e1      	b.n	801138a <_printf_float+0x3ee>
 80113c6:	2301      	movs	r3, #1
 80113c8:	464a      	mov	r2, r9
 80113ca:	4631      	mov	r1, r6
 80113cc:	4628      	mov	r0, r5
 80113ce:	47b8      	blx	r7
 80113d0:	3001      	adds	r0, #1
 80113d2:	f43f ae3e 	beq.w	8011052 <_printf_float+0xb6>
 80113d6:	f108 0801 	add.w	r8, r8, #1
 80113da:	68e3      	ldr	r3, [r4, #12]
 80113dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113de:	1a5b      	subs	r3, r3, r1
 80113e0:	4543      	cmp	r3, r8
 80113e2:	dcf0      	bgt.n	80113c6 <_printf_float+0x42a>
 80113e4:	e6fc      	b.n	80111e0 <_printf_float+0x244>
 80113e6:	f04f 0800 	mov.w	r8, #0
 80113ea:	f104 0919 	add.w	r9, r4, #25
 80113ee:	e7f4      	b.n	80113da <_printf_float+0x43e>

080113f0 <_printf_common>:
 80113f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f4:	4616      	mov	r6, r2
 80113f6:	4698      	mov	r8, r3
 80113f8:	688a      	ldr	r2, [r1, #8]
 80113fa:	690b      	ldr	r3, [r1, #16]
 80113fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011400:	4293      	cmp	r3, r2
 8011402:	bfb8      	it	lt
 8011404:	4613      	movlt	r3, r2
 8011406:	6033      	str	r3, [r6, #0]
 8011408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801140c:	4607      	mov	r7, r0
 801140e:	460c      	mov	r4, r1
 8011410:	b10a      	cbz	r2, 8011416 <_printf_common+0x26>
 8011412:	3301      	adds	r3, #1
 8011414:	6033      	str	r3, [r6, #0]
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	0699      	lsls	r1, r3, #26
 801141a:	bf42      	ittt	mi
 801141c:	6833      	ldrmi	r3, [r6, #0]
 801141e:	3302      	addmi	r3, #2
 8011420:	6033      	strmi	r3, [r6, #0]
 8011422:	6825      	ldr	r5, [r4, #0]
 8011424:	f015 0506 	ands.w	r5, r5, #6
 8011428:	d106      	bne.n	8011438 <_printf_common+0x48>
 801142a:	f104 0a19 	add.w	sl, r4, #25
 801142e:	68e3      	ldr	r3, [r4, #12]
 8011430:	6832      	ldr	r2, [r6, #0]
 8011432:	1a9b      	subs	r3, r3, r2
 8011434:	42ab      	cmp	r3, r5
 8011436:	dc26      	bgt.n	8011486 <_printf_common+0x96>
 8011438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801143c:	6822      	ldr	r2, [r4, #0]
 801143e:	3b00      	subs	r3, #0
 8011440:	bf18      	it	ne
 8011442:	2301      	movne	r3, #1
 8011444:	0692      	lsls	r2, r2, #26
 8011446:	d42b      	bmi.n	80114a0 <_printf_common+0xb0>
 8011448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801144c:	4641      	mov	r1, r8
 801144e:	4638      	mov	r0, r7
 8011450:	47c8      	blx	r9
 8011452:	3001      	adds	r0, #1
 8011454:	d01e      	beq.n	8011494 <_printf_common+0xa4>
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	6922      	ldr	r2, [r4, #16]
 801145a:	f003 0306 	and.w	r3, r3, #6
 801145e:	2b04      	cmp	r3, #4
 8011460:	bf02      	ittt	eq
 8011462:	68e5      	ldreq	r5, [r4, #12]
 8011464:	6833      	ldreq	r3, [r6, #0]
 8011466:	1aed      	subeq	r5, r5, r3
 8011468:	68a3      	ldr	r3, [r4, #8]
 801146a:	bf0c      	ite	eq
 801146c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011470:	2500      	movne	r5, #0
 8011472:	4293      	cmp	r3, r2
 8011474:	bfc4      	itt	gt
 8011476:	1a9b      	subgt	r3, r3, r2
 8011478:	18ed      	addgt	r5, r5, r3
 801147a:	2600      	movs	r6, #0
 801147c:	341a      	adds	r4, #26
 801147e:	42b5      	cmp	r5, r6
 8011480:	d11a      	bne.n	80114b8 <_printf_common+0xc8>
 8011482:	2000      	movs	r0, #0
 8011484:	e008      	b.n	8011498 <_printf_common+0xa8>
 8011486:	2301      	movs	r3, #1
 8011488:	4652      	mov	r2, sl
 801148a:	4641      	mov	r1, r8
 801148c:	4638      	mov	r0, r7
 801148e:	47c8      	blx	r9
 8011490:	3001      	adds	r0, #1
 8011492:	d103      	bne.n	801149c <_printf_common+0xac>
 8011494:	f04f 30ff 	mov.w	r0, #4294967295
 8011498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149c:	3501      	adds	r5, #1
 801149e:	e7c6      	b.n	801142e <_printf_common+0x3e>
 80114a0:	18e1      	adds	r1, r4, r3
 80114a2:	1c5a      	adds	r2, r3, #1
 80114a4:	2030      	movs	r0, #48	@ 0x30
 80114a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80114aa:	4422      	add	r2, r4
 80114ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80114b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80114b4:	3302      	adds	r3, #2
 80114b6:	e7c7      	b.n	8011448 <_printf_common+0x58>
 80114b8:	2301      	movs	r3, #1
 80114ba:	4622      	mov	r2, r4
 80114bc:	4641      	mov	r1, r8
 80114be:	4638      	mov	r0, r7
 80114c0:	47c8      	blx	r9
 80114c2:	3001      	adds	r0, #1
 80114c4:	d0e6      	beq.n	8011494 <_printf_common+0xa4>
 80114c6:	3601      	adds	r6, #1
 80114c8:	e7d9      	b.n	801147e <_printf_common+0x8e>
	...

080114cc <_printf_i>:
 80114cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114d0:	7e0f      	ldrb	r7, [r1, #24]
 80114d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114d4:	2f78      	cmp	r7, #120	@ 0x78
 80114d6:	4691      	mov	r9, r2
 80114d8:	4680      	mov	r8, r0
 80114da:	460c      	mov	r4, r1
 80114dc:	469a      	mov	sl, r3
 80114de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114e2:	d807      	bhi.n	80114f4 <_printf_i+0x28>
 80114e4:	2f62      	cmp	r7, #98	@ 0x62
 80114e6:	d80a      	bhi.n	80114fe <_printf_i+0x32>
 80114e8:	2f00      	cmp	r7, #0
 80114ea:	f000 80d2 	beq.w	8011692 <_printf_i+0x1c6>
 80114ee:	2f58      	cmp	r7, #88	@ 0x58
 80114f0:	f000 80b9 	beq.w	8011666 <_printf_i+0x19a>
 80114f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114fc:	e03a      	b.n	8011574 <_printf_i+0xa8>
 80114fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011502:	2b15      	cmp	r3, #21
 8011504:	d8f6      	bhi.n	80114f4 <_printf_i+0x28>
 8011506:	a101      	add	r1, pc, #4	@ (adr r1, 801150c <_printf_i+0x40>)
 8011508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801150c:	08011565 	.word	0x08011565
 8011510:	08011579 	.word	0x08011579
 8011514:	080114f5 	.word	0x080114f5
 8011518:	080114f5 	.word	0x080114f5
 801151c:	080114f5 	.word	0x080114f5
 8011520:	080114f5 	.word	0x080114f5
 8011524:	08011579 	.word	0x08011579
 8011528:	080114f5 	.word	0x080114f5
 801152c:	080114f5 	.word	0x080114f5
 8011530:	080114f5 	.word	0x080114f5
 8011534:	080114f5 	.word	0x080114f5
 8011538:	08011679 	.word	0x08011679
 801153c:	080115a3 	.word	0x080115a3
 8011540:	08011633 	.word	0x08011633
 8011544:	080114f5 	.word	0x080114f5
 8011548:	080114f5 	.word	0x080114f5
 801154c:	0801169b 	.word	0x0801169b
 8011550:	080114f5 	.word	0x080114f5
 8011554:	080115a3 	.word	0x080115a3
 8011558:	080114f5 	.word	0x080114f5
 801155c:	080114f5 	.word	0x080114f5
 8011560:	0801163b 	.word	0x0801163b
 8011564:	6833      	ldr	r3, [r6, #0]
 8011566:	1d1a      	adds	r2, r3, #4
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	6032      	str	r2, [r6, #0]
 801156c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011574:	2301      	movs	r3, #1
 8011576:	e09d      	b.n	80116b4 <_printf_i+0x1e8>
 8011578:	6833      	ldr	r3, [r6, #0]
 801157a:	6820      	ldr	r0, [r4, #0]
 801157c:	1d19      	adds	r1, r3, #4
 801157e:	6031      	str	r1, [r6, #0]
 8011580:	0606      	lsls	r6, r0, #24
 8011582:	d501      	bpl.n	8011588 <_printf_i+0xbc>
 8011584:	681d      	ldr	r5, [r3, #0]
 8011586:	e003      	b.n	8011590 <_printf_i+0xc4>
 8011588:	0645      	lsls	r5, r0, #25
 801158a:	d5fb      	bpl.n	8011584 <_printf_i+0xb8>
 801158c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011590:	2d00      	cmp	r5, #0
 8011592:	da03      	bge.n	801159c <_printf_i+0xd0>
 8011594:	232d      	movs	r3, #45	@ 0x2d
 8011596:	426d      	negs	r5, r5
 8011598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801159c:	4859      	ldr	r0, [pc, #356]	@ (8011704 <_printf_i+0x238>)
 801159e:	230a      	movs	r3, #10
 80115a0:	e011      	b.n	80115c6 <_printf_i+0xfa>
 80115a2:	6821      	ldr	r1, [r4, #0]
 80115a4:	6833      	ldr	r3, [r6, #0]
 80115a6:	0608      	lsls	r0, r1, #24
 80115a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80115ac:	d402      	bmi.n	80115b4 <_printf_i+0xe8>
 80115ae:	0649      	lsls	r1, r1, #25
 80115b0:	bf48      	it	mi
 80115b2:	b2ad      	uxthmi	r5, r5
 80115b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80115b6:	4853      	ldr	r0, [pc, #332]	@ (8011704 <_printf_i+0x238>)
 80115b8:	6033      	str	r3, [r6, #0]
 80115ba:	bf14      	ite	ne
 80115bc:	230a      	movne	r3, #10
 80115be:	2308      	moveq	r3, #8
 80115c0:	2100      	movs	r1, #0
 80115c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80115c6:	6866      	ldr	r6, [r4, #4]
 80115c8:	60a6      	str	r6, [r4, #8]
 80115ca:	2e00      	cmp	r6, #0
 80115cc:	bfa2      	ittt	ge
 80115ce:	6821      	ldrge	r1, [r4, #0]
 80115d0:	f021 0104 	bicge.w	r1, r1, #4
 80115d4:	6021      	strge	r1, [r4, #0]
 80115d6:	b90d      	cbnz	r5, 80115dc <_printf_i+0x110>
 80115d8:	2e00      	cmp	r6, #0
 80115da:	d04b      	beq.n	8011674 <_printf_i+0x1a8>
 80115dc:	4616      	mov	r6, r2
 80115de:	fbb5 f1f3 	udiv	r1, r5, r3
 80115e2:	fb03 5711 	mls	r7, r3, r1, r5
 80115e6:	5dc7      	ldrb	r7, [r0, r7]
 80115e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115ec:	462f      	mov	r7, r5
 80115ee:	42bb      	cmp	r3, r7
 80115f0:	460d      	mov	r5, r1
 80115f2:	d9f4      	bls.n	80115de <_printf_i+0x112>
 80115f4:	2b08      	cmp	r3, #8
 80115f6:	d10b      	bne.n	8011610 <_printf_i+0x144>
 80115f8:	6823      	ldr	r3, [r4, #0]
 80115fa:	07df      	lsls	r7, r3, #31
 80115fc:	d508      	bpl.n	8011610 <_printf_i+0x144>
 80115fe:	6923      	ldr	r3, [r4, #16]
 8011600:	6861      	ldr	r1, [r4, #4]
 8011602:	4299      	cmp	r1, r3
 8011604:	bfde      	ittt	le
 8011606:	2330      	movle	r3, #48	@ 0x30
 8011608:	f806 3c01 	strble.w	r3, [r6, #-1]
 801160c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011610:	1b92      	subs	r2, r2, r6
 8011612:	6122      	str	r2, [r4, #16]
 8011614:	f8cd a000 	str.w	sl, [sp]
 8011618:	464b      	mov	r3, r9
 801161a:	aa03      	add	r2, sp, #12
 801161c:	4621      	mov	r1, r4
 801161e:	4640      	mov	r0, r8
 8011620:	f7ff fee6 	bl	80113f0 <_printf_common>
 8011624:	3001      	adds	r0, #1
 8011626:	d14a      	bne.n	80116be <_printf_i+0x1f2>
 8011628:	f04f 30ff 	mov.w	r0, #4294967295
 801162c:	b004      	add	sp, #16
 801162e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	f043 0320 	orr.w	r3, r3, #32
 8011638:	6023      	str	r3, [r4, #0]
 801163a:	4833      	ldr	r0, [pc, #204]	@ (8011708 <_printf_i+0x23c>)
 801163c:	2778      	movs	r7, #120	@ 0x78
 801163e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	6831      	ldr	r1, [r6, #0]
 8011646:	061f      	lsls	r7, r3, #24
 8011648:	f851 5b04 	ldr.w	r5, [r1], #4
 801164c:	d402      	bmi.n	8011654 <_printf_i+0x188>
 801164e:	065f      	lsls	r7, r3, #25
 8011650:	bf48      	it	mi
 8011652:	b2ad      	uxthmi	r5, r5
 8011654:	6031      	str	r1, [r6, #0]
 8011656:	07d9      	lsls	r1, r3, #31
 8011658:	bf44      	itt	mi
 801165a:	f043 0320 	orrmi.w	r3, r3, #32
 801165e:	6023      	strmi	r3, [r4, #0]
 8011660:	b11d      	cbz	r5, 801166a <_printf_i+0x19e>
 8011662:	2310      	movs	r3, #16
 8011664:	e7ac      	b.n	80115c0 <_printf_i+0xf4>
 8011666:	4827      	ldr	r0, [pc, #156]	@ (8011704 <_printf_i+0x238>)
 8011668:	e7e9      	b.n	801163e <_printf_i+0x172>
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	f023 0320 	bic.w	r3, r3, #32
 8011670:	6023      	str	r3, [r4, #0]
 8011672:	e7f6      	b.n	8011662 <_printf_i+0x196>
 8011674:	4616      	mov	r6, r2
 8011676:	e7bd      	b.n	80115f4 <_printf_i+0x128>
 8011678:	6833      	ldr	r3, [r6, #0]
 801167a:	6825      	ldr	r5, [r4, #0]
 801167c:	6961      	ldr	r1, [r4, #20]
 801167e:	1d18      	adds	r0, r3, #4
 8011680:	6030      	str	r0, [r6, #0]
 8011682:	062e      	lsls	r6, r5, #24
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	d501      	bpl.n	801168c <_printf_i+0x1c0>
 8011688:	6019      	str	r1, [r3, #0]
 801168a:	e002      	b.n	8011692 <_printf_i+0x1c6>
 801168c:	0668      	lsls	r0, r5, #25
 801168e:	d5fb      	bpl.n	8011688 <_printf_i+0x1bc>
 8011690:	8019      	strh	r1, [r3, #0]
 8011692:	2300      	movs	r3, #0
 8011694:	6123      	str	r3, [r4, #16]
 8011696:	4616      	mov	r6, r2
 8011698:	e7bc      	b.n	8011614 <_printf_i+0x148>
 801169a:	6833      	ldr	r3, [r6, #0]
 801169c:	1d1a      	adds	r2, r3, #4
 801169e:	6032      	str	r2, [r6, #0]
 80116a0:	681e      	ldr	r6, [r3, #0]
 80116a2:	6862      	ldr	r2, [r4, #4]
 80116a4:	2100      	movs	r1, #0
 80116a6:	4630      	mov	r0, r6
 80116a8:	f7ee fdba 	bl	8000220 <memchr>
 80116ac:	b108      	cbz	r0, 80116b2 <_printf_i+0x1e6>
 80116ae:	1b80      	subs	r0, r0, r6
 80116b0:	6060      	str	r0, [r4, #4]
 80116b2:	6863      	ldr	r3, [r4, #4]
 80116b4:	6123      	str	r3, [r4, #16]
 80116b6:	2300      	movs	r3, #0
 80116b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116bc:	e7aa      	b.n	8011614 <_printf_i+0x148>
 80116be:	6923      	ldr	r3, [r4, #16]
 80116c0:	4632      	mov	r2, r6
 80116c2:	4649      	mov	r1, r9
 80116c4:	4640      	mov	r0, r8
 80116c6:	47d0      	blx	sl
 80116c8:	3001      	adds	r0, #1
 80116ca:	d0ad      	beq.n	8011628 <_printf_i+0x15c>
 80116cc:	6823      	ldr	r3, [r4, #0]
 80116ce:	079b      	lsls	r3, r3, #30
 80116d0:	d413      	bmi.n	80116fa <_printf_i+0x22e>
 80116d2:	68e0      	ldr	r0, [r4, #12]
 80116d4:	9b03      	ldr	r3, [sp, #12]
 80116d6:	4298      	cmp	r0, r3
 80116d8:	bfb8      	it	lt
 80116da:	4618      	movlt	r0, r3
 80116dc:	e7a6      	b.n	801162c <_printf_i+0x160>
 80116de:	2301      	movs	r3, #1
 80116e0:	4632      	mov	r2, r6
 80116e2:	4649      	mov	r1, r9
 80116e4:	4640      	mov	r0, r8
 80116e6:	47d0      	blx	sl
 80116e8:	3001      	adds	r0, #1
 80116ea:	d09d      	beq.n	8011628 <_printf_i+0x15c>
 80116ec:	3501      	adds	r5, #1
 80116ee:	68e3      	ldr	r3, [r4, #12]
 80116f0:	9903      	ldr	r1, [sp, #12]
 80116f2:	1a5b      	subs	r3, r3, r1
 80116f4:	42ab      	cmp	r3, r5
 80116f6:	dcf2      	bgt.n	80116de <_printf_i+0x212>
 80116f8:	e7eb      	b.n	80116d2 <_printf_i+0x206>
 80116fa:	2500      	movs	r5, #0
 80116fc:	f104 0619 	add.w	r6, r4, #25
 8011700:	e7f5      	b.n	80116ee <_printf_i+0x222>
 8011702:	bf00      	nop
 8011704:	08022f0e 	.word	0x08022f0e
 8011708:	08022f1f 	.word	0x08022f1f

0801170c <_scanf_float>:
 801170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011710:	b087      	sub	sp, #28
 8011712:	4617      	mov	r7, r2
 8011714:	9303      	str	r3, [sp, #12]
 8011716:	688b      	ldr	r3, [r1, #8]
 8011718:	1e5a      	subs	r2, r3, #1
 801171a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801171e:	bf81      	itttt	hi
 8011720:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011724:	eb03 0b05 	addhi.w	fp, r3, r5
 8011728:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801172c:	608b      	strhi	r3, [r1, #8]
 801172e:	680b      	ldr	r3, [r1, #0]
 8011730:	460a      	mov	r2, r1
 8011732:	f04f 0500 	mov.w	r5, #0
 8011736:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801173a:	f842 3b1c 	str.w	r3, [r2], #28
 801173e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011742:	4680      	mov	r8, r0
 8011744:	460c      	mov	r4, r1
 8011746:	bf98      	it	ls
 8011748:	f04f 0b00 	movls.w	fp, #0
 801174c:	9201      	str	r2, [sp, #4]
 801174e:	4616      	mov	r6, r2
 8011750:	46aa      	mov	sl, r5
 8011752:	46a9      	mov	r9, r5
 8011754:	9502      	str	r5, [sp, #8]
 8011756:	68a2      	ldr	r2, [r4, #8]
 8011758:	b152      	cbz	r2, 8011770 <_scanf_float+0x64>
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	2b4e      	cmp	r3, #78	@ 0x4e
 8011760:	d864      	bhi.n	801182c <_scanf_float+0x120>
 8011762:	2b40      	cmp	r3, #64	@ 0x40
 8011764:	d83c      	bhi.n	80117e0 <_scanf_float+0xd4>
 8011766:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801176a:	b2c8      	uxtb	r0, r1
 801176c:	280e      	cmp	r0, #14
 801176e:	d93a      	bls.n	80117e6 <_scanf_float+0xda>
 8011770:	f1b9 0f00 	cmp.w	r9, #0
 8011774:	d003      	beq.n	801177e <_scanf_float+0x72>
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801177c:	6023      	str	r3, [r4, #0]
 801177e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011782:	f1ba 0f01 	cmp.w	sl, #1
 8011786:	f200 8117 	bhi.w	80119b8 <_scanf_float+0x2ac>
 801178a:	9b01      	ldr	r3, [sp, #4]
 801178c:	429e      	cmp	r6, r3
 801178e:	f200 8108 	bhi.w	80119a2 <_scanf_float+0x296>
 8011792:	2001      	movs	r0, #1
 8011794:	b007      	add	sp, #28
 8011796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801179e:	2a0d      	cmp	r2, #13
 80117a0:	d8e6      	bhi.n	8011770 <_scanf_float+0x64>
 80117a2:	a101      	add	r1, pc, #4	@ (adr r1, 80117a8 <_scanf_float+0x9c>)
 80117a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80117a8:	080118ef 	.word	0x080118ef
 80117ac:	08011771 	.word	0x08011771
 80117b0:	08011771 	.word	0x08011771
 80117b4:	08011771 	.word	0x08011771
 80117b8:	0801194f 	.word	0x0801194f
 80117bc:	08011927 	.word	0x08011927
 80117c0:	08011771 	.word	0x08011771
 80117c4:	08011771 	.word	0x08011771
 80117c8:	080118fd 	.word	0x080118fd
 80117cc:	08011771 	.word	0x08011771
 80117d0:	08011771 	.word	0x08011771
 80117d4:	08011771 	.word	0x08011771
 80117d8:	08011771 	.word	0x08011771
 80117dc:	080118b5 	.word	0x080118b5
 80117e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80117e4:	e7db      	b.n	801179e <_scanf_float+0x92>
 80117e6:	290e      	cmp	r1, #14
 80117e8:	d8c2      	bhi.n	8011770 <_scanf_float+0x64>
 80117ea:	a001      	add	r0, pc, #4	@ (adr r0, 80117f0 <_scanf_float+0xe4>)
 80117ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80117f0:	080118a5 	.word	0x080118a5
 80117f4:	08011771 	.word	0x08011771
 80117f8:	080118a5 	.word	0x080118a5
 80117fc:	0801193b 	.word	0x0801193b
 8011800:	08011771 	.word	0x08011771
 8011804:	0801184d 	.word	0x0801184d
 8011808:	0801188b 	.word	0x0801188b
 801180c:	0801188b 	.word	0x0801188b
 8011810:	0801188b 	.word	0x0801188b
 8011814:	0801188b 	.word	0x0801188b
 8011818:	0801188b 	.word	0x0801188b
 801181c:	0801188b 	.word	0x0801188b
 8011820:	0801188b 	.word	0x0801188b
 8011824:	0801188b 	.word	0x0801188b
 8011828:	0801188b 	.word	0x0801188b
 801182c:	2b6e      	cmp	r3, #110	@ 0x6e
 801182e:	d809      	bhi.n	8011844 <_scanf_float+0x138>
 8011830:	2b60      	cmp	r3, #96	@ 0x60
 8011832:	d8b2      	bhi.n	801179a <_scanf_float+0x8e>
 8011834:	2b54      	cmp	r3, #84	@ 0x54
 8011836:	d07b      	beq.n	8011930 <_scanf_float+0x224>
 8011838:	2b59      	cmp	r3, #89	@ 0x59
 801183a:	d199      	bne.n	8011770 <_scanf_float+0x64>
 801183c:	2d07      	cmp	r5, #7
 801183e:	d197      	bne.n	8011770 <_scanf_float+0x64>
 8011840:	2508      	movs	r5, #8
 8011842:	e02c      	b.n	801189e <_scanf_float+0x192>
 8011844:	2b74      	cmp	r3, #116	@ 0x74
 8011846:	d073      	beq.n	8011930 <_scanf_float+0x224>
 8011848:	2b79      	cmp	r3, #121	@ 0x79
 801184a:	e7f6      	b.n	801183a <_scanf_float+0x12e>
 801184c:	6821      	ldr	r1, [r4, #0]
 801184e:	05c8      	lsls	r0, r1, #23
 8011850:	d51b      	bpl.n	801188a <_scanf_float+0x17e>
 8011852:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011856:	6021      	str	r1, [r4, #0]
 8011858:	f109 0901 	add.w	r9, r9, #1
 801185c:	f1bb 0f00 	cmp.w	fp, #0
 8011860:	d003      	beq.n	801186a <_scanf_float+0x15e>
 8011862:	3201      	adds	r2, #1
 8011864:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011868:	60a2      	str	r2, [r4, #8]
 801186a:	68a3      	ldr	r3, [r4, #8]
 801186c:	3b01      	subs	r3, #1
 801186e:	60a3      	str	r3, [r4, #8]
 8011870:	6923      	ldr	r3, [r4, #16]
 8011872:	3301      	adds	r3, #1
 8011874:	6123      	str	r3, [r4, #16]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	3b01      	subs	r3, #1
 801187a:	2b00      	cmp	r3, #0
 801187c:	607b      	str	r3, [r7, #4]
 801187e:	f340 8087 	ble.w	8011990 <_scanf_float+0x284>
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	3301      	adds	r3, #1
 8011886:	603b      	str	r3, [r7, #0]
 8011888:	e765      	b.n	8011756 <_scanf_float+0x4a>
 801188a:	eb1a 0105 	adds.w	r1, sl, r5
 801188e:	f47f af6f 	bne.w	8011770 <_scanf_float+0x64>
 8011892:	6822      	ldr	r2, [r4, #0]
 8011894:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011898:	6022      	str	r2, [r4, #0]
 801189a:	460d      	mov	r5, r1
 801189c:	468a      	mov	sl, r1
 801189e:	f806 3b01 	strb.w	r3, [r6], #1
 80118a2:	e7e2      	b.n	801186a <_scanf_float+0x15e>
 80118a4:	6822      	ldr	r2, [r4, #0]
 80118a6:	0610      	lsls	r0, r2, #24
 80118a8:	f57f af62 	bpl.w	8011770 <_scanf_float+0x64>
 80118ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80118b0:	6022      	str	r2, [r4, #0]
 80118b2:	e7f4      	b.n	801189e <_scanf_float+0x192>
 80118b4:	f1ba 0f00 	cmp.w	sl, #0
 80118b8:	d10e      	bne.n	80118d8 <_scanf_float+0x1cc>
 80118ba:	f1b9 0f00 	cmp.w	r9, #0
 80118be:	d10e      	bne.n	80118de <_scanf_float+0x1d2>
 80118c0:	6822      	ldr	r2, [r4, #0]
 80118c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80118c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80118ca:	d108      	bne.n	80118de <_scanf_float+0x1d2>
 80118cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118d0:	6022      	str	r2, [r4, #0]
 80118d2:	f04f 0a01 	mov.w	sl, #1
 80118d6:	e7e2      	b.n	801189e <_scanf_float+0x192>
 80118d8:	f1ba 0f02 	cmp.w	sl, #2
 80118dc:	d055      	beq.n	801198a <_scanf_float+0x27e>
 80118de:	2d01      	cmp	r5, #1
 80118e0:	d002      	beq.n	80118e8 <_scanf_float+0x1dc>
 80118e2:	2d04      	cmp	r5, #4
 80118e4:	f47f af44 	bne.w	8011770 <_scanf_float+0x64>
 80118e8:	3501      	adds	r5, #1
 80118ea:	b2ed      	uxtb	r5, r5
 80118ec:	e7d7      	b.n	801189e <_scanf_float+0x192>
 80118ee:	f1ba 0f01 	cmp.w	sl, #1
 80118f2:	f47f af3d 	bne.w	8011770 <_scanf_float+0x64>
 80118f6:	f04f 0a02 	mov.w	sl, #2
 80118fa:	e7d0      	b.n	801189e <_scanf_float+0x192>
 80118fc:	b97d      	cbnz	r5, 801191e <_scanf_float+0x212>
 80118fe:	f1b9 0f00 	cmp.w	r9, #0
 8011902:	f47f af38 	bne.w	8011776 <_scanf_float+0x6a>
 8011906:	6822      	ldr	r2, [r4, #0]
 8011908:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801190c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011910:	f040 8108 	bne.w	8011b24 <_scanf_float+0x418>
 8011914:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011918:	6022      	str	r2, [r4, #0]
 801191a:	2501      	movs	r5, #1
 801191c:	e7bf      	b.n	801189e <_scanf_float+0x192>
 801191e:	2d03      	cmp	r5, #3
 8011920:	d0e2      	beq.n	80118e8 <_scanf_float+0x1dc>
 8011922:	2d05      	cmp	r5, #5
 8011924:	e7de      	b.n	80118e4 <_scanf_float+0x1d8>
 8011926:	2d02      	cmp	r5, #2
 8011928:	f47f af22 	bne.w	8011770 <_scanf_float+0x64>
 801192c:	2503      	movs	r5, #3
 801192e:	e7b6      	b.n	801189e <_scanf_float+0x192>
 8011930:	2d06      	cmp	r5, #6
 8011932:	f47f af1d 	bne.w	8011770 <_scanf_float+0x64>
 8011936:	2507      	movs	r5, #7
 8011938:	e7b1      	b.n	801189e <_scanf_float+0x192>
 801193a:	6822      	ldr	r2, [r4, #0]
 801193c:	0591      	lsls	r1, r2, #22
 801193e:	f57f af17 	bpl.w	8011770 <_scanf_float+0x64>
 8011942:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011946:	6022      	str	r2, [r4, #0]
 8011948:	f8cd 9008 	str.w	r9, [sp, #8]
 801194c:	e7a7      	b.n	801189e <_scanf_float+0x192>
 801194e:	6822      	ldr	r2, [r4, #0]
 8011950:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011954:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011958:	d006      	beq.n	8011968 <_scanf_float+0x25c>
 801195a:	0550      	lsls	r0, r2, #21
 801195c:	f57f af08 	bpl.w	8011770 <_scanf_float+0x64>
 8011960:	f1b9 0f00 	cmp.w	r9, #0
 8011964:	f000 80de 	beq.w	8011b24 <_scanf_float+0x418>
 8011968:	0591      	lsls	r1, r2, #22
 801196a:	bf58      	it	pl
 801196c:	9902      	ldrpl	r1, [sp, #8]
 801196e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011972:	bf58      	it	pl
 8011974:	eba9 0101 	subpl.w	r1, r9, r1
 8011978:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801197c:	bf58      	it	pl
 801197e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011982:	6022      	str	r2, [r4, #0]
 8011984:	f04f 0900 	mov.w	r9, #0
 8011988:	e789      	b.n	801189e <_scanf_float+0x192>
 801198a:	f04f 0a03 	mov.w	sl, #3
 801198e:	e786      	b.n	801189e <_scanf_float+0x192>
 8011990:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011994:	4639      	mov	r1, r7
 8011996:	4640      	mov	r0, r8
 8011998:	4798      	blx	r3
 801199a:	2800      	cmp	r0, #0
 801199c:	f43f aedb 	beq.w	8011756 <_scanf_float+0x4a>
 80119a0:	e6e6      	b.n	8011770 <_scanf_float+0x64>
 80119a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119aa:	463a      	mov	r2, r7
 80119ac:	4640      	mov	r0, r8
 80119ae:	4798      	blx	r3
 80119b0:	6923      	ldr	r3, [r4, #16]
 80119b2:	3b01      	subs	r3, #1
 80119b4:	6123      	str	r3, [r4, #16]
 80119b6:	e6e8      	b.n	801178a <_scanf_float+0x7e>
 80119b8:	1e6b      	subs	r3, r5, #1
 80119ba:	2b06      	cmp	r3, #6
 80119bc:	d824      	bhi.n	8011a08 <_scanf_float+0x2fc>
 80119be:	2d02      	cmp	r5, #2
 80119c0:	d836      	bhi.n	8011a30 <_scanf_float+0x324>
 80119c2:	9b01      	ldr	r3, [sp, #4]
 80119c4:	429e      	cmp	r6, r3
 80119c6:	f67f aee4 	bls.w	8011792 <_scanf_float+0x86>
 80119ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119d2:	463a      	mov	r2, r7
 80119d4:	4640      	mov	r0, r8
 80119d6:	4798      	blx	r3
 80119d8:	6923      	ldr	r3, [r4, #16]
 80119da:	3b01      	subs	r3, #1
 80119dc:	6123      	str	r3, [r4, #16]
 80119de:	e7f0      	b.n	80119c2 <_scanf_float+0x2b6>
 80119e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80119e8:	463a      	mov	r2, r7
 80119ea:	4640      	mov	r0, r8
 80119ec:	4798      	blx	r3
 80119ee:	6923      	ldr	r3, [r4, #16]
 80119f0:	3b01      	subs	r3, #1
 80119f2:	6123      	str	r3, [r4, #16]
 80119f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119f8:	fa5f fa8a 	uxtb.w	sl, sl
 80119fc:	f1ba 0f02 	cmp.w	sl, #2
 8011a00:	d1ee      	bne.n	80119e0 <_scanf_float+0x2d4>
 8011a02:	3d03      	subs	r5, #3
 8011a04:	b2ed      	uxtb	r5, r5
 8011a06:	1b76      	subs	r6, r6, r5
 8011a08:	6823      	ldr	r3, [r4, #0]
 8011a0a:	05da      	lsls	r2, r3, #23
 8011a0c:	d530      	bpl.n	8011a70 <_scanf_float+0x364>
 8011a0e:	055b      	lsls	r3, r3, #21
 8011a10:	d511      	bpl.n	8011a36 <_scanf_float+0x32a>
 8011a12:	9b01      	ldr	r3, [sp, #4]
 8011a14:	429e      	cmp	r6, r3
 8011a16:	f67f aebc 	bls.w	8011792 <_scanf_float+0x86>
 8011a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a22:	463a      	mov	r2, r7
 8011a24:	4640      	mov	r0, r8
 8011a26:	4798      	blx	r3
 8011a28:	6923      	ldr	r3, [r4, #16]
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	6123      	str	r3, [r4, #16]
 8011a2e:	e7f0      	b.n	8011a12 <_scanf_float+0x306>
 8011a30:	46aa      	mov	sl, r5
 8011a32:	46b3      	mov	fp, r6
 8011a34:	e7de      	b.n	80119f4 <_scanf_float+0x2e8>
 8011a36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a3a:	6923      	ldr	r3, [r4, #16]
 8011a3c:	2965      	cmp	r1, #101	@ 0x65
 8011a3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a42:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a46:	6123      	str	r3, [r4, #16]
 8011a48:	d00c      	beq.n	8011a64 <_scanf_float+0x358>
 8011a4a:	2945      	cmp	r1, #69	@ 0x45
 8011a4c:	d00a      	beq.n	8011a64 <_scanf_float+0x358>
 8011a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a52:	463a      	mov	r2, r7
 8011a54:	4640      	mov	r0, r8
 8011a56:	4798      	blx	r3
 8011a58:	6923      	ldr	r3, [r4, #16]
 8011a5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	1eb5      	subs	r5, r6, #2
 8011a62:	6123      	str	r3, [r4, #16]
 8011a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a68:	463a      	mov	r2, r7
 8011a6a:	4640      	mov	r0, r8
 8011a6c:	4798      	blx	r3
 8011a6e:	462e      	mov	r6, r5
 8011a70:	6822      	ldr	r2, [r4, #0]
 8011a72:	f012 0210 	ands.w	r2, r2, #16
 8011a76:	d001      	beq.n	8011a7c <_scanf_float+0x370>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	e68b      	b.n	8011794 <_scanf_float+0x88>
 8011a7c:	7032      	strb	r2, [r6, #0]
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011a88:	d11c      	bne.n	8011ac4 <_scanf_float+0x3b8>
 8011a8a:	9b02      	ldr	r3, [sp, #8]
 8011a8c:	454b      	cmp	r3, r9
 8011a8e:	eba3 0209 	sub.w	r2, r3, r9
 8011a92:	d123      	bne.n	8011adc <_scanf_float+0x3d0>
 8011a94:	9901      	ldr	r1, [sp, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	4640      	mov	r0, r8
 8011a9a:	f002 fce9 	bl	8014470 <_strtod_r>
 8011a9e:	9b03      	ldr	r3, [sp, #12]
 8011aa0:	6821      	ldr	r1, [r4, #0]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f011 0f02 	tst.w	r1, #2
 8011aa8:	ec57 6b10 	vmov	r6, r7, d0
 8011aac:	f103 0204 	add.w	r2, r3, #4
 8011ab0:	d01f      	beq.n	8011af2 <_scanf_float+0x3e6>
 8011ab2:	9903      	ldr	r1, [sp, #12]
 8011ab4:	600a      	str	r2, [r1, #0]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	e9c3 6700 	strd	r6, r7, [r3]
 8011abc:	68e3      	ldr	r3, [r4, #12]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	60e3      	str	r3, [r4, #12]
 8011ac2:	e7d9      	b.n	8011a78 <_scanf_float+0x36c>
 8011ac4:	9b04      	ldr	r3, [sp, #16]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d0e4      	beq.n	8011a94 <_scanf_float+0x388>
 8011aca:	9905      	ldr	r1, [sp, #20]
 8011acc:	230a      	movs	r3, #10
 8011ace:	3101      	adds	r1, #1
 8011ad0:	4640      	mov	r0, r8
 8011ad2:	f002 fd4d 	bl	8014570 <_strtol_r>
 8011ad6:	9b04      	ldr	r3, [sp, #16]
 8011ad8:	9e05      	ldr	r6, [sp, #20]
 8011ada:	1ac2      	subs	r2, r0, r3
 8011adc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011ae0:	429e      	cmp	r6, r3
 8011ae2:	bf28      	it	cs
 8011ae4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011ae8:	4910      	ldr	r1, [pc, #64]	@ (8011b2c <_scanf_float+0x420>)
 8011aea:	4630      	mov	r0, r6
 8011aec:	f000 f942 	bl	8011d74 <siprintf>
 8011af0:	e7d0      	b.n	8011a94 <_scanf_float+0x388>
 8011af2:	f011 0f04 	tst.w	r1, #4
 8011af6:	9903      	ldr	r1, [sp, #12]
 8011af8:	600a      	str	r2, [r1, #0]
 8011afa:	d1dc      	bne.n	8011ab6 <_scanf_float+0x3aa>
 8011afc:	681d      	ldr	r5, [r3, #0]
 8011afe:	4632      	mov	r2, r6
 8011b00:	463b      	mov	r3, r7
 8011b02:	4630      	mov	r0, r6
 8011b04:	4639      	mov	r1, r7
 8011b06:	f7ef f839 	bl	8000b7c <__aeabi_dcmpun>
 8011b0a:	b128      	cbz	r0, 8011b18 <_scanf_float+0x40c>
 8011b0c:	4808      	ldr	r0, [pc, #32]	@ (8011b30 <_scanf_float+0x424>)
 8011b0e:	f000 faa9 	bl	8012064 <nanf>
 8011b12:	ed85 0a00 	vstr	s0, [r5]
 8011b16:	e7d1      	b.n	8011abc <_scanf_float+0x3b0>
 8011b18:	4630      	mov	r0, r6
 8011b1a:	4639      	mov	r1, r7
 8011b1c:	f7ef f88c 	bl	8000c38 <__aeabi_d2f>
 8011b20:	6028      	str	r0, [r5, #0]
 8011b22:	e7cb      	b.n	8011abc <_scanf_float+0x3b0>
 8011b24:	f04f 0900 	mov.w	r9, #0
 8011b28:	e629      	b.n	801177e <_scanf_float+0x72>
 8011b2a:	bf00      	nop
 8011b2c:	08022f30 	.word	0x08022f30
 8011b30:	080232c5 	.word	0x080232c5

08011b34 <std>:
 8011b34:	2300      	movs	r3, #0
 8011b36:	b510      	push	{r4, lr}
 8011b38:	4604      	mov	r4, r0
 8011b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b42:	6083      	str	r3, [r0, #8]
 8011b44:	8181      	strh	r1, [r0, #12]
 8011b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b48:	81c2      	strh	r2, [r0, #14]
 8011b4a:	6183      	str	r3, [r0, #24]
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	2208      	movs	r2, #8
 8011b50:	305c      	adds	r0, #92	@ 0x5c
 8011b52:	f000 fa07 	bl	8011f64 <memset>
 8011b56:	4b0d      	ldr	r3, [pc, #52]	@ (8011b8c <std+0x58>)
 8011b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b90 <std+0x5c>)
 8011b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b94 <std+0x60>)
 8011b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011b62:	4b0d      	ldr	r3, [pc, #52]	@ (8011b98 <std+0x64>)
 8011b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b66:	4b0d      	ldr	r3, [pc, #52]	@ (8011b9c <std+0x68>)
 8011b68:	6224      	str	r4, [r4, #32]
 8011b6a:	429c      	cmp	r4, r3
 8011b6c:	d006      	beq.n	8011b7c <std+0x48>
 8011b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011b72:	4294      	cmp	r4, r2
 8011b74:	d002      	beq.n	8011b7c <std+0x48>
 8011b76:	33d0      	adds	r3, #208	@ 0xd0
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	d105      	bne.n	8011b88 <std+0x54>
 8011b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b84:	f000 ba6a 	b.w	801205c <__retarget_lock_init_recursive>
 8011b88:	bd10      	pop	{r4, pc}
 8011b8a:	bf00      	nop
 8011b8c:	08011db5 	.word	0x08011db5
 8011b90:	08011dd7 	.word	0x08011dd7
 8011b94:	08011e0f 	.word	0x08011e0f
 8011b98:	08011e33 	.word	0x08011e33
 8011b9c:	20002c80 	.word	0x20002c80

08011ba0 <stdio_exit_handler>:
 8011ba0:	4a02      	ldr	r2, [pc, #8]	@ (8011bac <stdio_exit_handler+0xc>)
 8011ba2:	4903      	ldr	r1, [pc, #12]	@ (8011bb0 <stdio_exit_handler+0x10>)
 8011ba4:	4803      	ldr	r0, [pc, #12]	@ (8011bb4 <stdio_exit_handler+0x14>)
 8011ba6:	f000 b869 	b.w	8011c7c <_fwalk_sglue>
 8011baa:	bf00      	nop
 8011bac:	20000390 	.word	0x20000390
 8011bb0:	0801492d 	.word	0x0801492d
 8011bb4:	200003a0 	.word	0x200003a0

08011bb8 <cleanup_stdio>:
 8011bb8:	6841      	ldr	r1, [r0, #4]
 8011bba:	4b0c      	ldr	r3, [pc, #48]	@ (8011bec <cleanup_stdio+0x34>)
 8011bbc:	4299      	cmp	r1, r3
 8011bbe:	b510      	push	{r4, lr}
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	d001      	beq.n	8011bc8 <cleanup_stdio+0x10>
 8011bc4:	f002 feb2 	bl	801492c <_fflush_r>
 8011bc8:	68a1      	ldr	r1, [r4, #8]
 8011bca:	4b09      	ldr	r3, [pc, #36]	@ (8011bf0 <cleanup_stdio+0x38>)
 8011bcc:	4299      	cmp	r1, r3
 8011bce:	d002      	beq.n	8011bd6 <cleanup_stdio+0x1e>
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f002 feab 	bl	801492c <_fflush_r>
 8011bd6:	68e1      	ldr	r1, [r4, #12]
 8011bd8:	4b06      	ldr	r3, [pc, #24]	@ (8011bf4 <cleanup_stdio+0x3c>)
 8011bda:	4299      	cmp	r1, r3
 8011bdc:	d004      	beq.n	8011be8 <cleanup_stdio+0x30>
 8011bde:	4620      	mov	r0, r4
 8011be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011be4:	f002 bea2 	b.w	801492c <_fflush_r>
 8011be8:	bd10      	pop	{r4, pc}
 8011bea:	bf00      	nop
 8011bec:	20002c80 	.word	0x20002c80
 8011bf0:	20002ce8 	.word	0x20002ce8
 8011bf4:	20002d50 	.word	0x20002d50

08011bf8 <global_stdio_init.part.0>:
 8011bf8:	b510      	push	{r4, lr}
 8011bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8011c28 <global_stdio_init.part.0+0x30>)
 8011bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8011c2c <global_stdio_init.part.0+0x34>)
 8011bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8011c30 <global_stdio_init.part.0+0x38>)
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	4620      	mov	r0, r4
 8011c04:	2200      	movs	r2, #0
 8011c06:	2104      	movs	r1, #4
 8011c08:	f7ff ff94 	bl	8011b34 <std>
 8011c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011c10:	2201      	movs	r2, #1
 8011c12:	2109      	movs	r1, #9
 8011c14:	f7ff ff8e 	bl	8011b34 <std>
 8011c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011c1c:	2202      	movs	r2, #2
 8011c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c22:	2112      	movs	r1, #18
 8011c24:	f7ff bf86 	b.w	8011b34 <std>
 8011c28:	20002db8 	.word	0x20002db8
 8011c2c:	20002c80 	.word	0x20002c80
 8011c30:	08011ba1 	.word	0x08011ba1

08011c34 <__sfp_lock_acquire>:
 8011c34:	4801      	ldr	r0, [pc, #4]	@ (8011c3c <__sfp_lock_acquire+0x8>)
 8011c36:	f000 ba12 	b.w	801205e <__retarget_lock_acquire_recursive>
 8011c3a:	bf00      	nop
 8011c3c:	20002dc1 	.word	0x20002dc1

08011c40 <__sfp_lock_release>:
 8011c40:	4801      	ldr	r0, [pc, #4]	@ (8011c48 <__sfp_lock_release+0x8>)
 8011c42:	f000 ba0d 	b.w	8012060 <__retarget_lock_release_recursive>
 8011c46:	bf00      	nop
 8011c48:	20002dc1 	.word	0x20002dc1

08011c4c <__sinit>:
 8011c4c:	b510      	push	{r4, lr}
 8011c4e:	4604      	mov	r4, r0
 8011c50:	f7ff fff0 	bl	8011c34 <__sfp_lock_acquire>
 8011c54:	6a23      	ldr	r3, [r4, #32]
 8011c56:	b11b      	cbz	r3, 8011c60 <__sinit+0x14>
 8011c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c5c:	f7ff bff0 	b.w	8011c40 <__sfp_lock_release>
 8011c60:	4b04      	ldr	r3, [pc, #16]	@ (8011c74 <__sinit+0x28>)
 8011c62:	6223      	str	r3, [r4, #32]
 8011c64:	4b04      	ldr	r3, [pc, #16]	@ (8011c78 <__sinit+0x2c>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1f5      	bne.n	8011c58 <__sinit+0xc>
 8011c6c:	f7ff ffc4 	bl	8011bf8 <global_stdio_init.part.0>
 8011c70:	e7f2      	b.n	8011c58 <__sinit+0xc>
 8011c72:	bf00      	nop
 8011c74:	08011bb9 	.word	0x08011bb9
 8011c78:	20002db8 	.word	0x20002db8

08011c7c <_fwalk_sglue>:
 8011c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c80:	4607      	mov	r7, r0
 8011c82:	4688      	mov	r8, r1
 8011c84:	4614      	mov	r4, r2
 8011c86:	2600      	movs	r6, #0
 8011c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8011c90:	d505      	bpl.n	8011c9e <_fwalk_sglue+0x22>
 8011c92:	6824      	ldr	r4, [r4, #0]
 8011c94:	2c00      	cmp	r4, #0
 8011c96:	d1f7      	bne.n	8011c88 <_fwalk_sglue+0xc>
 8011c98:	4630      	mov	r0, r6
 8011c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c9e:	89ab      	ldrh	r3, [r5, #12]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d907      	bls.n	8011cb4 <_fwalk_sglue+0x38>
 8011ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	d003      	beq.n	8011cb4 <_fwalk_sglue+0x38>
 8011cac:	4629      	mov	r1, r5
 8011cae:	4638      	mov	r0, r7
 8011cb0:	47c0      	blx	r8
 8011cb2:	4306      	orrs	r6, r0
 8011cb4:	3568      	adds	r5, #104	@ 0x68
 8011cb6:	e7e9      	b.n	8011c8c <_fwalk_sglue+0x10>

08011cb8 <_puts_r>:
 8011cb8:	6a03      	ldr	r3, [r0, #32]
 8011cba:	b570      	push	{r4, r5, r6, lr}
 8011cbc:	6884      	ldr	r4, [r0, #8]
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	460e      	mov	r6, r1
 8011cc2:	b90b      	cbnz	r3, 8011cc8 <_puts_r+0x10>
 8011cc4:	f7ff ffc2 	bl	8011c4c <__sinit>
 8011cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cca:	07db      	lsls	r3, r3, #31
 8011ccc:	d405      	bmi.n	8011cda <_puts_r+0x22>
 8011cce:	89a3      	ldrh	r3, [r4, #12]
 8011cd0:	0598      	lsls	r0, r3, #22
 8011cd2:	d402      	bmi.n	8011cda <_puts_r+0x22>
 8011cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cd6:	f000 f9c2 	bl	801205e <__retarget_lock_acquire_recursive>
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	0719      	lsls	r1, r3, #28
 8011cde:	d502      	bpl.n	8011ce6 <_puts_r+0x2e>
 8011ce0:	6923      	ldr	r3, [r4, #16]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d135      	bne.n	8011d52 <_puts_r+0x9a>
 8011ce6:	4621      	mov	r1, r4
 8011ce8:	4628      	mov	r0, r5
 8011cea:	f000 f8e5 	bl	8011eb8 <__swsetup_r>
 8011cee:	b380      	cbz	r0, 8011d52 <_puts_r+0x9a>
 8011cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8011cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cf6:	07da      	lsls	r2, r3, #31
 8011cf8:	d405      	bmi.n	8011d06 <_puts_r+0x4e>
 8011cfa:	89a3      	ldrh	r3, [r4, #12]
 8011cfc:	059b      	lsls	r3, r3, #22
 8011cfe:	d402      	bmi.n	8011d06 <_puts_r+0x4e>
 8011d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d02:	f000 f9ad 	bl	8012060 <__retarget_lock_release_recursive>
 8011d06:	4628      	mov	r0, r5
 8011d08:	bd70      	pop	{r4, r5, r6, pc}
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	da04      	bge.n	8011d18 <_puts_r+0x60>
 8011d0e:	69a2      	ldr	r2, [r4, #24]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	dc17      	bgt.n	8011d44 <_puts_r+0x8c>
 8011d14:	290a      	cmp	r1, #10
 8011d16:	d015      	beq.n	8011d44 <_puts_r+0x8c>
 8011d18:	6823      	ldr	r3, [r4, #0]
 8011d1a:	1c5a      	adds	r2, r3, #1
 8011d1c:	6022      	str	r2, [r4, #0]
 8011d1e:	7019      	strb	r1, [r3, #0]
 8011d20:	68a3      	ldr	r3, [r4, #8]
 8011d22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011d26:	3b01      	subs	r3, #1
 8011d28:	60a3      	str	r3, [r4, #8]
 8011d2a:	2900      	cmp	r1, #0
 8011d2c:	d1ed      	bne.n	8011d0a <_puts_r+0x52>
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	da11      	bge.n	8011d56 <_puts_r+0x9e>
 8011d32:	4622      	mov	r2, r4
 8011d34:	210a      	movs	r1, #10
 8011d36:	4628      	mov	r0, r5
 8011d38:	f000 f87f 	bl	8011e3a <__swbuf_r>
 8011d3c:	3001      	adds	r0, #1
 8011d3e:	d0d7      	beq.n	8011cf0 <_puts_r+0x38>
 8011d40:	250a      	movs	r5, #10
 8011d42:	e7d7      	b.n	8011cf4 <_puts_r+0x3c>
 8011d44:	4622      	mov	r2, r4
 8011d46:	4628      	mov	r0, r5
 8011d48:	f000 f877 	bl	8011e3a <__swbuf_r>
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	d1e7      	bne.n	8011d20 <_puts_r+0x68>
 8011d50:	e7ce      	b.n	8011cf0 <_puts_r+0x38>
 8011d52:	3e01      	subs	r6, #1
 8011d54:	e7e4      	b.n	8011d20 <_puts_r+0x68>
 8011d56:	6823      	ldr	r3, [r4, #0]
 8011d58:	1c5a      	adds	r2, r3, #1
 8011d5a:	6022      	str	r2, [r4, #0]
 8011d5c:	220a      	movs	r2, #10
 8011d5e:	701a      	strb	r2, [r3, #0]
 8011d60:	e7ee      	b.n	8011d40 <_puts_r+0x88>
	...

08011d64 <puts>:
 8011d64:	4b02      	ldr	r3, [pc, #8]	@ (8011d70 <puts+0xc>)
 8011d66:	4601      	mov	r1, r0
 8011d68:	6818      	ldr	r0, [r3, #0]
 8011d6a:	f7ff bfa5 	b.w	8011cb8 <_puts_r>
 8011d6e:	bf00      	nop
 8011d70:	2000039c 	.word	0x2000039c

08011d74 <siprintf>:
 8011d74:	b40e      	push	{r1, r2, r3}
 8011d76:	b500      	push	{lr}
 8011d78:	b09c      	sub	sp, #112	@ 0x70
 8011d7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d7c:	9002      	str	r0, [sp, #8]
 8011d7e:	9006      	str	r0, [sp, #24]
 8011d80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d84:	4809      	ldr	r0, [pc, #36]	@ (8011dac <siprintf+0x38>)
 8011d86:	9107      	str	r1, [sp, #28]
 8011d88:	9104      	str	r1, [sp, #16]
 8011d8a:	4909      	ldr	r1, [pc, #36]	@ (8011db0 <siprintf+0x3c>)
 8011d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d90:	9105      	str	r1, [sp, #20]
 8011d92:	6800      	ldr	r0, [r0, #0]
 8011d94:	9301      	str	r3, [sp, #4]
 8011d96:	a902      	add	r1, sp, #8
 8011d98:	f002 fc48 	bl	801462c <_svfiprintf_r>
 8011d9c:	9b02      	ldr	r3, [sp, #8]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	701a      	strb	r2, [r3, #0]
 8011da2:	b01c      	add	sp, #112	@ 0x70
 8011da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011da8:	b003      	add	sp, #12
 8011daa:	4770      	bx	lr
 8011dac:	2000039c 	.word	0x2000039c
 8011db0:	ffff0208 	.word	0xffff0208

08011db4 <__sread>:
 8011db4:	b510      	push	{r4, lr}
 8011db6:	460c      	mov	r4, r1
 8011db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbc:	f000 f900 	bl	8011fc0 <_read_r>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	bfab      	itete	ge
 8011dc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8011dc8:	181b      	addge	r3, r3, r0
 8011dca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011dce:	bfac      	ite	ge
 8011dd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011dd2:	81a3      	strhlt	r3, [r4, #12]
 8011dd4:	bd10      	pop	{r4, pc}

08011dd6 <__swrite>:
 8011dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dda:	461f      	mov	r7, r3
 8011ddc:	898b      	ldrh	r3, [r1, #12]
 8011dde:	05db      	lsls	r3, r3, #23
 8011de0:	4605      	mov	r5, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	4616      	mov	r6, r2
 8011de6:	d505      	bpl.n	8011df4 <__swrite+0x1e>
 8011de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dec:	2302      	movs	r3, #2
 8011dee:	2200      	movs	r2, #0
 8011df0:	f000 f8d4 	bl	8011f9c <_lseek_r>
 8011df4:	89a3      	ldrh	r3, [r4, #12]
 8011df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011dfe:	81a3      	strh	r3, [r4, #12]
 8011e00:	4632      	mov	r2, r6
 8011e02:	463b      	mov	r3, r7
 8011e04:	4628      	mov	r0, r5
 8011e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e0a:	f000 b8eb 	b.w	8011fe4 <_write_r>

08011e0e <__sseek>:
 8011e0e:	b510      	push	{r4, lr}
 8011e10:	460c      	mov	r4, r1
 8011e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e16:	f000 f8c1 	bl	8011f9c <_lseek_r>
 8011e1a:	1c43      	adds	r3, r0, #1
 8011e1c:	89a3      	ldrh	r3, [r4, #12]
 8011e1e:	bf15      	itete	ne
 8011e20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e2a:	81a3      	strheq	r3, [r4, #12]
 8011e2c:	bf18      	it	ne
 8011e2e:	81a3      	strhne	r3, [r4, #12]
 8011e30:	bd10      	pop	{r4, pc}

08011e32 <__sclose>:
 8011e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e36:	f000 b8a1 	b.w	8011f7c <_close_r>

08011e3a <__swbuf_r>:
 8011e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3c:	460e      	mov	r6, r1
 8011e3e:	4614      	mov	r4, r2
 8011e40:	4605      	mov	r5, r0
 8011e42:	b118      	cbz	r0, 8011e4c <__swbuf_r+0x12>
 8011e44:	6a03      	ldr	r3, [r0, #32]
 8011e46:	b90b      	cbnz	r3, 8011e4c <__swbuf_r+0x12>
 8011e48:	f7ff ff00 	bl	8011c4c <__sinit>
 8011e4c:	69a3      	ldr	r3, [r4, #24]
 8011e4e:	60a3      	str	r3, [r4, #8]
 8011e50:	89a3      	ldrh	r3, [r4, #12]
 8011e52:	071a      	lsls	r2, r3, #28
 8011e54:	d501      	bpl.n	8011e5a <__swbuf_r+0x20>
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	b943      	cbnz	r3, 8011e6c <__swbuf_r+0x32>
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f000 f82b 	bl	8011eb8 <__swsetup_r>
 8011e62:	b118      	cbz	r0, 8011e6c <__swbuf_r+0x32>
 8011e64:	f04f 37ff 	mov.w	r7, #4294967295
 8011e68:	4638      	mov	r0, r7
 8011e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	6922      	ldr	r2, [r4, #16]
 8011e70:	1a98      	subs	r0, r3, r2
 8011e72:	6963      	ldr	r3, [r4, #20]
 8011e74:	b2f6      	uxtb	r6, r6
 8011e76:	4283      	cmp	r3, r0
 8011e78:	4637      	mov	r7, r6
 8011e7a:	dc05      	bgt.n	8011e88 <__swbuf_r+0x4e>
 8011e7c:	4621      	mov	r1, r4
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f002 fd54 	bl	801492c <_fflush_r>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d1ed      	bne.n	8011e64 <__swbuf_r+0x2a>
 8011e88:	68a3      	ldr	r3, [r4, #8]
 8011e8a:	3b01      	subs	r3, #1
 8011e8c:	60a3      	str	r3, [r4, #8]
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	1c5a      	adds	r2, r3, #1
 8011e92:	6022      	str	r2, [r4, #0]
 8011e94:	701e      	strb	r6, [r3, #0]
 8011e96:	6962      	ldr	r2, [r4, #20]
 8011e98:	1c43      	adds	r3, r0, #1
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d004      	beq.n	8011ea8 <__swbuf_r+0x6e>
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	07db      	lsls	r3, r3, #31
 8011ea2:	d5e1      	bpl.n	8011e68 <__swbuf_r+0x2e>
 8011ea4:	2e0a      	cmp	r6, #10
 8011ea6:	d1df      	bne.n	8011e68 <__swbuf_r+0x2e>
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f002 fd3e 	bl	801492c <_fflush_r>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d0d9      	beq.n	8011e68 <__swbuf_r+0x2e>
 8011eb4:	e7d6      	b.n	8011e64 <__swbuf_r+0x2a>
	...

08011eb8 <__swsetup_r>:
 8011eb8:	b538      	push	{r3, r4, r5, lr}
 8011eba:	4b29      	ldr	r3, [pc, #164]	@ (8011f60 <__swsetup_r+0xa8>)
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	6818      	ldr	r0, [r3, #0]
 8011ec0:	460c      	mov	r4, r1
 8011ec2:	b118      	cbz	r0, 8011ecc <__swsetup_r+0x14>
 8011ec4:	6a03      	ldr	r3, [r0, #32]
 8011ec6:	b90b      	cbnz	r3, 8011ecc <__swsetup_r+0x14>
 8011ec8:	f7ff fec0 	bl	8011c4c <__sinit>
 8011ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed0:	0719      	lsls	r1, r3, #28
 8011ed2:	d422      	bmi.n	8011f1a <__swsetup_r+0x62>
 8011ed4:	06da      	lsls	r2, r3, #27
 8011ed6:	d407      	bmi.n	8011ee8 <__swsetup_r+0x30>
 8011ed8:	2209      	movs	r2, #9
 8011eda:	602a      	str	r2, [r5, #0]
 8011edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ee0:	81a3      	strh	r3, [r4, #12]
 8011ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee6:	e033      	b.n	8011f50 <__swsetup_r+0x98>
 8011ee8:	0758      	lsls	r0, r3, #29
 8011eea:	d512      	bpl.n	8011f12 <__swsetup_r+0x5a>
 8011eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011eee:	b141      	cbz	r1, 8011f02 <__swsetup_r+0x4a>
 8011ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ef4:	4299      	cmp	r1, r3
 8011ef6:	d002      	beq.n	8011efe <__swsetup_r+0x46>
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f000 ff05 	bl	8012d08 <_free_r>
 8011efe:	2300      	movs	r3, #0
 8011f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f02:	89a3      	ldrh	r3, [r4, #12]
 8011f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f08:	81a3      	strh	r3, [r4, #12]
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	6063      	str	r3, [r4, #4]
 8011f0e:	6923      	ldr	r3, [r4, #16]
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	89a3      	ldrh	r3, [r4, #12]
 8011f14:	f043 0308 	orr.w	r3, r3, #8
 8011f18:	81a3      	strh	r3, [r4, #12]
 8011f1a:	6923      	ldr	r3, [r4, #16]
 8011f1c:	b94b      	cbnz	r3, 8011f32 <__swsetup_r+0x7a>
 8011f1e:	89a3      	ldrh	r3, [r4, #12]
 8011f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f28:	d003      	beq.n	8011f32 <__swsetup_r+0x7a>
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f002 fd4b 	bl	80149c8 <__smakebuf_r>
 8011f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f36:	f013 0201 	ands.w	r2, r3, #1
 8011f3a:	d00a      	beq.n	8011f52 <__swsetup_r+0x9a>
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	60a2      	str	r2, [r4, #8]
 8011f40:	6962      	ldr	r2, [r4, #20]
 8011f42:	4252      	negs	r2, r2
 8011f44:	61a2      	str	r2, [r4, #24]
 8011f46:	6922      	ldr	r2, [r4, #16]
 8011f48:	b942      	cbnz	r2, 8011f5c <__swsetup_r+0xa4>
 8011f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f4e:	d1c5      	bne.n	8011edc <__swsetup_r+0x24>
 8011f50:	bd38      	pop	{r3, r4, r5, pc}
 8011f52:	0799      	lsls	r1, r3, #30
 8011f54:	bf58      	it	pl
 8011f56:	6962      	ldrpl	r2, [r4, #20]
 8011f58:	60a2      	str	r2, [r4, #8]
 8011f5a:	e7f4      	b.n	8011f46 <__swsetup_r+0x8e>
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	e7f7      	b.n	8011f50 <__swsetup_r+0x98>
 8011f60:	2000039c 	.word	0x2000039c

08011f64 <memset>:
 8011f64:	4402      	add	r2, r0
 8011f66:	4603      	mov	r3, r0
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d100      	bne.n	8011f6e <memset+0xa>
 8011f6c:	4770      	bx	lr
 8011f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8011f72:	e7f9      	b.n	8011f68 <memset+0x4>

08011f74 <_localeconv_r>:
 8011f74:	4800      	ldr	r0, [pc, #0]	@ (8011f78 <_localeconv_r+0x4>)
 8011f76:	4770      	bx	lr
 8011f78:	200004dc 	.word	0x200004dc

08011f7c <_close_r>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	4d06      	ldr	r5, [pc, #24]	@ (8011f98 <_close_r+0x1c>)
 8011f80:	2300      	movs	r3, #0
 8011f82:	4604      	mov	r4, r0
 8011f84:	4608      	mov	r0, r1
 8011f86:	602b      	str	r3, [r5, #0]
 8011f88:	f7f1 fe80 	bl	8003c8c <_close>
 8011f8c:	1c43      	adds	r3, r0, #1
 8011f8e:	d102      	bne.n	8011f96 <_close_r+0x1a>
 8011f90:	682b      	ldr	r3, [r5, #0]
 8011f92:	b103      	cbz	r3, 8011f96 <_close_r+0x1a>
 8011f94:	6023      	str	r3, [r4, #0]
 8011f96:	bd38      	pop	{r3, r4, r5, pc}
 8011f98:	20002dbc 	.word	0x20002dbc

08011f9c <_lseek_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4d07      	ldr	r5, [pc, #28]	@ (8011fbc <_lseek_r+0x20>)
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	4608      	mov	r0, r1
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	602a      	str	r2, [r5, #0]
 8011faa:	461a      	mov	r2, r3
 8011fac:	f7f1 fe95 	bl	8003cda <_lseek>
 8011fb0:	1c43      	adds	r3, r0, #1
 8011fb2:	d102      	bne.n	8011fba <_lseek_r+0x1e>
 8011fb4:	682b      	ldr	r3, [r5, #0]
 8011fb6:	b103      	cbz	r3, 8011fba <_lseek_r+0x1e>
 8011fb8:	6023      	str	r3, [r4, #0]
 8011fba:	bd38      	pop	{r3, r4, r5, pc}
 8011fbc:	20002dbc 	.word	0x20002dbc

08011fc0 <_read_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4d07      	ldr	r5, [pc, #28]	@ (8011fe0 <_read_r+0x20>)
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	4611      	mov	r1, r2
 8011fca:	2200      	movs	r2, #0
 8011fcc:	602a      	str	r2, [r5, #0]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	f7f1 fe23 	bl	8003c1a <_read>
 8011fd4:	1c43      	adds	r3, r0, #1
 8011fd6:	d102      	bne.n	8011fde <_read_r+0x1e>
 8011fd8:	682b      	ldr	r3, [r5, #0]
 8011fda:	b103      	cbz	r3, 8011fde <_read_r+0x1e>
 8011fdc:	6023      	str	r3, [r4, #0]
 8011fde:	bd38      	pop	{r3, r4, r5, pc}
 8011fe0:	20002dbc 	.word	0x20002dbc

08011fe4 <_write_r>:
 8011fe4:	b538      	push	{r3, r4, r5, lr}
 8011fe6:	4d07      	ldr	r5, [pc, #28]	@ (8012004 <_write_r+0x20>)
 8011fe8:	4604      	mov	r4, r0
 8011fea:	4608      	mov	r0, r1
 8011fec:	4611      	mov	r1, r2
 8011fee:	2200      	movs	r2, #0
 8011ff0:	602a      	str	r2, [r5, #0]
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	f7f1 fe2e 	bl	8003c54 <_write>
 8011ff8:	1c43      	adds	r3, r0, #1
 8011ffa:	d102      	bne.n	8012002 <_write_r+0x1e>
 8011ffc:	682b      	ldr	r3, [r5, #0]
 8011ffe:	b103      	cbz	r3, 8012002 <_write_r+0x1e>
 8012000:	6023      	str	r3, [r4, #0]
 8012002:	bd38      	pop	{r3, r4, r5, pc}
 8012004:	20002dbc 	.word	0x20002dbc

08012008 <__errno>:
 8012008:	4b01      	ldr	r3, [pc, #4]	@ (8012010 <__errno+0x8>)
 801200a:	6818      	ldr	r0, [r3, #0]
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	2000039c 	.word	0x2000039c

08012014 <__libc_init_array>:
 8012014:	b570      	push	{r4, r5, r6, lr}
 8012016:	4d0d      	ldr	r5, [pc, #52]	@ (801204c <__libc_init_array+0x38>)
 8012018:	4c0d      	ldr	r4, [pc, #52]	@ (8012050 <__libc_init_array+0x3c>)
 801201a:	1b64      	subs	r4, r4, r5
 801201c:	10a4      	asrs	r4, r4, #2
 801201e:	2600      	movs	r6, #0
 8012020:	42a6      	cmp	r6, r4
 8012022:	d109      	bne.n	8012038 <__libc_init_array+0x24>
 8012024:	4d0b      	ldr	r5, [pc, #44]	@ (8012054 <__libc_init_array+0x40>)
 8012026:	4c0c      	ldr	r4, [pc, #48]	@ (8012058 <__libc_init_array+0x44>)
 8012028:	f003 fadc 	bl	80155e4 <_init>
 801202c:	1b64      	subs	r4, r4, r5
 801202e:	10a4      	asrs	r4, r4, #2
 8012030:	2600      	movs	r6, #0
 8012032:	42a6      	cmp	r6, r4
 8012034:	d105      	bne.n	8012042 <__libc_init_array+0x2e>
 8012036:	bd70      	pop	{r4, r5, r6, pc}
 8012038:	f855 3b04 	ldr.w	r3, [r5], #4
 801203c:	4798      	blx	r3
 801203e:	3601      	adds	r6, #1
 8012040:	e7ee      	b.n	8012020 <__libc_init_array+0xc>
 8012042:	f855 3b04 	ldr.w	r3, [r5], #4
 8012046:	4798      	blx	r3
 8012048:	3601      	adds	r6, #1
 801204a:	e7f2      	b.n	8012032 <__libc_init_array+0x1e>
 801204c:	08023330 	.word	0x08023330
 8012050:	08023330 	.word	0x08023330
 8012054:	08023330 	.word	0x08023330
 8012058:	08023334 	.word	0x08023334

0801205c <__retarget_lock_init_recursive>:
 801205c:	4770      	bx	lr

0801205e <__retarget_lock_acquire_recursive>:
 801205e:	4770      	bx	lr

08012060 <__retarget_lock_release_recursive>:
 8012060:	4770      	bx	lr
	...

08012064 <nanf>:
 8012064:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801206c <nanf+0x8>
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	7fc00000 	.word	0x7fc00000

08012070 <quorem>:
 8012070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	6903      	ldr	r3, [r0, #16]
 8012076:	690c      	ldr	r4, [r1, #16]
 8012078:	42a3      	cmp	r3, r4
 801207a:	4607      	mov	r7, r0
 801207c:	db7e      	blt.n	801217c <quorem+0x10c>
 801207e:	3c01      	subs	r4, #1
 8012080:	f101 0814 	add.w	r8, r1, #20
 8012084:	00a3      	lsls	r3, r4, #2
 8012086:	f100 0514 	add.w	r5, r0, #20
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012090:	9301      	str	r3, [sp, #4]
 8012092:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801209a:	3301      	adds	r3, #1
 801209c:	429a      	cmp	r2, r3
 801209e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80120a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80120a6:	d32e      	bcc.n	8012106 <quorem+0x96>
 80120a8:	f04f 0a00 	mov.w	sl, #0
 80120ac:	46c4      	mov	ip, r8
 80120ae:	46ae      	mov	lr, r5
 80120b0:	46d3      	mov	fp, sl
 80120b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80120b6:	b298      	uxth	r0, r3
 80120b8:	fb06 a000 	mla	r0, r6, r0, sl
 80120bc:	0c02      	lsrs	r2, r0, #16
 80120be:	0c1b      	lsrs	r3, r3, #16
 80120c0:	fb06 2303 	mla	r3, r6, r3, r2
 80120c4:	f8de 2000 	ldr.w	r2, [lr]
 80120c8:	b280      	uxth	r0, r0
 80120ca:	b292      	uxth	r2, r2
 80120cc:	1a12      	subs	r2, r2, r0
 80120ce:	445a      	add	r2, fp
 80120d0:	f8de 0000 	ldr.w	r0, [lr]
 80120d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120d8:	b29b      	uxth	r3, r3
 80120da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80120de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80120e2:	b292      	uxth	r2, r2
 80120e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80120e8:	45e1      	cmp	r9, ip
 80120ea:	f84e 2b04 	str.w	r2, [lr], #4
 80120ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80120f2:	d2de      	bcs.n	80120b2 <quorem+0x42>
 80120f4:	9b00      	ldr	r3, [sp, #0]
 80120f6:	58eb      	ldr	r3, [r5, r3]
 80120f8:	b92b      	cbnz	r3, 8012106 <quorem+0x96>
 80120fa:	9b01      	ldr	r3, [sp, #4]
 80120fc:	3b04      	subs	r3, #4
 80120fe:	429d      	cmp	r5, r3
 8012100:	461a      	mov	r2, r3
 8012102:	d32f      	bcc.n	8012164 <quorem+0xf4>
 8012104:	613c      	str	r4, [r7, #16]
 8012106:	4638      	mov	r0, r7
 8012108:	f001 f9c2 	bl	8013490 <__mcmp>
 801210c:	2800      	cmp	r0, #0
 801210e:	db25      	blt.n	801215c <quorem+0xec>
 8012110:	4629      	mov	r1, r5
 8012112:	2000      	movs	r0, #0
 8012114:	f858 2b04 	ldr.w	r2, [r8], #4
 8012118:	f8d1 c000 	ldr.w	ip, [r1]
 801211c:	fa1f fe82 	uxth.w	lr, r2
 8012120:	fa1f f38c 	uxth.w	r3, ip
 8012124:	eba3 030e 	sub.w	r3, r3, lr
 8012128:	4403      	add	r3, r0
 801212a:	0c12      	lsrs	r2, r2, #16
 801212c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012130:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012134:	b29b      	uxth	r3, r3
 8012136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801213a:	45c1      	cmp	r9, r8
 801213c:	f841 3b04 	str.w	r3, [r1], #4
 8012140:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012144:	d2e6      	bcs.n	8012114 <quorem+0xa4>
 8012146:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801214a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801214e:	b922      	cbnz	r2, 801215a <quorem+0xea>
 8012150:	3b04      	subs	r3, #4
 8012152:	429d      	cmp	r5, r3
 8012154:	461a      	mov	r2, r3
 8012156:	d30b      	bcc.n	8012170 <quorem+0x100>
 8012158:	613c      	str	r4, [r7, #16]
 801215a:	3601      	adds	r6, #1
 801215c:	4630      	mov	r0, r6
 801215e:	b003      	add	sp, #12
 8012160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012164:	6812      	ldr	r2, [r2, #0]
 8012166:	3b04      	subs	r3, #4
 8012168:	2a00      	cmp	r2, #0
 801216a:	d1cb      	bne.n	8012104 <quorem+0x94>
 801216c:	3c01      	subs	r4, #1
 801216e:	e7c6      	b.n	80120fe <quorem+0x8e>
 8012170:	6812      	ldr	r2, [r2, #0]
 8012172:	3b04      	subs	r3, #4
 8012174:	2a00      	cmp	r2, #0
 8012176:	d1ef      	bne.n	8012158 <quorem+0xe8>
 8012178:	3c01      	subs	r4, #1
 801217a:	e7ea      	b.n	8012152 <quorem+0xe2>
 801217c:	2000      	movs	r0, #0
 801217e:	e7ee      	b.n	801215e <quorem+0xee>

08012180 <_dtoa_r>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	69c7      	ldr	r7, [r0, #28]
 8012186:	b099      	sub	sp, #100	@ 0x64
 8012188:	ed8d 0b02 	vstr	d0, [sp, #8]
 801218c:	ec55 4b10 	vmov	r4, r5, d0
 8012190:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012192:	9109      	str	r1, [sp, #36]	@ 0x24
 8012194:	4683      	mov	fp, r0
 8012196:	920e      	str	r2, [sp, #56]	@ 0x38
 8012198:	9313      	str	r3, [sp, #76]	@ 0x4c
 801219a:	b97f      	cbnz	r7, 80121bc <_dtoa_r+0x3c>
 801219c:	2010      	movs	r0, #16
 801219e:	f000 fdfd 	bl	8012d9c <malloc>
 80121a2:	4602      	mov	r2, r0
 80121a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80121a8:	b920      	cbnz	r0, 80121b4 <_dtoa_r+0x34>
 80121aa:	4ba7      	ldr	r3, [pc, #668]	@ (8012448 <_dtoa_r+0x2c8>)
 80121ac:	21ef      	movs	r1, #239	@ 0xef
 80121ae:	48a7      	ldr	r0, [pc, #668]	@ (801244c <_dtoa_r+0x2cc>)
 80121b0:	f002 fcba 	bl	8014b28 <__assert_func>
 80121b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80121b8:	6007      	str	r7, [r0, #0]
 80121ba:	60c7      	str	r7, [r0, #12]
 80121bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80121c0:	6819      	ldr	r1, [r3, #0]
 80121c2:	b159      	cbz	r1, 80121dc <_dtoa_r+0x5c>
 80121c4:	685a      	ldr	r2, [r3, #4]
 80121c6:	604a      	str	r2, [r1, #4]
 80121c8:	2301      	movs	r3, #1
 80121ca:	4093      	lsls	r3, r2
 80121cc:	608b      	str	r3, [r1, #8]
 80121ce:	4658      	mov	r0, fp
 80121d0:	f000 feda 	bl	8012f88 <_Bfree>
 80121d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80121d8:	2200      	movs	r2, #0
 80121da:	601a      	str	r2, [r3, #0]
 80121dc:	1e2b      	subs	r3, r5, #0
 80121de:	bfb9      	ittee	lt
 80121e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80121e4:	9303      	strlt	r3, [sp, #12]
 80121e6:	2300      	movge	r3, #0
 80121e8:	6033      	strge	r3, [r6, #0]
 80121ea:	9f03      	ldr	r7, [sp, #12]
 80121ec:	4b98      	ldr	r3, [pc, #608]	@ (8012450 <_dtoa_r+0x2d0>)
 80121ee:	bfbc      	itt	lt
 80121f0:	2201      	movlt	r2, #1
 80121f2:	6032      	strlt	r2, [r6, #0]
 80121f4:	43bb      	bics	r3, r7
 80121f6:	d112      	bne.n	801221e <_dtoa_r+0x9e>
 80121f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80121fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80121fe:	6013      	str	r3, [r2, #0]
 8012200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012204:	4323      	orrs	r3, r4
 8012206:	f000 854d 	beq.w	8012ca4 <_dtoa_r+0xb24>
 801220a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801220c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012464 <_dtoa_r+0x2e4>
 8012210:	2b00      	cmp	r3, #0
 8012212:	f000 854f 	beq.w	8012cb4 <_dtoa_r+0xb34>
 8012216:	f10a 0303 	add.w	r3, sl, #3
 801221a:	f000 bd49 	b.w	8012cb0 <_dtoa_r+0xb30>
 801221e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012222:	2200      	movs	r2, #0
 8012224:	ec51 0b17 	vmov	r0, r1, d7
 8012228:	2300      	movs	r3, #0
 801222a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801222e:	f7ee fc73 	bl	8000b18 <__aeabi_dcmpeq>
 8012232:	4680      	mov	r8, r0
 8012234:	b158      	cbz	r0, 801224e <_dtoa_r+0xce>
 8012236:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012238:	2301      	movs	r3, #1
 801223a:	6013      	str	r3, [r2, #0]
 801223c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801223e:	b113      	cbz	r3, 8012246 <_dtoa_r+0xc6>
 8012240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012242:	4b84      	ldr	r3, [pc, #528]	@ (8012454 <_dtoa_r+0x2d4>)
 8012244:	6013      	str	r3, [r2, #0]
 8012246:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012468 <_dtoa_r+0x2e8>
 801224a:	f000 bd33 	b.w	8012cb4 <_dtoa_r+0xb34>
 801224e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012252:	aa16      	add	r2, sp, #88	@ 0x58
 8012254:	a917      	add	r1, sp, #92	@ 0x5c
 8012256:	4658      	mov	r0, fp
 8012258:	f001 fa3a 	bl	80136d0 <__d2b>
 801225c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012260:	4681      	mov	r9, r0
 8012262:	2e00      	cmp	r6, #0
 8012264:	d077      	beq.n	8012356 <_dtoa_r+0x1d6>
 8012266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012268:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801226c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801227c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012280:	4619      	mov	r1, r3
 8012282:	2200      	movs	r2, #0
 8012284:	4b74      	ldr	r3, [pc, #464]	@ (8012458 <_dtoa_r+0x2d8>)
 8012286:	f7ee f827 	bl	80002d8 <__aeabi_dsub>
 801228a:	a369      	add	r3, pc, #420	@ (adr r3, 8012430 <_dtoa_r+0x2b0>)
 801228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012290:	f7ee f9da 	bl	8000648 <__aeabi_dmul>
 8012294:	a368      	add	r3, pc, #416	@ (adr r3, 8012438 <_dtoa_r+0x2b8>)
 8012296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229a:	f7ee f81f 	bl	80002dc <__adddf3>
 801229e:	4604      	mov	r4, r0
 80122a0:	4630      	mov	r0, r6
 80122a2:	460d      	mov	r5, r1
 80122a4:	f7ee f966 	bl	8000574 <__aeabi_i2d>
 80122a8:	a365      	add	r3, pc, #404	@ (adr r3, 8012440 <_dtoa_r+0x2c0>)
 80122aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ae:	f7ee f9cb 	bl	8000648 <__aeabi_dmul>
 80122b2:	4602      	mov	r2, r0
 80122b4:	460b      	mov	r3, r1
 80122b6:	4620      	mov	r0, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	f7ee f80f 	bl	80002dc <__adddf3>
 80122be:	4604      	mov	r4, r0
 80122c0:	460d      	mov	r5, r1
 80122c2:	f7ee fc71 	bl	8000ba8 <__aeabi_d2iz>
 80122c6:	2200      	movs	r2, #0
 80122c8:	4607      	mov	r7, r0
 80122ca:	2300      	movs	r3, #0
 80122cc:	4620      	mov	r0, r4
 80122ce:	4629      	mov	r1, r5
 80122d0:	f7ee fc2c 	bl	8000b2c <__aeabi_dcmplt>
 80122d4:	b140      	cbz	r0, 80122e8 <_dtoa_r+0x168>
 80122d6:	4638      	mov	r0, r7
 80122d8:	f7ee f94c 	bl	8000574 <__aeabi_i2d>
 80122dc:	4622      	mov	r2, r4
 80122de:	462b      	mov	r3, r5
 80122e0:	f7ee fc1a 	bl	8000b18 <__aeabi_dcmpeq>
 80122e4:	b900      	cbnz	r0, 80122e8 <_dtoa_r+0x168>
 80122e6:	3f01      	subs	r7, #1
 80122e8:	2f16      	cmp	r7, #22
 80122ea:	d851      	bhi.n	8012390 <_dtoa_r+0x210>
 80122ec:	4b5b      	ldr	r3, [pc, #364]	@ (801245c <_dtoa_r+0x2dc>)
 80122ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80122f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122fa:	f7ee fc17 	bl	8000b2c <__aeabi_dcmplt>
 80122fe:	2800      	cmp	r0, #0
 8012300:	d048      	beq.n	8012394 <_dtoa_r+0x214>
 8012302:	3f01      	subs	r7, #1
 8012304:	2300      	movs	r3, #0
 8012306:	9312      	str	r3, [sp, #72]	@ 0x48
 8012308:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801230a:	1b9b      	subs	r3, r3, r6
 801230c:	1e5a      	subs	r2, r3, #1
 801230e:	bf44      	itt	mi
 8012310:	f1c3 0801 	rsbmi	r8, r3, #1
 8012314:	2300      	movmi	r3, #0
 8012316:	9208      	str	r2, [sp, #32]
 8012318:	bf54      	ite	pl
 801231a:	f04f 0800 	movpl.w	r8, #0
 801231e:	9308      	strmi	r3, [sp, #32]
 8012320:	2f00      	cmp	r7, #0
 8012322:	db39      	blt.n	8012398 <_dtoa_r+0x218>
 8012324:	9b08      	ldr	r3, [sp, #32]
 8012326:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012328:	443b      	add	r3, r7
 801232a:	9308      	str	r3, [sp, #32]
 801232c:	2300      	movs	r3, #0
 801232e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012332:	2b09      	cmp	r3, #9
 8012334:	d864      	bhi.n	8012400 <_dtoa_r+0x280>
 8012336:	2b05      	cmp	r3, #5
 8012338:	bfc4      	itt	gt
 801233a:	3b04      	subgt	r3, #4
 801233c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801233e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012340:	f1a3 0302 	sub.w	r3, r3, #2
 8012344:	bfcc      	ite	gt
 8012346:	2400      	movgt	r4, #0
 8012348:	2401      	movle	r4, #1
 801234a:	2b03      	cmp	r3, #3
 801234c:	d863      	bhi.n	8012416 <_dtoa_r+0x296>
 801234e:	e8df f003 	tbb	[pc, r3]
 8012352:	372a      	.short	0x372a
 8012354:	5535      	.short	0x5535
 8012356:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801235a:	441e      	add	r6, r3
 801235c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012360:	2b20      	cmp	r3, #32
 8012362:	bfc1      	itttt	gt
 8012364:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012368:	409f      	lslgt	r7, r3
 801236a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801236e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012372:	bfd6      	itet	le
 8012374:	f1c3 0320 	rsble	r3, r3, #32
 8012378:	ea47 0003 	orrgt.w	r0, r7, r3
 801237c:	fa04 f003 	lslle.w	r0, r4, r3
 8012380:	f7ee f8e8 	bl	8000554 <__aeabi_ui2d>
 8012384:	2201      	movs	r2, #1
 8012386:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801238a:	3e01      	subs	r6, #1
 801238c:	9214      	str	r2, [sp, #80]	@ 0x50
 801238e:	e777      	b.n	8012280 <_dtoa_r+0x100>
 8012390:	2301      	movs	r3, #1
 8012392:	e7b8      	b.n	8012306 <_dtoa_r+0x186>
 8012394:	9012      	str	r0, [sp, #72]	@ 0x48
 8012396:	e7b7      	b.n	8012308 <_dtoa_r+0x188>
 8012398:	427b      	negs	r3, r7
 801239a:	930a      	str	r3, [sp, #40]	@ 0x28
 801239c:	2300      	movs	r3, #0
 801239e:	eba8 0807 	sub.w	r8, r8, r7
 80123a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80123a4:	e7c4      	b.n	8012330 <_dtoa_r+0x1b0>
 80123a6:	2300      	movs	r3, #0
 80123a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	dc35      	bgt.n	801241c <_dtoa_r+0x29c>
 80123b0:	2301      	movs	r3, #1
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	9307      	str	r3, [sp, #28]
 80123b6:	461a      	mov	r2, r3
 80123b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80123ba:	e00b      	b.n	80123d4 <_dtoa_r+0x254>
 80123bc:	2301      	movs	r3, #1
 80123be:	e7f3      	b.n	80123a8 <_dtoa_r+0x228>
 80123c0:	2300      	movs	r3, #0
 80123c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123c6:	18fb      	adds	r3, r7, r3
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	3301      	adds	r3, #1
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	9307      	str	r3, [sp, #28]
 80123d0:	bfb8      	it	lt
 80123d2:	2301      	movlt	r3, #1
 80123d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80123d8:	2100      	movs	r1, #0
 80123da:	2204      	movs	r2, #4
 80123dc:	f102 0514 	add.w	r5, r2, #20
 80123e0:	429d      	cmp	r5, r3
 80123e2:	d91f      	bls.n	8012424 <_dtoa_r+0x2a4>
 80123e4:	6041      	str	r1, [r0, #4]
 80123e6:	4658      	mov	r0, fp
 80123e8:	f000 fd8e 	bl	8012f08 <_Balloc>
 80123ec:	4682      	mov	sl, r0
 80123ee:	2800      	cmp	r0, #0
 80123f0:	d13c      	bne.n	801246c <_dtoa_r+0x2ec>
 80123f2:	4b1b      	ldr	r3, [pc, #108]	@ (8012460 <_dtoa_r+0x2e0>)
 80123f4:	4602      	mov	r2, r0
 80123f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80123fa:	e6d8      	b.n	80121ae <_dtoa_r+0x2e>
 80123fc:	2301      	movs	r3, #1
 80123fe:	e7e0      	b.n	80123c2 <_dtoa_r+0x242>
 8012400:	2401      	movs	r4, #1
 8012402:	2300      	movs	r3, #0
 8012404:	9309      	str	r3, [sp, #36]	@ 0x24
 8012406:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012408:	f04f 33ff 	mov.w	r3, #4294967295
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	9307      	str	r3, [sp, #28]
 8012410:	2200      	movs	r2, #0
 8012412:	2312      	movs	r3, #18
 8012414:	e7d0      	b.n	80123b8 <_dtoa_r+0x238>
 8012416:	2301      	movs	r3, #1
 8012418:	930b      	str	r3, [sp, #44]	@ 0x2c
 801241a:	e7f5      	b.n	8012408 <_dtoa_r+0x288>
 801241c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	9307      	str	r3, [sp, #28]
 8012422:	e7d7      	b.n	80123d4 <_dtoa_r+0x254>
 8012424:	3101      	adds	r1, #1
 8012426:	0052      	lsls	r2, r2, #1
 8012428:	e7d8      	b.n	80123dc <_dtoa_r+0x25c>
 801242a:	bf00      	nop
 801242c:	f3af 8000 	nop.w
 8012430:	636f4361 	.word	0x636f4361
 8012434:	3fd287a7 	.word	0x3fd287a7
 8012438:	8b60c8b3 	.word	0x8b60c8b3
 801243c:	3fc68a28 	.word	0x3fc68a28
 8012440:	509f79fb 	.word	0x509f79fb
 8012444:	3fd34413 	.word	0x3fd34413
 8012448:	08022f42 	.word	0x08022f42
 801244c:	08022f59 	.word	0x08022f59
 8012450:	7ff00000 	.word	0x7ff00000
 8012454:	08022f0d 	.word	0x08022f0d
 8012458:	3ff80000 	.word	0x3ff80000
 801245c:	08023050 	.word	0x08023050
 8012460:	08022fb1 	.word	0x08022fb1
 8012464:	08022f3e 	.word	0x08022f3e
 8012468:	08022f0c 	.word	0x08022f0c
 801246c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012470:	6018      	str	r0, [r3, #0]
 8012472:	9b07      	ldr	r3, [sp, #28]
 8012474:	2b0e      	cmp	r3, #14
 8012476:	f200 80a4 	bhi.w	80125c2 <_dtoa_r+0x442>
 801247a:	2c00      	cmp	r4, #0
 801247c:	f000 80a1 	beq.w	80125c2 <_dtoa_r+0x442>
 8012480:	2f00      	cmp	r7, #0
 8012482:	dd33      	ble.n	80124ec <_dtoa_r+0x36c>
 8012484:	4bad      	ldr	r3, [pc, #692]	@ (801273c <_dtoa_r+0x5bc>)
 8012486:	f007 020f 	and.w	r2, r7, #15
 801248a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801248e:	ed93 7b00 	vldr	d7, [r3]
 8012492:	05f8      	lsls	r0, r7, #23
 8012494:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012498:	ea4f 1427 	mov.w	r4, r7, asr #4
 801249c:	d516      	bpl.n	80124cc <_dtoa_r+0x34c>
 801249e:	4ba8      	ldr	r3, [pc, #672]	@ (8012740 <_dtoa_r+0x5c0>)
 80124a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80124a8:	f7ee f9f8 	bl	800089c <__aeabi_ddiv>
 80124ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124b0:	f004 040f 	and.w	r4, r4, #15
 80124b4:	2603      	movs	r6, #3
 80124b6:	4da2      	ldr	r5, [pc, #648]	@ (8012740 <_dtoa_r+0x5c0>)
 80124b8:	b954      	cbnz	r4, 80124d0 <_dtoa_r+0x350>
 80124ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124c2:	f7ee f9eb 	bl	800089c <__aeabi_ddiv>
 80124c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124ca:	e028      	b.n	801251e <_dtoa_r+0x39e>
 80124cc:	2602      	movs	r6, #2
 80124ce:	e7f2      	b.n	80124b6 <_dtoa_r+0x336>
 80124d0:	07e1      	lsls	r1, r4, #31
 80124d2:	d508      	bpl.n	80124e6 <_dtoa_r+0x366>
 80124d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124dc:	f7ee f8b4 	bl	8000648 <__aeabi_dmul>
 80124e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124e4:	3601      	adds	r6, #1
 80124e6:	1064      	asrs	r4, r4, #1
 80124e8:	3508      	adds	r5, #8
 80124ea:	e7e5      	b.n	80124b8 <_dtoa_r+0x338>
 80124ec:	f000 80d2 	beq.w	8012694 <_dtoa_r+0x514>
 80124f0:	427c      	negs	r4, r7
 80124f2:	4b92      	ldr	r3, [pc, #584]	@ (801273c <_dtoa_r+0x5bc>)
 80124f4:	4d92      	ldr	r5, [pc, #584]	@ (8012740 <_dtoa_r+0x5c0>)
 80124f6:	f004 020f 	and.w	r2, r4, #15
 80124fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012506:	f7ee f89f 	bl	8000648 <__aeabi_dmul>
 801250a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801250e:	1124      	asrs	r4, r4, #4
 8012510:	2300      	movs	r3, #0
 8012512:	2602      	movs	r6, #2
 8012514:	2c00      	cmp	r4, #0
 8012516:	f040 80b2 	bne.w	801267e <_dtoa_r+0x4fe>
 801251a:	2b00      	cmp	r3, #0
 801251c:	d1d3      	bne.n	80124c6 <_dtoa_r+0x346>
 801251e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012520:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012524:	2b00      	cmp	r3, #0
 8012526:	f000 80b7 	beq.w	8012698 <_dtoa_r+0x518>
 801252a:	4b86      	ldr	r3, [pc, #536]	@ (8012744 <_dtoa_r+0x5c4>)
 801252c:	2200      	movs	r2, #0
 801252e:	4620      	mov	r0, r4
 8012530:	4629      	mov	r1, r5
 8012532:	f7ee fafb 	bl	8000b2c <__aeabi_dcmplt>
 8012536:	2800      	cmp	r0, #0
 8012538:	f000 80ae 	beq.w	8012698 <_dtoa_r+0x518>
 801253c:	9b07      	ldr	r3, [sp, #28]
 801253e:	2b00      	cmp	r3, #0
 8012540:	f000 80aa 	beq.w	8012698 <_dtoa_r+0x518>
 8012544:	9b00      	ldr	r3, [sp, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	dd37      	ble.n	80125ba <_dtoa_r+0x43a>
 801254a:	1e7b      	subs	r3, r7, #1
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	4620      	mov	r0, r4
 8012550:	4b7d      	ldr	r3, [pc, #500]	@ (8012748 <_dtoa_r+0x5c8>)
 8012552:	2200      	movs	r2, #0
 8012554:	4629      	mov	r1, r5
 8012556:	f7ee f877 	bl	8000648 <__aeabi_dmul>
 801255a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801255e:	9c00      	ldr	r4, [sp, #0]
 8012560:	3601      	adds	r6, #1
 8012562:	4630      	mov	r0, r6
 8012564:	f7ee f806 	bl	8000574 <__aeabi_i2d>
 8012568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801256c:	f7ee f86c 	bl	8000648 <__aeabi_dmul>
 8012570:	4b76      	ldr	r3, [pc, #472]	@ (801274c <_dtoa_r+0x5cc>)
 8012572:	2200      	movs	r2, #0
 8012574:	f7ed feb2 	bl	80002dc <__adddf3>
 8012578:	4605      	mov	r5, r0
 801257a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801257e:	2c00      	cmp	r4, #0
 8012580:	f040 808d 	bne.w	801269e <_dtoa_r+0x51e>
 8012584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012588:	4b71      	ldr	r3, [pc, #452]	@ (8012750 <_dtoa_r+0x5d0>)
 801258a:	2200      	movs	r2, #0
 801258c:	f7ed fea4 	bl	80002d8 <__aeabi_dsub>
 8012590:	4602      	mov	r2, r0
 8012592:	460b      	mov	r3, r1
 8012594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012598:	462a      	mov	r2, r5
 801259a:	4633      	mov	r3, r6
 801259c:	f7ee fae4 	bl	8000b68 <__aeabi_dcmpgt>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	f040 828b 	bne.w	8012abc <_dtoa_r+0x93c>
 80125a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125aa:	462a      	mov	r2, r5
 80125ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80125b0:	f7ee fabc 	bl	8000b2c <__aeabi_dcmplt>
 80125b4:	2800      	cmp	r0, #0
 80125b6:	f040 8128 	bne.w	801280a <_dtoa_r+0x68a>
 80125ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80125be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80125c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f2c0 815a 	blt.w	801287e <_dtoa_r+0x6fe>
 80125ca:	2f0e      	cmp	r7, #14
 80125cc:	f300 8157 	bgt.w	801287e <_dtoa_r+0x6fe>
 80125d0:	4b5a      	ldr	r3, [pc, #360]	@ (801273c <_dtoa_r+0x5bc>)
 80125d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80125d6:	ed93 7b00 	vldr	d7, [r3]
 80125da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125dc:	2b00      	cmp	r3, #0
 80125de:	ed8d 7b00 	vstr	d7, [sp]
 80125e2:	da03      	bge.n	80125ec <_dtoa_r+0x46c>
 80125e4:	9b07      	ldr	r3, [sp, #28]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	f340 8101 	ble.w	80127ee <_dtoa_r+0x66e>
 80125ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80125f0:	4656      	mov	r6, sl
 80125f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125f6:	4620      	mov	r0, r4
 80125f8:	4629      	mov	r1, r5
 80125fa:	f7ee f94f 	bl	800089c <__aeabi_ddiv>
 80125fe:	f7ee fad3 	bl	8000ba8 <__aeabi_d2iz>
 8012602:	4680      	mov	r8, r0
 8012604:	f7ed ffb6 	bl	8000574 <__aeabi_i2d>
 8012608:	e9dd 2300 	ldrd	r2, r3, [sp]
 801260c:	f7ee f81c 	bl	8000648 <__aeabi_dmul>
 8012610:	4602      	mov	r2, r0
 8012612:	460b      	mov	r3, r1
 8012614:	4620      	mov	r0, r4
 8012616:	4629      	mov	r1, r5
 8012618:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801261c:	f7ed fe5c 	bl	80002d8 <__aeabi_dsub>
 8012620:	f806 4b01 	strb.w	r4, [r6], #1
 8012624:	9d07      	ldr	r5, [sp, #28]
 8012626:	eba6 040a 	sub.w	r4, r6, sl
 801262a:	42a5      	cmp	r5, r4
 801262c:	4602      	mov	r2, r0
 801262e:	460b      	mov	r3, r1
 8012630:	f040 8117 	bne.w	8012862 <_dtoa_r+0x6e2>
 8012634:	f7ed fe52 	bl	80002dc <__adddf3>
 8012638:	e9dd 2300 	ldrd	r2, r3, [sp]
 801263c:	4604      	mov	r4, r0
 801263e:	460d      	mov	r5, r1
 8012640:	f7ee fa92 	bl	8000b68 <__aeabi_dcmpgt>
 8012644:	2800      	cmp	r0, #0
 8012646:	f040 80f9 	bne.w	801283c <_dtoa_r+0x6bc>
 801264a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801264e:	4620      	mov	r0, r4
 8012650:	4629      	mov	r1, r5
 8012652:	f7ee fa61 	bl	8000b18 <__aeabi_dcmpeq>
 8012656:	b118      	cbz	r0, 8012660 <_dtoa_r+0x4e0>
 8012658:	f018 0f01 	tst.w	r8, #1
 801265c:	f040 80ee 	bne.w	801283c <_dtoa_r+0x6bc>
 8012660:	4649      	mov	r1, r9
 8012662:	4658      	mov	r0, fp
 8012664:	f000 fc90 	bl	8012f88 <_Bfree>
 8012668:	2300      	movs	r3, #0
 801266a:	7033      	strb	r3, [r6, #0]
 801266c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801266e:	3701      	adds	r7, #1
 8012670:	601f      	str	r7, [r3, #0]
 8012672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 831d 	beq.w	8012cb4 <_dtoa_r+0xb34>
 801267a:	601e      	str	r6, [r3, #0]
 801267c:	e31a      	b.n	8012cb4 <_dtoa_r+0xb34>
 801267e:	07e2      	lsls	r2, r4, #31
 8012680:	d505      	bpl.n	801268e <_dtoa_r+0x50e>
 8012682:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012686:	f7ed ffdf 	bl	8000648 <__aeabi_dmul>
 801268a:	3601      	adds	r6, #1
 801268c:	2301      	movs	r3, #1
 801268e:	1064      	asrs	r4, r4, #1
 8012690:	3508      	adds	r5, #8
 8012692:	e73f      	b.n	8012514 <_dtoa_r+0x394>
 8012694:	2602      	movs	r6, #2
 8012696:	e742      	b.n	801251e <_dtoa_r+0x39e>
 8012698:	9c07      	ldr	r4, [sp, #28]
 801269a:	9704      	str	r7, [sp, #16]
 801269c:	e761      	b.n	8012562 <_dtoa_r+0x3e2>
 801269e:	4b27      	ldr	r3, [pc, #156]	@ (801273c <_dtoa_r+0x5bc>)
 80126a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80126a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80126aa:	4454      	add	r4, sl
 80126ac:	2900      	cmp	r1, #0
 80126ae:	d053      	beq.n	8012758 <_dtoa_r+0x5d8>
 80126b0:	4928      	ldr	r1, [pc, #160]	@ (8012754 <_dtoa_r+0x5d4>)
 80126b2:	2000      	movs	r0, #0
 80126b4:	f7ee f8f2 	bl	800089c <__aeabi_ddiv>
 80126b8:	4633      	mov	r3, r6
 80126ba:	462a      	mov	r2, r5
 80126bc:	f7ed fe0c 	bl	80002d8 <__aeabi_dsub>
 80126c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126c4:	4656      	mov	r6, sl
 80126c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ca:	f7ee fa6d 	bl	8000ba8 <__aeabi_d2iz>
 80126ce:	4605      	mov	r5, r0
 80126d0:	f7ed ff50 	bl	8000574 <__aeabi_i2d>
 80126d4:	4602      	mov	r2, r0
 80126d6:	460b      	mov	r3, r1
 80126d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126dc:	f7ed fdfc 	bl	80002d8 <__aeabi_dsub>
 80126e0:	3530      	adds	r5, #48	@ 0x30
 80126e2:	4602      	mov	r2, r0
 80126e4:	460b      	mov	r3, r1
 80126e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126ea:	f806 5b01 	strb.w	r5, [r6], #1
 80126ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126f2:	f7ee fa1b 	bl	8000b2c <__aeabi_dcmplt>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d171      	bne.n	80127de <_dtoa_r+0x65e>
 80126fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126fe:	4911      	ldr	r1, [pc, #68]	@ (8012744 <_dtoa_r+0x5c4>)
 8012700:	2000      	movs	r0, #0
 8012702:	f7ed fde9 	bl	80002d8 <__aeabi_dsub>
 8012706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801270a:	f7ee fa0f 	bl	8000b2c <__aeabi_dcmplt>
 801270e:	2800      	cmp	r0, #0
 8012710:	f040 8095 	bne.w	801283e <_dtoa_r+0x6be>
 8012714:	42a6      	cmp	r6, r4
 8012716:	f43f af50 	beq.w	80125ba <_dtoa_r+0x43a>
 801271a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801271e:	4b0a      	ldr	r3, [pc, #40]	@ (8012748 <_dtoa_r+0x5c8>)
 8012720:	2200      	movs	r2, #0
 8012722:	f7ed ff91 	bl	8000648 <__aeabi_dmul>
 8012726:	4b08      	ldr	r3, [pc, #32]	@ (8012748 <_dtoa_r+0x5c8>)
 8012728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801272c:	2200      	movs	r2, #0
 801272e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012732:	f7ed ff89 	bl	8000648 <__aeabi_dmul>
 8012736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801273a:	e7c4      	b.n	80126c6 <_dtoa_r+0x546>
 801273c:	08023050 	.word	0x08023050
 8012740:	08023028 	.word	0x08023028
 8012744:	3ff00000 	.word	0x3ff00000
 8012748:	40240000 	.word	0x40240000
 801274c:	401c0000 	.word	0x401c0000
 8012750:	40140000 	.word	0x40140000
 8012754:	3fe00000 	.word	0x3fe00000
 8012758:	4631      	mov	r1, r6
 801275a:	4628      	mov	r0, r5
 801275c:	f7ed ff74 	bl	8000648 <__aeabi_dmul>
 8012760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012764:	9415      	str	r4, [sp, #84]	@ 0x54
 8012766:	4656      	mov	r6, sl
 8012768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801276c:	f7ee fa1c 	bl	8000ba8 <__aeabi_d2iz>
 8012770:	4605      	mov	r5, r0
 8012772:	f7ed feff 	bl	8000574 <__aeabi_i2d>
 8012776:	4602      	mov	r2, r0
 8012778:	460b      	mov	r3, r1
 801277a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801277e:	f7ed fdab 	bl	80002d8 <__aeabi_dsub>
 8012782:	3530      	adds	r5, #48	@ 0x30
 8012784:	f806 5b01 	strb.w	r5, [r6], #1
 8012788:	4602      	mov	r2, r0
 801278a:	460b      	mov	r3, r1
 801278c:	42a6      	cmp	r6, r4
 801278e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012792:	f04f 0200 	mov.w	r2, #0
 8012796:	d124      	bne.n	80127e2 <_dtoa_r+0x662>
 8012798:	4bac      	ldr	r3, [pc, #688]	@ (8012a4c <_dtoa_r+0x8cc>)
 801279a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801279e:	f7ed fd9d 	bl	80002dc <__adddf3>
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127aa:	f7ee f9dd 	bl	8000b68 <__aeabi_dcmpgt>
 80127ae:	2800      	cmp	r0, #0
 80127b0:	d145      	bne.n	801283e <_dtoa_r+0x6be>
 80127b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80127b6:	49a5      	ldr	r1, [pc, #660]	@ (8012a4c <_dtoa_r+0x8cc>)
 80127b8:	2000      	movs	r0, #0
 80127ba:	f7ed fd8d 	bl	80002d8 <__aeabi_dsub>
 80127be:	4602      	mov	r2, r0
 80127c0:	460b      	mov	r3, r1
 80127c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127c6:	f7ee f9b1 	bl	8000b2c <__aeabi_dcmplt>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	f43f aef5 	beq.w	80125ba <_dtoa_r+0x43a>
 80127d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80127d2:	1e73      	subs	r3, r6, #1
 80127d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80127d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127da:	2b30      	cmp	r3, #48	@ 0x30
 80127dc:	d0f8      	beq.n	80127d0 <_dtoa_r+0x650>
 80127de:	9f04      	ldr	r7, [sp, #16]
 80127e0:	e73e      	b.n	8012660 <_dtoa_r+0x4e0>
 80127e2:	4b9b      	ldr	r3, [pc, #620]	@ (8012a50 <_dtoa_r+0x8d0>)
 80127e4:	f7ed ff30 	bl	8000648 <__aeabi_dmul>
 80127e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127ec:	e7bc      	b.n	8012768 <_dtoa_r+0x5e8>
 80127ee:	d10c      	bne.n	801280a <_dtoa_r+0x68a>
 80127f0:	4b98      	ldr	r3, [pc, #608]	@ (8012a54 <_dtoa_r+0x8d4>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127f8:	f7ed ff26 	bl	8000648 <__aeabi_dmul>
 80127fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012800:	f7ee f9a8 	bl	8000b54 <__aeabi_dcmpge>
 8012804:	2800      	cmp	r0, #0
 8012806:	f000 8157 	beq.w	8012ab8 <_dtoa_r+0x938>
 801280a:	2400      	movs	r4, #0
 801280c:	4625      	mov	r5, r4
 801280e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012810:	43db      	mvns	r3, r3
 8012812:	9304      	str	r3, [sp, #16]
 8012814:	4656      	mov	r6, sl
 8012816:	2700      	movs	r7, #0
 8012818:	4621      	mov	r1, r4
 801281a:	4658      	mov	r0, fp
 801281c:	f000 fbb4 	bl	8012f88 <_Bfree>
 8012820:	2d00      	cmp	r5, #0
 8012822:	d0dc      	beq.n	80127de <_dtoa_r+0x65e>
 8012824:	b12f      	cbz	r7, 8012832 <_dtoa_r+0x6b2>
 8012826:	42af      	cmp	r7, r5
 8012828:	d003      	beq.n	8012832 <_dtoa_r+0x6b2>
 801282a:	4639      	mov	r1, r7
 801282c:	4658      	mov	r0, fp
 801282e:	f000 fbab 	bl	8012f88 <_Bfree>
 8012832:	4629      	mov	r1, r5
 8012834:	4658      	mov	r0, fp
 8012836:	f000 fba7 	bl	8012f88 <_Bfree>
 801283a:	e7d0      	b.n	80127de <_dtoa_r+0x65e>
 801283c:	9704      	str	r7, [sp, #16]
 801283e:	4633      	mov	r3, r6
 8012840:	461e      	mov	r6, r3
 8012842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012846:	2a39      	cmp	r2, #57	@ 0x39
 8012848:	d107      	bne.n	801285a <_dtoa_r+0x6da>
 801284a:	459a      	cmp	sl, r3
 801284c:	d1f8      	bne.n	8012840 <_dtoa_r+0x6c0>
 801284e:	9a04      	ldr	r2, [sp, #16]
 8012850:	3201      	adds	r2, #1
 8012852:	9204      	str	r2, [sp, #16]
 8012854:	2230      	movs	r2, #48	@ 0x30
 8012856:	f88a 2000 	strb.w	r2, [sl]
 801285a:	781a      	ldrb	r2, [r3, #0]
 801285c:	3201      	adds	r2, #1
 801285e:	701a      	strb	r2, [r3, #0]
 8012860:	e7bd      	b.n	80127de <_dtoa_r+0x65e>
 8012862:	4b7b      	ldr	r3, [pc, #492]	@ (8012a50 <_dtoa_r+0x8d0>)
 8012864:	2200      	movs	r2, #0
 8012866:	f7ed feef 	bl	8000648 <__aeabi_dmul>
 801286a:	2200      	movs	r2, #0
 801286c:	2300      	movs	r3, #0
 801286e:	4604      	mov	r4, r0
 8012870:	460d      	mov	r5, r1
 8012872:	f7ee f951 	bl	8000b18 <__aeabi_dcmpeq>
 8012876:	2800      	cmp	r0, #0
 8012878:	f43f aebb 	beq.w	80125f2 <_dtoa_r+0x472>
 801287c:	e6f0      	b.n	8012660 <_dtoa_r+0x4e0>
 801287e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012880:	2a00      	cmp	r2, #0
 8012882:	f000 80db 	beq.w	8012a3c <_dtoa_r+0x8bc>
 8012886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012888:	2a01      	cmp	r2, #1
 801288a:	f300 80bf 	bgt.w	8012a0c <_dtoa_r+0x88c>
 801288e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012890:	2a00      	cmp	r2, #0
 8012892:	f000 80b7 	beq.w	8012a04 <_dtoa_r+0x884>
 8012896:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801289a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801289c:	4646      	mov	r6, r8
 801289e:	9a08      	ldr	r2, [sp, #32]
 80128a0:	2101      	movs	r1, #1
 80128a2:	441a      	add	r2, r3
 80128a4:	4658      	mov	r0, fp
 80128a6:	4498      	add	r8, r3
 80128a8:	9208      	str	r2, [sp, #32]
 80128aa:	f000 fc6b 	bl	8013184 <__i2b>
 80128ae:	4605      	mov	r5, r0
 80128b0:	b15e      	cbz	r6, 80128ca <_dtoa_r+0x74a>
 80128b2:	9b08      	ldr	r3, [sp, #32]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	dd08      	ble.n	80128ca <_dtoa_r+0x74a>
 80128b8:	42b3      	cmp	r3, r6
 80128ba:	9a08      	ldr	r2, [sp, #32]
 80128bc:	bfa8      	it	ge
 80128be:	4633      	movge	r3, r6
 80128c0:	eba8 0803 	sub.w	r8, r8, r3
 80128c4:	1af6      	subs	r6, r6, r3
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	9308      	str	r3, [sp, #32]
 80128ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128cc:	b1f3      	cbz	r3, 801290c <_dtoa_r+0x78c>
 80128ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f000 80b7 	beq.w	8012a44 <_dtoa_r+0x8c4>
 80128d6:	b18c      	cbz	r4, 80128fc <_dtoa_r+0x77c>
 80128d8:	4629      	mov	r1, r5
 80128da:	4622      	mov	r2, r4
 80128dc:	4658      	mov	r0, fp
 80128de:	f000 fd11 	bl	8013304 <__pow5mult>
 80128e2:	464a      	mov	r2, r9
 80128e4:	4601      	mov	r1, r0
 80128e6:	4605      	mov	r5, r0
 80128e8:	4658      	mov	r0, fp
 80128ea:	f000 fc61 	bl	80131b0 <__multiply>
 80128ee:	4649      	mov	r1, r9
 80128f0:	9004      	str	r0, [sp, #16]
 80128f2:	4658      	mov	r0, fp
 80128f4:	f000 fb48 	bl	8012f88 <_Bfree>
 80128f8:	9b04      	ldr	r3, [sp, #16]
 80128fa:	4699      	mov	r9, r3
 80128fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128fe:	1b1a      	subs	r2, r3, r4
 8012900:	d004      	beq.n	801290c <_dtoa_r+0x78c>
 8012902:	4649      	mov	r1, r9
 8012904:	4658      	mov	r0, fp
 8012906:	f000 fcfd 	bl	8013304 <__pow5mult>
 801290a:	4681      	mov	r9, r0
 801290c:	2101      	movs	r1, #1
 801290e:	4658      	mov	r0, fp
 8012910:	f000 fc38 	bl	8013184 <__i2b>
 8012914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012916:	4604      	mov	r4, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	f000 81cf 	beq.w	8012cbc <_dtoa_r+0xb3c>
 801291e:	461a      	mov	r2, r3
 8012920:	4601      	mov	r1, r0
 8012922:	4658      	mov	r0, fp
 8012924:	f000 fcee 	bl	8013304 <__pow5mult>
 8012928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801292a:	2b01      	cmp	r3, #1
 801292c:	4604      	mov	r4, r0
 801292e:	f300 8095 	bgt.w	8012a5c <_dtoa_r+0x8dc>
 8012932:	9b02      	ldr	r3, [sp, #8]
 8012934:	2b00      	cmp	r3, #0
 8012936:	f040 8087 	bne.w	8012a48 <_dtoa_r+0x8c8>
 801293a:	9b03      	ldr	r3, [sp, #12]
 801293c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012940:	2b00      	cmp	r3, #0
 8012942:	f040 8089 	bne.w	8012a58 <_dtoa_r+0x8d8>
 8012946:	9b03      	ldr	r3, [sp, #12]
 8012948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801294c:	0d1b      	lsrs	r3, r3, #20
 801294e:	051b      	lsls	r3, r3, #20
 8012950:	b12b      	cbz	r3, 801295e <_dtoa_r+0x7de>
 8012952:	9b08      	ldr	r3, [sp, #32]
 8012954:	3301      	adds	r3, #1
 8012956:	9308      	str	r3, [sp, #32]
 8012958:	f108 0801 	add.w	r8, r8, #1
 801295c:	2301      	movs	r3, #1
 801295e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012962:	2b00      	cmp	r3, #0
 8012964:	f000 81b0 	beq.w	8012cc8 <_dtoa_r+0xb48>
 8012968:	6923      	ldr	r3, [r4, #16]
 801296a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801296e:	6918      	ldr	r0, [r3, #16]
 8012970:	f000 fbbc 	bl	80130ec <__hi0bits>
 8012974:	f1c0 0020 	rsb	r0, r0, #32
 8012978:	9b08      	ldr	r3, [sp, #32]
 801297a:	4418      	add	r0, r3
 801297c:	f010 001f 	ands.w	r0, r0, #31
 8012980:	d077      	beq.n	8012a72 <_dtoa_r+0x8f2>
 8012982:	f1c0 0320 	rsb	r3, r0, #32
 8012986:	2b04      	cmp	r3, #4
 8012988:	dd6b      	ble.n	8012a62 <_dtoa_r+0x8e2>
 801298a:	9b08      	ldr	r3, [sp, #32]
 801298c:	f1c0 001c 	rsb	r0, r0, #28
 8012990:	4403      	add	r3, r0
 8012992:	4480      	add	r8, r0
 8012994:	4406      	add	r6, r0
 8012996:	9308      	str	r3, [sp, #32]
 8012998:	f1b8 0f00 	cmp.w	r8, #0
 801299c:	dd05      	ble.n	80129aa <_dtoa_r+0x82a>
 801299e:	4649      	mov	r1, r9
 80129a0:	4642      	mov	r2, r8
 80129a2:	4658      	mov	r0, fp
 80129a4:	f000 fd08 	bl	80133b8 <__lshift>
 80129a8:	4681      	mov	r9, r0
 80129aa:	9b08      	ldr	r3, [sp, #32]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	dd05      	ble.n	80129bc <_dtoa_r+0x83c>
 80129b0:	4621      	mov	r1, r4
 80129b2:	461a      	mov	r2, r3
 80129b4:	4658      	mov	r0, fp
 80129b6:	f000 fcff 	bl	80133b8 <__lshift>
 80129ba:	4604      	mov	r4, r0
 80129bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d059      	beq.n	8012a76 <_dtoa_r+0x8f6>
 80129c2:	4621      	mov	r1, r4
 80129c4:	4648      	mov	r0, r9
 80129c6:	f000 fd63 	bl	8013490 <__mcmp>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	da53      	bge.n	8012a76 <_dtoa_r+0x8f6>
 80129ce:	1e7b      	subs	r3, r7, #1
 80129d0:	9304      	str	r3, [sp, #16]
 80129d2:	4649      	mov	r1, r9
 80129d4:	2300      	movs	r3, #0
 80129d6:	220a      	movs	r2, #10
 80129d8:	4658      	mov	r0, fp
 80129da:	f000 faf7 	bl	8012fcc <__multadd>
 80129de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129e0:	4681      	mov	r9, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f000 8172 	beq.w	8012ccc <_dtoa_r+0xb4c>
 80129e8:	2300      	movs	r3, #0
 80129ea:	4629      	mov	r1, r5
 80129ec:	220a      	movs	r2, #10
 80129ee:	4658      	mov	r0, fp
 80129f0:	f000 faec 	bl	8012fcc <__multadd>
 80129f4:	9b00      	ldr	r3, [sp, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	4605      	mov	r5, r0
 80129fa:	dc67      	bgt.n	8012acc <_dtoa_r+0x94c>
 80129fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129fe:	2b02      	cmp	r3, #2
 8012a00:	dc41      	bgt.n	8012a86 <_dtoa_r+0x906>
 8012a02:	e063      	b.n	8012acc <_dtoa_r+0x94c>
 8012a04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012a06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012a0a:	e746      	b.n	801289a <_dtoa_r+0x71a>
 8012a0c:	9b07      	ldr	r3, [sp, #28]
 8012a0e:	1e5c      	subs	r4, r3, #1
 8012a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a12:	42a3      	cmp	r3, r4
 8012a14:	bfbf      	itttt	lt
 8012a16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012a18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012a1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012a1c:	1ae3      	sublt	r3, r4, r3
 8012a1e:	bfb4      	ite	lt
 8012a20:	18d2      	addlt	r2, r2, r3
 8012a22:	1b1c      	subge	r4, r3, r4
 8012a24:	9b07      	ldr	r3, [sp, #28]
 8012a26:	bfbc      	itt	lt
 8012a28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012a2a:	2400      	movlt	r4, #0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	bfb5      	itete	lt
 8012a30:	eba8 0603 	sublt.w	r6, r8, r3
 8012a34:	9b07      	ldrge	r3, [sp, #28]
 8012a36:	2300      	movlt	r3, #0
 8012a38:	4646      	movge	r6, r8
 8012a3a:	e730      	b.n	801289e <_dtoa_r+0x71e>
 8012a3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012a40:	4646      	mov	r6, r8
 8012a42:	e735      	b.n	80128b0 <_dtoa_r+0x730>
 8012a44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a46:	e75c      	b.n	8012902 <_dtoa_r+0x782>
 8012a48:	2300      	movs	r3, #0
 8012a4a:	e788      	b.n	801295e <_dtoa_r+0x7de>
 8012a4c:	3fe00000 	.word	0x3fe00000
 8012a50:	40240000 	.word	0x40240000
 8012a54:	40140000 	.word	0x40140000
 8012a58:	9b02      	ldr	r3, [sp, #8]
 8012a5a:	e780      	b.n	801295e <_dtoa_r+0x7de>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a60:	e782      	b.n	8012968 <_dtoa_r+0x7e8>
 8012a62:	d099      	beq.n	8012998 <_dtoa_r+0x818>
 8012a64:	9a08      	ldr	r2, [sp, #32]
 8012a66:	331c      	adds	r3, #28
 8012a68:	441a      	add	r2, r3
 8012a6a:	4498      	add	r8, r3
 8012a6c:	441e      	add	r6, r3
 8012a6e:	9208      	str	r2, [sp, #32]
 8012a70:	e792      	b.n	8012998 <_dtoa_r+0x818>
 8012a72:	4603      	mov	r3, r0
 8012a74:	e7f6      	b.n	8012a64 <_dtoa_r+0x8e4>
 8012a76:	9b07      	ldr	r3, [sp, #28]
 8012a78:	9704      	str	r7, [sp, #16]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	dc20      	bgt.n	8012ac0 <_dtoa_r+0x940>
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a82:	2b02      	cmp	r3, #2
 8012a84:	dd1e      	ble.n	8012ac4 <_dtoa_r+0x944>
 8012a86:	9b00      	ldr	r3, [sp, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f47f aec0 	bne.w	801280e <_dtoa_r+0x68e>
 8012a8e:	4621      	mov	r1, r4
 8012a90:	2205      	movs	r2, #5
 8012a92:	4658      	mov	r0, fp
 8012a94:	f000 fa9a 	bl	8012fcc <__multadd>
 8012a98:	4601      	mov	r1, r0
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4648      	mov	r0, r9
 8012a9e:	f000 fcf7 	bl	8013490 <__mcmp>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	f77f aeb3 	ble.w	801280e <_dtoa_r+0x68e>
 8012aa8:	4656      	mov	r6, sl
 8012aaa:	2331      	movs	r3, #49	@ 0x31
 8012aac:	f806 3b01 	strb.w	r3, [r6], #1
 8012ab0:	9b04      	ldr	r3, [sp, #16]
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	e6ae      	b.n	8012816 <_dtoa_r+0x696>
 8012ab8:	9c07      	ldr	r4, [sp, #28]
 8012aba:	9704      	str	r7, [sp, #16]
 8012abc:	4625      	mov	r5, r4
 8012abe:	e7f3      	b.n	8012aa8 <_dtoa_r+0x928>
 8012ac0:	9b07      	ldr	r3, [sp, #28]
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 8104 	beq.w	8012cd4 <_dtoa_r+0xb54>
 8012acc:	2e00      	cmp	r6, #0
 8012ace:	dd05      	ble.n	8012adc <_dtoa_r+0x95c>
 8012ad0:	4629      	mov	r1, r5
 8012ad2:	4632      	mov	r2, r6
 8012ad4:	4658      	mov	r0, fp
 8012ad6:	f000 fc6f 	bl	80133b8 <__lshift>
 8012ada:	4605      	mov	r5, r0
 8012adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d05a      	beq.n	8012b98 <_dtoa_r+0xa18>
 8012ae2:	6869      	ldr	r1, [r5, #4]
 8012ae4:	4658      	mov	r0, fp
 8012ae6:	f000 fa0f 	bl	8012f08 <_Balloc>
 8012aea:	4606      	mov	r6, r0
 8012aec:	b928      	cbnz	r0, 8012afa <_dtoa_r+0x97a>
 8012aee:	4b84      	ldr	r3, [pc, #528]	@ (8012d00 <_dtoa_r+0xb80>)
 8012af0:	4602      	mov	r2, r0
 8012af2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012af6:	f7ff bb5a 	b.w	80121ae <_dtoa_r+0x2e>
 8012afa:	692a      	ldr	r2, [r5, #16]
 8012afc:	3202      	adds	r2, #2
 8012afe:	0092      	lsls	r2, r2, #2
 8012b00:	f105 010c 	add.w	r1, r5, #12
 8012b04:	300c      	adds	r0, #12
 8012b06:	f001 fff9 	bl	8014afc <memcpy>
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	4631      	mov	r1, r6
 8012b0e:	4658      	mov	r0, fp
 8012b10:	f000 fc52 	bl	80133b8 <__lshift>
 8012b14:	f10a 0301 	add.w	r3, sl, #1
 8012b18:	9307      	str	r3, [sp, #28]
 8012b1a:	9b00      	ldr	r3, [sp, #0]
 8012b1c:	4453      	add	r3, sl
 8012b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b20:	9b02      	ldr	r3, [sp, #8]
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	462f      	mov	r7, r5
 8012b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	9b07      	ldr	r3, [sp, #28]
 8012b2e:	4621      	mov	r1, r4
 8012b30:	3b01      	subs	r3, #1
 8012b32:	4648      	mov	r0, r9
 8012b34:	9300      	str	r3, [sp, #0]
 8012b36:	f7ff fa9b 	bl	8012070 <quorem>
 8012b3a:	4639      	mov	r1, r7
 8012b3c:	9002      	str	r0, [sp, #8]
 8012b3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b42:	4648      	mov	r0, r9
 8012b44:	f000 fca4 	bl	8013490 <__mcmp>
 8012b48:	462a      	mov	r2, r5
 8012b4a:	9008      	str	r0, [sp, #32]
 8012b4c:	4621      	mov	r1, r4
 8012b4e:	4658      	mov	r0, fp
 8012b50:	f000 fcba 	bl	80134c8 <__mdiff>
 8012b54:	68c2      	ldr	r2, [r0, #12]
 8012b56:	4606      	mov	r6, r0
 8012b58:	bb02      	cbnz	r2, 8012b9c <_dtoa_r+0xa1c>
 8012b5a:	4601      	mov	r1, r0
 8012b5c:	4648      	mov	r0, r9
 8012b5e:	f000 fc97 	bl	8013490 <__mcmp>
 8012b62:	4602      	mov	r2, r0
 8012b64:	4631      	mov	r1, r6
 8012b66:	4658      	mov	r0, fp
 8012b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b6a:	f000 fa0d 	bl	8012f88 <_Bfree>
 8012b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b72:	9e07      	ldr	r6, [sp, #28]
 8012b74:	ea43 0102 	orr.w	r1, r3, r2
 8012b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b7a:	4319      	orrs	r1, r3
 8012b7c:	d110      	bne.n	8012ba0 <_dtoa_r+0xa20>
 8012b7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b82:	d029      	beq.n	8012bd8 <_dtoa_r+0xa58>
 8012b84:	9b08      	ldr	r3, [sp, #32]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	dd02      	ble.n	8012b90 <_dtoa_r+0xa10>
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012b90:	9b00      	ldr	r3, [sp, #0]
 8012b92:	f883 8000 	strb.w	r8, [r3]
 8012b96:	e63f      	b.n	8012818 <_dtoa_r+0x698>
 8012b98:	4628      	mov	r0, r5
 8012b9a:	e7bb      	b.n	8012b14 <_dtoa_r+0x994>
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	e7e1      	b.n	8012b64 <_dtoa_r+0x9e4>
 8012ba0:	9b08      	ldr	r3, [sp, #32]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	db04      	blt.n	8012bb0 <_dtoa_r+0xa30>
 8012ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ba8:	430b      	orrs	r3, r1
 8012baa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012bac:	430b      	orrs	r3, r1
 8012bae:	d120      	bne.n	8012bf2 <_dtoa_r+0xa72>
 8012bb0:	2a00      	cmp	r2, #0
 8012bb2:	dded      	ble.n	8012b90 <_dtoa_r+0xa10>
 8012bb4:	4649      	mov	r1, r9
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	4658      	mov	r0, fp
 8012bba:	f000 fbfd 	bl	80133b8 <__lshift>
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	4681      	mov	r9, r0
 8012bc2:	f000 fc65 	bl	8013490 <__mcmp>
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	dc03      	bgt.n	8012bd2 <_dtoa_r+0xa52>
 8012bca:	d1e1      	bne.n	8012b90 <_dtoa_r+0xa10>
 8012bcc:	f018 0f01 	tst.w	r8, #1
 8012bd0:	d0de      	beq.n	8012b90 <_dtoa_r+0xa10>
 8012bd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012bd6:	d1d8      	bne.n	8012b8a <_dtoa_r+0xa0a>
 8012bd8:	9a00      	ldr	r2, [sp, #0]
 8012bda:	2339      	movs	r3, #57	@ 0x39
 8012bdc:	7013      	strb	r3, [r2, #0]
 8012bde:	4633      	mov	r3, r6
 8012be0:	461e      	mov	r6, r3
 8012be2:	3b01      	subs	r3, #1
 8012be4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012be8:	2a39      	cmp	r2, #57	@ 0x39
 8012bea:	d052      	beq.n	8012c92 <_dtoa_r+0xb12>
 8012bec:	3201      	adds	r2, #1
 8012bee:	701a      	strb	r2, [r3, #0]
 8012bf0:	e612      	b.n	8012818 <_dtoa_r+0x698>
 8012bf2:	2a00      	cmp	r2, #0
 8012bf4:	dd07      	ble.n	8012c06 <_dtoa_r+0xa86>
 8012bf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012bfa:	d0ed      	beq.n	8012bd8 <_dtoa_r+0xa58>
 8012bfc:	9a00      	ldr	r2, [sp, #0]
 8012bfe:	f108 0301 	add.w	r3, r8, #1
 8012c02:	7013      	strb	r3, [r2, #0]
 8012c04:	e608      	b.n	8012818 <_dtoa_r+0x698>
 8012c06:	9b07      	ldr	r3, [sp, #28]
 8012c08:	9a07      	ldr	r2, [sp, #28]
 8012c0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d028      	beq.n	8012c66 <_dtoa_r+0xae6>
 8012c14:	4649      	mov	r1, r9
 8012c16:	2300      	movs	r3, #0
 8012c18:	220a      	movs	r2, #10
 8012c1a:	4658      	mov	r0, fp
 8012c1c:	f000 f9d6 	bl	8012fcc <__multadd>
 8012c20:	42af      	cmp	r7, r5
 8012c22:	4681      	mov	r9, r0
 8012c24:	f04f 0300 	mov.w	r3, #0
 8012c28:	f04f 020a 	mov.w	r2, #10
 8012c2c:	4639      	mov	r1, r7
 8012c2e:	4658      	mov	r0, fp
 8012c30:	d107      	bne.n	8012c42 <_dtoa_r+0xac2>
 8012c32:	f000 f9cb 	bl	8012fcc <__multadd>
 8012c36:	4607      	mov	r7, r0
 8012c38:	4605      	mov	r5, r0
 8012c3a:	9b07      	ldr	r3, [sp, #28]
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	9307      	str	r3, [sp, #28]
 8012c40:	e774      	b.n	8012b2c <_dtoa_r+0x9ac>
 8012c42:	f000 f9c3 	bl	8012fcc <__multadd>
 8012c46:	4629      	mov	r1, r5
 8012c48:	4607      	mov	r7, r0
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	220a      	movs	r2, #10
 8012c4e:	4658      	mov	r0, fp
 8012c50:	f000 f9bc 	bl	8012fcc <__multadd>
 8012c54:	4605      	mov	r5, r0
 8012c56:	e7f0      	b.n	8012c3a <_dtoa_r+0xaba>
 8012c58:	9b00      	ldr	r3, [sp, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	bfcc      	ite	gt
 8012c5e:	461e      	movgt	r6, r3
 8012c60:	2601      	movle	r6, #1
 8012c62:	4456      	add	r6, sl
 8012c64:	2700      	movs	r7, #0
 8012c66:	4649      	mov	r1, r9
 8012c68:	2201      	movs	r2, #1
 8012c6a:	4658      	mov	r0, fp
 8012c6c:	f000 fba4 	bl	80133b8 <__lshift>
 8012c70:	4621      	mov	r1, r4
 8012c72:	4681      	mov	r9, r0
 8012c74:	f000 fc0c 	bl	8013490 <__mcmp>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	dcb0      	bgt.n	8012bde <_dtoa_r+0xa5e>
 8012c7c:	d102      	bne.n	8012c84 <_dtoa_r+0xb04>
 8012c7e:	f018 0f01 	tst.w	r8, #1
 8012c82:	d1ac      	bne.n	8012bde <_dtoa_r+0xa5e>
 8012c84:	4633      	mov	r3, r6
 8012c86:	461e      	mov	r6, r3
 8012c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c8c:	2a30      	cmp	r2, #48	@ 0x30
 8012c8e:	d0fa      	beq.n	8012c86 <_dtoa_r+0xb06>
 8012c90:	e5c2      	b.n	8012818 <_dtoa_r+0x698>
 8012c92:	459a      	cmp	sl, r3
 8012c94:	d1a4      	bne.n	8012be0 <_dtoa_r+0xa60>
 8012c96:	9b04      	ldr	r3, [sp, #16]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	2331      	movs	r3, #49	@ 0x31
 8012c9e:	f88a 3000 	strb.w	r3, [sl]
 8012ca2:	e5b9      	b.n	8012818 <_dtoa_r+0x698>
 8012ca4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012ca6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012d04 <_dtoa_r+0xb84>
 8012caa:	b11b      	cbz	r3, 8012cb4 <_dtoa_r+0xb34>
 8012cac:	f10a 0308 	add.w	r3, sl, #8
 8012cb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012cb2:	6013      	str	r3, [r2, #0]
 8012cb4:	4650      	mov	r0, sl
 8012cb6:	b019      	add	sp, #100	@ 0x64
 8012cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	f77f ae37 	ble.w	8012932 <_dtoa_r+0x7b2>
 8012cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cc8:	2001      	movs	r0, #1
 8012cca:	e655      	b.n	8012978 <_dtoa_r+0x7f8>
 8012ccc:	9b00      	ldr	r3, [sp, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f77f aed6 	ble.w	8012a80 <_dtoa_r+0x900>
 8012cd4:	4656      	mov	r6, sl
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4648      	mov	r0, r9
 8012cda:	f7ff f9c9 	bl	8012070 <quorem>
 8012cde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012ce2:	f806 8b01 	strb.w	r8, [r6], #1
 8012ce6:	9b00      	ldr	r3, [sp, #0]
 8012ce8:	eba6 020a 	sub.w	r2, r6, sl
 8012cec:	4293      	cmp	r3, r2
 8012cee:	ddb3      	ble.n	8012c58 <_dtoa_r+0xad8>
 8012cf0:	4649      	mov	r1, r9
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	220a      	movs	r2, #10
 8012cf6:	4658      	mov	r0, fp
 8012cf8:	f000 f968 	bl	8012fcc <__multadd>
 8012cfc:	4681      	mov	r9, r0
 8012cfe:	e7ea      	b.n	8012cd6 <_dtoa_r+0xb56>
 8012d00:	08022fb1 	.word	0x08022fb1
 8012d04:	08022f35 	.word	0x08022f35

08012d08 <_free_r>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	2900      	cmp	r1, #0
 8012d0e:	d041      	beq.n	8012d94 <_free_r+0x8c>
 8012d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d14:	1f0c      	subs	r4, r1, #4
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	bfb8      	it	lt
 8012d1a:	18e4      	addlt	r4, r4, r3
 8012d1c:	f000 f8e8 	bl	8012ef0 <__malloc_lock>
 8012d20:	4a1d      	ldr	r2, [pc, #116]	@ (8012d98 <_free_r+0x90>)
 8012d22:	6813      	ldr	r3, [r2, #0]
 8012d24:	b933      	cbnz	r3, 8012d34 <_free_r+0x2c>
 8012d26:	6063      	str	r3, [r4, #4]
 8012d28:	6014      	str	r4, [r2, #0]
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d30:	f000 b8e4 	b.w	8012efc <__malloc_unlock>
 8012d34:	42a3      	cmp	r3, r4
 8012d36:	d908      	bls.n	8012d4a <_free_r+0x42>
 8012d38:	6820      	ldr	r0, [r4, #0]
 8012d3a:	1821      	adds	r1, r4, r0
 8012d3c:	428b      	cmp	r3, r1
 8012d3e:	bf01      	itttt	eq
 8012d40:	6819      	ldreq	r1, [r3, #0]
 8012d42:	685b      	ldreq	r3, [r3, #4]
 8012d44:	1809      	addeq	r1, r1, r0
 8012d46:	6021      	streq	r1, [r4, #0]
 8012d48:	e7ed      	b.n	8012d26 <_free_r+0x1e>
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	b10b      	cbz	r3, 8012d54 <_free_r+0x4c>
 8012d50:	42a3      	cmp	r3, r4
 8012d52:	d9fa      	bls.n	8012d4a <_free_r+0x42>
 8012d54:	6811      	ldr	r1, [r2, #0]
 8012d56:	1850      	adds	r0, r2, r1
 8012d58:	42a0      	cmp	r0, r4
 8012d5a:	d10b      	bne.n	8012d74 <_free_r+0x6c>
 8012d5c:	6820      	ldr	r0, [r4, #0]
 8012d5e:	4401      	add	r1, r0
 8012d60:	1850      	adds	r0, r2, r1
 8012d62:	4283      	cmp	r3, r0
 8012d64:	6011      	str	r1, [r2, #0]
 8012d66:	d1e0      	bne.n	8012d2a <_free_r+0x22>
 8012d68:	6818      	ldr	r0, [r3, #0]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	6053      	str	r3, [r2, #4]
 8012d6e:	4408      	add	r0, r1
 8012d70:	6010      	str	r0, [r2, #0]
 8012d72:	e7da      	b.n	8012d2a <_free_r+0x22>
 8012d74:	d902      	bls.n	8012d7c <_free_r+0x74>
 8012d76:	230c      	movs	r3, #12
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	e7d6      	b.n	8012d2a <_free_r+0x22>
 8012d7c:	6820      	ldr	r0, [r4, #0]
 8012d7e:	1821      	adds	r1, r4, r0
 8012d80:	428b      	cmp	r3, r1
 8012d82:	bf04      	itt	eq
 8012d84:	6819      	ldreq	r1, [r3, #0]
 8012d86:	685b      	ldreq	r3, [r3, #4]
 8012d88:	6063      	str	r3, [r4, #4]
 8012d8a:	bf04      	itt	eq
 8012d8c:	1809      	addeq	r1, r1, r0
 8012d8e:	6021      	streq	r1, [r4, #0]
 8012d90:	6054      	str	r4, [r2, #4]
 8012d92:	e7ca      	b.n	8012d2a <_free_r+0x22>
 8012d94:	bd38      	pop	{r3, r4, r5, pc}
 8012d96:	bf00      	nop
 8012d98:	20002dc8 	.word	0x20002dc8

08012d9c <malloc>:
 8012d9c:	4b02      	ldr	r3, [pc, #8]	@ (8012da8 <malloc+0xc>)
 8012d9e:	4601      	mov	r1, r0
 8012da0:	6818      	ldr	r0, [r3, #0]
 8012da2:	f000 b825 	b.w	8012df0 <_malloc_r>
 8012da6:	bf00      	nop
 8012da8:	2000039c 	.word	0x2000039c

08012dac <sbrk_aligned>:
 8012dac:	b570      	push	{r4, r5, r6, lr}
 8012dae:	4e0f      	ldr	r6, [pc, #60]	@ (8012dec <sbrk_aligned+0x40>)
 8012db0:	460c      	mov	r4, r1
 8012db2:	6831      	ldr	r1, [r6, #0]
 8012db4:	4605      	mov	r5, r0
 8012db6:	b911      	cbnz	r1, 8012dbe <sbrk_aligned+0x12>
 8012db8:	f001 fe90 	bl	8014adc <_sbrk_r>
 8012dbc:	6030      	str	r0, [r6, #0]
 8012dbe:	4621      	mov	r1, r4
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	f001 fe8b 	bl	8014adc <_sbrk_r>
 8012dc6:	1c43      	adds	r3, r0, #1
 8012dc8:	d103      	bne.n	8012dd2 <sbrk_aligned+0x26>
 8012dca:	f04f 34ff 	mov.w	r4, #4294967295
 8012dce:	4620      	mov	r0, r4
 8012dd0:	bd70      	pop	{r4, r5, r6, pc}
 8012dd2:	1cc4      	adds	r4, r0, #3
 8012dd4:	f024 0403 	bic.w	r4, r4, #3
 8012dd8:	42a0      	cmp	r0, r4
 8012dda:	d0f8      	beq.n	8012dce <sbrk_aligned+0x22>
 8012ddc:	1a21      	subs	r1, r4, r0
 8012dde:	4628      	mov	r0, r5
 8012de0:	f001 fe7c 	bl	8014adc <_sbrk_r>
 8012de4:	3001      	adds	r0, #1
 8012de6:	d1f2      	bne.n	8012dce <sbrk_aligned+0x22>
 8012de8:	e7ef      	b.n	8012dca <sbrk_aligned+0x1e>
 8012dea:	bf00      	nop
 8012dec:	20002dc4 	.word	0x20002dc4

08012df0 <_malloc_r>:
 8012df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012df4:	1ccd      	adds	r5, r1, #3
 8012df6:	f025 0503 	bic.w	r5, r5, #3
 8012dfa:	3508      	adds	r5, #8
 8012dfc:	2d0c      	cmp	r5, #12
 8012dfe:	bf38      	it	cc
 8012e00:	250c      	movcc	r5, #12
 8012e02:	2d00      	cmp	r5, #0
 8012e04:	4606      	mov	r6, r0
 8012e06:	db01      	blt.n	8012e0c <_malloc_r+0x1c>
 8012e08:	42a9      	cmp	r1, r5
 8012e0a:	d904      	bls.n	8012e16 <_malloc_r+0x26>
 8012e0c:	230c      	movs	r3, #12
 8012e0e:	6033      	str	r3, [r6, #0]
 8012e10:	2000      	movs	r0, #0
 8012e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012eec <_malloc_r+0xfc>
 8012e1a:	f000 f869 	bl	8012ef0 <__malloc_lock>
 8012e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8012e22:	461c      	mov	r4, r3
 8012e24:	bb44      	cbnz	r4, 8012e78 <_malloc_r+0x88>
 8012e26:	4629      	mov	r1, r5
 8012e28:	4630      	mov	r0, r6
 8012e2a:	f7ff ffbf 	bl	8012dac <sbrk_aligned>
 8012e2e:	1c43      	adds	r3, r0, #1
 8012e30:	4604      	mov	r4, r0
 8012e32:	d158      	bne.n	8012ee6 <_malloc_r+0xf6>
 8012e34:	f8d8 4000 	ldr.w	r4, [r8]
 8012e38:	4627      	mov	r7, r4
 8012e3a:	2f00      	cmp	r7, #0
 8012e3c:	d143      	bne.n	8012ec6 <_malloc_r+0xd6>
 8012e3e:	2c00      	cmp	r4, #0
 8012e40:	d04b      	beq.n	8012eda <_malloc_r+0xea>
 8012e42:	6823      	ldr	r3, [r4, #0]
 8012e44:	4639      	mov	r1, r7
 8012e46:	4630      	mov	r0, r6
 8012e48:	eb04 0903 	add.w	r9, r4, r3
 8012e4c:	f001 fe46 	bl	8014adc <_sbrk_r>
 8012e50:	4581      	cmp	r9, r0
 8012e52:	d142      	bne.n	8012eda <_malloc_r+0xea>
 8012e54:	6821      	ldr	r1, [r4, #0]
 8012e56:	1a6d      	subs	r5, r5, r1
 8012e58:	4629      	mov	r1, r5
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f7ff ffa6 	bl	8012dac <sbrk_aligned>
 8012e60:	3001      	adds	r0, #1
 8012e62:	d03a      	beq.n	8012eda <_malloc_r+0xea>
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	442b      	add	r3, r5
 8012e68:	6023      	str	r3, [r4, #0]
 8012e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8012e6e:	685a      	ldr	r2, [r3, #4]
 8012e70:	bb62      	cbnz	r2, 8012ecc <_malloc_r+0xdc>
 8012e72:	f8c8 7000 	str.w	r7, [r8]
 8012e76:	e00f      	b.n	8012e98 <_malloc_r+0xa8>
 8012e78:	6822      	ldr	r2, [r4, #0]
 8012e7a:	1b52      	subs	r2, r2, r5
 8012e7c:	d420      	bmi.n	8012ec0 <_malloc_r+0xd0>
 8012e7e:	2a0b      	cmp	r2, #11
 8012e80:	d917      	bls.n	8012eb2 <_malloc_r+0xc2>
 8012e82:	1961      	adds	r1, r4, r5
 8012e84:	42a3      	cmp	r3, r4
 8012e86:	6025      	str	r5, [r4, #0]
 8012e88:	bf18      	it	ne
 8012e8a:	6059      	strne	r1, [r3, #4]
 8012e8c:	6863      	ldr	r3, [r4, #4]
 8012e8e:	bf08      	it	eq
 8012e90:	f8c8 1000 	streq.w	r1, [r8]
 8012e94:	5162      	str	r2, [r4, r5]
 8012e96:	604b      	str	r3, [r1, #4]
 8012e98:	4630      	mov	r0, r6
 8012e9a:	f000 f82f 	bl	8012efc <__malloc_unlock>
 8012e9e:	f104 000b 	add.w	r0, r4, #11
 8012ea2:	1d23      	adds	r3, r4, #4
 8012ea4:	f020 0007 	bic.w	r0, r0, #7
 8012ea8:	1ac2      	subs	r2, r0, r3
 8012eaa:	bf1c      	itt	ne
 8012eac:	1a1b      	subne	r3, r3, r0
 8012eae:	50a3      	strne	r3, [r4, r2]
 8012eb0:	e7af      	b.n	8012e12 <_malloc_r+0x22>
 8012eb2:	6862      	ldr	r2, [r4, #4]
 8012eb4:	42a3      	cmp	r3, r4
 8012eb6:	bf0c      	ite	eq
 8012eb8:	f8c8 2000 	streq.w	r2, [r8]
 8012ebc:	605a      	strne	r2, [r3, #4]
 8012ebe:	e7eb      	b.n	8012e98 <_malloc_r+0xa8>
 8012ec0:	4623      	mov	r3, r4
 8012ec2:	6864      	ldr	r4, [r4, #4]
 8012ec4:	e7ae      	b.n	8012e24 <_malloc_r+0x34>
 8012ec6:	463c      	mov	r4, r7
 8012ec8:	687f      	ldr	r7, [r7, #4]
 8012eca:	e7b6      	b.n	8012e3a <_malloc_r+0x4a>
 8012ecc:	461a      	mov	r2, r3
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	42a3      	cmp	r3, r4
 8012ed2:	d1fb      	bne.n	8012ecc <_malloc_r+0xdc>
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	6053      	str	r3, [r2, #4]
 8012ed8:	e7de      	b.n	8012e98 <_malloc_r+0xa8>
 8012eda:	230c      	movs	r3, #12
 8012edc:	6033      	str	r3, [r6, #0]
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f000 f80c 	bl	8012efc <__malloc_unlock>
 8012ee4:	e794      	b.n	8012e10 <_malloc_r+0x20>
 8012ee6:	6005      	str	r5, [r0, #0]
 8012ee8:	e7d6      	b.n	8012e98 <_malloc_r+0xa8>
 8012eea:	bf00      	nop
 8012eec:	20002dc8 	.word	0x20002dc8

08012ef0 <__malloc_lock>:
 8012ef0:	4801      	ldr	r0, [pc, #4]	@ (8012ef8 <__malloc_lock+0x8>)
 8012ef2:	f7ff b8b4 	b.w	801205e <__retarget_lock_acquire_recursive>
 8012ef6:	bf00      	nop
 8012ef8:	20002dc0 	.word	0x20002dc0

08012efc <__malloc_unlock>:
 8012efc:	4801      	ldr	r0, [pc, #4]	@ (8012f04 <__malloc_unlock+0x8>)
 8012efe:	f7ff b8af 	b.w	8012060 <__retarget_lock_release_recursive>
 8012f02:	bf00      	nop
 8012f04:	20002dc0 	.word	0x20002dc0

08012f08 <_Balloc>:
 8012f08:	b570      	push	{r4, r5, r6, lr}
 8012f0a:	69c6      	ldr	r6, [r0, #28]
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	460d      	mov	r5, r1
 8012f10:	b976      	cbnz	r6, 8012f30 <_Balloc+0x28>
 8012f12:	2010      	movs	r0, #16
 8012f14:	f7ff ff42 	bl	8012d9c <malloc>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	61e0      	str	r0, [r4, #28]
 8012f1c:	b920      	cbnz	r0, 8012f28 <_Balloc+0x20>
 8012f1e:	4b18      	ldr	r3, [pc, #96]	@ (8012f80 <_Balloc+0x78>)
 8012f20:	4818      	ldr	r0, [pc, #96]	@ (8012f84 <_Balloc+0x7c>)
 8012f22:	216b      	movs	r1, #107	@ 0x6b
 8012f24:	f001 fe00 	bl	8014b28 <__assert_func>
 8012f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f2c:	6006      	str	r6, [r0, #0]
 8012f2e:	60c6      	str	r6, [r0, #12]
 8012f30:	69e6      	ldr	r6, [r4, #28]
 8012f32:	68f3      	ldr	r3, [r6, #12]
 8012f34:	b183      	cbz	r3, 8012f58 <_Balloc+0x50>
 8012f36:	69e3      	ldr	r3, [r4, #28]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f3e:	b9b8      	cbnz	r0, 8012f70 <_Balloc+0x68>
 8012f40:	2101      	movs	r1, #1
 8012f42:	fa01 f605 	lsl.w	r6, r1, r5
 8012f46:	1d72      	adds	r2, r6, #5
 8012f48:	0092      	lsls	r2, r2, #2
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f001 fe0a 	bl	8014b64 <_calloc_r>
 8012f50:	b160      	cbz	r0, 8012f6c <_Balloc+0x64>
 8012f52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012f56:	e00e      	b.n	8012f76 <_Balloc+0x6e>
 8012f58:	2221      	movs	r2, #33	@ 0x21
 8012f5a:	2104      	movs	r1, #4
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	f001 fe01 	bl	8014b64 <_calloc_r>
 8012f62:	69e3      	ldr	r3, [r4, #28]
 8012f64:	60f0      	str	r0, [r6, #12]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d1e4      	bne.n	8012f36 <_Balloc+0x2e>
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
 8012f70:	6802      	ldr	r2, [r0, #0]
 8012f72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f76:	2300      	movs	r3, #0
 8012f78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f7c:	e7f7      	b.n	8012f6e <_Balloc+0x66>
 8012f7e:	bf00      	nop
 8012f80:	08022f42 	.word	0x08022f42
 8012f84:	08022fc2 	.word	0x08022fc2

08012f88 <_Bfree>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	69c6      	ldr	r6, [r0, #28]
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	460c      	mov	r4, r1
 8012f90:	b976      	cbnz	r6, 8012fb0 <_Bfree+0x28>
 8012f92:	2010      	movs	r0, #16
 8012f94:	f7ff ff02 	bl	8012d9c <malloc>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	61e8      	str	r0, [r5, #28]
 8012f9c:	b920      	cbnz	r0, 8012fa8 <_Bfree+0x20>
 8012f9e:	4b09      	ldr	r3, [pc, #36]	@ (8012fc4 <_Bfree+0x3c>)
 8012fa0:	4809      	ldr	r0, [pc, #36]	@ (8012fc8 <_Bfree+0x40>)
 8012fa2:	218f      	movs	r1, #143	@ 0x8f
 8012fa4:	f001 fdc0 	bl	8014b28 <__assert_func>
 8012fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fac:	6006      	str	r6, [r0, #0]
 8012fae:	60c6      	str	r6, [r0, #12]
 8012fb0:	b13c      	cbz	r4, 8012fc2 <_Bfree+0x3a>
 8012fb2:	69eb      	ldr	r3, [r5, #28]
 8012fb4:	6862      	ldr	r2, [r4, #4]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fbc:	6021      	str	r1, [r4, #0]
 8012fbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012fc2:	bd70      	pop	{r4, r5, r6, pc}
 8012fc4:	08022f42 	.word	0x08022f42
 8012fc8:	08022fc2 	.word	0x08022fc2

08012fcc <__multadd>:
 8012fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd0:	690d      	ldr	r5, [r1, #16]
 8012fd2:	4607      	mov	r7, r0
 8012fd4:	460c      	mov	r4, r1
 8012fd6:	461e      	mov	r6, r3
 8012fd8:	f101 0c14 	add.w	ip, r1, #20
 8012fdc:	2000      	movs	r0, #0
 8012fde:	f8dc 3000 	ldr.w	r3, [ip]
 8012fe2:	b299      	uxth	r1, r3
 8012fe4:	fb02 6101 	mla	r1, r2, r1, r6
 8012fe8:	0c1e      	lsrs	r6, r3, #16
 8012fea:	0c0b      	lsrs	r3, r1, #16
 8012fec:	fb02 3306 	mla	r3, r2, r6, r3
 8012ff0:	b289      	uxth	r1, r1
 8012ff2:	3001      	adds	r0, #1
 8012ff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ff8:	4285      	cmp	r5, r0
 8012ffa:	f84c 1b04 	str.w	r1, [ip], #4
 8012ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013002:	dcec      	bgt.n	8012fde <__multadd+0x12>
 8013004:	b30e      	cbz	r6, 801304a <__multadd+0x7e>
 8013006:	68a3      	ldr	r3, [r4, #8]
 8013008:	42ab      	cmp	r3, r5
 801300a:	dc19      	bgt.n	8013040 <__multadd+0x74>
 801300c:	6861      	ldr	r1, [r4, #4]
 801300e:	4638      	mov	r0, r7
 8013010:	3101      	adds	r1, #1
 8013012:	f7ff ff79 	bl	8012f08 <_Balloc>
 8013016:	4680      	mov	r8, r0
 8013018:	b928      	cbnz	r0, 8013026 <__multadd+0x5a>
 801301a:	4602      	mov	r2, r0
 801301c:	4b0c      	ldr	r3, [pc, #48]	@ (8013050 <__multadd+0x84>)
 801301e:	480d      	ldr	r0, [pc, #52]	@ (8013054 <__multadd+0x88>)
 8013020:	21ba      	movs	r1, #186	@ 0xba
 8013022:	f001 fd81 	bl	8014b28 <__assert_func>
 8013026:	6922      	ldr	r2, [r4, #16]
 8013028:	3202      	adds	r2, #2
 801302a:	f104 010c 	add.w	r1, r4, #12
 801302e:	0092      	lsls	r2, r2, #2
 8013030:	300c      	adds	r0, #12
 8013032:	f001 fd63 	bl	8014afc <memcpy>
 8013036:	4621      	mov	r1, r4
 8013038:	4638      	mov	r0, r7
 801303a:	f7ff ffa5 	bl	8012f88 <_Bfree>
 801303e:	4644      	mov	r4, r8
 8013040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013044:	3501      	adds	r5, #1
 8013046:	615e      	str	r6, [r3, #20]
 8013048:	6125      	str	r5, [r4, #16]
 801304a:	4620      	mov	r0, r4
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	08022fb1 	.word	0x08022fb1
 8013054:	08022fc2 	.word	0x08022fc2

08013058 <__s2b>:
 8013058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801305c:	460c      	mov	r4, r1
 801305e:	4615      	mov	r5, r2
 8013060:	461f      	mov	r7, r3
 8013062:	2209      	movs	r2, #9
 8013064:	3308      	adds	r3, #8
 8013066:	4606      	mov	r6, r0
 8013068:	fb93 f3f2 	sdiv	r3, r3, r2
 801306c:	2100      	movs	r1, #0
 801306e:	2201      	movs	r2, #1
 8013070:	429a      	cmp	r2, r3
 8013072:	db09      	blt.n	8013088 <__s2b+0x30>
 8013074:	4630      	mov	r0, r6
 8013076:	f7ff ff47 	bl	8012f08 <_Balloc>
 801307a:	b940      	cbnz	r0, 801308e <__s2b+0x36>
 801307c:	4602      	mov	r2, r0
 801307e:	4b19      	ldr	r3, [pc, #100]	@ (80130e4 <__s2b+0x8c>)
 8013080:	4819      	ldr	r0, [pc, #100]	@ (80130e8 <__s2b+0x90>)
 8013082:	21d3      	movs	r1, #211	@ 0xd3
 8013084:	f001 fd50 	bl	8014b28 <__assert_func>
 8013088:	0052      	lsls	r2, r2, #1
 801308a:	3101      	adds	r1, #1
 801308c:	e7f0      	b.n	8013070 <__s2b+0x18>
 801308e:	9b08      	ldr	r3, [sp, #32]
 8013090:	6143      	str	r3, [r0, #20]
 8013092:	2d09      	cmp	r5, #9
 8013094:	f04f 0301 	mov.w	r3, #1
 8013098:	6103      	str	r3, [r0, #16]
 801309a:	dd16      	ble.n	80130ca <__s2b+0x72>
 801309c:	f104 0909 	add.w	r9, r4, #9
 80130a0:	46c8      	mov	r8, r9
 80130a2:	442c      	add	r4, r5
 80130a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80130a8:	4601      	mov	r1, r0
 80130aa:	3b30      	subs	r3, #48	@ 0x30
 80130ac:	220a      	movs	r2, #10
 80130ae:	4630      	mov	r0, r6
 80130b0:	f7ff ff8c 	bl	8012fcc <__multadd>
 80130b4:	45a0      	cmp	r8, r4
 80130b6:	d1f5      	bne.n	80130a4 <__s2b+0x4c>
 80130b8:	f1a5 0408 	sub.w	r4, r5, #8
 80130bc:	444c      	add	r4, r9
 80130be:	1b2d      	subs	r5, r5, r4
 80130c0:	1963      	adds	r3, r4, r5
 80130c2:	42bb      	cmp	r3, r7
 80130c4:	db04      	blt.n	80130d0 <__s2b+0x78>
 80130c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ca:	340a      	adds	r4, #10
 80130cc:	2509      	movs	r5, #9
 80130ce:	e7f6      	b.n	80130be <__s2b+0x66>
 80130d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130d4:	4601      	mov	r1, r0
 80130d6:	3b30      	subs	r3, #48	@ 0x30
 80130d8:	220a      	movs	r2, #10
 80130da:	4630      	mov	r0, r6
 80130dc:	f7ff ff76 	bl	8012fcc <__multadd>
 80130e0:	e7ee      	b.n	80130c0 <__s2b+0x68>
 80130e2:	bf00      	nop
 80130e4:	08022fb1 	.word	0x08022fb1
 80130e8:	08022fc2 	.word	0x08022fc2

080130ec <__hi0bits>:
 80130ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80130f0:	4603      	mov	r3, r0
 80130f2:	bf36      	itet	cc
 80130f4:	0403      	lslcc	r3, r0, #16
 80130f6:	2000      	movcs	r0, #0
 80130f8:	2010      	movcc	r0, #16
 80130fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80130fe:	bf3c      	itt	cc
 8013100:	021b      	lslcc	r3, r3, #8
 8013102:	3008      	addcc	r0, #8
 8013104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013108:	bf3c      	itt	cc
 801310a:	011b      	lslcc	r3, r3, #4
 801310c:	3004      	addcc	r0, #4
 801310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013112:	bf3c      	itt	cc
 8013114:	009b      	lslcc	r3, r3, #2
 8013116:	3002      	addcc	r0, #2
 8013118:	2b00      	cmp	r3, #0
 801311a:	db05      	blt.n	8013128 <__hi0bits+0x3c>
 801311c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013120:	f100 0001 	add.w	r0, r0, #1
 8013124:	bf08      	it	eq
 8013126:	2020      	moveq	r0, #32
 8013128:	4770      	bx	lr

0801312a <__lo0bits>:
 801312a:	6803      	ldr	r3, [r0, #0]
 801312c:	4602      	mov	r2, r0
 801312e:	f013 0007 	ands.w	r0, r3, #7
 8013132:	d00b      	beq.n	801314c <__lo0bits+0x22>
 8013134:	07d9      	lsls	r1, r3, #31
 8013136:	d421      	bmi.n	801317c <__lo0bits+0x52>
 8013138:	0798      	lsls	r0, r3, #30
 801313a:	bf49      	itett	mi
 801313c:	085b      	lsrmi	r3, r3, #1
 801313e:	089b      	lsrpl	r3, r3, #2
 8013140:	2001      	movmi	r0, #1
 8013142:	6013      	strmi	r3, [r2, #0]
 8013144:	bf5c      	itt	pl
 8013146:	6013      	strpl	r3, [r2, #0]
 8013148:	2002      	movpl	r0, #2
 801314a:	4770      	bx	lr
 801314c:	b299      	uxth	r1, r3
 801314e:	b909      	cbnz	r1, 8013154 <__lo0bits+0x2a>
 8013150:	0c1b      	lsrs	r3, r3, #16
 8013152:	2010      	movs	r0, #16
 8013154:	b2d9      	uxtb	r1, r3
 8013156:	b909      	cbnz	r1, 801315c <__lo0bits+0x32>
 8013158:	3008      	adds	r0, #8
 801315a:	0a1b      	lsrs	r3, r3, #8
 801315c:	0719      	lsls	r1, r3, #28
 801315e:	bf04      	itt	eq
 8013160:	091b      	lsreq	r3, r3, #4
 8013162:	3004      	addeq	r0, #4
 8013164:	0799      	lsls	r1, r3, #30
 8013166:	bf04      	itt	eq
 8013168:	089b      	lsreq	r3, r3, #2
 801316a:	3002      	addeq	r0, #2
 801316c:	07d9      	lsls	r1, r3, #31
 801316e:	d403      	bmi.n	8013178 <__lo0bits+0x4e>
 8013170:	085b      	lsrs	r3, r3, #1
 8013172:	f100 0001 	add.w	r0, r0, #1
 8013176:	d003      	beq.n	8013180 <__lo0bits+0x56>
 8013178:	6013      	str	r3, [r2, #0]
 801317a:	4770      	bx	lr
 801317c:	2000      	movs	r0, #0
 801317e:	4770      	bx	lr
 8013180:	2020      	movs	r0, #32
 8013182:	4770      	bx	lr

08013184 <__i2b>:
 8013184:	b510      	push	{r4, lr}
 8013186:	460c      	mov	r4, r1
 8013188:	2101      	movs	r1, #1
 801318a:	f7ff febd 	bl	8012f08 <_Balloc>
 801318e:	4602      	mov	r2, r0
 8013190:	b928      	cbnz	r0, 801319e <__i2b+0x1a>
 8013192:	4b05      	ldr	r3, [pc, #20]	@ (80131a8 <__i2b+0x24>)
 8013194:	4805      	ldr	r0, [pc, #20]	@ (80131ac <__i2b+0x28>)
 8013196:	f240 1145 	movw	r1, #325	@ 0x145
 801319a:	f001 fcc5 	bl	8014b28 <__assert_func>
 801319e:	2301      	movs	r3, #1
 80131a0:	6144      	str	r4, [r0, #20]
 80131a2:	6103      	str	r3, [r0, #16]
 80131a4:	bd10      	pop	{r4, pc}
 80131a6:	bf00      	nop
 80131a8:	08022fb1 	.word	0x08022fb1
 80131ac:	08022fc2 	.word	0x08022fc2

080131b0 <__multiply>:
 80131b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b4:	4614      	mov	r4, r2
 80131b6:	690a      	ldr	r2, [r1, #16]
 80131b8:	6923      	ldr	r3, [r4, #16]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	bfa8      	it	ge
 80131be:	4623      	movge	r3, r4
 80131c0:	460f      	mov	r7, r1
 80131c2:	bfa4      	itt	ge
 80131c4:	460c      	movge	r4, r1
 80131c6:	461f      	movge	r7, r3
 80131c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80131cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80131d0:	68a3      	ldr	r3, [r4, #8]
 80131d2:	6861      	ldr	r1, [r4, #4]
 80131d4:	eb0a 0609 	add.w	r6, sl, r9
 80131d8:	42b3      	cmp	r3, r6
 80131da:	b085      	sub	sp, #20
 80131dc:	bfb8      	it	lt
 80131de:	3101      	addlt	r1, #1
 80131e0:	f7ff fe92 	bl	8012f08 <_Balloc>
 80131e4:	b930      	cbnz	r0, 80131f4 <__multiply+0x44>
 80131e6:	4602      	mov	r2, r0
 80131e8:	4b44      	ldr	r3, [pc, #272]	@ (80132fc <__multiply+0x14c>)
 80131ea:	4845      	ldr	r0, [pc, #276]	@ (8013300 <__multiply+0x150>)
 80131ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80131f0:	f001 fc9a 	bl	8014b28 <__assert_func>
 80131f4:	f100 0514 	add.w	r5, r0, #20
 80131f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80131fc:	462b      	mov	r3, r5
 80131fe:	2200      	movs	r2, #0
 8013200:	4543      	cmp	r3, r8
 8013202:	d321      	bcc.n	8013248 <__multiply+0x98>
 8013204:	f107 0114 	add.w	r1, r7, #20
 8013208:	f104 0214 	add.w	r2, r4, #20
 801320c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013210:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013214:	9302      	str	r3, [sp, #8]
 8013216:	1b13      	subs	r3, r2, r4
 8013218:	3b15      	subs	r3, #21
 801321a:	f023 0303 	bic.w	r3, r3, #3
 801321e:	3304      	adds	r3, #4
 8013220:	f104 0715 	add.w	r7, r4, #21
 8013224:	42ba      	cmp	r2, r7
 8013226:	bf38      	it	cc
 8013228:	2304      	movcc	r3, #4
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	9b02      	ldr	r3, [sp, #8]
 801322e:	9103      	str	r1, [sp, #12]
 8013230:	428b      	cmp	r3, r1
 8013232:	d80c      	bhi.n	801324e <__multiply+0x9e>
 8013234:	2e00      	cmp	r6, #0
 8013236:	dd03      	ble.n	8013240 <__multiply+0x90>
 8013238:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801323c:	2b00      	cmp	r3, #0
 801323e:	d05b      	beq.n	80132f8 <__multiply+0x148>
 8013240:	6106      	str	r6, [r0, #16]
 8013242:	b005      	add	sp, #20
 8013244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013248:	f843 2b04 	str.w	r2, [r3], #4
 801324c:	e7d8      	b.n	8013200 <__multiply+0x50>
 801324e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013252:	f1ba 0f00 	cmp.w	sl, #0
 8013256:	d024      	beq.n	80132a2 <__multiply+0xf2>
 8013258:	f104 0e14 	add.w	lr, r4, #20
 801325c:	46a9      	mov	r9, r5
 801325e:	f04f 0c00 	mov.w	ip, #0
 8013262:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013266:	f8d9 3000 	ldr.w	r3, [r9]
 801326a:	fa1f fb87 	uxth.w	fp, r7
 801326e:	b29b      	uxth	r3, r3
 8013270:	fb0a 330b 	mla	r3, sl, fp, r3
 8013274:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013278:	f8d9 7000 	ldr.w	r7, [r9]
 801327c:	4463      	add	r3, ip
 801327e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013282:	fb0a c70b 	mla	r7, sl, fp, ip
 8013286:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801328a:	b29b      	uxth	r3, r3
 801328c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013290:	4572      	cmp	r2, lr
 8013292:	f849 3b04 	str.w	r3, [r9], #4
 8013296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801329a:	d8e2      	bhi.n	8013262 <__multiply+0xb2>
 801329c:	9b01      	ldr	r3, [sp, #4]
 801329e:	f845 c003 	str.w	ip, [r5, r3]
 80132a2:	9b03      	ldr	r3, [sp, #12]
 80132a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80132a8:	3104      	adds	r1, #4
 80132aa:	f1b9 0f00 	cmp.w	r9, #0
 80132ae:	d021      	beq.n	80132f4 <__multiply+0x144>
 80132b0:	682b      	ldr	r3, [r5, #0]
 80132b2:	f104 0c14 	add.w	ip, r4, #20
 80132b6:	46ae      	mov	lr, r5
 80132b8:	f04f 0a00 	mov.w	sl, #0
 80132bc:	f8bc b000 	ldrh.w	fp, [ip]
 80132c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80132c4:	fb09 770b 	mla	r7, r9, fp, r7
 80132c8:	4457      	add	r7, sl
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132d0:	f84e 3b04 	str.w	r3, [lr], #4
 80132d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80132d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132dc:	f8be 3000 	ldrh.w	r3, [lr]
 80132e0:	fb09 330a 	mla	r3, r9, sl, r3
 80132e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80132e8:	4562      	cmp	r2, ip
 80132ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132ee:	d8e5      	bhi.n	80132bc <__multiply+0x10c>
 80132f0:	9f01      	ldr	r7, [sp, #4]
 80132f2:	51eb      	str	r3, [r5, r7]
 80132f4:	3504      	adds	r5, #4
 80132f6:	e799      	b.n	801322c <__multiply+0x7c>
 80132f8:	3e01      	subs	r6, #1
 80132fa:	e79b      	b.n	8013234 <__multiply+0x84>
 80132fc:	08022fb1 	.word	0x08022fb1
 8013300:	08022fc2 	.word	0x08022fc2

08013304 <__pow5mult>:
 8013304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013308:	4615      	mov	r5, r2
 801330a:	f012 0203 	ands.w	r2, r2, #3
 801330e:	4607      	mov	r7, r0
 8013310:	460e      	mov	r6, r1
 8013312:	d007      	beq.n	8013324 <__pow5mult+0x20>
 8013314:	4c25      	ldr	r4, [pc, #148]	@ (80133ac <__pow5mult+0xa8>)
 8013316:	3a01      	subs	r2, #1
 8013318:	2300      	movs	r3, #0
 801331a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801331e:	f7ff fe55 	bl	8012fcc <__multadd>
 8013322:	4606      	mov	r6, r0
 8013324:	10ad      	asrs	r5, r5, #2
 8013326:	d03d      	beq.n	80133a4 <__pow5mult+0xa0>
 8013328:	69fc      	ldr	r4, [r7, #28]
 801332a:	b97c      	cbnz	r4, 801334c <__pow5mult+0x48>
 801332c:	2010      	movs	r0, #16
 801332e:	f7ff fd35 	bl	8012d9c <malloc>
 8013332:	4602      	mov	r2, r0
 8013334:	61f8      	str	r0, [r7, #28]
 8013336:	b928      	cbnz	r0, 8013344 <__pow5mult+0x40>
 8013338:	4b1d      	ldr	r3, [pc, #116]	@ (80133b0 <__pow5mult+0xac>)
 801333a:	481e      	ldr	r0, [pc, #120]	@ (80133b4 <__pow5mult+0xb0>)
 801333c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013340:	f001 fbf2 	bl	8014b28 <__assert_func>
 8013344:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013348:	6004      	str	r4, [r0, #0]
 801334a:	60c4      	str	r4, [r0, #12]
 801334c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013350:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013354:	b94c      	cbnz	r4, 801336a <__pow5mult+0x66>
 8013356:	f240 2171 	movw	r1, #625	@ 0x271
 801335a:	4638      	mov	r0, r7
 801335c:	f7ff ff12 	bl	8013184 <__i2b>
 8013360:	2300      	movs	r3, #0
 8013362:	f8c8 0008 	str.w	r0, [r8, #8]
 8013366:	4604      	mov	r4, r0
 8013368:	6003      	str	r3, [r0, #0]
 801336a:	f04f 0900 	mov.w	r9, #0
 801336e:	07eb      	lsls	r3, r5, #31
 8013370:	d50a      	bpl.n	8013388 <__pow5mult+0x84>
 8013372:	4631      	mov	r1, r6
 8013374:	4622      	mov	r2, r4
 8013376:	4638      	mov	r0, r7
 8013378:	f7ff ff1a 	bl	80131b0 <__multiply>
 801337c:	4631      	mov	r1, r6
 801337e:	4680      	mov	r8, r0
 8013380:	4638      	mov	r0, r7
 8013382:	f7ff fe01 	bl	8012f88 <_Bfree>
 8013386:	4646      	mov	r6, r8
 8013388:	106d      	asrs	r5, r5, #1
 801338a:	d00b      	beq.n	80133a4 <__pow5mult+0xa0>
 801338c:	6820      	ldr	r0, [r4, #0]
 801338e:	b938      	cbnz	r0, 80133a0 <__pow5mult+0x9c>
 8013390:	4622      	mov	r2, r4
 8013392:	4621      	mov	r1, r4
 8013394:	4638      	mov	r0, r7
 8013396:	f7ff ff0b 	bl	80131b0 <__multiply>
 801339a:	6020      	str	r0, [r4, #0]
 801339c:	f8c0 9000 	str.w	r9, [r0]
 80133a0:	4604      	mov	r4, r0
 80133a2:	e7e4      	b.n	801336e <__pow5mult+0x6a>
 80133a4:	4630      	mov	r0, r6
 80133a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133aa:	bf00      	nop
 80133ac:	0802301c 	.word	0x0802301c
 80133b0:	08022f42 	.word	0x08022f42
 80133b4:	08022fc2 	.word	0x08022fc2

080133b8 <__lshift>:
 80133b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133bc:	460c      	mov	r4, r1
 80133be:	6849      	ldr	r1, [r1, #4]
 80133c0:	6923      	ldr	r3, [r4, #16]
 80133c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133c6:	68a3      	ldr	r3, [r4, #8]
 80133c8:	4607      	mov	r7, r0
 80133ca:	4691      	mov	r9, r2
 80133cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133d0:	f108 0601 	add.w	r6, r8, #1
 80133d4:	42b3      	cmp	r3, r6
 80133d6:	db0b      	blt.n	80133f0 <__lshift+0x38>
 80133d8:	4638      	mov	r0, r7
 80133da:	f7ff fd95 	bl	8012f08 <_Balloc>
 80133de:	4605      	mov	r5, r0
 80133e0:	b948      	cbnz	r0, 80133f6 <__lshift+0x3e>
 80133e2:	4602      	mov	r2, r0
 80133e4:	4b28      	ldr	r3, [pc, #160]	@ (8013488 <__lshift+0xd0>)
 80133e6:	4829      	ldr	r0, [pc, #164]	@ (801348c <__lshift+0xd4>)
 80133e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80133ec:	f001 fb9c 	bl	8014b28 <__assert_func>
 80133f0:	3101      	adds	r1, #1
 80133f2:	005b      	lsls	r3, r3, #1
 80133f4:	e7ee      	b.n	80133d4 <__lshift+0x1c>
 80133f6:	2300      	movs	r3, #0
 80133f8:	f100 0114 	add.w	r1, r0, #20
 80133fc:	f100 0210 	add.w	r2, r0, #16
 8013400:	4618      	mov	r0, r3
 8013402:	4553      	cmp	r3, sl
 8013404:	db33      	blt.n	801346e <__lshift+0xb6>
 8013406:	6920      	ldr	r0, [r4, #16]
 8013408:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801340c:	f104 0314 	add.w	r3, r4, #20
 8013410:	f019 091f 	ands.w	r9, r9, #31
 8013414:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013418:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801341c:	d02b      	beq.n	8013476 <__lshift+0xbe>
 801341e:	f1c9 0e20 	rsb	lr, r9, #32
 8013422:	468a      	mov	sl, r1
 8013424:	2200      	movs	r2, #0
 8013426:	6818      	ldr	r0, [r3, #0]
 8013428:	fa00 f009 	lsl.w	r0, r0, r9
 801342c:	4310      	orrs	r0, r2
 801342e:	f84a 0b04 	str.w	r0, [sl], #4
 8013432:	f853 2b04 	ldr.w	r2, [r3], #4
 8013436:	459c      	cmp	ip, r3
 8013438:	fa22 f20e 	lsr.w	r2, r2, lr
 801343c:	d8f3      	bhi.n	8013426 <__lshift+0x6e>
 801343e:	ebac 0304 	sub.w	r3, ip, r4
 8013442:	3b15      	subs	r3, #21
 8013444:	f023 0303 	bic.w	r3, r3, #3
 8013448:	3304      	adds	r3, #4
 801344a:	f104 0015 	add.w	r0, r4, #21
 801344e:	4584      	cmp	ip, r0
 8013450:	bf38      	it	cc
 8013452:	2304      	movcc	r3, #4
 8013454:	50ca      	str	r2, [r1, r3]
 8013456:	b10a      	cbz	r2, 801345c <__lshift+0xa4>
 8013458:	f108 0602 	add.w	r6, r8, #2
 801345c:	3e01      	subs	r6, #1
 801345e:	4638      	mov	r0, r7
 8013460:	612e      	str	r6, [r5, #16]
 8013462:	4621      	mov	r1, r4
 8013464:	f7ff fd90 	bl	8012f88 <_Bfree>
 8013468:	4628      	mov	r0, r5
 801346a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801346e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013472:	3301      	adds	r3, #1
 8013474:	e7c5      	b.n	8013402 <__lshift+0x4a>
 8013476:	3904      	subs	r1, #4
 8013478:	f853 2b04 	ldr.w	r2, [r3], #4
 801347c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013480:	459c      	cmp	ip, r3
 8013482:	d8f9      	bhi.n	8013478 <__lshift+0xc0>
 8013484:	e7ea      	b.n	801345c <__lshift+0xa4>
 8013486:	bf00      	nop
 8013488:	08022fb1 	.word	0x08022fb1
 801348c:	08022fc2 	.word	0x08022fc2

08013490 <__mcmp>:
 8013490:	690a      	ldr	r2, [r1, #16]
 8013492:	4603      	mov	r3, r0
 8013494:	6900      	ldr	r0, [r0, #16]
 8013496:	1a80      	subs	r0, r0, r2
 8013498:	b530      	push	{r4, r5, lr}
 801349a:	d10e      	bne.n	80134ba <__mcmp+0x2a>
 801349c:	3314      	adds	r3, #20
 801349e:	3114      	adds	r1, #20
 80134a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80134a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80134a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80134ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80134b0:	4295      	cmp	r5, r2
 80134b2:	d003      	beq.n	80134bc <__mcmp+0x2c>
 80134b4:	d205      	bcs.n	80134c2 <__mcmp+0x32>
 80134b6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ba:	bd30      	pop	{r4, r5, pc}
 80134bc:	42a3      	cmp	r3, r4
 80134be:	d3f3      	bcc.n	80134a8 <__mcmp+0x18>
 80134c0:	e7fb      	b.n	80134ba <__mcmp+0x2a>
 80134c2:	2001      	movs	r0, #1
 80134c4:	e7f9      	b.n	80134ba <__mcmp+0x2a>
	...

080134c8 <__mdiff>:
 80134c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	4689      	mov	r9, r1
 80134ce:	4606      	mov	r6, r0
 80134d0:	4611      	mov	r1, r2
 80134d2:	4648      	mov	r0, r9
 80134d4:	4614      	mov	r4, r2
 80134d6:	f7ff ffdb 	bl	8013490 <__mcmp>
 80134da:	1e05      	subs	r5, r0, #0
 80134dc:	d112      	bne.n	8013504 <__mdiff+0x3c>
 80134de:	4629      	mov	r1, r5
 80134e0:	4630      	mov	r0, r6
 80134e2:	f7ff fd11 	bl	8012f08 <_Balloc>
 80134e6:	4602      	mov	r2, r0
 80134e8:	b928      	cbnz	r0, 80134f6 <__mdiff+0x2e>
 80134ea:	4b3f      	ldr	r3, [pc, #252]	@ (80135e8 <__mdiff+0x120>)
 80134ec:	f240 2137 	movw	r1, #567	@ 0x237
 80134f0:	483e      	ldr	r0, [pc, #248]	@ (80135ec <__mdiff+0x124>)
 80134f2:	f001 fb19 	bl	8014b28 <__assert_func>
 80134f6:	2301      	movs	r3, #1
 80134f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80134fc:	4610      	mov	r0, r2
 80134fe:	b003      	add	sp, #12
 8013500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013504:	bfbc      	itt	lt
 8013506:	464b      	movlt	r3, r9
 8013508:	46a1      	movlt	r9, r4
 801350a:	4630      	mov	r0, r6
 801350c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013510:	bfba      	itte	lt
 8013512:	461c      	movlt	r4, r3
 8013514:	2501      	movlt	r5, #1
 8013516:	2500      	movge	r5, #0
 8013518:	f7ff fcf6 	bl	8012f08 <_Balloc>
 801351c:	4602      	mov	r2, r0
 801351e:	b918      	cbnz	r0, 8013528 <__mdiff+0x60>
 8013520:	4b31      	ldr	r3, [pc, #196]	@ (80135e8 <__mdiff+0x120>)
 8013522:	f240 2145 	movw	r1, #581	@ 0x245
 8013526:	e7e3      	b.n	80134f0 <__mdiff+0x28>
 8013528:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801352c:	6926      	ldr	r6, [r4, #16]
 801352e:	60c5      	str	r5, [r0, #12]
 8013530:	f109 0310 	add.w	r3, r9, #16
 8013534:	f109 0514 	add.w	r5, r9, #20
 8013538:	f104 0e14 	add.w	lr, r4, #20
 801353c:	f100 0b14 	add.w	fp, r0, #20
 8013540:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013544:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	46d9      	mov	r9, fp
 801354c:	f04f 0c00 	mov.w	ip, #0
 8013550:	9b01      	ldr	r3, [sp, #4]
 8013552:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013556:	f853 af04 	ldr.w	sl, [r3, #4]!
 801355a:	9301      	str	r3, [sp, #4]
 801355c:	fa1f f38a 	uxth.w	r3, sl
 8013560:	4619      	mov	r1, r3
 8013562:	b283      	uxth	r3, r0
 8013564:	1acb      	subs	r3, r1, r3
 8013566:	0c00      	lsrs	r0, r0, #16
 8013568:	4463      	add	r3, ip
 801356a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801356e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013572:	b29b      	uxth	r3, r3
 8013574:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013578:	4576      	cmp	r6, lr
 801357a:	f849 3b04 	str.w	r3, [r9], #4
 801357e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013582:	d8e5      	bhi.n	8013550 <__mdiff+0x88>
 8013584:	1b33      	subs	r3, r6, r4
 8013586:	3b15      	subs	r3, #21
 8013588:	f023 0303 	bic.w	r3, r3, #3
 801358c:	3415      	adds	r4, #21
 801358e:	3304      	adds	r3, #4
 8013590:	42a6      	cmp	r6, r4
 8013592:	bf38      	it	cc
 8013594:	2304      	movcc	r3, #4
 8013596:	441d      	add	r5, r3
 8013598:	445b      	add	r3, fp
 801359a:	461e      	mov	r6, r3
 801359c:	462c      	mov	r4, r5
 801359e:	4544      	cmp	r4, r8
 80135a0:	d30e      	bcc.n	80135c0 <__mdiff+0xf8>
 80135a2:	f108 0103 	add.w	r1, r8, #3
 80135a6:	1b49      	subs	r1, r1, r5
 80135a8:	f021 0103 	bic.w	r1, r1, #3
 80135ac:	3d03      	subs	r5, #3
 80135ae:	45a8      	cmp	r8, r5
 80135b0:	bf38      	it	cc
 80135b2:	2100      	movcc	r1, #0
 80135b4:	440b      	add	r3, r1
 80135b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135ba:	b191      	cbz	r1, 80135e2 <__mdiff+0x11a>
 80135bc:	6117      	str	r7, [r2, #16]
 80135be:	e79d      	b.n	80134fc <__mdiff+0x34>
 80135c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80135c4:	46e6      	mov	lr, ip
 80135c6:	0c08      	lsrs	r0, r1, #16
 80135c8:	fa1c fc81 	uxtah	ip, ip, r1
 80135cc:	4471      	add	r1, lr
 80135ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80135d2:	b289      	uxth	r1, r1
 80135d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80135d8:	f846 1b04 	str.w	r1, [r6], #4
 80135dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135e0:	e7dd      	b.n	801359e <__mdiff+0xd6>
 80135e2:	3f01      	subs	r7, #1
 80135e4:	e7e7      	b.n	80135b6 <__mdiff+0xee>
 80135e6:	bf00      	nop
 80135e8:	08022fb1 	.word	0x08022fb1
 80135ec:	08022fc2 	.word	0x08022fc2

080135f0 <__ulp>:
 80135f0:	b082      	sub	sp, #8
 80135f2:	ed8d 0b00 	vstr	d0, [sp]
 80135f6:	9a01      	ldr	r2, [sp, #4]
 80135f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013638 <__ulp+0x48>)
 80135fa:	4013      	ands	r3, r2
 80135fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013600:	2b00      	cmp	r3, #0
 8013602:	dc08      	bgt.n	8013616 <__ulp+0x26>
 8013604:	425b      	negs	r3, r3
 8013606:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801360a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801360e:	da04      	bge.n	801361a <__ulp+0x2a>
 8013610:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013614:	4113      	asrs	r3, r2
 8013616:	2200      	movs	r2, #0
 8013618:	e008      	b.n	801362c <__ulp+0x3c>
 801361a:	f1a2 0314 	sub.w	r3, r2, #20
 801361e:	2b1e      	cmp	r3, #30
 8013620:	bfda      	itte	le
 8013622:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013626:	40da      	lsrle	r2, r3
 8013628:	2201      	movgt	r2, #1
 801362a:	2300      	movs	r3, #0
 801362c:	4619      	mov	r1, r3
 801362e:	4610      	mov	r0, r2
 8013630:	ec41 0b10 	vmov	d0, r0, r1
 8013634:	b002      	add	sp, #8
 8013636:	4770      	bx	lr
 8013638:	7ff00000 	.word	0x7ff00000

0801363c <__b2d>:
 801363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013640:	6906      	ldr	r6, [r0, #16]
 8013642:	f100 0814 	add.w	r8, r0, #20
 8013646:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801364a:	1f37      	subs	r7, r6, #4
 801364c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013650:	4610      	mov	r0, r2
 8013652:	f7ff fd4b 	bl	80130ec <__hi0bits>
 8013656:	f1c0 0320 	rsb	r3, r0, #32
 801365a:	280a      	cmp	r0, #10
 801365c:	600b      	str	r3, [r1, #0]
 801365e:	491b      	ldr	r1, [pc, #108]	@ (80136cc <__b2d+0x90>)
 8013660:	dc15      	bgt.n	801368e <__b2d+0x52>
 8013662:	f1c0 0c0b 	rsb	ip, r0, #11
 8013666:	fa22 f30c 	lsr.w	r3, r2, ip
 801366a:	45b8      	cmp	r8, r7
 801366c:	ea43 0501 	orr.w	r5, r3, r1
 8013670:	bf34      	ite	cc
 8013672:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013676:	2300      	movcs	r3, #0
 8013678:	3015      	adds	r0, #21
 801367a:	fa02 f000 	lsl.w	r0, r2, r0
 801367e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013682:	4303      	orrs	r3, r0
 8013684:	461c      	mov	r4, r3
 8013686:	ec45 4b10 	vmov	d0, r4, r5
 801368a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801368e:	45b8      	cmp	r8, r7
 8013690:	bf3a      	itte	cc
 8013692:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013696:	f1a6 0708 	subcc.w	r7, r6, #8
 801369a:	2300      	movcs	r3, #0
 801369c:	380b      	subs	r0, #11
 801369e:	d012      	beq.n	80136c6 <__b2d+0x8a>
 80136a0:	f1c0 0120 	rsb	r1, r0, #32
 80136a4:	fa23 f401 	lsr.w	r4, r3, r1
 80136a8:	4082      	lsls	r2, r0
 80136aa:	4322      	orrs	r2, r4
 80136ac:	4547      	cmp	r7, r8
 80136ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80136b2:	bf8c      	ite	hi
 80136b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80136b8:	2200      	movls	r2, #0
 80136ba:	4083      	lsls	r3, r0
 80136bc:	40ca      	lsrs	r2, r1
 80136be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80136c2:	4313      	orrs	r3, r2
 80136c4:	e7de      	b.n	8013684 <__b2d+0x48>
 80136c6:	ea42 0501 	orr.w	r5, r2, r1
 80136ca:	e7db      	b.n	8013684 <__b2d+0x48>
 80136cc:	3ff00000 	.word	0x3ff00000

080136d0 <__d2b>:
 80136d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136d4:	460f      	mov	r7, r1
 80136d6:	2101      	movs	r1, #1
 80136d8:	ec59 8b10 	vmov	r8, r9, d0
 80136dc:	4616      	mov	r6, r2
 80136de:	f7ff fc13 	bl	8012f08 <_Balloc>
 80136e2:	4604      	mov	r4, r0
 80136e4:	b930      	cbnz	r0, 80136f4 <__d2b+0x24>
 80136e6:	4602      	mov	r2, r0
 80136e8:	4b23      	ldr	r3, [pc, #140]	@ (8013778 <__d2b+0xa8>)
 80136ea:	4824      	ldr	r0, [pc, #144]	@ (801377c <__d2b+0xac>)
 80136ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80136f0:	f001 fa1a 	bl	8014b28 <__assert_func>
 80136f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80136f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80136fc:	b10d      	cbz	r5, 8013702 <__d2b+0x32>
 80136fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	f1b8 0300 	subs.w	r3, r8, #0
 8013708:	d023      	beq.n	8013752 <__d2b+0x82>
 801370a:	4668      	mov	r0, sp
 801370c:	9300      	str	r3, [sp, #0]
 801370e:	f7ff fd0c 	bl	801312a <__lo0bits>
 8013712:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013716:	b1d0      	cbz	r0, 801374e <__d2b+0x7e>
 8013718:	f1c0 0320 	rsb	r3, r0, #32
 801371c:	fa02 f303 	lsl.w	r3, r2, r3
 8013720:	430b      	orrs	r3, r1
 8013722:	40c2      	lsrs	r2, r0
 8013724:	6163      	str	r3, [r4, #20]
 8013726:	9201      	str	r2, [sp, #4]
 8013728:	9b01      	ldr	r3, [sp, #4]
 801372a:	61a3      	str	r3, [r4, #24]
 801372c:	2b00      	cmp	r3, #0
 801372e:	bf0c      	ite	eq
 8013730:	2201      	moveq	r2, #1
 8013732:	2202      	movne	r2, #2
 8013734:	6122      	str	r2, [r4, #16]
 8013736:	b1a5      	cbz	r5, 8013762 <__d2b+0x92>
 8013738:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801373c:	4405      	add	r5, r0
 801373e:	603d      	str	r5, [r7, #0]
 8013740:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013744:	6030      	str	r0, [r6, #0]
 8013746:	4620      	mov	r0, r4
 8013748:	b003      	add	sp, #12
 801374a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801374e:	6161      	str	r1, [r4, #20]
 8013750:	e7ea      	b.n	8013728 <__d2b+0x58>
 8013752:	a801      	add	r0, sp, #4
 8013754:	f7ff fce9 	bl	801312a <__lo0bits>
 8013758:	9b01      	ldr	r3, [sp, #4]
 801375a:	6163      	str	r3, [r4, #20]
 801375c:	3020      	adds	r0, #32
 801375e:	2201      	movs	r2, #1
 8013760:	e7e8      	b.n	8013734 <__d2b+0x64>
 8013762:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013766:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801376a:	6038      	str	r0, [r7, #0]
 801376c:	6918      	ldr	r0, [r3, #16]
 801376e:	f7ff fcbd 	bl	80130ec <__hi0bits>
 8013772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013776:	e7e5      	b.n	8013744 <__d2b+0x74>
 8013778:	08022fb1 	.word	0x08022fb1
 801377c:	08022fc2 	.word	0x08022fc2

08013780 <__ratio>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	b085      	sub	sp, #20
 8013786:	e9cd 1000 	strd	r1, r0, [sp]
 801378a:	a902      	add	r1, sp, #8
 801378c:	f7ff ff56 	bl	801363c <__b2d>
 8013790:	9800      	ldr	r0, [sp, #0]
 8013792:	a903      	add	r1, sp, #12
 8013794:	ec55 4b10 	vmov	r4, r5, d0
 8013798:	f7ff ff50 	bl	801363c <__b2d>
 801379c:	9b01      	ldr	r3, [sp, #4]
 801379e:	6919      	ldr	r1, [r3, #16]
 80137a0:	9b00      	ldr	r3, [sp, #0]
 80137a2:	691b      	ldr	r3, [r3, #16]
 80137a4:	1ac9      	subs	r1, r1, r3
 80137a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80137aa:	1a9b      	subs	r3, r3, r2
 80137ac:	ec5b ab10 	vmov	sl, fp, d0
 80137b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	bfce      	itee	gt
 80137b8:	462a      	movgt	r2, r5
 80137ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80137be:	465a      	movle	r2, fp
 80137c0:	462f      	mov	r7, r5
 80137c2:	46d9      	mov	r9, fp
 80137c4:	bfcc      	ite	gt
 80137c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80137ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80137ce:	464b      	mov	r3, r9
 80137d0:	4652      	mov	r2, sl
 80137d2:	4620      	mov	r0, r4
 80137d4:	4639      	mov	r1, r7
 80137d6:	f7ed f861 	bl	800089c <__aeabi_ddiv>
 80137da:	ec41 0b10 	vmov	d0, r0, r1
 80137de:	b005      	add	sp, #20
 80137e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137e4 <__copybits>:
 80137e4:	3901      	subs	r1, #1
 80137e6:	b570      	push	{r4, r5, r6, lr}
 80137e8:	1149      	asrs	r1, r1, #5
 80137ea:	6914      	ldr	r4, [r2, #16]
 80137ec:	3101      	adds	r1, #1
 80137ee:	f102 0314 	add.w	r3, r2, #20
 80137f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80137f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80137fa:	1f05      	subs	r5, r0, #4
 80137fc:	42a3      	cmp	r3, r4
 80137fe:	d30c      	bcc.n	801381a <__copybits+0x36>
 8013800:	1aa3      	subs	r3, r4, r2
 8013802:	3b11      	subs	r3, #17
 8013804:	f023 0303 	bic.w	r3, r3, #3
 8013808:	3211      	adds	r2, #17
 801380a:	42a2      	cmp	r2, r4
 801380c:	bf88      	it	hi
 801380e:	2300      	movhi	r3, #0
 8013810:	4418      	add	r0, r3
 8013812:	2300      	movs	r3, #0
 8013814:	4288      	cmp	r0, r1
 8013816:	d305      	bcc.n	8013824 <__copybits+0x40>
 8013818:	bd70      	pop	{r4, r5, r6, pc}
 801381a:	f853 6b04 	ldr.w	r6, [r3], #4
 801381e:	f845 6f04 	str.w	r6, [r5, #4]!
 8013822:	e7eb      	b.n	80137fc <__copybits+0x18>
 8013824:	f840 3b04 	str.w	r3, [r0], #4
 8013828:	e7f4      	b.n	8013814 <__copybits+0x30>

0801382a <__any_on>:
 801382a:	f100 0214 	add.w	r2, r0, #20
 801382e:	6900      	ldr	r0, [r0, #16]
 8013830:	114b      	asrs	r3, r1, #5
 8013832:	4298      	cmp	r0, r3
 8013834:	b510      	push	{r4, lr}
 8013836:	db11      	blt.n	801385c <__any_on+0x32>
 8013838:	dd0a      	ble.n	8013850 <__any_on+0x26>
 801383a:	f011 011f 	ands.w	r1, r1, #31
 801383e:	d007      	beq.n	8013850 <__any_on+0x26>
 8013840:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013844:	fa24 f001 	lsr.w	r0, r4, r1
 8013848:	fa00 f101 	lsl.w	r1, r0, r1
 801384c:	428c      	cmp	r4, r1
 801384e:	d10b      	bne.n	8013868 <__any_on+0x3e>
 8013850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013854:	4293      	cmp	r3, r2
 8013856:	d803      	bhi.n	8013860 <__any_on+0x36>
 8013858:	2000      	movs	r0, #0
 801385a:	bd10      	pop	{r4, pc}
 801385c:	4603      	mov	r3, r0
 801385e:	e7f7      	b.n	8013850 <__any_on+0x26>
 8013860:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013864:	2900      	cmp	r1, #0
 8013866:	d0f5      	beq.n	8013854 <__any_on+0x2a>
 8013868:	2001      	movs	r0, #1
 801386a:	e7f6      	b.n	801385a <__any_on+0x30>

0801386c <sulp>:
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	4604      	mov	r4, r0
 8013870:	460d      	mov	r5, r1
 8013872:	ec45 4b10 	vmov	d0, r4, r5
 8013876:	4616      	mov	r6, r2
 8013878:	f7ff feba 	bl	80135f0 <__ulp>
 801387c:	ec51 0b10 	vmov	r0, r1, d0
 8013880:	b17e      	cbz	r6, 80138a2 <sulp+0x36>
 8013882:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013886:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801388a:	2b00      	cmp	r3, #0
 801388c:	dd09      	ble.n	80138a2 <sulp+0x36>
 801388e:	051b      	lsls	r3, r3, #20
 8013890:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013894:	2400      	movs	r4, #0
 8013896:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801389a:	4622      	mov	r2, r4
 801389c:	462b      	mov	r3, r5
 801389e:	f7ec fed3 	bl	8000648 <__aeabi_dmul>
 80138a2:	ec41 0b10 	vmov	d0, r0, r1
 80138a6:	bd70      	pop	{r4, r5, r6, pc}

080138a8 <_strtod_l>:
 80138a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ac:	b09f      	sub	sp, #124	@ 0x7c
 80138ae:	460c      	mov	r4, r1
 80138b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80138b2:	2200      	movs	r2, #0
 80138b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80138b6:	9005      	str	r0, [sp, #20]
 80138b8:	f04f 0a00 	mov.w	sl, #0
 80138bc:	f04f 0b00 	mov.w	fp, #0
 80138c0:	460a      	mov	r2, r1
 80138c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80138c4:	7811      	ldrb	r1, [r2, #0]
 80138c6:	292b      	cmp	r1, #43	@ 0x2b
 80138c8:	d04a      	beq.n	8013960 <_strtod_l+0xb8>
 80138ca:	d838      	bhi.n	801393e <_strtod_l+0x96>
 80138cc:	290d      	cmp	r1, #13
 80138ce:	d832      	bhi.n	8013936 <_strtod_l+0x8e>
 80138d0:	2908      	cmp	r1, #8
 80138d2:	d832      	bhi.n	801393a <_strtod_l+0x92>
 80138d4:	2900      	cmp	r1, #0
 80138d6:	d03b      	beq.n	8013950 <_strtod_l+0xa8>
 80138d8:	2200      	movs	r2, #0
 80138da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80138de:	782a      	ldrb	r2, [r5, #0]
 80138e0:	2a30      	cmp	r2, #48	@ 0x30
 80138e2:	f040 80b3 	bne.w	8013a4c <_strtod_l+0x1a4>
 80138e6:	786a      	ldrb	r2, [r5, #1]
 80138e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80138ec:	2a58      	cmp	r2, #88	@ 0x58
 80138ee:	d16e      	bne.n	80139ce <_strtod_l+0x126>
 80138f0:	9302      	str	r3, [sp, #8]
 80138f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138f4:	9301      	str	r3, [sp, #4]
 80138f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	4a8e      	ldr	r2, [pc, #568]	@ (8013b34 <_strtod_l+0x28c>)
 80138fc:	9805      	ldr	r0, [sp, #20]
 80138fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013900:	a919      	add	r1, sp, #100	@ 0x64
 8013902:	f001 f9ab 	bl	8014c5c <__gethex>
 8013906:	f010 060f 	ands.w	r6, r0, #15
 801390a:	4604      	mov	r4, r0
 801390c:	d005      	beq.n	801391a <_strtod_l+0x72>
 801390e:	2e06      	cmp	r6, #6
 8013910:	d128      	bne.n	8013964 <_strtod_l+0xbc>
 8013912:	3501      	adds	r5, #1
 8013914:	2300      	movs	r3, #0
 8013916:	9519      	str	r5, [sp, #100]	@ 0x64
 8013918:	930b      	str	r3, [sp, #44]	@ 0x2c
 801391a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801391c:	2b00      	cmp	r3, #0
 801391e:	f040 858e 	bne.w	801443e <_strtod_l+0xb96>
 8013922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013924:	b1cb      	cbz	r3, 801395a <_strtod_l+0xb2>
 8013926:	4652      	mov	r2, sl
 8013928:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801392c:	ec43 2b10 	vmov	d0, r2, r3
 8013930:	b01f      	add	sp, #124	@ 0x7c
 8013932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013936:	2920      	cmp	r1, #32
 8013938:	d1ce      	bne.n	80138d8 <_strtod_l+0x30>
 801393a:	3201      	adds	r2, #1
 801393c:	e7c1      	b.n	80138c2 <_strtod_l+0x1a>
 801393e:	292d      	cmp	r1, #45	@ 0x2d
 8013940:	d1ca      	bne.n	80138d8 <_strtod_l+0x30>
 8013942:	2101      	movs	r1, #1
 8013944:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013946:	1c51      	adds	r1, r2, #1
 8013948:	9119      	str	r1, [sp, #100]	@ 0x64
 801394a:	7852      	ldrb	r2, [r2, #1]
 801394c:	2a00      	cmp	r2, #0
 801394e:	d1c5      	bne.n	80138dc <_strtod_l+0x34>
 8013950:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013952:	9419      	str	r4, [sp, #100]	@ 0x64
 8013954:	2b00      	cmp	r3, #0
 8013956:	f040 8570 	bne.w	801443a <_strtod_l+0xb92>
 801395a:	4652      	mov	r2, sl
 801395c:	465b      	mov	r3, fp
 801395e:	e7e5      	b.n	801392c <_strtod_l+0x84>
 8013960:	2100      	movs	r1, #0
 8013962:	e7ef      	b.n	8013944 <_strtod_l+0x9c>
 8013964:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013966:	b13a      	cbz	r2, 8013978 <_strtod_l+0xd0>
 8013968:	2135      	movs	r1, #53	@ 0x35
 801396a:	a81c      	add	r0, sp, #112	@ 0x70
 801396c:	f7ff ff3a 	bl	80137e4 <__copybits>
 8013970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013972:	9805      	ldr	r0, [sp, #20]
 8013974:	f7ff fb08 	bl	8012f88 <_Bfree>
 8013978:	3e01      	subs	r6, #1
 801397a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801397c:	2e04      	cmp	r6, #4
 801397e:	d806      	bhi.n	801398e <_strtod_l+0xe6>
 8013980:	e8df f006 	tbb	[pc, r6]
 8013984:	201d0314 	.word	0x201d0314
 8013988:	14          	.byte	0x14
 8013989:	00          	.byte	0x00
 801398a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801398e:	05e1      	lsls	r1, r4, #23
 8013990:	bf48      	it	mi
 8013992:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801399a:	0d1b      	lsrs	r3, r3, #20
 801399c:	051b      	lsls	r3, r3, #20
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d1bb      	bne.n	801391a <_strtod_l+0x72>
 80139a2:	f7fe fb31 	bl	8012008 <__errno>
 80139a6:	2322      	movs	r3, #34	@ 0x22
 80139a8:	6003      	str	r3, [r0, #0]
 80139aa:	e7b6      	b.n	801391a <_strtod_l+0x72>
 80139ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80139b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80139b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80139b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80139bc:	e7e7      	b.n	801398e <_strtod_l+0xe6>
 80139be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013b3c <_strtod_l+0x294>
 80139c2:	e7e4      	b.n	801398e <_strtod_l+0xe6>
 80139c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80139c8:	f04f 3aff 	mov.w	sl, #4294967295
 80139cc:	e7df      	b.n	801398e <_strtod_l+0xe6>
 80139ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139d0:	1c5a      	adds	r2, r3, #1
 80139d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80139d4:	785b      	ldrb	r3, [r3, #1]
 80139d6:	2b30      	cmp	r3, #48	@ 0x30
 80139d8:	d0f9      	beq.n	80139ce <_strtod_l+0x126>
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d09d      	beq.n	801391a <_strtod_l+0x72>
 80139de:	2301      	movs	r3, #1
 80139e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80139e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80139e6:	2300      	movs	r3, #0
 80139e8:	9308      	str	r3, [sp, #32]
 80139ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80139ec:	461f      	mov	r7, r3
 80139ee:	220a      	movs	r2, #10
 80139f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80139f2:	7805      	ldrb	r5, [r0, #0]
 80139f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80139f8:	b2d9      	uxtb	r1, r3
 80139fa:	2909      	cmp	r1, #9
 80139fc:	d928      	bls.n	8013a50 <_strtod_l+0x1a8>
 80139fe:	494e      	ldr	r1, [pc, #312]	@ (8013b38 <_strtod_l+0x290>)
 8013a00:	2201      	movs	r2, #1
 8013a02:	f001 f837 	bl	8014a74 <strncmp>
 8013a06:	2800      	cmp	r0, #0
 8013a08:	d032      	beq.n	8013a70 <_strtod_l+0x1c8>
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	462a      	mov	r2, r5
 8013a0e:	4681      	mov	r9, r0
 8013a10:	463d      	mov	r5, r7
 8013a12:	4603      	mov	r3, r0
 8013a14:	2a65      	cmp	r2, #101	@ 0x65
 8013a16:	d001      	beq.n	8013a1c <_strtod_l+0x174>
 8013a18:	2a45      	cmp	r2, #69	@ 0x45
 8013a1a:	d114      	bne.n	8013a46 <_strtod_l+0x19e>
 8013a1c:	b91d      	cbnz	r5, 8013a26 <_strtod_l+0x17e>
 8013a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a20:	4302      	orrs	r2, r0
 8013a22:	d095      	beq.n	8013950 <_strtod_l+0xa8>
 8013a24:	2500      	movs	r5, #0
 8013a26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013a28:	1c62      	adds	r2, r4, #1
 8013a2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a2c:	7862      	ldrb	r2, [r4, #1]
 8013a2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8013a30:	d077      	beq.n	8013b22 <_strtod_l+0x27a>
 8013a32:	2a2d      	cmp	r2, #45	@ 0x2d
 8013a34:	d07b      	beq.n	8013b2e <_strtod_l+0x286>
 8013a36:	f04f 0c00 	mov.w	ip, #0
 8013a3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013a3e:	2909      	cmp	r1, #9
 8013a40:	f240 8082 	bls.w	8013b48 <_strtod_l+0x2a0>
 8013a44:	9419      	str	r4, [sp, #100]	@ 0x64
 8013a46:	f04f 0800 	mov.w	r8, #0
 8013a4a:	e0a2      	b.n	8013b92 <_strtod_l+0x2ea>
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	e7c7      	b.n	80139e0 <_strtod_l+0x138>
 8013a50:	2f08      	cmp	r7, #8
 8013a52:	bfd5      	itete	le
 8013a54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8013a56:	9908      	ldrgt	r1, [sp, #32]
 8013a58:	fb02 3301 	mlale	r3, r2, r1, r3
 8013a5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013a60:	f100 0001 	add.w	r0, r0, #1
 8013a64:	bfd4      	ite	le
 8013a66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013a68:	9308      	strgt	r3, [sp, #32]
 8013a6a:	3701      	adds	r7, #1
 8013a6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8013a6e:	e7bf      	b.n	80139f0 <_strtod_l+0x148>
 8013a70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a72:	1c5a      	adds	r2, r3, #1
 8013a74:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a76:	785a      	ldrb	r2, [r3, #1]
 8013a78:	b37f      	cbz	r7, 8013ada <_strtod_l+0x232>
 8013a7a:	4681      	mov	r9, r0
 8013a7c:	463d      	mov	r5, r7
 8013a7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013a82:	2b09      	cmp	r3, #9
 8013a84:	d912      	bls.n	8013aac <_strtod_l+0x204>
 8013a86:	2301      	movs	r3, #1
 8013a88:	e7c4      	b.n	8013a14 <_strtod_l+0x16c>
 8013a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a8c:	1c5a      	adds	r2, r3, #1
 8013a8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a90:	785a      	ldrb	r2, [r3, #1]
 8013a92:	3001      	adds	r0, #1
 8013a94:	2a30      	cmp	r2, #48	@ 0x30
 8013a96:	d0f8      	beq.n	8013a8a <_strtod_l+0x1e2>
 8013a98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013a9c:	2b08      	cmp	r3, #8
 8013a9e:	f200 84d3 	bhi.w	8014448 <_strtod_l+0xba0>
 8013aa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013aa6:	4681      	mov	r9, r0
 8013aa8:	2000      	movs	r0, #0
 8013aaa:	4605      	mov	r5, r0
 8013aac:	3a30      	subs	r2, #48	@ 0x30
 8013aae:	f100 0301 	add.w	r3, r0, #1
 8013ab2:	d02a      	beq.n	8013b0a <_strtod_l+0x262>
 8013ab4:	4499      	add	r9, r3
 8013ab6:	eb00 0c05 	add.w	ip, r0, r5
 8013aba:	462b      	mov	r3, r5
 8013abc:	210a      	movs	r1, #10
 8013abe:	4563      	cmp	r3, ip
 8013ac0:	d10d      	bne.n	8013ade <_strtod_l+0x236>
 8013ac2:	1c69      	adds	r1, r5, #1
 8013ac4:	4401      	add	r1, r0
 8013ac6:	4428      	add	r0, r5
 8013ac8:	2808      	cmp	r0, #8
 8013aca:	dc16      	bgt.n	8013afa <_strtod_l+0x252>
 8013acc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013ace:	230a      	movs	r3, #10
 8013ad0:	fb03 2300 	mla	r3, r3, r0, r2
 8013ad4:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	e018      	b.n	8013b0c <_strtod_l+0x264>
 8013ada:	4638      	mov	r0, r7
 8013adc:	e7da      	b.n	8013a94 <_strtod_l+0x1ec>
 8013ade:	2b08      	cmp	r3, #8
 8013ae0:	f103 0301 	add.w	r3, r3, #1
 8013ae4:	dc03      	bgt.n	8013aee <_strtod_l+0x246>
 8013ae6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013ae8:	434e      	muls	r6, r1
 8013aea:	960a      	str	r6, [sp, #40]	@ 0x28
 8013aec:	e7e7      	b.n	8013abe <_strtod_l+0x216>
 8013aee:	2b10      	cmp	r3, #16
 8013af0:	bfde      	ittt	le
 8013af2:	9e08      	ldrle	r6, [sp, #32]
 8013af4:	434e      	mulle	r6, r1
 8013af6:	9608      	strle	r6, [sp, #32]
 8013af8:	e7e1      	b.n	8013abe <_strtod_l+0x216>
 8013afa:	280f      	cmp	r0, #15
 8013afc:	dceb      	bgt.n	8013ad6 <_strtod_l+0x22e>
 8013afe:	9808      	ldr	r0, [sp, #32]
 8013b00:	230a      	movs	r3, #10
 8013b02:	fb03 2300 	mla	r3, r3, r0, r2
 8013b06:	9308      	str	r3, [sp, #32]
 8013b08:	e7e5      	b.n	8013ad6 <_strtod_l+0x22e>
 8013b0a:	4629      	mov	r1, r5
 8013b0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b0e:	1c50      	adds	r0, r2, #1
 8013b10:	9019      	str	r0, [sp, #100]	@ 0x64
 8013b12:	7852      	ldrb	r2, [r2, #1]
 8013b14:	4618      	mov	r0, r3
 8013b16:	460d      	mov	r5, r1
 8013b18:	e7b1      	b.n	8013a7e <_strtod_l+0x1d6>
 8013b1a:	f04f 0900 	mov.w	r9, #0
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e77d      	b.n	8013a1e <_strtod_l+0x176>
 8013b22:	f04f 0c00 	mov.w	ip, #0
 8013b26:	1ca2      	adds	r2, r4, #2
 8013b28:	9219      	str	r2, [sp, #100]	@ 0x64
 8013b2a:	78a2      	ldrb	r2, [r4, #2]
 8013b2c:	e785      	b.n	8013a3a <_strtod_l+0x192>
 8013b2e:	f04f 0c01 	mov.w	ip, #1
 8013b32:	e7f8      	b.n	8013b26 <_strtod_l+0x27e>
 8013b34:	08023130 	.word	0x08023130
 8013b38:	08023118 	.word	0x08023118
 8013b3c:	7ff00000 	.word	0x7ff00000
 8013b40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b42:	1c51      	adds	r1, r2, #1
 8013b44:	9119      	str	r1, [sp, #100]	@ 0x64
 8013b46:	7852      	ldrb	r2, [r2, #1]
 8013b48:	2a30      	cmp	r2, #48	@ 0x30
 8013b4a:	d0f9      	beq.n	8013b40 <_strtod_l+0x298>
 8013b4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013b50:	2908      	cmp	r1, #8
 8013b52:	f63f af78 	bhi.w	8013a46 <_strtod_l+0x19e>
 8013b56:	3a30      	subs	r2, #48	@ 0x30
 8013b58:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013b5e:	f04f 080a 	mov.w	r8, #10
 8013b62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b64:	1c56      	adds	r6, r2, #1
 8013b66:	9619      	str	r6, [sp, #100]	@ 0x64
 8013b68:	7852      	ldrb	r2, [r2, #1]
 8013b6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013b6e:	f1be 0f09 	cmp.w	lr, #9
 8013b72:	d939      	bls.n	8013be8 <_strtod_l+0x340>
 8013b74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b76:	1a76      	subs	r6, r6, r1
 8013b78:	2e08      	cmp	r6, #8
 8013b7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013b7e:	dc03      	bgt.n	8013b88 <_strtod_l+0x2e0>
 8013b80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b82:	4588      	cmp	r8, r1
 8013b84:	bfa8      	it	ge
 8013b86:	4688      	movge	r8, r1
 8013b88:	f1bc 0f00 	cmp.w	ip, #0
 8013b8c:	d001      	beq.n	8013b92 <_strtod_l+0x2ea>
 8013b8e:	f1c8 0800 	rsb	r8, r8, #0
 8013b92:	2d00      	cmp	r5, #0
 8013b94:	d14e      	bne.n	8013c34 <_strtod_l+0x38c>
 8013b96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013b98:	4308      	orrs	r0, r1
 8013b9a:	f47f aebe 	bne.w	801391a <_strtod_l+0x72>
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	f47f aed6 	bne.w	8013950 <_strtod_l+0xa8>
 8013ba4:	2a69      	cmp	r2, #105	@ 0x69
 8013ba6:	d028      	beq.n	8013bfa <_strtod_l+0x352>
 8013ba8:	dc25      	bgt.n	8013bf6 <_strtod_l+0x34e>
 8013baa:	2a49      	cmp	r2, #73	@ 0x49
 8013bac:	d025      	beq.n	8013bfa <_strtod_l+0x352>
 8013bae:	2a4e      	cmp	r2, #78	@ 0x4e
 8013bb0:	f47f aece 	bne.w	8013950 <_strtod_l+0xa8>
 8013bb4:	499b      	ldr	r1, [pc, #620]	@ (8013e24 <_strtod_l+0x57c>)
 8013bb6:	a819      	add	r0, sp, #100	@ 0x64
 8013bb8:	f001 fa72 	bl	80150a0 <__match>
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	f43f aec7 	beq.w	8013950 <_strtod_l+0xa8>
 8013bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	2b28      	cmp	r3, #40	@ 0x28
 8013bc8:	d12e      	bne.n	8013c28 <_strtod_l+0x380>
 8013bca:	4997      	ldr	r1, [pc, #604]	@ (8013e28 <_strtod_l+0x580>)
 8013bcc:	aa1c      	add	r2, sp, #112	@ 0x70
 8013bce:	a819      	add	r0, sp, #100	@ 0x64
 8013bd0:	f001 fa7a 	bl	80150c8 <__hexnan>
 8013bd4:	2805      	cmp	r0, #5
 8013bd6:	d127      	bne.n	8013c28 <_strtod_l+0x380>
 8013bd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013bda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013bde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013be2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013be6:	e698      	b.n	801391a <_strtod_l+0x72>
 8013be8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013bea:	fb08 2101 	mla	r1, r8, r1, r2
 8013bee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013bf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8013bf4:	e7b5      	b.n	8013b62 <_strtod_l+0x2ba>
 8013bf6:	2a6e      	cmp	r2, #110	@ 0x6e
 8013bf8:	e7da      	b.n	8013bb0 <_strtod_l+0x308>
 8013bfa:	498c      	ldr	r1, [pc, #560]	@ (8013e2c <_strtod_l+0x584>)
 8013bfc:	a819      	add	r0, sp, #100	@ 0x64
 8013bfe:	f001 fa4f 	bl	80150a0 <__match>
 8013c02:	2800      	cmp	r0, #0
 8013c04:	f43f aea4 	beq.w	8013950 <_strtod_l+0xa8>
 8013c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c0a:	4989      	ldr	r1, [pc, #548]	@ (8013e30 <_strtod_l+0x588>)
 8013c0c:	3b01      	subs	r3, #1
 8013c0e:	a819      	add	r0, sp, #100	@ 0x64
 8013c10:	9319      	str	r3, [sp, #100]	@ 0x64
 8013c12:	f001 fa45 	bl	80150a0 <__match>
 8013c16:	b910      	cbnz	r0, 8013c1e <_strtod_l+0x376>
 8013c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8013c1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013e40 <_strtod_l+0x598>
 8013c22:	f04f 0a00 	mov.w	sl, #0
 8013c26:	e678      	b.n	801391a <_strtod_l+0x72>
 8013c28:	4882      	ldr	r0, [pc, #520]	@ (8013e34 <_strtod_l+0x58c>)
 8013c2a:	f000 ff75 	bl	8014b18 <nan>
 8013c2e:	ec5b ab10 	vmov	sl, fp, d0
 8013c32:	e672      	b.n	801391a <_strtod_l+0x72>
 8013c34:	eba8 0309 	sub.w	r3, r8, r9
 8013c38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c3c:	2f00      	cmp	r7, #0
 8013c3e:	bf08      	it	eq
 8013c40:	462f      	moveq	r7, r5
 8013c42:	2d10      	cmp	r5, #16
 8013c44:	462c      	mov	r4, r5
 8013c46:	bfa8      	it	ge
 8013c48:	2410      	movge	r4, #16
 8013c4a:	f7ec fc83 	bl	8000554 <__aeabi_ui2d>
 8013c4e:	2d09      	cmp	r5, #9
 8013c50:	4682      	mov	sl, r0
 8013c52:	468b      	mov	fp, r1
 8013c54:	dc13      	bgt.n	8013c7e <_strtod_l+0x3d6>
 8013c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f43f ae5e 	beq.w	801391a <_strtod_l+0x72>
 8013c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c60:	dd78      	ble.n	8013d54 <_strtod_l+0x4ac>
 8013c62:	2b16      	cmp	r3, #22
 8013c64:	dc5f      	bgt.n	8013d26 <_strtod_l+0x47e>
 8013c66:	4974      	ldr	r1, [pc, #464]	@ (8013e38 <_strtod_l+0x590>)
 8013c68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c70:	4652      	mov	r2, sl
 8013c72:	465b      	mov	r3, fp
 8013c74:	f7ec fce8 	bl	8000648 <__aeabi_dmul>
 8013c78:	4682      	mov	sl, r0
 8013c7a:	468b      	mov	fp, r1
 8013c7c:	e64d      	b.n	801391a <_strtod_l+0x72>
 8013c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8013e38 <_strtod_l+0x590>)
 8013c80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013c84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013c88:	f7ec fcde 	bl	8000648 <__aeabi_dmul>
 8013c8c:	4682      	mov	sl, r0
 8013c8e:	9808      	ldr	r0, [sp, #32]
 8013c90:	468b      	mov	fp, r1
 8013c92:	f7ec fc5f 	bl	8000554 <__aeabi_ui2d>
 8013c96:	4602      	mov	r2, r0
 8013c98:	460b      	mov	r3, r1
 8013c9a:	4650      	mov	r0, sl
 8013c9c:	4659      	mov	r1, fp
 8013c9e:	f7ec fb1d 	bl	80002dc <__adddf3>
 8013ca2:	2d0f      	cmp	r5, #15
 8013ca4:	4682      	mov	sl, r0
 8013ca6:	468b      	mov	fp, r1
 8013ca8:	ddd5      	ble.n	8013c56 <_strtod_l+0x3ae>
 8013caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cac:	1b2c      	subs	r4, r5, r4
 8013cae:	441c      	add	r4, r3
 8013cb0:	2c00      	cmp	r4, #0
 8013cb2:	f340 8096 	ble.w	8013de2 <_strtod_l+0x53a>
 8013cb6:	f014 030f 	ands.w	r3, r4, #15
 8013cba:	d00a      	beq.n	8013cd2 <_strtod_l+0x42a>
 8013cbc:	495e      	ldr	r1, [pc, #376]	@ (8013e38 <_strtod_l+0x590>)
 8013cbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013cc2:	4652      	mov	r2, sl
 8013cc4:	465b      	mov	r3, fp
 8013cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cca:	f7ec fcbd 	bl	8000648 <__aeabi_dmul>
 8013cce:	4682      	mov	sl, r0
 8013cd0:	468b      	mov	fp, r1
 8013cd2:	f034 040f 	bics.w	r4, r4, #15
 8013cd6:	d073      	beq.n	8013dc0 <_strtod_l+0x518>
 8013cd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013cdc:	dd48      	ble.n	8013d70 <_strtod_l+0x4c8>
 8013cde:	2400      	movs	r4, #0
 8013ce0:	46a0      	mov	r8, r4
 8013ce2:	940a      	str	r4, [sp, #40]	@ 0x28
 8013ce4:	46a1      	mov	r9, r4
 8013ce6:	9a05      	ldr	r2, [sp, #20]
 8013ce8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013e40 <_strtod_l+0x598>
 8013cec:	2322      	movs	r3, #34	@ 0x22
 8013cee:	6013      	str	r3, [r2, #0]
 8013cf0:	f04f 0a00 	mov.w	sl, #0
 8013cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	f43f ae0f 	beq.w	801391a <_strtod_l+0x72>
 8013cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013cfe:	9805      	ldr	r0, [sp, #20]
 8013d00:	f7ff f942 	bl	8012f88 <_Bfree>
 8013d04:	9805      	ldr	r0, [sp, #20]
 8013d06:	4649      	mov	r1, r9
 8013d08:	f7ff f93e 	bl	8012f88 <_Bfree>
 8013d0c:	9805      	ldr	r0, [sp, #20]
 8013d0e:	4641      	mov	r1, r8
 8013d10:	f7ff f93a 	bl	8012f88 <_Bfree>
 8013d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013d16:	9805      	ldr	r0, [sp, #20]
 8013d18:	f7ff f936 	bl	8012f88 <_Bfree>
 8013d1c:	9805      	ldr	r0, [sp, #20]
 8013d1e:	4621      	mov	r1, r4
 8013d20:	f7ff f932 	bl	8012f88 <_Bfree>
 8013d24:	e5f9      	b.n	801391a <_strtod_l+0x72>
 8013d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	dbbc      	blt.n	8013caa <_strtod_l+0x402>
 8013d30:	4c41      	ldr	r4, [pc, #260]	@ (8013e38 <_strtod_l+0x590>)
 8013d32:	f1c5 050f 	rsb	r5, r5, #15
 8013d36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013d3a:	4652      	mov	r2, sl
 8013d3c:	465b      	mov	r3, fp
 8013d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d42:	f7ec fc81 	bl	8000648 <__aeabi_dmul>
 8013d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d48:	1b5d      	subs	r5, r3, r5
 8013d4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013d4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013d52:	e78f      	b.n	8013c74 <_strtod_l+0x3cc>
 8013d54:	3316      	adds	r3, #22
 8013d56:	dba8      	blt.n	8013caa <_strtod_l+0x402>
 8013d58:	4b37      	ldr	r3, [pc, #220]	@ (8013e38 <_strtod_l+0x590>)
 8013d5a:	eba9 0808 	sub.w	r8, r9, r8
 8013d5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013d62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013d66:	4650      	mov	r0, sl
 8013d68:	4659      	mov	r1, fp
 8013d6a:	f7ec fd97 	bl	800089c <__aeabi_ddiv>
 8013d6e:	e783      	b.n	8013c78 <_strtod_l+0x3d0>
 8013d70:	4b32      	ldr	r3, [pc, #200]	@ (8013e3c <_strtod_l+0x594>)
 8013d72:	9308      	str	r3, [sp, #32]
 8013d74:	2300      	movs	r3, #0
 8013d76:	1124      	asrs	r4, r4, #4
 8013d78:	4650      	mov	r0, sl
 8013d7a:	4659      	mov	r1, fp
 8013d7c:	461e      	mov	r6, r3
 8013d7e:	2c01      	cmp	r4, #1
 8013d80:	dc21      	bgt.n	8013dc6 <_strtod_l+0x51e>
 8013d82:	b10b      	cbz	r3, 8013d88 <_strtod_l+0x4e0>
 8013d84:	4682      	mov	sl, r0
 8013d86:	468b      	mov	fp, r1
 8013d88:	492c      	ldr	r1, [pc, #176]	@ (8013e3c <_strtod_l+0x594>)
 8013d8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013d8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013d92:	4652      	mov	r2, sl
 8013d94:	465b      	mov	r3, fp
 8013d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d9a:	f7ec fc55 	bl	8000648 <__aeabi_dmul>
 8013d9e:	4b28      	ldr	r3, [pc, #160]	@ (8013e40 <_strtod_l+0x598>)
 8013da0:	460a      	mov	r2, r1
 8013da2:	400b      	ands	r3, r1
 8013da4:	4927      	ldr	r1, [pc, #156]	@ (8013e44 <_strtod_l+0x59c>)
 8013da6:	428b      	cmp	r3, r1
 8013da8:	4682      	mov	sl, r0
 8013daa:	d898      	bhi.n	8013cde <_strtod_l+0x436>
 8013dac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013db0:	428b      	cmp	r3, r1
 8013db2:	bf86      	itte	hi
 8013db4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013e48 <_strtod_l+0x5a0>
 8013db8:	f04f 3aff 	movhi.w	sl, #4294967295
 8013dbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	9308      	str	r3, [sp, #32]
 8013dc4:	e07a      	b.n	8013ebc <_strtod_l+0x614>
 8013dc6:	07e2      	lsls	r2, r4, #31
 8013dc8:	d505      	bpl.n	8013dd6 <_strtod_l+0x52e>
 8013dca:	9b08      	ldr	r3, [sp, #32]
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7ec fc3a 	bl	8000648 <__aeabi_dmul>
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	9a08      	ldr	r2, [sp, #32]
 8013dd8:	3208      	adds	r2, #8
 8013dda:	3601      	adds	r6, #1
 8013ddc:	1064      	asrs	r4, r4, #1
 8013dde:	9208      	str	r2, [sp, #32]
 8013de0:	e7cd      	b.n	8013d7e <_strtod_l+0x4d6>
 8013de2:	d0ed      	beq.n	8013dc0 <_strtod_l+0x518>
 8013de4:	4264      	negs	r4, r4
 8013de6:	f014 020f 	ands.w	r2, r4, #15
 8013dea:	d00a      	beq.n	8013e02 <_strtod_l+0x55a>
 8013dec:	4b12      	ldr	r3, [pc, #72]	@ (8013e38 <_strtod_l+0x590>)
 8013dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013df2:	4650      	mov	r0, sl
 8013df4:	4659      	mov	r1, fp
 8013df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfa:	f7ec fd4f 	bl	800089c <__aeabi_ddiv>
 8013dfe:	4682      	mov	sl, r0
 8013e00:	468b      	mov	fp, r1
 8013e02:	1124      	asrs	r4, r4, #4
 8013e04:	d0dc      	beq.n	8013dc0 <_strtod_l+0x518>
 8013e06:	2c1f      	cmp	r4, #31
 8013e08:	dd20      	ble.n	8013e4c <_strtod_l+0x5a4>
 8013e0a:	2400      	movs	r4, #0
 8013e0c:	46a0      	mov	r8, r4
 8013e0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8013e10:	46a1      	mov	r9, r4
 8013e12:	9a05      	ldr	r2, [sp, #20]
 8013e14:	2322      	movs	r3, #34	@ 0x22
 8013e16:	f04f 0a00 	mov.w	sl, #0
 8013e1a:	f04f 0b00 	mov.w	fp, #0
 8013e1e:	6013      	str	r3, [r2, #0]
 8013e20:	e768      	b.n	8013cf4 <_strtod_l+0x44c>
 8013e22:	bf00      	nop
 8013e24:	08022f09 	.word	0x08022f09
 8013e28:	0802311c 	.word	0x0802311c
 8013e2c:	08022f01 	.word	0x08022f01
 8013e30:	08022f38 	.word	0x08022f38
 8013e34:	080232c5 	.word	0x080232c5
 8013e38:	08023050 	.word	0x08023050
 8013e3c:	08023028 	.word	0x08023028
 8013e40:	7ff00000 	.word	0x7ff00000
 8013e44:	7ca00000 	.word	0x7ca00000
 8013e48:	7fefffff 	.word	0x7fefffff
 8013e4c:	f014 0310 	ands.w	r3, r4, #16
 8013e50:	bf18      	it	ne
 8013e52:	236a      	movne	r3, #106	@ 0x6a
 8013e54:	4ea9      	ldr	r6, [pc, #676]	@ (80140fc <_strtod_l+0x854>)
 8013e56:	9308      	str	r3, [sp, #32]
 8013e58:	4650      	mov	r0, sl
 8013e5a:	4659      	mov	r1, fp
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	07e2      	lsls	r2, r4, #31
 8013e60:	d504      	bpl.n	8013e6c <_strtod_l+0x5c4>
 8013e62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013e66:	f7ec fbef 	bl	8000648 <__aeabi_dmul>
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	1064      	asrs	r4, r4, #1
 8013e6e:	f106 0608 	add.w	r6, r6, #8
 8013e72:	d1f4      	bne.n	8013e5e <_strtod_l+0x5b6>
 8013e74:	b10b      	cbz	r3, 8013e7a <_strtod_l+0x5d2>
 8013e76:	4682      	mov	sl, r0
 8013e78:	468b      	mov	fp, r1
 8013e7a:	9b08      	ldr	r3, [sp, #32]
 8013e7c:	b1b3      	cbz	r3, 8013eac <_strtod_l+0x604>
 8013e7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013e82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	4659      	mov	r1, fp
 8013e8a:	dd0f      	ble.n	8013eac <_strtod_l+0x604>
 8013e8c:	2b1f      	cmp	r3, #31
 8013e8e:	dd55      	ble.n	8013f3c <_strtod_l+0x694>
 8013e90:	2b34      	cmp	r3, #52	@ 0x34
 8013e92:	bfde      	ittt	le
 8013e94:	f04f 33ff 	movle.w	r3, #4294967295
 8013e98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013e9c:	4093      	lslle	r3, r2
 8013e9e:	f04f 0a00 	mov.w	sl, #0
 8013ea2:	bfcc      	ite	gt
 8013ea4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013ea8:	ea03 0b01 	andle.w	fp, r3, r1
 8013eac:	2200      	movs	r2, #0
 8013eae:	2300      	movs	r3, #0
 8013eb0:	4650      	mov	r0, sl
 8013eb2:	4659      	mov	r1, fp
 8013eb4:	f7ec fe30 	bl	8000b18 <__aeabi_dcmpeq>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d1a6      	bne.n	8013e0a <_strtod_l+0x562>
 8013ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ebe:	9300      	str	r3, [sp, #0]
 8013ec0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ec2:	9805      	ldr	r0, [sp, #20]
 8013ec4:	462b      	mov	r3, r5
 8013ec6:	463a      	mov	r2, r7
 8013ec8:	f7ff f8c6 	bl	8013058 <__s2b>
 8013ecc:	900a      	str	r0, [sp, #40]	@ 0x28
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f af05 	beq.w	8013cde <_strtod_l+0x436>
 8013ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ed6:	2a00      	cmp	r2, #0
 8013ed8:	eba9 0308 	sub.w	r3, r9, r8
 8013edc:	bfa8      	it	ge
 8013ede:	2300      	movge	r3, #0
 8013ee0:	9312      	str	r3, [sp, #72]	@ 0x48
 8013ee2:	2400      	movs	r4, #0
 8013ee4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013ee8:	9316      	str	r3, [sp, #88]	@ 0x58
 8013eea:	46a0      	mov	r8, r4
 8013eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eee:	9805      	ldr	r0, [sp, #20]
 8013ef0:	6859      	ldr	r1, [r3, #4]
 8013ef2:	f7ff f809 	bl	8012f08 <_Balloc>
 8013ef6:	4681      	mov	r9, r0
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	f43f aef4 	beq.w	8013ce6 <_strtod_l+0x43e>
 8013efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f00:	691a      	ldr	r2, [r3, #16]
 8013f02:	3202      	adds	r2, #2
 8013f04:	f103 010c 	add.w	r1, r3, #12
 8013f08:	0092      	lsls	r2, r2, #2
 8013f0a:	300c      	adds	r0, #12
 8013f0c:	f000 fdf6 	bl	8014afc <memcpy>
 8013f10:	ec4b ab10 	vmov	d0, sl, fp
 8013f14:	9805      	ldr	r0, [sp, #20]
 8013f16:	aa1c      	add	r2, sp, #112	@ 0x70
 8013f18:	a91b      	add	r1, sp, #108	@ 0x6c
 8013f1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013f1e:	f7ff fbd7 	bl	80136d0 <__d2b>
 8013f22:	901a      	str	r0, [sp, #104]	@ 0x68
 8013f24:	2800      	cmp	r0, #0
 8013f26:	f43f aede 	beq.w	8013ce6 <_strtod_l+0x43e>
 8013f2a:	9805      	ldr	r0, [sp, #20]
 8013f2c:	2101      	movs	r1, #1
 8013f2e:	f7ff f929 	bl	8013184 <__i2b>
 8013f32:	4680      	mov	r8, r0
 8013f34:	b948      	cbnz	r0, 8013f4a <_strtod_l+0x6a2>
 8013f36:	f04f 0800 	mov.w	r8, #0
 8013f3a:	e6d4      	b.n	8013ce6 <_strtod_l+0x43e>
 8013f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f40:	fa02 f303 	lsl.w	r3, r2, r3
 8013f44:	ea03 0a0a 	and.w	sl, r3, sl
 8013f48:	e7b0      	b.n	8013eac <_strtod_l+0x604>
 8013f4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013f4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013f4e:	2d00      	cmp	r5, #0
 8013f50:	bfab      	itete	ge
 8013f52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013f54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013f56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013f58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013f5a:	bfac      	ite	ge
 8013f5c:	18ef      	addge	r7, r5, r3
 8013f5e:	1b5e      	sublt	r6, r3, r5
 8013f60:	9b08      	ldr	r3, [sp, #32]
 8013f62:	1aed      	subs	r5, r5, r3
 8013f64:	4415      	add	r5, r2
 8013f66:	4b66      	ldr	r3, [pc, #408]	@ (8014100 <_strtod_l+0x858>)
 8013f68:	3d01      	subs	r5, #1
 8013f6a:	429d      	cmp	r5, r3
 8013f6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013f70:	da50      	bge.n	8014014 <_strtod_l+0x76c>
 8013f72:	1b5b      	subs	r3, r3, r5
 8013f74:	2b1f      	cmp	r3, #31
 8013f76:	eba2 0203 	sub.w	r2, r2, r3
 8013f7a:	f04f 0101 	mov.w	r1, #1
 8013f7e:	dc3d      	bgt.n	8013ffc <_strtod_l+0x754>
 8013f80:	fa01 f303 	lsl.w	r3, r1, r3
 8013f84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013f86:	2300      	movs	r3, #0
 8013f88:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f8a:	18bd      	adds	r5, r7, r2
 8013f8c:	9b08      	ldr	r3, [sp, #32]
 8013f8e:	42af      	cmp	r7, r5
 8013f90:	4416      	add	r6, r2
 8013f92:	441e      	add	r6, r3
 8013f94:	463b      	mov	r3, r7
 8013f96:	bfa8      	it	ge
 8013f98:	462b      	movge	r3, r5
 8013f9a:	42b3      	cmp	r3, r6
 8013f9c:	bfa8      	it	ge
 8013f9e:	4633      	movge	r3, r6
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	bfc2      	ittt	gt
 8013fa4:	1aed      	subgt	r5, r5, r3
 8013fa6:	1af6      	subgt	r6, r6, r3
 8013fa8:	1aff      	subgt	r7, r7, r3
 8013faa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	dd16      	ble.n	8013fde <_strtod_l+0x736>
 8013fb0:	4641      	mov	r1, r8
 8013fb2:	9805      	ldr	r0, [sp, #20]
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	f7ff f9a5 	bl	8013304 <__pow5mult>
 8013fba:	4680      	mov	r8, r0
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	d0ba      	beq.n	8013f36 <_strtod_l+0x68e>
 8013fc0:	4601      	mov	r1, r0
 8013fc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013fc4:	9805      	ldr	r0, [sp, #20]
 8013fc6:	f7ff f8f3 	bl	80131b0 <__multiply>
 8013fca:	900e      	str	r0, [sp, #56]	@ 0x38
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	f43f ae8a 	beq.w	8013ce6 <_strtod_l+0x43e>
 8013fd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013fd4:	9805      	ldr	r0, [sp, #20]
 8013fd6:	f7fe ffd7 	bl	8012f88 <_Bfree>
 8013fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fde:	2d00      	cmp	r5, #0
 8013fe0:	dc1d      	bgt.n	801401e <_strtod_l+0x776>
 8013fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	dd23      	ble.n	8014030 <_strtod_l+0x788>
 8013fe8:	4649      	mov	r1, r9
 8013fea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013fec:	9805      	ldr	r0, [sp, #20]
 8013fee:	f7ff f989 	bl	8013304 <__pow5mult>
 8013ff2:	4681      	mov	r9, r0
 8013ff4:	b9e0      	cbnz	r0, 8014030 <_strtod_l+0x788>
 8013ff6:	f04f 0900 	mov.w	r9, #0
 8013ffa:	e674      	b.n	8013ce6 <_strtod_l+0x43e>
 8013ffc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8014000:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8014004:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8014008:	35e2      	adds	r5, #226	@ 0xe2
 801400a:	fa01 f305 	lsl.w	r3, r1, r5
 801400e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014010:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014012:	e7ba      	b.n	8013f8a <_strtod_l+0x6e2>
 8014014:	2300      	movs	r3, #0
 8014016:	9310      	str	r3, [sp, #64]	@ 0x40
 8014018:	2301      	movs	r3, #1
 801401a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801401c:	e7b5      	b.n	8013f8a <_strtod_l+0x6e2>
 801401e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014020:	9805      	ldr	r0, [sp, #20]
 8014022:	462a      	mov	r2, r5
 8014024:	f7ff f9c8 	bl	80133b8 <__lshift>
 8014028:	901a      	str	r0, [sp, #104]	@ 0x68
 801402a:	2800      	cmp	r0, #0
 801402c:	d1d9      	bne.n	8013fe2 <_strtod_l+0x73a>
 801402e:	e65a      	b.n	8013ce6 <_strtod_l+0x43e>
 8014030:	2e00      	cmp	r6, #0
 8014032:	dd07      	ble.n	8014044 <_strtod_l+0x79c>
 8014034:	4649      	mov	r1, r9
 8014036:	9805      	ldr	r0, [sp, #20]
 8014038:	4632      	mov	r2, r6
 801403a:	f7ff f9bd 	bl	80133b8 <__lshift>
 801403e:	4681      	mov	r9, r0
 8014040:	2800      	cmp	r0, #0
 8014042:	d0d8      	beq.n	8013ff6 <_strtod_l+0x74e>
 8014044:	2f00      	cmp	r7, #0
 8014046:	dd08      	ble.n	801405a <_strtod_l+0x7b2>
 8014048:	4641      	mov	r1, r8
 801404a:	9805      	ldr	r0, [sp, #20]
 801404c:	463a      	mov	r2, r7
 801404e:	f7ff f9b3 	bl	80133b8 <__lshift>
 8014052:	4680      	mov	r8, r0
 8014054:	2800      	cmp	r0, #0
 8014056:	f43f ae46 	beq.w	8013ce6 <_strtod_l+0x43e>
 801405a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801405c:	9805      	ldr	r0, [sp, #20]
 801405e:	464a      	mov	r2, r9
 8014060:	f7ff fa32 	bl	80134c8 <__mdiff>
 8014064:	4604      	mov	r4, r0
 8014066:	2800      	cmp	r0, #0
 8014068:	f43f ae3d 	beq.w	8013ce6 <_strtod_l+0x43e>
 801406c:	68c3      	ldr	r3, [r0, #12]
 801406e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014070:	2300      	movs	r3, #0
 8014072:	60c3      	str	r3, [r0, #12]
 8014074:	4641      	mov	r1, r8
 8014076:	f7ff fa0b 	bl	8013490 <__mcmp>
 801407a:	2800      	cmp	r0, #0
 801407c:	da46      	bge.n	801410c <_strtod_l+0x864>
 801407e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014080:	ea53 030a 	orrs.w	r3, r3, sl
 8014084:	d16c      	bne.n	8014160 <_strtod_l+0x8b8>
 8014086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801408a:	2b00      	cmp	r3, #0
 801408c:	d168      	bne.n	8014160 <_strtod_l+0x8b8>
 801408e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014092:	0d1b      	lsrs	r3, r3, #20
 8014094:	051b      	lsls	r3, r3, #20
 8014096:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801409a:	d961      	bls.n	8014160 <_strtod_l+0x8b8>
 801409c:	6963      	ldr	r3, [r4, #20]
 801409e:	b913      	cbnz	r3, 80140a6 <_strtod_l+0x7fe>
 80140a0:	6923      	ldr	r3, [r4, #16]
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	dd5c      	ble.n	8014160 <_strtod_l+0x8b8>
 80140a6:	4621      	mov	r1, r4
 80140a8:	2201      	movs	r2, #1
 80140aa:	9805      	ldr	r0, [sp, #20]
 80140ac:	f7ff f984 	bl	80133b8 <__lshift>
 80140b0:	4641      	mov	r1, r8
 80140b2:	4604      	mov	r4, r0
 80140b4:	f7ff f9ec 	bl	8013490 <__mcmp>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	dd51      	ble.n	8014160 <_strtod_l+0x8b8>
 80140bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80140c0:	9a08      	ldr	r2, [sp, #32]
 80140c2:	0d1b      	lsrs	r3, r3, #20
 80140c4:	051b      	lsls	r3, r3, #20
 80140c6:	2a00      	cmp	r2, #0
 80140c8:	d06b      	beq.n	80141a2 <_strtod_l+0x8fa>
 80140ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80140ce:	d868      	bhi.n	80141a2 <_strtod_l+0x8fa>
 80140d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80140d4:	f67f ae9d 	bls.w	8013e12 <_strtod_l+0x56a>
 80140d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014104 <_strtod_l+0x85c>)
 80140da:	4650      	mov	r0, sl
 80140dc:	4659      	mov	r1, fp
 80140de:	2200      	movs	r2, #0
 80140e0:	f7ec fab2 	bl	8000648 <__aeabi_dmul>
 80140e4:	4b08      	ldr	r3, [pc, #32]	@ (8014108 <_strtod_l+0x860>)
 80140e6:	400b      	ands	r3, r1
 80140e8:	4682      	mov	sl, r0
 80140ea:	468b      	mov	fp, r1
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	f47f ae05 	bne.w	8013cfc <_strtod_l+0x454>
 80140f2:	9a05      	ldr	r2, [sp, #20]
 80140f4:	2322      	movs	r3, #34	@ 0x22
 80140f6:	6013      	str	r3, [r2, #0]
 80140f8:	e600      	b.n	8013cfc <_strtod_l+0x454>
 80140fa:	bf00      	nop
 80140fc:	08023148 	.word	0x08023148
 8014100:	fffffc02 	.word	0xfffffc02
 8014104:	39500000 	.word	0x39500000
 8014108:	7ff00000 	.word	0x7ff00000
 801410c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014110:	d165      	bne.n	80141de <_strtod_l+0x936>
 8014112:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014118:	b35a      	cbz	r2, 8014172 <_strtod_l+0x8ca>
 801411a:	4a9f      	ldr	r2, [pc, #636]	@ (8014398 <_strtod_l+0xaf0>)
 801411c:	4293      	cmp	r3, r2
 801411e:	d12b      	bne.n	8014178 <_strtod_l+0x8d0>
 8014120:	9b08      	ldr	r3, [sp, #32]
 8014122:	4651      	mov	r1, sl
 8014124:	b303      	cbz	r3, 8014168 <_strtod_l+0x8c0>
 8014126:	4b9d      	ldr	r3, [pc, #628]	@ (801439c <_strtod_l+0xaf4>)
 8014128:	465a      	mov	r2, fp
 801412a:	4013      	ands	r3, r2
 801412c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014130:	f04f 32ff 	mov.w	r2, #4294967295
 8014134:	d81b      	bhi.n	801416e <_strtod_l+0x8c6>
 8014136:	0d1b      	lsrs	r3, r3, #20
 8014138:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801413c:	fa02 f303 	lsl.w	r3, r2, r3
 8014140:	4299      	cmp	r1, r3
 8014142:	d119      	bne.n	8014178 <_strtod_l+0x8d0>
 8014144:	4b96      	ldr	r3, [pc, #600]	@ (80143a0 <_strtod_l+0xaf8>)
 8014146:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014148:	429a      	cmp	r2, r3
 801414a:	d102      	bne.n	8014152 <_strtod_l+0x8aa>
 801414c:	3101      	adds	r1, #1
 801414e:	f43f adca 	beq.w	8013ce6 <_strtod_l+0x43e>
 8014152:	4b92      	ldr	r3, [pc, #584]	@ (801439c <_strtod_l+0xaf4>)
 8014154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014156:	401a      	ands	r2, r3
 8014158:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801415c:	f04f 0a00 	mov.w	sl, #0
 8014160:	9b08      	ldr	r3, [sp, #32]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d1b8      	bne.n	80140d8 <_strtod_l+0x830>
 8014166:	e5c9      	b.n	8013cfc <_strtod_l+0x454>
 8014168:	f04f 33ff 	mov.w	r3, #4294967295
 801416c:	e7e8      	b.n	8014140 <_strtod_l+0x898>
 801416e:	4613      	mov	r3, r2
 8014170:	e7e6      	b.n	8014140 <_strtod_l+0x898>
 8014172:	ea53 030a 	orrs.w	r3, r3, sl
 8014176:	d0a1      	beq.n	80140bc <_strtod_l+0x814>
 8014178:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801417a:	b1db      	cbz	r3, 80141b4 <_strtod_l+0x90c>
 801417c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801417e:	4213      	tst	r3, r2
 8014180:	d0ee      	beq.n	8014160 <_strtod_l+0x8b8>
 8014182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014184:	9a08      	ldr	r2, [sp, #32]
 8014186:	4650      	mov	r0, sl
 8014188:	4659      	mov	r1, fp
 801418a:	b1bb      	cbz	r3, 80141bc <_strtod_l+0x914>
 801418c:	f7ff fb6e 	bl	801386c <sulp>
 8014190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014194:	ec53 2b10 	vmov	r2, r3, d0
 8014198:	f7ec f8a0 	bl	80002dc <__adddf3>
 801419c:	4682      	mov	sl, r0
 801419e:	468b      	mov	fp, r1
 80141a0:	e7de      	b.n	8014160 <_strtod_l+0x8b8>
 80141a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80141a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80141aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80141ae:	f04f 3aff 	mov.w	sl, #4294967295
 80141b2:	e7d5      	b.n	8014160 <_strtod_l+0x8b8>
 80141b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80141b6:	ea13 0f0a 	tst.w	r3, sl
 80141ba:	e7e1      	b.n	8014180 <_strtod_l+0x8d8>
 80141bc:	f7ff fb56 	bl	801386c <sulp>
 80141c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141c4:	ec53 2b10 	vmov	r2, r3, d0
 80141c8:	f7ec f886 	bl	80002d8 <__aeabi_dsub>
 80141cc:	2200      	movs	r2, #0
 80141ce:	2300      	movs	r3, #0
 80141d0:	4682      	mov	sl, r0
 80141d2:	468b      	mov	fp, r1
 80141d4:	f7ec fca0 	bl	8000b18 <__aeabi_dcmpeq>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d0c1      	beq.n	8014160 <_strtod_l+0x8b8>
 80141dc:	e619      	b.n	8013e12 <_strtod_l+0x56a>
 80141de:	4641      	mov	r1, r8
 80141e0:	4620      	mov	r0, r4
 80141e2:	f7ff facd 	bl	8013780 <__ratio>
 80141e6:	ec57 6b10 	vmov	r6, r7, d0
 80141ea:	2200      	movs	r2, #0
 80141ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80141f0:	4630      	mov	r0, r6
 80141f2:	4639      	mov	r1, r7
 80141f4:	f7ec fca4 	bl	8000b40 <__aeabi_dcmple>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d06f      	beq.n	80142dc <_strtod_l+0xa34>
 80141fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d17a      	bne.n	80142f8 <_strtod_l+0xa50>
 8014202:	f1ba 0f00 	cmp.w	sl, #0
 8014206:	d158      	bne.n	80142ba <_strtod_l+0xa12>
 8014208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801420a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801420e:	2b00      	cmp	r3, #0
 8014210:	d15a      	bne.n	80142c8 <_strtod_l+0xa20>
 8014212:	4b64      	ldr	r3, [pc, #400]	@ (80143a4 <_strtod_l+0xafc>)
 8014214:	2200      	movs	r2, #0
 8014216:	4630      	mov	r0, r6
 8014218:	4639      	mov	r1, r7
 801421a:	f7ec fc87 	bl	8000b2c <__aeabi_dcmplt>
 801421e:	2800      	cmp	r0, #0
 8014220:	d159      	bne.n	80142d6 <_strtod_l+0xa2e>
 8014222:	4630      	mov	r0, r6
 8014224:	4639      	mov	r1, r7
 8014226:	4b60      	ldr	r3, [pc, #384]	@ (80143a8 <_strtod_l+0xb00>)
 8014228:	2200      	movs	r2, #0
 801422a:	f7ec fa0d 	bl	8000648 <__aeabi_dmul>
 801422e:	4606      	mov	r6, r0
 8014230:	460f      	mov	r7, r1
 8014232:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014236:	9606      	str	r6, [sp, #24]
 8014238:	9307      	str	r3, [sp, #28]
 801423a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801423e:	4d57      	ldr	r5, [pc, #348]	@ (801439c <_strtod_l+0xaf4>)
 8014240:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014246:	401d      	ands	r5, r3
 8014248:	4b58      	ldr	r3, [pc, #352]	@ (80143ac <_strtod_l+0xb04>)
 801424a:	429d      	cmp	r5, r3
 801424c:	f040 80b2 	bne.w	80143b4 <_strtod_l+0xb0c>
 8014250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014252:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014256:	ec4b ab10 	vmov	d0, sl, fp
 801425a:	f7ff f9c9 	bl	80135f0 <__ulp>
 801425e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014262:	ec51 0b10 	vmov	r0, r1, d0
 8014266:	f7ec f9ef 	bl	8000648 <__aeabi_dmul>
 801426a:	4652      	mov	r2, sl
 801426c:	465b      	mov	r3, fp
 801426e:	f7ec f835 	bl	80002dc <__adddf3>
 8014272:	460b      	mov	r3, r1
 8014274:	4949      	ldr	r1, [pc, #292]	@ (801439c <_strtod_l+0xaf4>)
 8014276:	4a4e      	ldr	r2, [pc, #312]	@ (80143b0 <_strtod_l+0xb08>)
 8014278:	4019      	ands	r1, r3
 801427a:	4291      	cmp	r1, r2
 801427c:	4682      	mov	sl, r0
 801427e:	d942      	bls.n	8014306 <_strtod_l+0xa5e>
 8014280:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014282:	4b47      	ldr	r3, [pc, #284]	@ (80143a0 <_strtod_l+0xaf8>)
 8014284:	429a      	cmp	r2, r3
 8014286:	d103      	bne.n	8014290 <_strtod_l+0x9e8>
 8014288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801428a:	3301      	adds	r3, #1
 801428c:	f43f ad2b 	beq.w	8013ce6 <_strtod_l+0x43e>
 8014290:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80143a0 <_strtod_l+0xaf8>
 8014294:	f04f 3aff 	mov.w	sl, #4294967295
 8014298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801429a:	9805      	ldr	r0, [sp, #20]
 801429c:	f7fe fe74 	bl	8012f88 <_Bfree>
 80142a0:	9805      	ldr	r0, [sp, #20]
 80142a2:	4649      	mov	r1, r9
 80142a4:	f7fe fe70 	bl	8012f88 <_Bfree>
 80142a8:	9805      	ldr	r0, [sp, #20]
 80142aa:	4641      	mov	r1, r8
 80142ac:	f7fe fe6c 	bl	8012f88 <_Bfree>
 80142b0:	9805      	ldr	r0, [sp, #20]
 80142b2:	4621      	mov	r1, r4
 80142b4:	f7fe fe68 	bl	8012f88 <_Bfree>
 80142b8:	e618      	b.n	8013eec <_strtod_l+0x644>
 80142ba:	f1ba 0f01 	cmp.w	sl, #1
 80142be:	d103      	bne.n	80142c8 <_strtod_l+0xa20>
 80142c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	f43f ada5 	beq.w	8013e12 <_strtod_l+0x56a>
 80142c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014378 <_strtod_l+0xad0>
 80142cc:	4f35      	ldr	r7, [pc, #212]	@ (80143a4 <_strtod_l+0xafc>)
 80142ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142d2:	2600      	movs	r6, #0
 80142d4:	e7b1      	b.n	801423a <_strtod_l+0x992>
 80142d6:	4f34      	ldr	r7, [pc, #208]	@ (80143a8 <_strtod_l+0xb00>)
 80142d8:	2600      	movs	r6, #0
 80142da:	e7aa      	b.n	8014232 <_strtod_l+0x98a>
 80142dc:	4b32      	ldr	r3, [pc, #200]	@ (80143a8 <_strtod_l+0xb00>)
 80142de:	4630      	mov	r0, r6
 80142e0:	4639      	mov	r1, r7
 80142e2:	2200      	movs	r2, #0
 80142e4:	f7ec f9b0 	bl	8000648 <__aeabi_dmul>
 80142e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142ea:	4606      	mov	r6, r0
 80142ec:	460f      	mov	r7, r1
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d09f      	beq.n	8014232 <_strtod_l+0x98a>
 80142f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80142f6:	e7a0      	b.n	801423a <_strtod_l+0x992>
 80142f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014380 <_strtod_l+0xad8>
 80142fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014300:	ec57 6b17 	vmov	r6, r7, d7
 8014304:	e799      	b.n	801423a <_strtod_l+0x992>
 8014306:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801430a:	9b08      	ldr	r3, [sp, #32]
 801430c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1c1      	bne.n	8014298 <_strtod_l+0x9f0>
 8014314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014318:	0d1b      	lsrs	r3, r3, #20
 801431a:	051b      	lsls	r3, r3, #20
 801431c:	429d      	cmp	r5, r3
 801431e:	d1bb      	bne.n	8014298 <_strtod_l+0x9f0>
 8014320:	4630      	mov	r0, r6
 8014322:	4639      	mov	r1, r7
 8014324:	f7ec fcf0 	bl	8000d08 <__aeabi_d2lz>
 8014328:	f7ec f960 	bl	80005ec <__aeabi_l2d>
 801432c:	4602      	mov	r2, r0
 801432e:	460b      	mov	r3, r1
 8014330:	4630      	mov	r0, r6
 8014332:	4639      	mov	r1, r7
 8014334:	f7eb ffd0 	bl	80002d8 <__aeabi_dsub>
 8014338:	460b      	mov	r3, r1
 801433a:	4602      	mov	r2, r0
 801433c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014340:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014346:	ea46 060a 	orr.w	r6, r6, sl
 801434a:	431e      	orrs	r6, r3
 801434c:	d06f      	beq.n	801442e <_strtod_l+0xb86>
 801434e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014388 <_strtod_l+0xae0>)
 8014350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014354:	f7ec fbea 	bl	8000b2c <__aeabi_dcmplt>
 8014358:	2800      	cmp	r0, #0
 801435a:	f47f accf 	bne.w	8013cfc <_strtod_l+0x454>
 801435e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014390 <_strtod_l+0xae8>)
 8014360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014368:	f7ec fbfe 	bl	8000b68 <__aeabi_dcmpgt>
 801436c:	2800      	cmp	r0, #0
 801436e:	d093      	beq.n	8014298 <_strtod_l+0x9f0>
 8014370:	e4c4      	b.n	8013cfc <_strtod_l+0x454>
 8014372:	bf00      	nop
 8014374:	f3af 8000 	nop.w
 8014378:	00000000 	.word	0x00000000
 801437c:	bff00000 	.word	0xbff00000
 8014380:	00000000 	.word	0x00000000
 8014384:	3ff00000 	.word	0x3ff00000
 8014388:	94a03595 	.word	0x94a03595
 801438c:	3fdfffff 	.word	0x3fdfffff
 8014390:	35afe535 	.word	0x35afe535
 8014394:	3fe00000 	.word	0x3fe00000
 8014398:	000fffff 	.word	0x000fffff
 801439c:	7ff00000 	.word	0x7ff00000
 80143a0:	7fefffff 	.word	0x7fefffff
 80143a4:	3ff00000 	.word	0x3ff00000
 80143a8:	3fe00000 	.word	0x3fe00000
 80143ac:	7fe00000 	.word	0x7fe00000
 80143b0:	7c9fffff 	.word	0x7c9fffff
 80143b4:	9b08      	ldr	r3, [sp, #32]
 80143b6:	b323      	cbz	r3, 8014402 <_strtod_l+0xb5a>
 80143b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80143bc:	d821      	bhi.n	8014402 <_strtod_l+0xb5a>
 80143be:	a328      	add	r3, pc, #160	@ (adr r3, 8014460 <_strtod_l+0xbb8>)
 80143c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c4:	4630      	mov	r0, r6
 80143c6:	4639      	mov	r1, r7
 80143c8:	f7ec fbba 	bl	8000b40 <__aeabi_dcmple>
 80143cc:	b1a0      	cbz	r0, 80143f8 <_strtod_l+0xb50>
 80143ce:	4639      	mov	r1, r7
 80143d0:	4630      	mov	r0, r6
 80143d2:	f7ec fc11 	bl	8000bf8 <__aeabi_d2uiz>
 80143d6:	2801      	cmp	r0, #1
 80143d8:	bf38      	it	cc
 80143da:	2001      	movcc	r0, #1
 80143dc:	f7ec f8ba 	bl	8000554 <__aeabi_ui2d>
 80143e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143e2:	4606      	mov	r6, r0
 80143e4:	460f      	mov	r7, r1
 80143e6:	b9fb      	cbnz	r3, 8014428 <_strtod_l+0xb80>
 80143e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80143ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80143f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80143f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80143f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80143fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80143fe:	1b5b      	subs	r3, r3, r5
 8014400:	9311      	str	r3, [sp, #68]	@ 0x44
 8014402:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014406:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801440a:	f7ff f8f1 	bl	80135f0 <__ulp>
 801440e:	4650      	mov	r0, sl
 8014410:	ec53 2b10 	vmov	r2, r3, d0
 8014414:	4659      	mov	r1, fp
 8014416:	f7ec f917 	bl	8000648 <__aeabi_dmul>
 801441a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801441e:	f7eb ff5d 	bl	80002dc <__adddf3>
 8014422:	4682      	mov	sl, r0
 8014424:	468b      	mov	fp, r1
 8014426:	e770      	b.n	801430a <_strtod_l+0xa62>
 8014428:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801442c:	e7e0      	b.n	80143f0 <_strtod_l+0xb48>
 801442e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014468 <_strtod_l+0xbc0>)
 8014430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014434:	f7ec fb7a 	bl	8000b2c <__aeabi_dcmplt>
 8014438:	e798      	b.n	801436c <_strtod_l+0xac4>
 801443a:	2300      	movs	r3, #0
 801443c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801443e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014442:	6013      	str	r3, [r2, #0]
 8014444:	f7ff ba6d 	b.w	8013922 <_strtod_l+0x7a>
 8014448:	2a65      	cmp	r2, #101	@ 0x65
 801444a:	f43f ab66 	beq.w	8013b1a <_strtod_l+0x272>
 801444e:	2a45      	cmp	r2, #69	@ 0x45
 8014450:	f43f ab63 	beq.w	8013b1a <_strtod_l+0x272>
 8014454:	2301      	movs	r3, #1
 8014456:	f7ff bb9e 	b.w	8013b96 <_strtod_l+0x2ee>
 801445a:	bf00      	nop
 801445c:	f3af 8000 	nop.w
 8014460:	ffc00000 	.word	0xffc00000
 8014464:	41dfffff 	.word	0x41dfffff
 8014468:	94a03595 	.word	0x94a03595
 801446c:	3fcfffff 	.word	0x3fcfffff

08014470 <_strtod_r>:
 8014470:	4b01      	ldr	r3, [pc, #4]	@ (8014478 <_strtod_r+0x8>)
 8014472:	f7ff ba19 	b.w	80138a8 <_strtod_l>
 8014476:	bf00      	nop
 8014478:	200003ec 	.word	0x200003ec

0801447c <_strtol_l.constprop.0>:
 801447c:	2b24      	cmp	r3, #36	@ 0x24
 801447e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014482:	4686      	mov	lr, r0
 8014484:	4690      	mov	r8, r2
 8014486:	d801      	bhi.n	801448c <_strtol_l.constprop.0+0x10>
 8014488:	2b01      	cmp	r3, #1
 801448a:	d106      	bne.n	801449a <_strtol_l.constprop.0+0x1e>
 801448c:	f7fd fdbc 	bl	8012008 <__errno>
 8014490:	2316      	movs	r3, #22
 8014492:	6003      	str	r3, [r0, #0]
 8014494:	2000      	movs	r0, #0
 8014496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801449a:	4834      	ldr	r0, [pc, #208]	@ (801456c <_strtol_l.constprop.0+0xf0>)
 801449c:	460d      	mov	r5, r1
 801449e:	462a      	mov	r2, r5
 80144a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144a4:	5d06      	ldrb	r6, [r0, r4]
 80144a6:	f016 0608 	ands.w	r6, r6, #8
 80144aa:	d1f8      	bne.n	801449e <_strtol_l.constprop.0+0x22>
 80144ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80144ae:	d12d      	bne.n	801450c <_strtol_l.constprop.0+0x90>
 80144b0:	782c      	ldrb	r4, [r5, #0]
 80144b2:	2601      	movs	r6, #1
 80144b4:	1c95      	adds	r5, r2, #2
 80144b6:	f033 0210 	bics.w	r2, r3, #16
 80144ba:	d109      	bne.n	80144d0 <_strtol_l.constprop.0+0x54>
 80144bc:	2c30      	cmp	r4, #48	@ 0x30
 80144be:	d12a      	bne.n	8014516 <_strtol_l.constprop.0+0x9a>
 80144c0:	782a      	ldrb	r2, [r5, #0]
 80144c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80144c6:	2a58      	cmp	r2, #88	@ 0x58
 80144c8:	d125      	bne.n	8014516 <_strtol_l.constprop.0+0x9a>
 80144ca:	786c      	ldrb	r4, [r5, #1]
 80144cc:	2310      	movs	r3, #16
 80144ce:	3502      	adds	r5, #2
 80144d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80144d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80144d8:	2200      	movs	r2, #0
 80144da:	fbbc f9f3 	udiv	r9, ip, r3
 80144de:	4610      	mov	r0, r2
 80144e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80144e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80144e8:	2f09      	cmp	r7, #9
 80144ea:	d81b      	bhi.n	8014524 <_strtol_l.constprop.0+0xa8>
 80144ec:	463c      	mov	r4, r7
 80144ee:	42a3      	cmp	r3, r4
 80144f0:	dd27      	ble.n	8014542 <_strtol_l.constprop.0+0xc6>
 80144f2:	1c57      	adds	r7, r2, #1
 80144f4:	d007      	beq.n	8014506 <_strtol_l.constprop.0+0x8a>
 80144f6:	4581      	cmp	r9, r0
 80144f8:	d320      	bcc.n	801453c <_strtol_l.constprop.0+0xc0>
 80144fa:	d101      	bne.n	8014500 <_strtol_l.constprop.0+0x84>
 80144fc:	45a2      	cmp	sl, r4
 80144fe:	db1d      	blt.n	801453c <_strtol_l.constprop.0+0xc0>
 8014500:	fb00 4003 	mla	r0, r0, r3, r4
 8014504:	2201      	movs	r2, #1
 8014506:	f815 4b01 	ldrb.w	r4, [r5], #1
 801450a:	e7eb      	b.n	80144e4 <_strtol_l.constprop.0+0x68>
 801450c:	2c2b      	cmp	r4, #43	@ 0x2b
 801450e:	bf04      	itt	eq
 8014510:	782c      	ldrbeq	r4, [r5, #0]
 8014512:	1c95      	addeq	r5, r2, #2
 8014514:	e7cf      	b.n	80144b6 <_strtol_l.constprop.0+0x3a>
 8014516:	2b00      	cmp	r3, #0
 8014518:	d1da      	bne.n	80144d0 <_strtol_l.constprop.0+0x54>
 801451a:	2c30      	cmp	r4, #48	@ 0x30
 801451c:	bf0c      	ite	eq
 801451e:	2308      	moveq	r3, #8
 8014520:	230a      	movne	r3, #10
 8014522:	e7d5      	b.n	80144d0 <_strtol_l.constprop.0+0x54>
 8014524:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014528:	2f19      	cmp	r7, #25
 801452a:	d801      	bhi.n	8014530 <_strtol_l.constprop.0+0xb4>
 801452c:	3c37      	subs	r4, #55	@ 0x37
 801452e:	e7de      	b.n	80144ee <_strtol_l.constprop.0+0x72>
 8014530:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014534:	2f19      	cmp	r7, #25
 8014536:	d804      	bhi.n	8014542 <_strtol_l.constprop.0+0xc6>
 8014538:	3c57      	subs	r4, #87	@ 0x57
 801453a:	e7d8      	b.n	80144ee <_strtol_l.constprop.0+0x72>
 801453c:	f04f 32ff 	mov.w	r2, #4294967295
 8014540:	e7e1      	b.n	8014506 <_strtol_l.constprop.0+0x8a>
 8014542:	1c53      	adds	r3, r2, #1
 8014544:	d108      	bne.n	8014558 <_strtol_l.constprop.0+0xdc>
 8014546:	2322      	movs	r3, #34	@ 0x22
 8014548:	f8ce 3000 	str.w	r3, [lr]
 801454c:	4660      	mov	r0, ip
 801454e:	f1b8 0f00 	cmp.w	r8, #0
 8014552:	d0a0      	beq.n	8014496 <_strtol_l.constprop.0+0x1a>
 8014554:	1e69      	subs	r1, r5, #1
 8014556:	e006      	b.n	8014566 <_strtol_l.constprop.0+0xea>
 8014558:	b106      	cbz	r6, 801455c <_strtol_l.constprop.0+0xe0>
 801455a:	4240      	negs	r0, r0
 801455c:	f1b8 0f00 	cmp.w	r8, #0
 8014560:	d099      	beq.n	8014496 <_strtol_l.constprop.0+0x1a>
 8014562:	2a00      	cmp	r2, #0
 8014564:	d1f6      	bne.n	8014554 <_strtol_l.constprop.0+0xd8>
 8014566:	f8c8 1000 	str.w	r1, [r8]
 801456a:	e794      	b.n	8014496 <_strtol_l.constprop.0+0x1a>
 801456c:	08023171 	.word	0x08023171

08014570 <_strtol_r>:
 8014570:	f7ff bf84 	b.w	801447c <_strtol_l.constprop.0>

08014574 <__ssputs_r>:
 8014574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014578:	688e      	ldr	r6, [r1, #8]
 801457a:	461f      	mov	r7, r3
 801457c:	42be      	cmp	r6, r7
 801457e:	680b      	ldr	r3, [r1, #0]
 8014580:	4682      	mov	sl, r0
 8014582:	460c      	mov	r4, r1
 8014584:	4690      	mov	r8, r2
 8014586:	d82d      	bhi.n	80145e4 <__ssputs_r+0x70>
 8014588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801458c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014590:	d026      	beq.n	80145e0 <__ssputs_r+0x6c>
 8014592:	6965      	ldr	r5, [r4, #20]
 8014594:	6909      	ldr	r1, [r1, #16]
 8014596:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801459a:	eba3 0901 	sub.w	r9, r3, r1
 801459e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145a2:	1c7b      	adds	r3, r7, #1
 80145a4:	444b      	add	r3, r9
 80145a6:	106d      	asrs	r5, r5, #1
 80145a8:	429d      	cmp	r5, r3
 80145aa:	bf38      	it	cc
 80145ac:	461d      	movcc	r5, r3
 80145ae:	0553      	lsls	r3, r2, #21
 80145b0:	d527      	bpl.n	8014602 <__ssputs_r+0x8e>
 80145b2:	4629      	mov	r1, r5
 80145b4:	f7fe fc1c 	bl	8012df0 <_malloc_r>
 80145b8:	4606      	mov	r6, r0
 80145ba:	b360      	cbz	r0, 8014616 <__ssputs_r+0xa2>
 80145bc:	6921      	ldr	r1, [r4, #16]
 80145be:	464a      	mov	r2, r9
 80145c0:	f000 fa9c 	bl	8014afc <memcpy>
 80145c4:	89a3      	ldrh	r3, [r4, #12]
 80145c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80145ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145ce:	81a3      	strh	r3, [r4, #12]
 80145d0:	6126      	str	r6, [r4, #16]
 80145d2:	6165      	str	r5, [r4, #20]
 80145d4:	444e      	add	r6, r9
 80145d6:	eba5 0509 	sub.w	r5, r5, r9
 80145da:	6026      	str	r6, [r4, #0]
 80145dc:	60a5      	str	r5, [r4, #8]
 80145de:	463e      	mov	r6, r7
 80145e0:	42be      	cmp	r6, r7
 80145e2:	d900      	bls.n	80145e6 <__ssputs_r+0x72>
 80145e4:	463e      	mov	r6, r7
 80145e6:	6820      	ldr	r0, [r4, #0]
 80145e8:	4632      	mov	r2, r6
 80145ea:	4641      	mov	r1, r8
 80145ec:	f000 fa28 	bl	8014a40 <memmove>
 80145f0:	68a3      	ldr	r3, [r4, #8]
 80145f2:	1b9b      	subs	r3, r3, r6
 80145f4:	60a3      	str	r3, [r4, #8]
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	4433      	add	r3, r6
 80145fa:	6023      	str	r3, [r4, #0]
 80145fc:	2000      	movs	r0, #0
 80145fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014602:	462a      	mov	r2, r5
 8014604:	f000 fe0d 	bl	8015222 <_realloc_r>
 8014608:	4606      	mov	r6, r0
 801460a:	2800      	cmp	r0, #0
 801460c:	d1e0      	bne.n	80145d0 <__ssputs_r+0x5c>
 801460e:	6921      	ldr	r1, [r4, #16]
 8014610:	4650      	mov	r0, sl
 8014612:	f7fe fb79 	bl	8012d08 <_free_r>
 8014616:	230c      	movs	r3, #12
 8014618:	f8ca 3000 	str.w	r3, [sl]
 801461c:	89a3      	ldrh	r3, [r4, #12]
 801461e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014622:	81a3      	strh	r3, [r4, #12]
 8014624:	f04f 30ff 	mov.w	r0, #4294967295
 8014628:	e7e9      	b.n	80145fe <__ssputs_r+0x8a>
	...

0801462c <_svfiprintf_r>:
 801462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014630:	4698      	mov	r8, r3
 8014632:	898b      	ldrh	r3, [r1, #12]
 8014634:	061b      	lsls	r3, r3, #24
 8014636:	b09d      	sub	sp, #116	@ 0x74
 8014638:	4607      	mov	r7, r0
 801463a:	460d      	mov	r5, r1
 801463c:	4614      	mov	r4, r2
 801463e:	d510      	bpl.n	8014662 <_svfiprintf_r+0x36>
 8014640:	690b      	ldr	r3, [r1, #16]
 8014642:	b973      	cbnz	r3, 8014662 <_svfiprintf_r+0x36>
 8014644:	2140      	movs	r1, #64	@ 0x40
 8014646:	f7fe fbd3 	bl	8012df0 <_malloc_r>
 801464a:	6028      	str	r0, [r5, #0]
 801464c:	6128      	str	r0, [r5, #16]
 801464e:	b930      	cbnz	r0, 801465e <_svfiprintf_r+0x32>
 8014650:	230c      	movs	r3, #12
 8014652:	603b      	str	r3, [r7, #0]
 8014654:	f04f 30ff 	mov.w	r0, #4294967295
 8014658:	b01d      	add	sp, #116	@ 0x74
 801465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801465e:	2340      	movs	r3, #64	@ 0x40
 8014660:	616b      	str	r3, [r5, #20]
 8014662:	2300      	movs	r3, #0
 8014664:	9309      	str	r3, [sp, #36]	@ 0x24
 8014666:	2320      	movs	r3, #32
 8014668:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801466c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014670:	2330      	movs	r3, #48	@ 0x30
 8014672:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014810 <_svfiprintf_r+0x1e4>
 8014676:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801467a:	f04f 0901 	mov.w	r9, #1
 801467e:	4623      	mov	r3, r4
 8014680:	469a      	mov	sl, r3
 8014682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014686:	b10a      	cbz	r2, 801468c <_svfiprintf_r+0x60>
 8014688:	2a25      	cmp	r2, #37	@ 0x25
 801468a:	d1f9      	bne.n	8014680 <_svfiprintf_r+0x54>
 801468c:	ebba 0b04 	subs.w	fp, sl, r4
 8014690:	d00b      	beq.n	80146aa <_svfiprintf_r+0x7e>
 8014692:	465b      	mov	r3, fp
 8014694:	4622      	mov	r2, r4
 8014696:	4629      	mov	r1, r5
 8014698:	4638      	mov	r0, r7
 801469a:	f7ff ff6b 	bl	8014574 <__ssputs_r>
 801469e:	3001      	adds	r0, #1
 80146a0:	f000 80a7 	beq.w	80147f2 <_svfiprintf_r+0x1c6>
 80146a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80146a6:	445a      	add	r2, fp
 80146a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80146aa:	f89a 3000 	ldrb.w	r3, [sl]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	f000 809f 	beq.w	80147f2 <_svfiprintf_r+0x1c6>
 80146b4:	2300      	movs	r3, #0
 80146b6:	f04f 32ff 	mov.w	r2, #4294967295
 80146ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146be:	f10a 0a01 	add.w	sl, sl, #1
 80146c2:	9304      	str	r3, [sp, #16]
 80146c4:	9307      	str	r3, [sp, #28]
 80146c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80146cc:	4654      	mov	r4, sl
 80146ce:	2205      	movs	r2, #5
 80146d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146d4:	484e      	ldr	r0, [pc, #312]	@ (8014810 <_svfiprintf_r+0x1e4>)
 80146d6:	f7eb fda3 	bl	8000220 <memchr>
 80146da:	9a04      	ldr	r2, [sp, #16]
 80146dc:	b9d8      	cbnz	r0, 8014716 <_svfiprintf_r+0xea>
 80146de:	06d0      	lsls	r0, r2, #27
 80146e0:	bf44      	itt	mi
 80146e2:	2320      	movmi	r3, #32
 80146e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146e8:	0711      	lsls	r1, r2, #28
 80146ea:	bf44      	itt	mi
 80146ec:	232b      	movmi	r3, #43	@ 0x2b
 80146ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146f2:	f89a 3000 	ldrb.w	r3, [sl]
 80146f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80146f8:	d015      	beq.n	8014726 <_svfiprintf_r+0xfa>
 80146fa:	9a07      	ldr	r2, [sp, #28]
 80146fc:	4654      	mov	r4, sl
 80146fe:	2000      	movs	r0, #0
 8014700:	f04f 0c0a 	mov.w	ip, #10
 8014704:	4621      	mov	r1, r4
 8014706:	f811 3b01 	ldrb.w	r3, [r1], #1
 801470a:	3b30      	subs	r3, #48	@ 0x30
 801470c:	2b09      	cmp	r3, #9
 801470e:	d94b      	bls.n	80147a8 <_svfiprintf_r+0x17c>
 8014710:	b1b0      	cbz	r0, 8014740 <_svfiprintf_r+0x114>
 8014712:	9207      	str	r2, [sp, #28]
 8014714:	e014      	b.n	8014740 <_svfiprintf_r+0x114>
 8014716:	eba0 0308 	sub.w	r3, r0, r8
 801471a:	fa09 f303 	lsl.w	r3, r9, r3
 801471e:	4313      	orrs	r3, r2
 8014720:	9304      	str	r3, [sp, #16]
 8014722:	46a2      	mov	sl, r4
 8014724:	e7d2      	b.n	80146cc <_svfiprintf_r+0xa0>
 8014726:	9b03      	ldr	r3, [sp, #12]
 8014728:	1d19      	adds	r1, r3, #4
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	9103      	str	r1, [sp, #12]
 801472e:	2b00      	cmp	r3, #0
 8014730:	bfbb      	ittet	lt
 8014732:	425b      	neglt	r3, r3
 8014734:	f042 0202 	orrlt.w	r2, r2, #2
 8014738:	9307      	strge	r3, [sp, #28]
 801473a:	9307      	strlt	r3, [sp, #28]
 801473c:	bfb8      	it	lt
 801473e:	9204      	strlt	r2, [sp, #16]
 8014740:	7823      	ldrb	r3, [r4, #0]
 8014742:	2b2e      	cmp	r3, #46	@ 0x2e
 8014744:	d10a      	bne.n	801475c <_svfiprintf_r+0x130>
 8014746:	7863      	ldrb	r3, [r4, #1]
 8014748:	2b2a      	cmp	r3, #42	@ 0x2a
 801474a:	d132      	bne.n	80147b2 <_svfiprintf_r+0x186>
 801474c:	9b03      	ldr	r3, [sp, #12]
 801474e:	1d1a      	adds	r2, r3, #4
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	9203      	str	r2, [sp, #12]
 8014754:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014758:	3402      	adds	r4, #2
 801475a:	9305      	str	r3, [sp, #20]
 801475c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014820 <_svfiprintf_r+0x1f4>
 8014760:	7821      	ldrb	r1, [r4, #0]
 8014762:	2203      	movs	r2, #3
 8014764:	4650      	mov	r0, sl
 8014766:	f7eb fd5b 	bl	8000220 <memchr>
 801476a:	b138      	cbz	r0, 801477c <_svfiprintf_r+0x150>
 801476c:	9b04      	ldr	r3, [sp, #16]
 801476e:	eba0 000a 	sub.w	r0, r0, sl
 8014772:	2240      	movs	r2, #64	@ 0x40
 8014774:	4082      	lsls	r2, r0
 8014776:	4313      	orrs	r3, r2
 8014778:	3401      	adds	r4, #1
 801477a:	9304      	str	r3, [sp, #16]
 801477c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014780:	4824      	ldr	r0, [pc, #144]	@ (8014814 <_svfiprintf_r+0x1e8>)
 8014782:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014786:	2206      	movs	r2, #6
 8014788:	f7eb fd4a 	bl	8000220 <memchr>
 801478c:	2800      	cmp	r0, #0
 801478e:	d036      	beq.n	80147fe <_svfiprintf_r+0x1d2>
 8014790:	4b21      	ldr	r3, [pc, #132]	@ (8014818 <_svfiprintf_r+0x1ec>)
 8014792:	bb1b      	cbnz	r3, 80147dc <_svfiprintf_r+0x1b0>
 8014794:	9b03      	ldr	r3, [sp, #12]
 8014796:	3307      	adds	r3, #7
 8014798:	f023 0307 	bic.w	r3, r3, #7
 801479c:	3308      	adds	r3, #8
 801479e:	9303      	str	r3, [sp, #12]
 80147a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147a2:	4433      	add	r3, r6
 80147a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80147a6:	e76a      	b.n	801467e <_svfiprintf_r+0x52>
 80147a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80147ac:	460c      	mov	r4, r1
 80147ae:	2001      	movs	r0, #1
 80147b0:	e7a8      	b.n	8014704 <_svfiprintf_r+0xd8>
 80147b2:	2300      	movs	r3, #0
 80147b4:	3401      	adds	r4, #1
 80147b6:	9305      	str	r3, [sp, #20]
 80147b8:	4619      	mov	r1, r3
 80147ba:	f04f 0c0a 	mov.w	ip, #10
 80147be:	4620      	mov	r0, r4
 80147c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147c4:	3a30      	subs	r2, #48	@ 0x30
 80147c6:	2a09      	cmp	r2, #9
 80147c8:	d903      	bls.n	80147d2 <_svfiprintf_r+0x1a6>
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d0c6      	beq.n	801475c <_svfiprintf_r+0x130>
 80147ce:	9105      	str	r1, [sp, #20]
 80147d0:	e7c4      	b.n	801475c <_svfiprintf_r+0x130>
 80147d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80147d6:	4604      	mov	r4, r0
 80147d8:	2301      	movs	r3, #1
 80147da:	e7f0      	b.n	80147be <_svfiprintf_r+0x192>
 80147dc:	ab03      	add	r3, sp, #12
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	462a      	mov	r2, r5
 80147e2:	4b0e      	ldr	r3, [pc, #56]	@ (801481c <_svfiprintf_r+0x1f0>)
 80147e4:	a904      	add	r1, sp, #16
 80147e6:	4638      	mov	r0, r7
 80147e8:	f7fc fbd8 	bl	8010f9c <_printf_float>
 80147ec:	1c42      	adds	r2, r0, #1
 80147ee:	4606      	mov	r6, r0
 80147f0:	d1d6      	bne.n	80147a0 <_svfiprintf_r+0x174>
 80147f2:	89ab      	ldrh	r3, [r5, #12]
 80147f4:	065b      	lsls	r3, r3, #25
 80147f6:	f53f af2d 	bmi.w	8014654 <_svfiprintf_r+0x28>
 80147fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80147fc:	e72c      	b.n	8014658 <_svfiprintf_r+0x2c>
 80147fe:	ab03      	add	r3, sp, #12
 8014800:	9300      	str	r3, [sp, #0]
 8014802:	462a      	mov	r2, r5
 8014804:	4b05      	ldr	r3, [pc, #20]	@ (801481c <_svfiprintf_r+0x1f0>)
 8014806:	a904      	add	r1, sp, #16
 8014808:	4638      	mov	r0, r7
 801480a:	f7fc fe5f 	bl	80114cc <_printf_i>
 801480e:	e7ed      	b.n	80147ec <_svfiprintf_r+0x1c0>
 8014810:	08023271 	.word	0x08023271
 8014814:	0802327b 	.word	0x0802327b
 8014818:	08010f9d 	.word	0x08010f9d
 801481c:	08014575 	.word	0x08014575
 8014820:	08023277 	.word	0x08023277

08014824 <__sflush_r>:
 8014824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801482c:	0716      	lsls	r6, r2, #28
 801482e:	4605      	mov	r5, r0
 8014830:	460c      	mov	r4, r1
 8014832:	d454      	bmi.n	80148de <__sflush_r+0xba>
 8014834:	684b      	ldr	r3, [r1, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dc02      	bgt.n	8014840 <__sflush_r+0x1c>
 801483a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801483c:	2b00      	cmp	r3, #0
 801483e:	dd48      	ble.n	80148d2 <__sflush_r+0xae>
 8014840:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014842:	2e00      	cmp	r6, #0
 8014844:	d045      	beq.n	80148d2 <__sflush_r+0xae>
 8014846:	2300      	movs	r3, #0
 8014848:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801484c:	682f      	ldr	r7, [r5, #0]
 801484e:	6a21      	ldr	r1, [r4, #32]
 8014850:	602b      	str	r3, [r5, #0]
 8014852:	d030      	beq.n	80148b6 <__sflush_r+0x92>
 8014854:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014856:	89a3      	ldrh	r3, [r4, #12]
 8014858:	0759      	lsls	r1, r3, #29
 801485a:	d505      	bpl.n	8014868 <__sflush_r+0x44>
 801485c:	6863      	ldr	r3, [r4, #4]
 801485e:	1ad2      	subs	r2, r2, r3
 8014860:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014862:	b10b      	cbz	r3, 8014868 <__sflush_r+0x44>
 8014864:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014866:	1ad2      	subs	r2, r2, r3
 8014868:	2300      	movs	r3, #0
 801486a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801486c:	6a21      	ldr	r1, [r4, #32]
 801486e:	4628      	mov	r0, r5
 8014870:	47b0      	blx	r6
 8014872:	1c43      	adds	r3, r0, #1
 8014874:	89a3      	ldrh	r3, [r4, #12]
 8014876:	d106      	bne.n	8014886 <__sflush_r+0x62>
 8014878:	6829      	ldr	r1, [r5, #0]
 801487a:	291d      	cmp	r1, #29
 801487c:	d82b      	bhi.n	80148d6 <__sflush_r+0xb2>
 801487e:	4a2a      	ldr	r2, [pc, #168]	@ (8014928 <__sflush_r+0x104>)
 8014880:	410a      	asrs	r2, r1
 8014882:	07d6      	lsls	r6, r2, #31
 8014884:	d427      	bmi.n	80148d6 <__sflush_r+0xb2>
 8014886:	2200      	movs	r2, #0
 8014888:	6062      	str	r2, [r4, #4]
 801488a:	04d9      	lsls	r1, r3, #19
 801488c:	6922      	ldr	r2, [r4, #16]
 801488e:	6022      	str	r2, [r4, #0]
 8014890:	d504      	bpl.n	801489c <__sflush_r+0x78>
 8014892:	1c42      	adds	r2, r0, #1
 8014894:	d101      	bne.n	801489a <__sflush_r+0x76>
 8014896:	682b      	ldr	r3, [r5, #0]
 8014898:	b903      	cbnz	r3, 801489c <__sflush_r+0x78>
 801489a:	6560      	str	r0, [r4, #84]	@ 0x54
 801489c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801489e:	602f      	str	r7, [r5, #0]
 80148a0:	b1b9      	cbz	r1, 80148d2 <__sflush_r+0xae>
 80148a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148a6:	4299      	cmp	r1, r3
 80148a8:	d002      	beq.n	80148b0 <__sflush_r+0x8c>
 80148aa:	4628      	mov	r0, r5
 80148ac:	f7fe fa2c 	bl	8012d08 <_free_r>
 80148b0:	2300      	movs	r3, #0
 80148b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80148b4:	e00d      	b.n	80148d2 <__sflush_r+0xae>
 80148b6:	2301      	movs	r3, #1
 80148b8:	4628      	mov	r0, r5
 80148ba:	47b0      	blx	r6
 80148bc:	4602      	mov	r2, r0
 80148be:	1c50      	adds	r0, r2, #1
 80148c0:	d1c9      	bne.n	8014856 <__sflush_r+0x32>
 80148c2:	682b      	ldr	r3, [r5, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d0c6      	beq.n	8014856 <__sflush_r+0x32>
 80148c8:	2b1d      	cmp	r3, #29
 80148ca:	d001      	beq.n	80148d0 <__sflush_r+0xac>
 80148cc:	2b16      	cmp	r3, #22
 80148ce:	d11e      	bne.n	801490e <__sflush_r+0xea>
 80148d0:	602f      	str	r7, [r5, #0]
 80148d2:	2000      	movs	r0, #0
 80148d4:	e022      	b.n	801491c <__sflush_r+0xf8>
 80148d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148da:	b21b      	sxth	r3, r3
 80148dc:	e01b      	b.n	8014916 <__sflush_r+0xf2>
 80148de:	690f      	ldr	r7, [r1, #16]
 80148e0:	2f00      	cmp	r7, #0
 80148e2:	d0f6      	beq.n	80148d2 <__sflush_r+0xae>
 80148e4:	0793      	lsls	r3, r2, #30
 80148e6:	680e      	ldr	r6, [r1, #0]
 80148e8:	bf08      	it	eq
 80148ea:	694b      	ldreq	r3, [r1, #20]
 80148ec:	600f      	str	r7, [r1, #0]
 80148ee:	bf18      	it	ne
 80148f0:	2300      	movne	r3, #0
 80148f2:	eba6 0807 	sub.w	r8, r6, r7
 80148f6:	608b      	str	r3, [r1, #8]
 80148f8:	f1b8 0f00 	cmp.w	r8, #0
 80148fc:	dde9      	ble.n	80148d2 <__sflush_r+0xae>
 80148fe:	6a21      	ldr	r1, [r4, #32]
 8014900:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014902:	4643      	mov	r3, r8
 8014904:	463a      	mov	r2, r7
 8014906:	4628      	mov	r0, r5
 8014908:	47b0      	blx	r6
 801490a:	2800      	cmp	r0, #0
 801490c:	dc08      	bgt.n	8014920 <__sflush_r+0xfc>
 801490e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014916:	81a3      	strh	r3, [r4, #12]
 8014918:	f04f 30ff 	mov.w	r0, #4294967295
 801491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014920:	4407      	add	r7, r0
 8014922:	eba8 0800 	sub.w	r8, r8, r0
 8014926:	e7e7      	b.n	80148f8 <__sflush_r+0xd4>
 8014928:	dfbffffe 	.word	0xdfbffffe

0801492c <_fflush_r>:
 801492c:	b538      	push	{r3, r4, r5, lr}
 801492e:	690b      	ldr	r3, [r1, #16]
 8014930:	4605      	mov	r5, r0
 8014932:	460c      	mov	r4, r1
 8014934:	b913      	cbnz	r3, 801493c <_fflush_r+0x10>
 8014936:	2500      	movs	r5, #0
 8014938:	4628      	mov	r0, r5
 801493a:	bd38      	pop	{r3, r4, r5, pc}
 801493c:	b118      	cbz	r0, 8014946 <_fflush_r+0x1a>
 801493e:	6a03      	ldr	r3, [r0, #32]
 8014940:	b90b      	cbnz	r3, 8014946 <_fflush_r+0x1a>
 8014942:	f7fd f983 	bl	8011c4c <__sinit>
 8014946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d0f3      	beq.n	8014936 <_fflush_r+0xa>
 801494e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014950:	07d0      	lsls	r0, r2, #31
 8014952:	d404      	bmi.n	801495e <_fflush_r+0x32>
 8014954:	0599      	lsls	r1, r3, #22
 8014956:	d402      	bmi.n	801495e <_fflush_r+0x32>
 8014958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801495a:	f7fd fb80 	bl	801205e <__retarget_lock_acquire_recursive>
 801495e:	4628      	mov	r0, r5
 8014960:	4621      	mov	r1, r4
 8014962:	f7ff ff5f 	bl	8014824 <__sflush_r>
 8014966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014968:	07da      	lsls	r2, r3, #31
 801496a:	4605      	mov	r5, r0
 801496c:	d4e4      	bmi.n	8014938 <_fflush_r+0xc>
 801496e:	89a3      	ldrh	r3, [r4, #12]
 8014970:	059b      	lsls	r3, r3, #22
 8014972:	d4e1      	bmi.n	8014938 <_fflush_r+0xc>
 8014974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014976:	f7fd fb73 	bl	8012060 <__retarget_lock_release_recursive>
 801497a:	e7dd      	b.n	8014938 <_fflush_r+0xc>

0801497c <__swhatbuf_r>:
 801497c:	b570      	push	{r4, r5, r6, lr}
 801497e:	460c      	mov	r4, r1
 8014980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014984:	2900      	cmp	r1, #0
 8014986:	b096      	sub	sp, #88	@ 0x58
 8014988:	4615      	mov	r5, r2
 801498a:	461e      	mov	r6, r3
 801498c:	da0d      	bge.n	80149aa <__swhatbuf_r+0x2e>
 801498e:	89a3      	ldrh	r3, [r4, #12]
 8014990:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014994:	f04f 0100 	mov.w	r1, #0
 8014998:	bf14      	ite	ne
 801499a:	2340      	movne	r3, #64	@ 0x40
 801499c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80149a0:	2000      	movs	r0, #0
 80149a2:	6031      	str	r1, [r6, #0]
 80149a4:	602b      	str	r3, [r5, #0]
 80149a6:	b016      	add	sp, #88	@ 0x58
 80149a8:	bd70      	pop	{r4, r5, r6, pc}
 80149aa:	466a      	mov	r2, sp
 80149ac:	f000 f874 	bl	8014a98 <_fstat_r>
 80149b0:	2800      	cmp	r0, #0
 80149b2:	dbec      	blt.n	801498e <__swhatbuf_r+0x12>
 80149b4:	9901      	ldr	r1, [sp, #4]
 80149b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80149ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80149be:	4259      	negs	r1, r3
 80149c0:	4159      	adcs	r1, r3
 80149c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80149c6:	e7eb      	b.n	80149a0 <__swhatbuf_r+0x24>

080149c8 <__smakebuf_r>:
 80149c8:	898b      	ldrh	r3, [r1, #12]
 80149ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149cc:	079d      	lsls	r5, r3, #30
 80149ce:	4606      	mov	r6, r0
 80149d0:	460c      	mov	r4, r1
 80149d2:	d507      	bpl.n	80149e4 <__smakebuf_r+0x1c>
 80149d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	6123      	str	r3, [r4, #16]
 80149dc:	2301      	movs	r3, #1
 80149de:	6163      	str	r3, [r4, #20]
 80149e0:	b003      	add	sp, #12
 80149e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149e4:	ab01      	add	r3, sp, #4
 80149e6:	466a      	mov	r2, sp
 80149e8:	f7ff ffc8 	bl	801497c <__swhatbuf_r>
 80149ec:	9f00      	ldr	r7, [sp, #0]
 80149ee:	4605      	mov	r5, r0
 80149f0:	4639      	mov	r1, r7
 80149f2:	4630      	mov	r0, r6
 80149f4:	f7fe f9fc 	bl	8012df0 <_malloc_r>
 80149f8:	b948      	cbnz	r0, 8014a0e <__smakebuf_r+0x46>
 80149fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149fe:	059a      	lsls	r2, r3, #22
 8014a00:	d4ee      	bmi.n	80149e0 <__smakebuf_r+0x18>
 8014a02:	f023 0303 	bic.w	r3, r3, #3
 8014a06:	f043 0302 	orr.w	r3, r3, #2
 8014a0a:	81a3      	strh	r3, [r4, #12]
 8014a0c:	e7e2      	b.n	80149d4 <__smakebuf_r+0xc>
 8014a0e:	89a3      	ldrh	r3, [r4, #12]
 8014a10:	6020      	str	r0, [r4, #0]
 8014a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a16:	81a3      	strh	r3, [r4, #12]
 8014a18:	9b01      	ldr	r3, [sp, #4]
 8014a1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014a1e:	b15b      	cbz	r3, 8014a38 <__smakebuf_r+0x70>
 8014a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a24:	4630      	mov	r0, r6
 8014a26:	f000 f849 	bl	8014abc <_isatty_r>
 8014a2a:	b128      	cbz	r0, 8014a38 <__smakebuf_r+0x70>
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	f023 0303 	bic.w	r3, r3, #3
 8014a32:	f043 0301 	orr.w	r3, r3, #1
 8014a36:	81a3      	strh	r3, [r4, #12]
 8014a38:	89a3      	ldrh	r3, [r4, #12]
 8014a3a:	431d      	orrs	r5, r3
 8014a3c:	81a5      	strh	r5, [r4, #12]
 8014a3e:	e7cf      	b.n	80149e0 <__smakebuf_r+0x18>

08014a40 <memmove>:
 8014a40:	4288      	cmp	r0, r1
 8014a42:	b510      	push	{r4, lr}
 8014a44:	eb01 0402 	add.w	r4, r1, r2
 8014a48:	d902      	bls.n	8014a50 <memmove+0x10>
 8014a4a:	4284      	cmp	r4, r0
 8014a4c:	4623      	mov	r3, r4
 8014a4e:	d807      	bhi.n	8014a60 <memmove+0x20>
 8014a50:	1e43      	subs	r3, r0, #1
 8014a52:	42a1      	cmp	r1, r4
 8014a54:	d008      	beq.n	8014a68 <memmove+0x28>
 8014a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a5e:	e7f8      	b.n	8014a52 <memmove+0x12>
 8014a60:	4402      	add	r2, r0
 8014a62:	4601      	mov	r1, r0
 8014a64:	428a      	cmp	r2, r1
 8014a66:	d100      	bne.n	8014a6a <memmove+0x2a>
 8014a68:	bd10      	pop	{r4, pc}
 8014a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a72:	e7f7      	b.n	8014a64 <memmove+0x24>

08014a74 <strncmp>:
 8014a74:	b510      	push	{r4, lr}
 8014a76:	b16a      	cbz	r2, 8014a94 <strncmp+0x20>
 8014a78:	3901      	subs	r1, #1
 8014a7a:	1884      	adds	r4, r0, r2
 8014a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d103      	bne.n	8014a90 <strncmp+0x1c>
 8014a88:	42a0      	cmp	r0, r4
 8014a8a:	d001      	beq.n	8014a90 <strncmp+0x1c>
 8014a8c:	2a00      	cmp	r2, #0
 8014a8e:	d1f5      	bne.n	8014a7c <strncmp+0x8>
 8014a90:	1ad0      	subs	r0, r2, r3
 8014a92:	bd10      	pop	{r4, pc}
 8014a94:	4610      	mov	r0, r2
 8014a96:	e7fc      	b.n	8014a92 <strncmp+0x1e>

08014a98 <_fstat_r>:
 8014a98:	b538      	push	{r3, r4, r5, lr}
 8014a9a:	4d07      	ldr	r5, [pc, #28]	@ (8014ab8 <_fstat_r+0x20>)
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	4608      	mov	r0, r1
 8014aa2:	4611      	mov	r1, r2
 8014aa4:	602b      	str	r3, [r5, #0]
 8014aa6:	f7ef f8fd 	bl	8003ca4 <_fstat>
 8014aaa:	1c43      	adds	r3, r0, #1
 8014aac:	d102      	bne.n	8014ab4 <_fstat_r+0x1c>
 8014aae:	682b      	ldr	r3, [r5, #0]
 8014ab0:	b103      	cbz	r3, 8014ab4 <_fstat_r+0x1c>
 8014ab2:	6023      	str	r3, [r4, #0]
 8014ab4:	bd38      	pop	{r3, r4, r5, pc}
 8014ab6:	bf00      	nop
 8014ab8:	20002dbc 	.word	0x20002dbc

08014abc <_isatty_r>:
 8014abc:	b538      	push	{r3, r4, r5, lr}
 8014abe:	4d06      	ldr	r5, [pc, #24]	@ (8014ad8 <_isatty_r+0x1c>)
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	4608      	mov	r0, r1
 8014ac6:	602b      	str	r3, [r5, #0]
 8014ac8:	f7ef f8fc 	bl	8003cc4 <_isatty>
 8014acc:	1c43      	adds	r3, r0, #1
 8014ace:	d102      	bne.n	8014ad6 <_isatty_r+0x1a>
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	b103      	cbz	r3, 8014ad6 <_isatty_r+0x1a>
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	20002dbc 	.word	0x20002dbc

08014adc <_sbrk_r>:
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	4d06      	ldr	r5, [pc, #24]	@ (8014af8 <_sbrk_r+0x1c>)
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	4608      	mov	r0, r1
 8014ae6:	602b      	str	r3, [r5, #0]
 8014ae8:	f7ef f904 	bl	8003cf4 <_sbrk>
 8014aec:	1c43      	adds	r3, r0, #1
 8014aee:	d102      	bne.n	8014af6 <_sbrk_r+0x1a>
 8014af0:	682b      	ldr	r3, [r5, #0]
 8014af2:	b103      	cbz	r3, 8014af6 <_sbrk_r+0x1a>
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	bd38      	pop	{r3, r4, r5, pc}
 8014af8:	20002dbc 	.word	0x20002dbc

08014afc <memcpy>:
 8014afc:	440a      	add	r2, r1
 8014afe:	4291      	cmp	r1, r2
 8014b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b04:	d100      	bne.n	8014b08 <memcpy+0xc>
 8014b06:	4770      	bx	lr
 8014b08:	b510      	push	{r4, lr}
 8014b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b12:	4291      	cmp	r1, r2
 8014b14:	d1f9      	bne.n	8014b0a <memcpy+0xe>
 8014b16:	bd10      	pop	{r4, pc}

08014b18 <nan>:
 8014b18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014b20 <nan+0x8>
 8014b1c:	4770      	bx	lr
 8014b1e:	bf00      	nop
 8014b20:	00000000 	.word	0x00000000
 8014b24:	7ff80000 	.word	0x7ff80000

08014b28 <__assert_func>:
 8014b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b2a:	4614      	mov	r4, r2
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	4b09      	ldr	r3, [pc, #36]	@ (8014b54 <__assert_func+0x2c>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	4605      	mov	r5, r0
 8014b34:	68d8      	ldr	r0, [r3, #12]
 8014b36:	b954      	cbnz	r4, 8014b4e <__assert_func+0x26>
 8014b38:	4b07      	ldr	r3, [pc, #28]	@ (8014b58 <__assert_func+0x30>)
 8014b3a:	461c      	mov	r4, r3
 8014b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b40:	9100      	str	r1, [sp, #0]
 8014b42:	462b      	mov	r3, r5
 8014b44:	4905      	ldr	r1, [pc, #20]	@ (8014b5c <__assert_func+0x34>)
 8014b46:	f000 fba7 	bl	8015298 <fiprintf>
 8014b4a:	f000 fbb7 	bl	80152bc <abort>
 8014b4e:	4b04      	ldr	r3, [pc, #16]	@ (8014b60 <__assert_func+0x38>)
 8014b50:	e7f4      	b.n	8014b3c <__assert_func+0x14>
 8014b52:	bf00      	nop
 8014b54:	2000039c 	.word	0x2000039c
 8014b58:	080232c5 	.word	0x080232c5
 8014b5c:	08023297 	.word	0x08023297
 8014b60:	0802328a 	.word	0x0802328a

08014b64 <_calloc_r>:
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	fba1 5402 	umull	r5, r4, r1, r2
 8014b6a:	b93c      	cbnz	r4, 8014b7c <_calloc_r+0x18>
 8014b6c:	4629      	mov	r1, r5
 8014b6e:	f7fe f93f 	bl	8012df0 <_malloc_r>
 8014b72:	4606      	mov	r6, r0
 8014b74:	b928      	cbnz	r0, 8014b82 <_calloc_r+0x1e>
 8014b76:	2600      	movs	r6, #0
 8014b78:	4630      	mov	r0, r6
 8014b7a:	bd70      	pop	{r4, r5, r6, pc}
 8014b7c:	220c      	movs	r2, #12
 8014b7e:	6002      	str	r2, [r0, #0]
 8014b80:	e7f9      	b.n	8014b76 <_calloc_r+0x12>
 8014b82:	462a      	mov	r2, r5
 8014b84:	4621      	mov	r1, r4
 8014b86:	f7fd f9ed 	bl	8011f64 <memset>
 8014b8a:	e7f5      	b.n	8014b78 <_calloc_r+0x14>

08014b8c <rshift>:
 8014b8c:	6903      	ldr	r3, [r0, #16]
 8014b8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014b92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014b9a:	f100 0414 	add.w	r4, r0, #20
 8014b9e:	dd45      	ble.n	8014c2c <rshift+0xa0>
 8014ba0:	f011 011f 	ands.w	r1, r1, #31
 8014ba4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014ba8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014bac:	d10c      	bne.n	8014bc8 <rshift+0x3c>
 8014bae:	f100 0710 	add.w	r7, r0, #16
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	42b1      	cmp	r1, r6
 8014bb6:	d334      	bcc.n	8014c22 <rshift+0x96>
 8014bb8:	1a9b      	subs	r3, r3, r2
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	1eea      	subs	r2, r5, #3
 8014bbe:	4296      	cmp	r6, r2
 8014bc0:	bf38      	it	cc
 8014bc2:	2300      	movcc	r3, #0
 8014bc4:	4423      	add	r3, r4
 8014bc6:	e015      	b.n	8014bf4 <rshift+0x68>
 8014bc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014bcc:	f1c1 0820 	rsb	r8, r1, #32
 8014bd0:	40cf      	lsrs	r7, r1
 8014bd2:	f105 0e04 	add.w	lr, r5, #4
 8014bd6:	46a1      	mov	r9, r4
 8014bd8:	4576      	cmp	r6, lr
 8014bda:	46f4      	mov	ip, lr
 8014bdc:	d815      	bhi.n	8014c0a <rshift+0x7e>
 8014bde:	1a9a      	subs	r2, r3, r2
 8014be0:	0092      	lsls	r2, r2, #2
 8014be2:	3a04      	subs	r2, #4
 8014be4:	3501      	adds	r5, #1
 8014be6:	42ae      	cmp	r6, r5
 8014be8:	bf38      	it	cc
 8014bea:	2200      	movcc	r2, #0
 8014bec:	18a3      	adds	r3, r4, r2
 8014bee:	50a7      	str	r7, [r4, r2]
 8014bf0:	b107      	cbz	r7, 8014bf4 <rshift+0x68>
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	1b1a      	subs	r2, r3, r4
 8014bf6:	42a3      	cmp	r3, r4
 8014bf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014bfc:	bf08      	it	eq
 8014bfe:	2300      	moveq	r3, #0
 8014c00:	6102      	str	r2, [r0, #16]
 8014c02:	bf08      	it	eq
 8014c04:	6143      	streq	r3, [r0, #20]
 8014c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c0a:	f8dc c000 	ldr.w	ip, [ip]
 8014c0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014c12:	ea4c 0707 	orr.w	r7, ip, r7
 8014c16:	f849 7b04 	str.w	r7, [r9], #4
 8014c1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014c1e:	40cf      	lsrs	r7, r1
 8014c20:	e7da      	b.n	8014bd8 <rshift+0x4c>
 8014c22:	f851 cb04 	ldr.w	ip, [r1], #4
 8014c26:	f847 cf04 	str.w	ip, [r7, #4]!
 8014c2a:	e7c3      	b.n	8014bb4 <rshift+0x28>
 8014c2c:	4623      	mov	r3, r4
 8014c2e:	e7e1      	b.n	8014bf4 <rshift+0x68>

08014c30 <__hexdig_fun>:
 8014c30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014c34:	2b09      	cmp	r3, #9
 8014c36:	d802      	bhi.n	8014c3e <__hexdig_fun+0xe>
 8014c38:	3820      	subs	r0, #32
 8014c3a:	b2c0      	uxtb	r0, r0
 8014c3c:	4770      	bx	lr
 8014c3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014c42:	2b05      	cmp	r3, #5
 8014c44:	d801      	bhi.n	8014c4a <__hexdig_fun+0x1a>
 8014c46:	3847      	subs	r0, #71	@ 0x47
 8014c48:	e7f7      	b.n	8014c3a <__hexdig_fun+0xa>
 8014c4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014c4e:	2b05      	cmp	r3, #5
 8014c50:	d801      	bhi.n	8014c56 <__hexdig_fun+0x26>
 8014c52:	3827      	subs	r0, #39	@ 0x27
 8014c54:	e7f1      	b.n	8014c3a <__hexdig_fun+0xa>
 8014c56:	2000      	movs	r0, #0
 8014c58:	4770      	bx	lr
	...

08014c5c <__gethex>:
 8014c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c60:	b085      	sub	sp, #20
 8014c62:	468a      	mov	sl, r1
 8014c64:	9302      	str	r3, [sp, #8]
 8014c66:	680b      	ldr	r3, [r1, #0]
 8014c68:	9001      	str	r0, [sp, #4]
 8014c6a:	4690      	mov	r8, r2
 8014c6c:	1c9c      	adds	r4, r3, #2
 8014c6e:	46a1      	mov	r9, r4
 8014c70:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014c74:	2830      	cmp	r0, #48	@ 0x30
 8014c76:	d0fa      	beq.n	8014c6e <__gethex+0x12>
 8014c78:	eba9 0303 	sub.w	r3, r9, r3
 8014c7c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014c80:	f7ff ffd6 	bl	8014c30 <__hexdig_fun>
 8014c84:	4605      	mov	r5, r0
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d168      	bne.n	8014d5c <__gethex+0x100>
 8014c8a:	49a0      	ldr	r1, [pc, #640]	@ (8014f0c <__gethex+0x2b0>)
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	4648      	mov	r0, r9
 8014c90:	f7ff fef0 	bl	8014a74 <strncmp>
 8014c94:	4607      	mov	r7, r0
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d167      	bne.n	8014d6a <__gethex+0x10e>
 8014c9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014c9e:	4626      	mov	r6, r4
 8014ca0:	f7ff ffc6 	bl	8014c30 <__hexdig_fun>
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	d062      	beq.n	8014d6e <__gethex+0x112>
 8014ca8:	4623      	mov	r3, r4
 8014caa:	7818      	ldrb	r0, [r3, #0]
 8014cac:	2830      	cmp	r0, #48	@ 0x30
 8014cae:	4699      	mov	r9, r3
 8014cb0:	f103 0301 	add.w	r3, r3, #1
 8014cb4:	d0f9      	beq.n	8014caa <__gethex+0x4e>
 8014cb6:	f7ff ffbb 	bl	8014c30 <__hexdig_fun>
 8014cba:	fab0 f580 	clz	r5, r0
 8014cbe:	096d      	lsrs	r5, r5, #5
 8014cc0:	f04f 0b01 	mov.w	fp, #1
 8014cc4:	464a      	mov	r2, r9
 8014cc6:	4616      	mov	r6, r2
 8014cc8:	3201      	adds	r2, #1
 8014cca:	7830      	ldrb	r0, [r6, #0]
 8014ccc:	f7ff ffb0 	bl	8014c30 <__hexdig_fun>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d1f8      	bne.n	8014cc6 <__gethex+0x6a>
 8014cd4:	498d      	ldr	r1, [pc, #564]	@ (8014f0c <__gethex+0x2b0>)
 8014cd6:	2201      	movs	r2, #1
 8014cd8:	4630      	mov	r0, r6
 8014cda:	f7ff fecb 	bl	8014a74 <strncmp>
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	d13f      	bne.n	8014d62 <__gethex+0x106>
 8014ce2:	b944      	cbnz	r4, 8014cf6 <__gethex+0x9a>
 8014ce4:	1c74      	adds	r4, r6, #1
 8014ce6:	4622      	mov	r2, r4
 8014ce8:	4616      	mov	r6, r2
 8014cea:	3201      	adds	r2, #1
 8014cec:	7830      	ldrb	r0, [r6, #0]
 8014cee:	f7ff ff9f 	bl	8014c30 <__hexdig_fun>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d1f8      	bne.n	8014ce8 <__gethex+0x8c>
 8014cf6:	1ba4      	subs	r4, r4, r6
 8014cf8:	00a7      	lsls	r7, r4, #2
 8014cfa:	7833      	ldrb	r3, [r6, #0]
 8014cfc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014d00:	2b50      	cmp	r3, #80	@ 0x50
 8014d02:	d13e      	bne.n	8014d82 <__gethex+0x126>
 8014d04:	7873      	ldrb	r3, [r6, #1]
 8014d06:	2b2b      	cmp	r3, #43	@ 0x2b
 8014d08:	d033      	beq.n	8014d72 <__gethex+0x116>
 8014d0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014d0c:	d034      	beq.n	8014d78 <__gethex+0x11c>
 8014d0e:	1c71      	adds	r1, r6, #1
 8014d10:	2400      	movs	r4, #0
 8014d12:	7808      	ldrb	r0, [r1, #0]
 8014d14:	f7ff ff8c 	bl	8014c30 <__hexdig_fun>
 8014d18:	1e43      	subs	r3, r0, #1
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	2b18      	cmp	r3, #24
 8014d1e:	d830      	bhi.n	8014d82 <__gethex+0x126>
 8014d20:	f1a0 0210 	sub.w	r2, r0, #16
 8014d24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014d28:	f7ff ff82 	bl	8014c30 <__hexdig_fun>
 8014d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014d30:	fa5f fc8c 	uxtb.w	ip, ip
 8014d34:	f1bc 0f18 	cmp.w	ip, #24
 8014d38:	f04f 030a 	mov.w	r3, #10
 8014d3c:	d91e      	bls.n	8014d7c <__gethex+0x120>
 8014d3e:	b104      	cbz	r4, 8014d42 <__gethex+0xe6>
 8014d40:	4252      	negs	r2, r2
 8014d42:	4417      	add	r7, r2
 8014d44:	f8ca 1000 	str.w	r1, [sl]
 8014d48:	b1ed      	cbz	r5, 8014d86 <__gethex+0x12a>
 8014d4a:	f1bb 0f00 	cmp.w	fp, #0
 8014d4e:	bf0c      	ite	eq
 8014d50:	2506      	moveq	r5, #6
 8014d52:	2500      	movne	r5, #0
 8014d54:	4628      	mov	r0, r5
 8014d56:	b005      	add	sp, #20
 8014d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5c:	2500      	movs	r5, #0
 8014d5e:	462c      	mov	r4, r5
 8014d60:	e7b0      	b.n	8014cc4 <__gethex+0x68>
 8014d62:	2c00      	cmp	r4, #0
 8014d64:	d1c7      	bne.n	8014cf6 <__gethex+0x9a>
 8014d66:	4627      	mov	r7, r4
 8014d68:	e7c7      	b.n	8014cfa <__gethex+0x9e>
 8014d6a:	464e      	mov	r6, r9
 8014d6c:	462f      	mov	r7, r5
 8014d6e:	2501      	movs	r5, #1
 8014d70:	e7c3      	b.n	8014cfa <__gethex+0x9e>
 8014d72:	2400      	movs	r4, #0
 8014d74:	1cb1      	adds	r1, r6, #2
 8014d76:	e7cc      	b.n	8014d12 <__gethex+0xb6>
 8014d78:	2401      	movs	r4, #1
 8014d7a:	e7fb      	b.n	8014d74 <__gethex+0x118>
 8014d7c:	fb03 0002 	mla	r0, r3, r2, r0
 8014d80:	e7ce      	b.n	8014d20 <__gethex+0xc4>
 8014d82:	4631      	mov	r1, r6
 8014d84:	e7de      	b.n	8014d44 <__gethex+0xe8>
 8014d86:	eba6 0309 	sub.w	r3, r6, r9
 8014d8a:	3b01      	subs	r3, #1
 8014d8c:	4629      	mov	r1, r5
 8014d8e:	2b07      	cmp	r3, #7
 8014d90:	dc0a      	bgt.n	8014da8 <__gethex+0x14c>
 8014d92:	9801      	ldr	r0, [sp, #4]
 8014d94:	f7fe f8b8 	bl	8012f08 <_Balloc>
 8014d98:	4604      	mov	r4, r0
 8014d9a:	b940      	cbnz	r0, 8014dae <__gethex+0x152>
 8014d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8014f10 <__gethex+0x2b4>)
 8014d9e:	4602      	mov	r2, r0
 8014da0:	21e4      	movs	r1, #228	@ 0xe4
 8014da2:	485c      	ldr	r0, [pc, #368]	@ (8014f14 <__gethex+0x2b8>)
 8014da4:	f7ff fec0 	bl	8014b28 <__assert_func>
 8014da8:	3101      	adds	r1, #1
 8014daa:	105b      	asrs	r3, r3, #1
 8014dac:	e7ef      	b.n	8014d8e <__gethex+0x132>
 8014dae:	f100 0a14 	add.w	sl, r0, #20
 8014db2:	2300      	movs	r3, #0
 8014db4:	4655      	mov	r5, sl
 8014db6:	469b      	mov	fp, r3
 8014db8:	45b1      	cmp	r9, r6
 8014dba:	d337      	bcc.n	8014e2c <__gethex+0x1d0>
 8014dbc:	f845 bb04 	str.w	fp, [r5], #4
 8014dc0:	eba5 050a 	sub.w	r5, r5, sl
 8014dc4:	10ad      	asrs	r5, r5, #2
 8014dc6:	6125      	str	r5, [r4, #16]
 8014dc8:	4658      	mov	r0, fp
 8014dca:	f7fe f98f 	bl	80130ec <__hi0bits>
 8014dce:	016d      	lsls	r5, r5, #5
 8014dd0:	f8d8 6000 	ldr.w	r6, [r8]
 8014dd4:	1a2d      	subs	r5, r5, r0
 8014dd6:	42b5      	cmp	r5, r6
 8014dd8:	dd54      	ble.n	8014e84 <__gethex+0x228>
 8014dda:	1bad      	subs	r5, r5, r6
 8014ddc:	4629      	mov	r1, r5
 8014dde:	4620      	mov	r0, r4
 8014de0:	f7fe fd23 	bl	801382a <__any_on>
 8014de4:	4681      	mov	r9, r0
 8014de6:	b178      	cbz	r0, 8014e08 <__gethex+0x1ac>
 8014de8:	1e6b      	subs	r3, r5, #1
 8014dea:	1159      	asrs	r1, r3, #5
 8014dec:	f003 021f 	and.w	r2, r3, #31
 8014df0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014df4:	f04f 0901 	mov.w	r9, #1
 8014df8:	fa09 f202 	lsl.w	r2, r9, r2
 8014dfc:	420a      	tst	r2, r1
 8014dfe:	d003      	beq.n	8014e08 <__gethex+0x1ac>
 8014e00:	454b      	cmp	r3, r9
 8014e02:	dc36      	bgt.n	8014e72 <__gethex+0x216>
 8014e04:	f04f 0902 	mov.w	r9, #2
 8014e08:	4629      	mov	r1, r5
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f7ff febe 	bl	8014b8c <rshift>
 8014e10:	442f      	add	r7, r5
 8014e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e16:	42bb      	cmp	r3, r7
 8014e18:	da42      	bge.n	8014ea0 <__gethex+0x244>
 8014e1a:	9801      	ldr	r0, [sp, #4]
 8014e1c:	4621      	mov	r1, r4
 8014e1e:	f7fe f8b3 	bl	8012f88 <_Bfree>
 8014e22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e24:	2300      	movs	r3, #0
 8014e26:	6013      	str	r3, [r2, #0]
 8014e28:	25a3      	movs	r5, #163	@ 0xa3
 8014e2a:	e793      	b.n	8014d54 <__gethex+0xf8>
 8014e2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014e30:	2a2e      	cmp	r2, #46	@ 0x2e
 8014e32:	d012      	beq.n	8014e5a <__gethex+0x1fe>
 8014e34:	2b20      	cmp	r3, #32
 8014e36:	d104      	bne.n	8014e42 <__gethex+0x1e6>
 8014e38:	f845 bb04 	str.w	fp, [r5], #4
 8014e3c:	f04f 0b00 	mov.w	fp, #0
 8014e40:	465b      	mov	r3, fp
 8014e42:	7830      	ldrb	r0, [r6, #0]
 8014e44:	9303      	str	r3, [sp, #12]
 8014e46:	f7ff fef3 	bl	8014c30 <__hexdig_fun>
 8014e4a:	9b03      	ldr	r3, [sp, #12]
 8014e4c:	f000 000f 	and.w	r0, r0, #15
 8014e50:	4098      	lsls	r0, r3
 8014e52:	ea4b 0b00 	orr.w	fp, fp, r0
 8014e56:	3304      	adds	r3, #4
 8014e58:	e7ae      	b.n	8014db8 <__gethex+0x15c>
 8014e5a:	45b1      	cmp	r9, r6
 8014e5c:	d8ea      	bhi.n	8014e34 <__gethex+0x1d8>
 8014e5e:	492b      	ldr	r1, [pc, #172]	@ (8014f0c <__gethex+0x2b0>)
 8014e60:	9303      	str	r3, [sp, #12]
 8014e62:	2201      	movs	r2, #1
 8014e64:	4630      	mov	r0, r6
 8014e66:	f7ff fe05 	bl	8014a74 <strncmp>
 8014e6a:	9b03      	ldr	r3, [sp, #12]
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d1e1      	bne.n	8014e34 <__gethex+0x1d8>
 8014e70:	e7a2      	b.n	8014db8 <__gethex+0x15c>
 8014e72:	1ea9      	subs	r1, r5, #2
 8014e74:	4620      	mov	r0, r4
 8014e76:	f7fe fcd8 	bl	801382a <__any_on>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d0c2      	beq.n	8014e04 <__gethex+0x1a8>
 8014e7e:	f04f 0903 	mov.w	r9, #3
 8014e82:	e7c1      	b.n	8014e08 <__gethex+0x1ac>
 8014e84:	da09      	bge.n	8014e9a <__gethex+0x23e>
 8014e86:	1b75      	subs	r5, r6, r5
 8014e88:	4621      	mov	r1, r4
 8014e8a:	9801      	ldr	r0, [sp, #4]
 8014e8c:	462a      	mov	r2, r5
 8014e8e:	f7fe fa93 	bl	80133b8 <__lshift>
 8014e92:	1b7f      	subs	r7, r7, r5
 8014e94:	4604      	mov	r4, r0
 8014e96:	f100 0a14 	add.w	sl, r0, #20
 8014e9a:	f04f 0900 	mov.w	r9, #0
 8014e9e:	e7b8      	b.n	8014e12 <__gethex+0x1b6>
 8014ea0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014ea4:	42bd      	cmp	r5, r7
 8014ea6:	dd6f      	ble.n	8014f88 <__gethex+0x32c>
 8014ea8:	1bed      	subs	r5, r5, r7
 8014eaa:	42ae      	cmp	r6, r5
 8014eac:	dc34      	bgt.n	8014f18 <__gethex+0x2bc>
 8014eae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014eb2:	2b02      	cmp	r3, #2
 8014eb4:	d022      	beq.n	8014efc <__gethex+0x2a0>
 8014eb6:	2b03      	cmp	r3, #3
 8014eb8:	d024      	beq.n	8014f04 <__gethex+0x2a8>
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d115      	bne.n	8014eea <__gethex+0x28e>
 8014ebe:	42ae      	cmp	r6, r5
 8014ec0:	d113      	bne.n	8014eea <__gethex+0x28e>
 8014ec2:	2e01      	cmp	r6, #1
 8014ec4:	d10b      	bne.n	8014ede <__gethex+0x282>
 8014ec6:	9a02      	ldr	r2, [sp, #8]
 8014ec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ecc:	6013      	str	r3, [r2, #0]
 8014ece:	2301      	movs	r3, #1
 8014ed0:	6123      	str	r3, [r4, #16]
 8014ed2:	f8ca 3000 	str.w	r3, [sl]
 8014ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ed8:	2562      	movs	r5, #98	@ 0x62
 8014eda:	601c      	str	r4, [r3, #0]
 8014edc:	e73a      	b.n	8014d54 <__gethex+0xf8>
 8014ede:	1e71      	subs	r1, r6, #1
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f7fe fca2 	bl	801382a <__any_on>
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d1ed      	bne.n	8014ec6 <__gethex+0x26a>
 8014eea:	9801      	ldr	r0, [sp, #4]
 8014eec:	4621      	mov	r1, r4
 8014eee:	f7fe f84b 	bl	8012f88 <_Bfree>
 8014ef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	6013      	str	r3, [r2, #0]
 8014ef8:	2550      	movs	r5, #80	@ 0x50
 8014efa:	e72b      	b.n	8014d54 <__gethex+0xf8>
 8014efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d1f3      	bne.n	8014eea <__gethex+0x28e>
 8014f02:	e7e0      	b.n	8014ec6 <__gethex+0x26a>
 8014f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1dd      	bne.n	8014ec6 <__gethex+0x26a>
 8014f0a:	e7ee      	b.n	8014eea <__gethex+0x28e>
 8014f0c:	08023118 	.word	0x08023118
 8014f10:	08022fb1 	.word	0x08022fb1
 8014f14:	080232c6 	.word	0x080232c6
 8014f18:	1e6f      	subs	r7, r5, #1
 8014f1a:	f1b9 0f00 	cmp.w	r9, #0
 8014f1e:	d130      	bne.n	8014f82 <__gethex+0x326>
 8014f20:	b127      	cbz	r7, 8014f2c <__gethex+0x2d0>
 8014f22:	4639      	mov	r1, r7
 8014f24:	4620      	mov	r0, r4
 8014f26:	f7fe fc80 	bl	801382a <__any_on>
 8014f2a:	4681      	mov	r9, r0
 8014f2c:	117a      	asrs	r2, r7, #5
 8014f2e:	2301      	movs	r3, #1
 8014f30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014f34:	f007 071f 	and.w	r7, r7, #31
 8014f38:	40bb      	lsls	r3, r7
 8014f3a:	4213      	tst	r3, r2
 8014f3c:	4629      	mov	r1, r5
 8014f3e:	4620      	mov	r0, r4
 8014f40:	bf18      	it	ne
 8014f42:	f049 0902 	orrne.w	r9, r9, #2
 8014f46:	f7ff fe21 	bl	8014b8c <rshift>
 8014f4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014f4e:	1b76      	subs	r6, r6, r5
 8014f50:	2502      	movs	r5, #2
 8014f52:	f1b9 0f00 	cmp.w	r9, #0
 8014f56:	d047      	beq.n	8014fe8 <__gethex+0x38c>
 8014f58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f5c:	2b02      	cmp	r3, #2
 8014f5e:	d015      	beq.n	8014f8c <__gethex+0x330>
 8014f60:	2b03      	cmp	r3, #3
 8014f62:	d017      	beq.n	8014f94 <__gethex+0x338>
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d109      	bne.n	8014f7c <__gethex+0x320>
 8014f68:	f019 0f02 	tst.w	r9, #2
 8014f6c:	d006      	beq.n	8014f7c <__gethex+0x320>
 8014f6e:	f8da 3000 	ldr.w	r3, [sl]
 8014f72:	ea49 0903 	orr.w	r9, r9, r3
 8014f76:	f019 0f01 	tst.w	r9, #1
 8014f7a:	d10e      	bne.n	8014f9a <__gethex+0x33e>
 8014f7c:	f045 0510 	orr.w	r5, r5, #16
 8014f80:	e032      	b.n	8014fe8 <__gethex+0x38c>
 8014f82:	f04f 0901 	mov.w	r9, #1
 8014f86:	e7d1      	b.n	8014f2c <__gethex+0x2d0>
 8014f88:	2501      	movs	r5, #1
 8014f8a:	e7e2      	b.n	8014f52 <__gethex+0x2f6>
 8014f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f8e:	f1c3 0301 	rsb	r3, r3, #1
 8014f92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d0f0      	beq.n	8014f7c <__gethex+0x320>
 8014f9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014f9e:	f104 0314 	add.w	r3, r4, #20
 8014fa2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014fa6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014faa:	f04f 0c00 	mov.w	ip, #0
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014fb8:	d01b      	beq.n	8014ff2 <__gethex+0x396>
 8014fba:	3201      	adds	r2, #1
 8014fbc:	6002      	str	r2, [r0, #0]
 8014fbe:	2d02      	cmp	r5, #2
 8014fc0:	f104 0314 	add.w	r3, r4, #20
 8014fc4:	d13c      	bne.n	8015040 <__gethex+0x3e4>
 8014fc6:	f8d8 2000 	ldr.w	r2, [r8]
 8014fca:	3a01      	subs	r2, #1
 8014fcc:	42b2      	cmp	r2, r6
 8014fce:	d109      	bne.n	8014fe4 <__gethex+0x388>
 8014fd0:	1171      	asrs	r1, r6, #5
 8014fd2:	2201      	movs	r2, #1
 8014fd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014fd8:	f006 061f 	and.w	r6, r6, #31
 8014fdc:	fa02 f606 	lsl.w	r6, r2, r6
 8014fe0:	421e      	tst	r6, r3
 8014fe2:	d13a      	bne.n	801505a <__gethex+0x3fe>
 8014fe4:	f045 0520 	orr.w	r5, r5, #32
 8014fe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fea:	601c      	str	r4, [r3, #0]
 8014fec:	9b02      	ldr	r3, [sp, #8]
 8014fee:	601f      	str	r7, [r3, #0]
 8014ff0:	e6b0      	b.n	8014d54 <__gethex+0xf8>
 8014ff2:	4299      	cmp	r1, r3
 8014ff4:	f843 cc04 	str.w	ip, [r3, #-4]
 8014ff8:	d8d9      	bhi.n	8014fae <__gethex+0x352>
 8014ffa:	68a3      	ldr	r3, [r4, #8]
 8014ffc:	459b      	cmp	fp, r3
 8014ffe:	db17      	blt.n	8015030 <__gethex+0x3d4>
 8015000:	6861      	ldr	r1, [r4, #4]
 8015002:	9801      	ldr	r0, [sp, #4]
 8015004:	3101      	adds	r1, #1
 8015006:	f7fd ff7f 	bl	8012f08 <_Balloc>
 801500a:	4681      	mov	r9, r0
 801500c:	b918      	cbnz	r0, 8015016 <__gethex+0x3ba>
 801500e:	4b1a      	ldr	r3, [pc, #104]	@ (8015078 <__gethex+0x41c>)
 8015010:	4602      	mov	r2, r0
 8015012:	2184      	movs	r1, #132	@ 0x84
 8015014:	e6c5      	b.n	8014da2 <__gethex+0x146>
 8015016:	6922      	ldr	r2, [r4, #16]
 8015018:	3202      	adds	r2, #2
 801501a:	f104 010c 	add.w	r1, r4, #12
 801501e:	0092      	lsls	r2, r2, #2
 8015020:	300c      	adds	r0, #12
 8015022:	f7ff fd6b 	bl	8014afc <memcpy>
 8015026:	4621      	mov	r1, r4
 8015028:	9801      	ldr	r0, [sp, #4]
 801502a:	f7fd ffad 	bl	8012f88 <_Bfree>
 801502e:	464c      	mov	r4, r9
 8015030:	6923      	ldr	r3, [r4, #16]
 8015032:	1c5a      	adds	r2, r3, #1
 8015034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015038:	6122      	str	r2, [r4, #16]
 801503a:	2201      	movs	r2, #1
 801503c:	615a      	str	r2, [r3, #20]
 801503e:	e7be      	b.n	8014fbe <__gethex+0x362>
 8015040:	6922      	ldr	r2, [r4, #16]
 8015042:	455a      	cmp	r2, fp
 8015044:	dd0b      	ble.n	801505e <__gethex+0x402>
 8015046:	2101      	movs	r1, #1
 8015048:	4620      	mov	r0, r4
 801504a:	f7ff fd9f 	bl	8014b8c <rshift>
 801504e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015052:	3701      	adds	r7, #1
 8015054:	42bb      	cmp	r3, r7
 8015056:	f6ff aee0 	blt.w	8014e1a <__gethex+0x1be>
 801505a:	2501      	movs	r5, #1
 801505c:	e7c2      	b.n	8014fe4 <__gethex+0x388>
 801505e:	f016 061f 	ands.w	r6, r6, #31
 8015062:	d0fa      	beq.n	801505a <__gethex+0x3fe>
 8015064:	4453      	add	r3, sl
 8015066:	f1c6 0620 	rsb	r6, r6, #32
 801506a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801506e:	f7fe f83d 	bl	80130ec <__hi0bits>
 8015072:	42b0      	cmp	r0, r6
 8015074:	dbe7      	blt.n	8015046 <__gethex+0x3ea>
 8015076:	e7f0      	b.n	801505a <__gethex+0x3fe>
 8015078:	08022fb1 	.word	0x08022fb1

0801507c <L_shift>:
 801507c:	f1c2 0208 	rsb	r2, r2, #8
 8015080:	0092      	lsls	r2, r2, #2
 8015082:	b570      	push	{r4, r5, r6, lr}
 8015084:	f1c2 0620 	rsb	r6, r2, #32
 8015088:	6843      	ldr	r3, [r0, #4]
 801508a:	6804      	ldr	r4, [r0, #0]
 801508c:	fa03 f506 	lsl.w	r5, r3, r6
 8015090:	432c      	orrs	r4, r5
 8015092:	40d3      	lsrs	r3, r2
 8015094:	6004      	str	r4, [r0, #0]
 8015096:	f840 3f04 	str.w	r3, [r0, #4]!
 801509a:	4288      	cmp	r0, r1
 801509c:	d3f4      	bcc.n	8015088 <L_shift+0xc>
 801509e:	bd70      	pop	{r4, r5, r6, pc}

080150a0 <__match>:
 80150a0:	b530      	push	{r4, r5, lr}
 80150a2:	6803      	ldr	r3, [r0, #0]
 80150a4:	3301      	adds	r3, #1
 80150a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150aa:	b914      	cbnz	r4, 80150b2 <__match+0x12>
 80150ac:	6003      	str	r3, [r0, #0]
 80150ae:	2001      	movs	r0, #1
 80150b0:	bd30      	pop	{r4, r5, pc}
 80150b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80150ba:	2d19      	cmp	r5, #25
 80150bc:	bf98      	it	ls
 80150be:	3220      	addls	r2, #32
 80150c0:	42a2      	cmp	r2, r4
 80150c2:	d0f0      	beq.n	80150a6 <__match+0x6>
 80150c4:	2000      	movs	r0, #0
 80150c6:	e7f3      	b.n	80150b0 <__match+0x10>

080150c8 <__hexnan>:
 80150c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150cc:	680b      	ldr	r3, [r1, #0]
 80150ce:	6801      	ldr	r1, [r0, #0]
 80150d0:	115e      	asrs	r6, r3, #5
 80150d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80150d6:	f013 031f 	ands.w	r3, r3, #31
 80150da:	b087      	sub	sp, #28
 80150dc:	bf18      	it	ne
 80150de:	3604      	addne	r6, #4
 80150e0:	2500      	movs	r5, #0
 80150e2:	1f37      	subs	r7, r6, #4
 80150e4:	4682      	mov	sl, r0
 80150e6:	4690      	mov	r8, r2
 80150e8:	9301      	str	r3, [sp, #4]
 80150ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80150ee:	46b9      	mov	r9, r7
 80150f0:	463c      	mov	r4, r7
 80150f2:	9502      	str	r5, [sp, #8]
 80150f4:	46ab      	mov	fp, r5
 80150f6:	784a      	ldrb	r2, [r1, #1]
 80150f8:	1c4b      	adds	r3, r1, #1
 80150fa:	9303      	str	r3, [sp, #12]
 80150fc:	b342      	cbz	r2, 8015150 <__hexnan+0x88>
 80150fe:	4610      	mov	r0, r2
 8015100:	9105      	str	r1, [sp, #20]
 8015102:	9204      	str	r2, [sp, #16]
 8015104:	f7ff fd94 	bl	8014c30 <__hexdig_fun>
 8015108:	2800      	cmp	r0, #0
 801510a:	d151      	bne.n	80151b0 <__hexnan+0xe8>
 801510c:	9a04      	ldr	r2, [sp, #16]
 801510e:	9905      	ldr	r1, [sp, #20]
 8015110:	2a20      	cmp	r2, #32
 8015112:	d818      	bhi.n	8015146 <__hexnan+0x7e>
 8015114:	9b02      	ldr	r3, [sp, #8]
 8015116:	459b      	cmp	fp, r3
 8015118:	dd13      	ble.n	8015142 <__hexnan+0x7a>
 801511a:	454c      	cmp	r4, r9
 801511c:	d206      	bcs.n	801512c <__hexnan+0x64>
 801511e:	2d07      	cmp	r5, #7
 8015120:	dc04      	bgt.n	801512c <__hexnan+0x64>
 8015122:	462a      	mov	r2, r5
 8015124:	4649      	mov	r1, r9
 8015126:	4620      	mov	r0, r4
 8015128:	f7ff ffa8 	bl	801507c <L_shift>
 801512c:	4544      	cmp	r4, r8
 801512e:	d952      	bls.n	80151d6 <__hexnan+0x10e>
 8015130:	2300      	movs	r3, #0
 8015132:	f1a4 0904 	sub.w	r9, r4, #4
 8015136:	f844 3c04 	str.w	r3, [r4, #-4]
 801513a:	f8cd b008 	str.w	fp, [sp, #8]
 801513e:	464c      	mov	r4, r9
 8015140:	461d      	mov	r5, r3
 8015142:	9903      	ldr	r1, [sp, #12]
 8015144:	e7d7      	b.n	80150f6 <__hexnan+0x2e>
 8015146:	2a29      	cmp	r2, #41	@ 0x29
 8015148:	d157      	bne.n	80151fa <__hexnan+0x132>
 801514a:	3102      	adds	r1, #2
 801514c:	f8ca 1000 	str.w	r1, [sl]
 8015150:	f1bb 0f00 	cmp.w	fp, #0
 8015154:	d051      	beq.n	80151fa <__hexnan+0x132>
 8015156:	454c      	cmp	r4, r9
 8015158:	d206      	bcs.n	8015168 <__hexnan+0xa0>
 801515a:	2d07      	cmp	r5, #7
 801515c:	dc04      	bgt.n	8015168 <__hexnan+0xa0>
 801515e:	462a      	mov	r2, r5
 8015160:	4649      	mov	r1, r9
 8015162:	4620      	mov	r0, r4
 8015164:	f7ff ff8a 	bl	801507c <L_shift>
 8015168:	4544      	cmp	r4, r8
 801516a:	d936      	bls.n	80151da <__hexnan+0x112>
 801516c:	f1a8 0204 	sub.w	r2, r8, #4
 8015170:	4623      	mov	r3, r4
 8015172:	f853 1b04 	ldr.w	r1, [r3], #4
 8015176:	f842 1f04 	str.w	r1, [r2, #4]!
 801517a:	429f      	cmp	r7, r3
 801517c:	d2f9      	bcs.n	8015172 <__hexnan+0xaa>
 801517e:	1b3b      	subs	r3, r7, r4
 8015180:	f023 0303 	bic.w	r3, r3, #3
 8015184:	3304      	adds	r3, #4
 8015186:	3401      	adds	r4, #1
 8015188:	3e03      	subs	r6, #3
 801518a:	42b4      	cmp	r4, r6
 801518c:	bf88      	it	hi
 801518e:	2304      	movhi	r3, #4
 8015190:	4443      	add	r3, r8
 8015192:	2200      	movs	r2, #0
 8015194:	f843 2b04 	str.w	r2, [r3], #4
 8015198:	429f      	cmp	r7, r3
 801519a:	d2fb      	bcs.n	8015194 <__hexnan+0xcc>
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	b91b      	cbnz	r3, 80151a8 <__hexnan+0xe0>
 80151a0:	4547      	cmp	r7, r8
 80151a2:	d128      	bne.n	80151f6 <__hexnan+0x12e>
 80151a4:	2301      	movs	r3, #1
 80151a6:	603b      	str	r3, [r7, #0]
 80151a8:	2005      	movs	r0, #5
 80151aa:	b007      	add	sp, #28
 80151ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b0:	3501      	adds	r5, #1
 80151b2:	2d08      	cmp	r5, #8
 80151b4:	f10b 0b01 	add.w	fp, fp, #1
 80151b8:	dd06      	ble.n	80151c8 <__hexnan+0x100>
 80151ba:	4544      	cmp	r4, r8
 80151bc:	d9c1      	bls.n	8015142 <__hexnan+0x7a>
 80151be:	2300      	movs	r3, #0
 80151c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80151c4:	2501      	movs	r5, #1
 80151c6:	3c04      	subs	r4, #4
 80151c8:	6822      	ldr	r2, [r4, #0]
 80151ca:	f000 000f 	and.w	r0, r0, #15
 80151ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80151d2:	6020      	str	r0, [r4, #0]
 80151d4:	e7b5      	b.n	8015142 <__hexnan+0x7a>
 80151d6:	2508      	movs	r5, #8
 80151d8:	e7b3      	b.n	8015142 <__hexnan+0x7a>
 80151da:	9b01      	ldr	r3, [sp, #4]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d0dd      	beq.n	801519c <__hexnan+0xd4>
 80151e0:	f1c3 0320 	rsb	r3, r3, #32
 80151e4:	f04f 32ff 	mov.w	r2, #4294967295
 80151e8:	40da      	lsrs	r2, r3
 80151ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80151ee:	4013      	ands	r3, r2
 80151f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80151f4:	e7d2      	b.n	801519c <__hexnan+0xd4>
 80151f6:	3f04      	subs	r7, #4
 80151f8:	e7d0      	b.n	801519c <__hexnan+0xd4>
 80151fa:	2004      	movs	r0, #4
 80151fc:	e7d5      	b.n	80151aa <__hexnan+0xe2>

080151fe <__ascii_mbtowc>:
 80151fe:	b082      	sub	sp, #8
 8015200:	b901      	cbnz	r1, 8015204 <__ascii_mbtowc+0x6>
 8015202:	a901      	add	r1, sp, #4
 8015204:	b142      	cbz	r2, 8015218 <__ascii_mbtowc+0x1a>
 8015206:	b14b      	cbz	r3, 801521c <__ascii_mbtowc+0x1e>
 8015208:	7813      	ldrb	r3, [r2, #0]
 801520a:	600b      	str	r3, [r1, #0]
 801520c:	7812      	ldrb	r2, [r2, #0]
 801520e:	1e10      	subs	r0, r2, #0
 8015210:	bf18      	it	ne
 8015212:	2001      	movne	r0, #1
 8015214:	b002      	add	sp, #8
 8015216:	4770      	bx	lr
 8015218:	4610      	mov	r0, r2
 801521a:	e7fb      	b.n	8015214 <__ascii_mbtowc+0x16>
 801521c:	f06f 0001 	mvn.w	r0, #1
 8015220:	e7f8      	b.n	8015214 <__ascii_mbtowc+0x16>

08015222 <_realloc_r>:
 8015222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015226:	4680      	mov	r8, r0
 8015228:	4615      	mov	r5, r2
 801522a:	460c      	mov	r4, r1
 801522c:	b921      	cbnz	r1, 8015238 <_realloc_r+0x16>
 801522e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015232:	4611      	mov	r1, r2
 8015234:	f7fd bddc 	b.w	8012df0 <_malloc_r>
 8015238:	b92a      	cbnz	r2, 8015246 <_realloc_r+0x24>
 801523a:	f7fd fd65 	bl	8012d08 <_free_r>
 801523e:	2400      	movs	r4, #0
 8015240:	4620      	mov	r0, r4
 8015242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015246:	f000 f840 	bl	80152ca <_malloc_usable_size_r>
 801524a:	4285      	cmp	r5, r0
 801524c:	4606      	mov	r6, r0
 801524e:	d802      	bhi.n	8015256 <_realloc_r+0x34>
 8015250:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015254:	d8f4      	bhi.n	8015240 <_realloc_r+0x1e>
 8015256:	4629      	mov	r1, r5
 8015258:	4640      	mov	r0, r8
 801525a:	f7fd fdc9 	bl	8012df0 <_malloc_r>
 801525e:	4607      	mov	r7, r0
 8015260:	2800      	cmp	r0, #0
 8015262:	d0ec      	beq.n	801523e <_realloc_r+0x1c>
 8015264:	42b5      	cmp	r5, r6
 8015266:	462a      	mov	r2, r5
 8015268:	4621      	mov	r1, r4
 801526a:	bf28      	it	cs
 801526c:	4632      	movcs	r2, r6
 801526e:	f7ff fc45 	bl	8014afc <memcpy>
 8015272:	4621      	mov	r1, r4
 8015274:	4640      	mov	r0, r8
 8015276:	f7fd fd47 	bl	8012d08 <_free_r>
 801527a:	463c      	mov	r4, r7
 801527c:	e7e0      	b.n	8015240 <_realloc_r+0x1e>

0801527e <__ascii_wctomb>:
 801527e:	4603      	mov	r3, r0
 8015280:	4608      	mov	r0, r1
 8015282:	b141      	cbz	r1, 8015296 <__ascii_wctomb+0x18>
 8015284:	2aff      	cmp	r2, #255	@ 0xff
 8015286:	d904      	bls.n	8015292 <__ascii_wctomb+0x14>
 8015288:	228a      	movs	r2, #138	@ 0x8a
 801528a:	601a      	str	r2, [r3, #0]
 801528c:	f04f 30ff 	mov.w	r0, #4294967295
 8015290:	4770      	bx	lr
 8015292:	700a      	strb	r2, [r1, #0]
 8015294:	2001      	movs	r0, #1
 8015296:	4770      	bx	lr

08015298 <fiprintf>:
 8015298:	b40e      	push	{r1, r2, r3}
 801529a:	b503      	push	{r0, r1, lr}
 801529c:	4601      	mov	r1, r0
 801529e:	ab03      	add	r3, sp, #12
 80152a0:	4805      	ldr	r0, [pc, #20]	@ (80152b8 <fiprintf+0x20>)
 80152a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80152a6:	6800      	ldr	r0, [r0, #0]
 80152a8:	9301      	str	r3, [sp, #4]
 80152aa:	f000 f83f 	bl	801532c <_vfiprintf_r>
 80152ae:	b002      	add	sp, #8
 80152b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80152b4:	b003      	add	sp, #12
 80152b6:	4770      	bx	lr
 80152b8:	2000039c 	.word	0x2000039c

080152bc <abort>:
 80152bc:	b508      	push	{r3, lr}
 80152be:	2006      	movs	r0, #6
 80152c0:	f000 f974 	bl	80155ac <raise>
 80152c4:	2001      	movs	r0, #1
 80152c6:	f7ee fc9d 	bl	8003c04 <_exit>

080152ca <_malloc_usable_size_r>:
 80152ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152ce:	1f18      	subs	r0, r3, #4
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	bfbc      	itt	lt
 80152d4:	580b      	ldrlt	r3, [r1, r0]
 80152d6:	18c0      	addlt	r0, r0, r3
 80152d8:	4770      	bx	lr

080152da <__sfputc_r>:
 80152da:	6893      	ldr	r3, [r2, #8]
 80152dc:	3b01      	subs	r3, #1
 80152de:	2b00      	cmp	r3, #0
 80152e0:	b410      	push	{r4}
 80152e2:	6093      	str	r3, [r2, #8]
 80152e4:	da08      	bge.n	80152f8 <__sfputc_r+0x1e>
 80152e6:	6994      	ldr	r4, [r2, #24]
 80152e8:	42a3      	cmp	r3, r4
 80152ea:	db01      	blt.n	80152f0 <__sfputc_r+0x16>
 80152ec:	290a      	cmp	r1, #10
 80152ee:	d103      	bne.n	80152f8 <__sfputc_r+0x1e>
 80152f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152f4:	f7fc bda1 	b.w	8011e3a <__swbuf_r>
 80152f8:	6813      	ldr	r3, [r2, #0]
 80152fa:	1c58      	adds	r0, r3, #1
 80152fc:	6010      	str	r0, [r2, #0]
 80152fe:	7019      	strb	r1, [r3, #0]
 8015300:	4608      	mov	r0, r1
 8015302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015306:	4770      	bx	lr

08015308 <__sfputs_r>:
 8015308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801530a:	4606      	mov	r6, r0
 801530c:	460f      	mov	r7, r1
 801530e:	4614      	mov	r4, r2
 8015310:	18d5      	adds	r5, r2, r3
 8015312:	42ac      	cmp	r4, r5
 8015314:	d101      	bne.n	801531a <__sfputs_r+0x12>
 8015316:	2000      	movs	r0, #0
 8015318:	e007      	b.n	801532a <__sfputs_r+0x22>
 801531a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801531e:	463a      	mov	r2, r7
 8015320:	4630      	mov	r0, r6
 8015322:	f7ff ffda 	bl	80152da <__sfputc_r>
 8015326:	1c43      	adds	r3, r0, #1
 8015328:	d1f3      	bne.n	8015312 <__sfputs_r+0xa>
 801532a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801532c <_vfiprintf_r>:
 801532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015330:	460d      	mov	r5, r1
 8015332:	b09d      	sub	sp, #116	@ 0x74
 8015334:	4614      	mov	r4, r2
 8015336:	4698      	mov	r8, r3
 8015338:	4606      	mov	r6, r0
 801533a:	b118      	cbz	r0, 8015344 <_vfiprintf_r+0x18>
 801533c:	6a03      	ldr	r3, [r0, #32]
 801533e:	b90b      	cbnz	r3, 8015344 <_vfiprintf_r+0x18>
 8015340:	f7fc fc84 	bl	8011c4c <__sinit>
 8015344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015346:	07d9      	lsls	r1, r3, #31
 8015348:	d405      	bmi.n	8015356 <_vfiprintf_r+0x2a>
 801534a:	89ab      	ldrh	r3, [r5, #12]
 801534c:	059a      	lsls	r2, r3, #22
 801534e:	d402      	bmi.n	8015356 <_vfiprintf_r+0x2a>
 8015350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015352:	f7fc fe84 	bl	801205e <__retarget_lock_acquire_recursive>
 8015356:	89ab      	ldrh	r3, [r5, #12]
 8015358:	071b      	lsls	r3, r3, #28
 801535a:	d501      	bpl.n	8015360 <_vfiprintf_r+0x34>
 801535c:	692b      	ldr	r3, [r5, #16]
 801535e:	b99b      	cbnz	r3, 8015388 <_vfiprintf_r+0x5c>
 8015360:	4629      	mov	r1, r5
 8015362:	4630      	mov	r0, r6
 8015364:	f7fc fda8 	bl	8011eb8 <__swsetup_r>
 8015368:	b170      	cbz	r0, 8015388 <_vfiprintf_r+0x5c>
 801536a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801536c:	07dc      	lsls	r4, r3, #31
 801536e:	d504      	bpl.n	801537a <_vfiprintf_r+0x4e>
 8015370:	f04f 30ff 	mov.w	r0, #4294967295
 8015374:	b01d      	add	sp, #116	@ 0x74
 8015376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801537a:	89ab      	ldrh	r3, [r5, #12]
 801537c:	0598      	lsls	r0, r3, #22
 801537e:	d4f7      	bmi.n	8015370 <_vfiprintf_r+0x44>
 8015380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015382:	f7fc fe6d 	bl	8012060 <__retarget_lock_release_recursive>
 8015386:	e7f3      	b.n	8015370 <_vfiprintf_r+0x44>
 8015388:	2300      	movs	r3, #0
 801538a:	9309      	str	r3, [sp, #36]	@ 0x24
 801538c:	2320      	movs	r3, #32
 801538e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015392:	f8cd 800c 	str.w	r8, [sp, #12]
 8015396:	2330      	movs	r3, #48	@ 0x30
 8015398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015548 <_vfiprintf_r+0x21c>
 801539c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80153a0:	f04f 0901 	mov.w	r9, #1
 80153a4:	4623      	mov	r3, r4
 80153a6:	469a      	mov	sl, r3
 80153a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153ac:	b10a      	cbz	r2, 80153b2 <_vfiprintf_r+0x86>
 80153ae:	2a25      	cmp	r2, #37	@ 0x25
 80153b0:	d1f9      	bne.n	80153a6 <_vfiprintf_r+0x7a>
 80153b2:	ebba 0b04 	subs.w	fp, sl, r4
 80153b6:	d00b      	beq.n	80153d0 <_vfiprintf_r+0xa4>
 80153b8:	465b      	mov	r3, fp
 80153ba:	4622      	mov	r2, r4
 80153bc:	4629      	mov	r1, r5
 80153be:	4630      	mov	r0, r6
 80153c0:	f7ff ffa2 	bl	8015308 <__sfputs_r>
 80153c4:	3001      	adds	r0, #1
 80153c6:	f000 80a7 	beq.w	8015518 <_vfiprintf_r+0x1ec>
 80153ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153cc:	445a      	add	r2, fp
 80153ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80153d0:	f89a 3000 	ldrb.w	r3, [sl]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	f000 809f 	beq.w	8015518 <_vfiprintf_r+0x1ec>
 80153da:	2300      	movs	r3, #0
 80153dc:	f04f 32ff 	mov.w	r2, #4294967295
 80153e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153e4:	f10a 0a01 	add.w	sl, sl, #1
 80153e8:	9304      	str	r3, [sp, #16]
 80153ea:	9307      	str	r3, [sp, #28]
 80153ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80153f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80153f2:	4654      	mov	r4, sl
 80153f4:	2205      	movs	r2, #5
 80153f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153fa:	4853      	ldr	r0, [pc, #332]	@ (8015548 <_vfiprintf_r+0x21c>)
 80153fc:	f7ea ff10 	bl	8000220 <memchr>
 8015400:	9a04      	ldr	r2, [sp, #16]
 8015402:	b9d8      	cbnz	r0, 801543c <_vfiprintf_r+0x110>
 8015404:	06d1      	lsls	r1, r2, #27
 8015406:	bf44      	itt	mi
 8015408:	2320      	movmi	r3, #32
 801540a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801540e:	0713      	lsls	r3, r2, #28
 8015410:	bf44      	itt	mi
 8015412:	232b      	movmi	r3, #43	@ 0x2b
 8015414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015418:	f89a 3000 	ldrb.w	r3, [sl]
 801541c:	2b2a      	cmp	r3, #42	@ 0x2a
 801541e:	d015      	beq.n	801544c <_vfiprintf_r+0x120>
 8015420:	9a07      	ldr	r2, [sp, #28]
 8015422:	4654      	mov	r4, sl
 8015424:	2000      	movs	r0, #0
 8015426:	f04f 0c0a 	mov.w	ip, #10
 801542a:	4621      	mov	r1, r4
 801542c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015430:	3b30      	subs	r3, #48	@ 0x30
 8015432:	2b09      	cmp	r3, #9
 8015434:	d94b      	bls.n	80154ce <_vfiprintf_r+0x1a2>
 8015436:	b1b0      	cbz	r0, 8015466 <_vfiprintf_r+0x13a>
 8015438:	9207      	str	r2, [sp, #28]
 801543a:	e014      	b.n	8015466 <_vfiprintf_r+0x13a>
 801543c:	eba0 0308 	sub.w	r3, r0, r8
 8015440:	fa09 f303 	lsl.w	r3, r9, r3
 8015444:	4313      	orrs	r3, r2
 8015446:	9304      	str	r3, [sp, #16]
 8015448:	46a2      	mov	sl, r4
 801544a:	e7d2      	b.n	80153f2 <_vfiprintf_r+0xc6>
 801544c:	9b03      	ldr	r3, [sp, #12]
 801544e:	1d19      	adds	r1, r3, #4
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	9103      	str	r1, [sp, #12]
 8015454:	2b00      	cmp	r3, #0
 8015456:	bfbb      	ittet	lt
 8015458:	425b      	neglt	r3, r3
 801545a:	f042 0202 	orrlt.w	r2, r2, #2
 801545e:	9307      	strge	r3, [sp, #28]
 8015460:	9307      	strlt	r3, [sp, #28]
 8015462:	bfb8      	it	lt
 8015464:	9204      	strlt	r2, [sp, #16]
 8015466:	7823      	ldrb	r3, [r4, #0]
 8015468:	2b2e      	cmp	r3, #46	@ 0x2e
 801546a:	d10a      	bne.n	8015482 <_vfiprintf_r+0x156>
 801546c:	7863      	ldrb	r3, [r4, #1]
 801546e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015470:	d132      	bne.n	80154d8 <_vfiprintf_r+0x1ac>
 8015472:	9b03      	ldr	r3, [sp, #12]
 8015474:	1d1a      	adds	r2, r3, #4
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	9203      	str	r2, [sp, #12]
 801547a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801547e:	3402      	adds	r4, #2
 8015480:	9305      	str	r3, [sp, #20]
 8015482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015558 <_vfiprintf_r+0x22c>
 8015486:	7821      	ldrb	r1, [r4, #0]
 8015488:	2203      	movs	r2, #3
 801548a:	4650      	mov	r0, sl
 801548c:	f7ea fec8 	bl	8000220 <memchr>
 8015490:	b138      	cbz	r0, 80154a2 <_vfiprintf_r+0x176>
 8015492:	9b04      	ldr	r3, [sp, #16]
 8015494:	eba0 000a 	sub.w	r0, r0, sl
 8015498:	2240      	movs	r2, #64	@ 0x40
 801549a:	4082      	lsls	r2, r0
 801549c:	4313      	orrs	r3, r2
 801549e:	3401      	adds	r4, #1
 80154a0:	9304      	str	r3, [sp, #16]
 80154a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154a6:	4829      	ldr	r0, [pc, #164]	@ (801554c <_vfiprintf_r+0x220>)
 80154a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80154ac:	2206      	movs	r2, #6
 80154ae:	f7ea feb7 	bl	8000220 <memchr>
 80154b2:	2800      	cmp	r0, #0
 80154b4:	d03f      	beq.n	8015536 <_vfiprintf_r+0x20a>
 80154b6:	4b26      	ldr	r3, [pc, #152]	@ (8015550 <_vfiprintf_r+0x224>)
 80154b8:	bb1b      	cbnz	r3, 8015502 <_vfiprintf_r+0x1d6>
 80154ba:	9b03      	ldr	r3, [sp, #12]
 80154bc:	3307      	adds	r3, #7
 80154be:	f023 0307 	bic.w	r3, r3, #7
 80154c2:	3308      	adds	r3, #8
 80154c4:	9303      	str	r3, [sp, #12]
 80154c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154c8:	443b      	add	r3, r7
 80154ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80154cc:	e76a      	b.n	80153a4 <_vfiprintf_r+0x78>
 80154ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80154d2:	460c      	mov	r4, r1
 80154d4:	2001      	movs	r0, #1
 80154d6:	e7a8      	b.n	801542a <_vfiprintf_r+0xfe>
 80154d8:	2300      	movs	r3, #0
 80154da:	3401      	adds	r4, #1
 80154dc:	9305      	str	r3, [sp, #20]
 80154de:	4619      	mov	r1, r3
 80154e0:	f04f 0c0a 	mov.w	ip, #10
 80154e4:	4620      	mov	r0, r4
 80154e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154ea:	3a30      	subs	r2, #48	@ 0x30
 80154ec:	2a09      	cmp	r2, #9
 80154ee:	d903      	bls.n	80154f8 <_vfiprintf_r+0x1cc>
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d0c6      	beq.n	8015482 <_vfiprintf_r+0x156>
 80154f4:	9105      	str	r1, [sp, #20]
 80154f6:	e7c4      	b.n	8015482 <_vfiprintf_r+0x156>
 80154f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80154fc:	4604      	mov	r4, r0
 80154fe:	2301      	movs	r3, #1
 8015500:	e7f0      	b.n	80154e4 <_vfiprintf_r+0x1b8>
 8015502:	ab03      	add	r3, sp, #12
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	462a      	mov	r2, r5
 8015508:	4b12      	ldr	r3, [pc, #72]	@ (8015554 <_vfiprintf_r+0x228>)
 801550a:	a904      	add	r1, sp, #16
 801550c:	4630      	mov	r0, r6
 801550e:	f7fb fd45 	bl	8010f9c <_printf_float>
 8015512:	4607      	mov	r7, r0
 8015514:	1c78      	adds	r0, r7, #1
 8015516:	d1d6      	bne.n	80154c6 <_vfiprintf_r+0x19a>
 8015518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801551a:	07d9      	lsls	r1, r3, #31
 801551c:	d405      	bmi.n	801552a <_vfiprintf_r+0x1fe>
 801551e:	89ab      	ldrh	r3, [r5, #12]
 8015520:	059a      	lsls	r2, r3, #22
 8015522:	d402      	bmi.n	801552a <_vfiprintf_r+0x1fe>
 8015524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015526:	f7fc fd9b 	bl	8012060 <__retarget_lock_release_recursive>
 801552a:	89ab      	ldrh	r3, [r5, #12]
 801552c:	065b      	lsls	r3, r3, #25
 801552e:	f53f af1f 	bmi.w	8015370 <_vfiprintf_r+0x44>
 8015532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015534:	e71e      	b.n	8015374 <_vfiprintf_r+0x48>
 8015536:	ab03      	add	r3, sp, #12
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	462a      	mov	r2, r5
 801553c:	4b05      	ldr	r3, [pc, #20]	@ (8015554 <_vfiprintf_r+0x228>)
 801553e:	a904      	add	r1, sp, #16
 8015540:	4630      	mov	r0, r6
 8015542:	f7fb ffc3 	bl	80114cc <_printf_i>
 8015546:	e7e4      	b.n	8015512 <_vfiprintf_r+0x1e6>
 8015548:	08023271 	.word	0x08023271
 801554c:	0802327b 	.word	0x0802327b
 8015550:	08010f9d 	.word	0x08010f9d
 8015554:	08015309 	.word	0x08015309
 8015558:	08023277 	.word	0x08023277

0801555c <_raise_r>:
 801555c:	291f      	cmp	r1, #31
 801555e:	b538      	push	{r3, r4, r5, lr}
 8015560:	4605      	mov	r5, r0
 8015562:	460c      	mov	r4, r1
 8015564:	d904      	bls.n	8015570 <_raise_r+0x14>
 8015566:	2316      	movs	r3, #22
 8015568:	6003      	str	r3, [r0, #0]
 801556a:	f04f 30ff 	mov.w	r0, #4294967295
 801556e:	bd38      	pop	{r3, r4, r5, pc}
 8015570:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015572:	b112      	cbz	r2, 801557a <_raise_r+0x1e>
 8015574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015578:	b94b      	cbnz	r3, 801558e <_raise_r+0x32>
 801557a:	4628      	mov	r0, r5
 801557c:	f000 f830 	bl	80155e0 <_getpid_r>
 8015580:	4622      	mov	r2, r4
 8015582:	4601      	mov	r1, r0
 8015584:	4628      	mov	r0, r5
 8015586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801558a:	f000 b817 	b.w	80155bc <_kill_r>
 801558e:	2b01      	cmp	r3, #1
 8015590:	d00a      	beq.n	80155a8 <_raise_r+0x4c>
 8015592:	1c59      	adds	r1, r3, #1
 8015594:	d103      	bne.n	801559e <_raise_r+0x42>
 8015596:	2316      	movs	r3, #22
 8015598:	6003      	str	r3, [r0, #0]
 801559a:	2001      	movs	r0, #1
 801559c:	e7e7      	b.n	801556e <_raise_r+0x12>
 801559e:	2100      	movs	r1, #0
 80155a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80155a4:	4620      	mov	r0, r4
 80155a6:	4798      	blx	r3
 80155a8:	2000      	movs	r0, #0
 80155aa:	e7e0      	b.n	801556e <_raise_r+0x12>

080155ac <raise>:
 80155ac:	4b02      	ldr	r3, [pc, #8]	@ (80155b8 <raise+0xc>)
 80155ae:	4601      	mov	r1, r0
 80155b0:	6818      	ldr	r0, [r3, #0]
 80155b2:	f7ff bfd3 	b.w	801555c <_raise_r>
 80155b6:	bf00      	nop
 80155b8:	2000039c 	.word	0x2000039c

080155bc <_kill_r>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	4d07      	ldr	r5, [pc, #28]	@ (80155dc <_kill_r+0x20>)
 80155c0:	2300      	movs	r3, #0
 80155c2:	4604      	mov	r4, r0
 80155c4:	4608      	mov	r0, r1
 80155c6:	4611      	mov	r1, r2
 80155c8:	602b      	str	r3, [r5, #0]
 80155ca:	f7ee fb0b 	bl	8003be4 <_kill>
 80155ce:	1c43      	adds	r3, r0, #1
 80155d0:	d102      	bne.n	80155d8 <_kill_r+0x1c>
 80155d2:	682b      	ldr	r3, [r5, #0]
 80155d4:	b103      	cbz	r3, 80155d8 <_kill_r+0x1c>
 80155d6:	6023      	str	r3, [r4, #0]
 80155d8:	bd38      	pop	{r3, r4, r5, pc}
 80155da:	bf00      	nop
 80155dc:	20002dbc 	.word	0x20002dbc

080155e0 <_getpid_r>:
 80155e0:	f7ee baf8 	b.w	8003bd4 <_getpid>

080155e4 <_init>:
 80155e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155e6:	bf00      	nop
 80155e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ea:	bc08      	pop	{r3}
 80155ec:	469e      	mov	lr, r3
 80155ee:	4770      	bx	lr

080155f0 <_fini>:
 80155f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155f2:	bf00      	nop
 80155f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155f6:	bc08      	pop	{r3}
 80155f8:	469e      	mov	lr, r3
 80155fa:	4770      	bx	lr
