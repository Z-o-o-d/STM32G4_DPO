
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000dae0  080155e0  080155e0  000165e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080230c0  080230c0  00025550  2**0
                  CONTENTS
  4 .ARM          00000008  080230c0  080230c0  000240c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080230c8  080230c8  00025550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080230c8  080230c8  000240c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080230cc  080230cc  000240cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000550  20000000  080230d0  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002874  20000550  08023620  00025550  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dc4  08023620  00025dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025550  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa08  00000000  00000000  00025580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aa5  00000000  00000000  0004ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c0  00000000  00000000  00055a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b88  00000000  00000000  00057df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030696  00000000  00000000  00059978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f45a  00000000  00000000  0008a00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a64f  00000000  00000000  000b9468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3ab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad2c  00000000  00000000  001e3afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001ee828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000550 	.word	0x20000550
 80001fc:	00000000 	.word	0x00000000
 8000200:	080155c4 	.word	0x080155c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000554 	.word	0x20000554
 800021c:	080155c4 	.word	0x080155c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    if (bit)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800104a:	f005 f9f5 	bl	8006438 <HAL_GPIO_WritePin>
 800104e:	e004      	b.n	800105a <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001056:	f005 f9ef 	bl	8006438 <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001060:	f005 f9ea 	bl	8006438 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800106a:	f005 f9e5 	bl	8006438 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd6 	bl	8001034 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <TLC5952_WriteLED+0x64>)
 800108a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e013      	b.n	80010ba <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dae7      	bge.n	8001092 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010c8:	f005 f9b6 	bl	8006438 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010d2:	f005 f9b1 	bl	8006438 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000056c 	.word	0x2000056c
 80010e4:	48000400 	.word	0x48000400

080010e8 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ffa0 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80010f4:	2306      	movs	r3, #6
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e012      	b.n	8001120 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80010fa:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff8d 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dae9      	bge.n	80010fa <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e012      	b.n	8001152 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff74 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dae9      	bge.n	800112c <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	e012      	b.n	8001184 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5b 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae9      	bge.n	800115e <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e012      	b.n	80011b6 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff42 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dae9      	bge.n	8001190 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011c2:	f005 f939 	bl	8006438 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011cc:	f005 f934 	bl	8006438 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000056c 	.word	0x2000056c
 80011dc:	48000400 	.word	0x48000400

080011e0 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <FT6336_ReadRegister+0x38>)
 8001208:	f005 f9ec 	bl	80065e4 <HAL_I2C_Mem_Read>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000066c 	.word	0x2000066c

0800121c <FT6336_Init>:

void FT6336_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <FT6336_Init+0x48>)
 8001228:	f005 f906 	bl	8006438 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f002 fe87 	bl	8003f40 <HAL_Delay>
    FT6336_RST_H;
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	480b      	ldr	r0, [pc, #44]	@ (8001264 <FT6336_Init+0x48>)
 8001238:	f005 f8fe 	bl	8006438 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	@ 0x32
 800123e:	f002 fe7f 	bl	8003f40 <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	20a8      	movs	r0, #168	@ 0xa8
 800124e:	f7ff ffc7 	bl	80011e0 <FT6336_ReadRegister>
    HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f002 fe73 	bl	8003f40 <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000c00 	.word	0x48000c00

08001268 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128a:	b29a      	uxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff95 	bl	80011e0 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d054      	beq.n	800136e <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2204      	movs	r2, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff ff87 	bl	80011e0 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80012d2:	7a3b      	ldrb	r3, [r7, #8]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7a7b      	ldrb	r3, [r7, #9]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80012ec:	7abb      	ldrb	r3, [r7, #10]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff ffaa 	bl	8001268 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d929      	bls.n	800136e <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	3304      	adds	r3, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	2009      	movs	r0, #9
 8001326:	f7ff ff5b 	bl	80011e0 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21b      	sxth	r3, r3
 8001330:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001334:	b21a      	sxth	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800134e:	b21a      	sxth	r2, r3
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff ff7d 	bl	8001268 <AdjustTouchCoordinates>
        }
    }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <__io_putchar>:
int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE
int fputc(int ch, FILE *f)
#endif PUTCHAR_PROTOTYPE
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <__io_putchar+0x20>)
 800138a:	f00a ff1b 	bl	800c1c4 <HAL_UART_Transmit>
    return ch;
 800138e:	687b      	ldr	r3, [r7, #4]
};
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200006c0 	.word	0x200006c0

0800139c <Analog_FE_Update>:
	uint16_t OFFSET2 :12;
} FEAnalogStates;

FEAnalogStates FEAnalog = {0};  // 全局变量，存储引脚状态

void Analog_FE_Update(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH1);
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f005 f841 	bl	8006438 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 0) & 0x01));
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2120      	movs	r1, #32
 80013ca:	483e      	ldr	r0, [pc, #248]	@ (80014c4 <Analog_FE_Update+0x128>)
 80013cc:	f005 f834 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ea:	4837      	ldr	r0, [pc, #220]	@ (80014c8 <Analog_FE_Update+0x12c>)
 80013ec:	f005 f824 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	109b      	asrs	r3, r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f005 f813 	bl	8006438 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH2);
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001424:	f005 f808 	bl	8006438 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 0) & 0x01));
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <Analog_FE_Update+0x124>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001440:	f004 fffa 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001460:	f004 ffea 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2102      	movs	r1, #2
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f004 ffda 	bl	8006438 <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	b29b      	uxth	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <Analog_FE_Update+0x130>)
 8001494:	f004 f9f4 	bl	8005880 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <Analog_FE_Update+0x124>)
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014a8:	f004 f9ea 	bl	8005880 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <Analog_FE_Update+0x130>)
 80014b0:	f004 f97a 	bl	80057a8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014b8:	f004 f976 	bl	80057a8 <HAL_DAC_Start>

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000c08 	.word	0x20000c08
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	20000630 	.word	0x20000630
 80014d0:	20000644 	.word	0x20000644

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f002 fcc0 	bl	8003e5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f91b 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f000 ff8f 	bl	8002404 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e6:	f000 ff53 	bl	8002390 <MX_DMA_Init>
  MX_USB_Device_Init();
 80014ea:	f00e ffc1 	bl	8010470 <MX_USB_Device_Init>
  MX_COMP2_Init();
 80014ee:	f000 f9c7 	bl	8001880 <MX_COMP2_Init>
  MX_COMP5_Init();
 80014f2:	f000 f9eb 	bl	80018cc <MX_COMP5_Init>
  MX_DAC1_Init();
 80014f6:	f000 fa0f 	bl	8001918 <MX_DAC1_Init>
  MX_DAC2_Init();
 80014fa:	f000 fa57 	bl	80019ac <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80014fe:	f000 fb53 	bl	8001ba8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001502:	f000 fb7d 	bl	8001c00 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001506:	f000 fba1 	bl	8001c4c <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 800150a:	f000 fc11 	bl	8001d30 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 800150e:	f000 fc79 	bl	8001e04 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001512:	f000 fd27 	bl	8001f64 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001516:	f000 fee1 	bl	80022dc <MX_TIM20_Init>
  MX_TIM3_Init();
 800151a:	f000 fccd 	bl	8001eb8 <MX_TIM3_Init>
  MX_ADC5_Init();
 800151e:	f000 f949 	bl	80017b4 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001522:	f000 fe37 	bl	8002194 <MX_TIM15_Init>
  MX_TIM8_Init();
 8001526:	f000 fd73 	bl	8002010 <MX_TIM8_Init>
  MX_SPI3_Init();
 800152a:	f000 fc2d 	bl	8001d88 <MX_SPI3_Init>
  MX_I2C3_Init();
 800152e:	f000 fab1 	bl	8001a94 <MX_I2C3_Init>
  MX_DAC4_Init();
 8001532:	f000 fa75 	bl	8001a20 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 8001536:	f000 faed 	bl	8001b14 <MX_LPUART1_UART_Init>
  MX_OPAMP4_Init();
 800153a:	f000 fbad 	bl	8001c98 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 800153e:	f000 fbd1 	bl	8001ce4 <MX_OPAMP5_Init>
  /* USER CODE BEGIN 2 */




  HAL_OPAMP_Start(&hopamp1);
 8001542:	4860      	ldr	r0, [pc, #384]	@ (80016c4 <main+0x1f0>)
 8001544:	f005 fd3e 	bl	8006fc4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8001548:	485f      	ldr	r0, [pc, #380]	@ (80016c8 <main+0x1f4>)
 800154a:	f005 fd3b 	bl	8006fc4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 800154e:	485f      	ldr	r0, [pc, #380]	@ (80016cc <main+0x1f8>)
 8001550:	f005 fd38 	bl	8006fc4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp4);
 8001554:	485e      	ldr	r0, [pc, #376]	@ (80016d0 <main+0x1fc>)
 8001556:	f005 fd35 	bl	8006fc4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp5);
 800155a:	485e      	ldr	r0, [pc, #376]	@ (80016d4 <main+0x200>)
 800155c:	f005 fd32 	bl	8006fc4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp6);
 8001560:	485d      	ldr	r0, [pc, #372]	@ (80016d8 <main+0x204>)
 8001562:	f005 fd2f 	bl	8006fc4 <HAL_OPAMP_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001566:	213c      	movs	r1, #60	@ 0x3c
 8001568:	485c      	ldr	r0, [pc, #368]	@ (80016dc <main+0x208>)
 800156a:	f009 fc69 	bl	800ae40 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800156e:	213c      	movs	r1, #60	@ 0x3c
 8001570:	485b      	ldr	r0, [pc, #364]	@ (80016e0 <main+0x20c>)
 8001572:	f009 fc65 	bl	800ae40 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001576:	213c      	movs	r1, #60	@ 0x3c
 8001578:	485a      	ldr	r0, [pc, #360]	@ (80016e4 <main+0x210>)
 800157a:	f009 fc61 	bl	800ae40 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 800157e:	213c      	movs	r1, #60	@ 0x3c
 8001580:	4859      	ldr	r0, [pc, #356]	@ (80016e8 <main+0x214>)
 8001582:	f009 fc5d 	bl	800ae40 <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001586:	2100      	movs	r1, #0
 8001588:	4858      	ldr	r0, [pc, #352]	@ (80016ec <main+0x218>)
 800158a:	f009 f875 	bl	800a678 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800158e:	2100      	movs	r1, #0
 8001590:	4857      	ldr	r0, [pc, #348]	@ (80016f0 <main+0x21c>)
 8001592:	f009 f871 	bl	800a678 <HAL_TIM_PWM_Start>
  FT6336_Init();
 8001596:	f7ff fe41 	bl	800121c <FT6336_Init>
  ST7789_Init();
 800159a:	f001 f94f 	bl	800283c <ST7789_Init>

//	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
//	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
//	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
	  ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 800159e:	4b55      	ldr	r3, [pc, #340]	@ (80016f4 <main+0x220>)
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	23a0      	movs	r3, #160	@ 0xa0
 80015a4:	22a0      	movs	r2, #160	@ 0xa0
 80015a6:	210a      	movs	r1, #10
 80015a8:	200a      	movs	r0, #10
 80015aa:	f001 fbe2 	bl	8002d72 <ST7789_DrawImage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  ST7789_Test();
//	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);
	TLC5952_WriteLED();  // 发送数据
 80015ae:	f7ff fd65 	bl	800107c <TLC5952_WriteLED>
	TLC5952_WriteControl();
 80015b2:	f7ff fd99 	bl	80010e8 <TLC5952_WriteControl>

	printf("123\r\n");
 80015b6:	4850      	ldr	r0, [pc, #320]	@ (80016f8 <main+0x224>)
 80015b8:	f010 fbc2 	bl	8011d40 <puts>



	sprintf(BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 80015bc:	4b49      	ldr	r3, [pc, #292]	@ (80016e4 <main+0x210>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	461a      	mov	r2, r3
 80015c4:	494d      	ldr	r1, [pc, #308]	@ (80016fc <main+0x228>)
 80015c6:	484e      	ldr	r0, [pc, #312]	@ (8001700 <main+0x22c>)
 80015c8:	f010 fbc2 	bl	8011d50 <siprintf>
	ST7789_WriteString(200, 10, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80015cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001704 <main+0x230>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	9202      	str	r2, [sp, #8]
 80015d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d6:	9201      	str	r2, [sp, #4]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a48      	ldr	r2, [pc, #288]	@ (8001700 <main+0x22c>)
 80015e0:	210a      	movs	r1, #10
 80015e2:	20c8      	movs	r0, #200	@ 0xc8
 80015e4:	f001 fc7e 	bl	8002ee4 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC2:%5d",htim3.Instance->CNT);
 80015e8:	4b3d      	ldr	r3, [pc, #244]	@ (80016e0 <main+0x20c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	461a      	mov	r2, r3
 80015f0:	4945      	ldr	r1, [pc, #276]	@ (8001708 <main+0x234>)
 80015f2:	4843      	ldr	r0, [pc, #268]	@ (8001700 <main+0x22c>)
 80015f4:	f010 fbac 	bl	8011d50 <siprintf>
	ST7789_WriteString(200, 40, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80015f8:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <main+0x230>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	9202      	str	r2, [sp, #8]
 80015fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001602:	9201      	str	r2, [sp, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a3d      	ldr	r2, [pc, #244]	@ (8001700 <main+0x22c>)
 800160c:	2128      	movs	r1, #40	@ 0x28
 800160e:	20c8      	movs	r0, #200	@ 0xc8
 8001610:	f001 fc68 	bl	8002ee4 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC3:%5d",htim20.Instance->CNT);
 8001614:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <main+0x214>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	461a      	mov	r2, r3
 800161c:	493b      	ldr	r1, [pc, #236]	@ (800170c <main+0x238>)
 800161e:	4838      	ldr	r0, [pc, #224]	@ (8001700 <main+0x22c>)
 8001620:	f010 fb96 	bl	8011d50 <siprintf>
	ST7789_WriteString(200, 70, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <main+0x230>)
 8001626:	2200      	movs	r2, #0
 8001628:	9202      	str	r2, [sp, #8]
 800162a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162e:	9201      	str	r2, [sp, #4]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <main+0x22c>)
 8001638:	2146      	movs	r1, #70	@ 0x46
 800163a:	20c8      	movs	r0, #200	@ 0xc8
 800163c:	f001 fc52 	bl	8002ee4 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC4:%5d",htim1.Instance->CNT);
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <main+0x208>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	461a      	mov	r2, r3
 8001648:	4931      	ldr	r1, [pc, #196]	@ (8001710 <main+0x23c>)
 800164a:	482d      	ldr	r0, [pc, #180]	@ (8001700 <main+0x22c>)
 800164c:	f010 fb80 	bl	8011d50 <siprintf>
	ST7789_WriteString(200, 100, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8001650:	4b2c      	ldr	r3, [pc, #176]	@ (8001704 <main+0x230>)
 8001652:	2200      	movs	r2, #0
 8001654:	9202      	str	r2, [sp, #8]
 8001656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800165a:	9201      	str	r2, [sp, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a27      	ldr	r2, [pc, #156]	@ (8001700 <main+0x22c>)
 8001664:	2164      	movs	r1, #100	@ 0x64
 8001666:	20c8      	movs	r0, #200	@ 0xc8
 8001668:	f001 fc3c 	bl	8002ee4 <ST7789_WriteString>


	ST7789_DrawTriangle(20, 210, 40, 200, 40, 220, WHITE);
 800166c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	23dc      	movs	r3, #220	@ 0xdc
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2328      	movs	r3, #40	@ 0x28
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	23c8      	movs	r3, #200	@ 0xc8
 800167c:	2228      	movs	r2, #40	@ 0x28
 800167e:	21d2      	movs	r1, #210	@ 0xd2
 8001680:	2014      	movs	r0, #20
 8001682:	f001 fc78 	bl	8002f76 <ST7789_DrawTriangle>
	ST7789_DrawCircle(90, 210, 10, WHITE);
 8001686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800168a:	220a      	movs	r2, #10
 800168c:	21d2      	movs	r1, #210	@ 0xd2
 800168e:	205a      	movs	r0, #90	@ 0x5a
 8001690:	f001 fa94 	bl	8002bbc <ST7789_DrawCircle>
	ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
 8001694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	23dc      	movs	r3, #220	@ 0xdc
 800169c:	22a0      	movs	r2, #160	@ 0xa0
 800169e:	21c8      	movs	r1, #200	@ 0xc8
 80016a0:	208c      	movs	r0, #140	@ 0x8c
 80016a2:	f001 fa52 	bl	8002b4a <ST7789_DrawRectangle>


	WS2812_Set_All(color);
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <main+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fb86 	bl	8003dbc <WS2812_Set_All>
	WS2812_Update();
 80016b0:	f002 fb9c 	bl	8003dec <WS2812_Update>
	  Analog_FE_Update();
 80016b4:	f7ff fe72 	bl	800139c <Analog_FE_Update>
	    HAL_Delay(100);
 80016b8:	2064      	movs	r0, #100	@ 0x64
 80016ba:	f002 fc41 	bl	8003f40 <HAL_Delay>
	TLC5952_WriteLED();  // 发送数据
 80016be:	bf00      	nop
 80016c0:	e775      	b.n	80015ae <main+0xda>
 80016c2:	bf00      	nop
 80016c4:	20000754 	.word	0x20000754
 80016c8:	20000790 	.word	0x20000790
 80016cc:	200007cc 	.word	0x200007cc
 80016d0:	20000808 	.word	0x20000808
 80016d4:	20000844 	.word	0x20000844
 80016d8:	20000880 	.word	0x20000880
 80016dc:	20000980 	.word	0x20000980
 80016e0:	200009cc 	.word	0x200009cc
 80016e4:	20000a18 	.word	0x20000a18
 80016e8:	20000afc 	.word	0x20000afc
 80016ec:	20000ab0 	.word	0x20000ab0
 80016f0:	20000a64 	.word	0x20000a64
 80016f4:	08016454 	.word	0x08016454
 80016f8:	080155e0 	.word	0x080155e0
 80016fc:	080155e8 	.word	0x080155e8
 8001700:	20000008 	.word	0x20000008
 8001704:	20000000 	.word	0x20000000
 8001708:	080155f4 	.word	0x080155f4
 800170c:	08015600 	.word	0x08015600
 8001710:	0801560c 	.word	0x0801560c
 8001714:	200001fc 	.word	0x200001fc

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	@ 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0318 	add.w	r3, r7, #24
 8001722:	2238      	movs	r2, #56	@ 0x38
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f010 fc0a 	bl	8011f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800173e:	f007 f973 	bl	8008a28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001742:	2321      	movs	r3, #33	@ 0x21
 8001744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001746:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800174a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800174c:	2301      	movs	r3, #1
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001750:	2302      	movs	r3, #2
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001754:	2303      	movs	r3, #3
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800175c:	234b      	movs	r3, #75	@ 0x4b
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001760:	2306      	movs	r3, #6
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4618      	mov	r0, r3
 8001772:	f007 fa0d 	bl	8008b90 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800177c:	f000 ff5c 	bl	8002638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001784:	2303      	movs	r3, #3
 8001786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2104      	movs	r1, #4
 8001798:	4618      	mov	r0, r3
 800179a:	f007 fd0b 	bl	80091b4 <HAL_RCC_ClockConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80017a4:	f000 ff48 	bl	8002638 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80017a8:	f007 feda 	bl	8009560 <HAL_RCC_EnableCSS>
}
 80017ac:	bf00      	nop
 80017ae:	3750      	adds	r7, #80	@ 0x50
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2220      	movs	r2, #32
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f010 fbbd 	bl	8011f40 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001878 <MX_ADC5_Init+0xc4>)
 80017ca:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80017cc:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017d2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <MX_ADC5_Init+0xc0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <MX_ADC5_Init+0xc0>)
 8001800:	2201      	movs	r2, #1
 8001802:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <MX_ADC5_Init+0xc0>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <MX_ADC5_Init+0xc0>)
 800180e:	2200      	movs	r2, #0
 8001810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <MX_ADC5_Init+0xc0>)
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <MX_ADC5_Init+0xc0>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <MX_ADC5_Init+0xc0>)
 8001822:	2200      	movs	r2, #0
 8001824:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <MX_ADC5_Init+0xc0>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800182e:	4811      	ldr	r0, [pc, #68]	@ (8001874 <MX_ADC5_Init+0xc0>)
 8001830:	f002 fda2 	bl	8004378 <HAL_ADC_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800183a:	f000 fefd 	bl	8002638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_ADC5_Init+0xc8>)
 8001840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001842:	2306      	movs	r3, #6
 8001844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800184a:	237f      	movs	r3, #127	@ 0x7f
 800184c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800184e:	2304      	movs	r3, #4
 8001850:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <MX_ADC5_Init+0xc0>)
 800185c:	f002 ff48 	bl	80046f0 <HAL_ADC_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001866:	f000 fee7 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000057c 	.word	0x2000057c
 8001878:	50000600 	.word	0x50000600
 800187c:	08600004 	.word	0x08600004

08001880 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MX_COMP2_Init+0x44>)
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <MX_COMP2_Init+0x48>)
 8001888:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MX_COMP2_Init+0x44>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MX_COMP2_Init+0x44>)
 8001892:	2250      	movs	r2, #80	@ 0x50
 8001894:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <MX_COMP2_Init+0x44>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <MX_COMP2_Init+0x44>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <MX_COMP2_Init+0x44>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <MX_COMP2_Init+0x44>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_COMP2_Init+0x44>)
 80018b0:	f003 fcae 	bl	8005210 <HAL_COMP_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80018ba:	f000 febd 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200005e8 	.word	0x200005e8
 80018c8:	40010204 	.word	0x40010204

080018cc <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <MX_COMP5_Init+0x48>)
 80018d4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018de:	2250      	movs	r2, #80	@ 0x50
 80018e0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_COMP5_Init+0x44>)
 80018fc:	f003 fc88 	bl	8005210 <HAL_COMP_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 8001906:	f000 fe97 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000060c 	.word	0x2000060c
 8001914:	40010210 	.word	0x40010210

08001918 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	@ 0x30
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2230      	movs	r2, #48	@ 0x30
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f010 fb0b 	bl	8011f40 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <MX_DAC1_Init+0x8c>)
 800192c:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <MX_DAC1_Init+0x90>)
 800192e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001930:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <MX_DAC1_Init+0x8c>)
 8001932:	f003 ff16 	bl	8005762 <HAL_DAC_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800193c:	f000 fe7c 	bl	8002638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001940:	2302      	movs	r3, #2
 8001942:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001950:	2302      	movs	r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 800195c:	2304      	movs	r3, #4
 800195e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <MX_DAC1_Init+0x8c>)
 800196c:	f003 ffb6 	bl	80058dc <HAL_DAC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001976:	f000 fe5f 	bl	8002638 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	2210      	movs	r2, #16
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_DAC1_Init+0x8c>)
 800198e:	f003 ffa5 	bl	80058dc <HAL_DAC_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001998:	f000 fe4e 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	3730      	adds	r7, #48	@ 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000630 	.word	0x20000630
 80019a8:	50000800 	.word	0x50000800

080019ac <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2230      	movs	r2, #48	@ 0x30
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f010 fac1 	bl	8011f40 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_DAC2_Init+0x6c>)
 80019c0:	4a16      	ldr	r2, [pc, #88]	@ (8001a1c <MX_DAC2_Init+0x70>)
 80019c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80019c4:	4814      	ldr	r0, [pc, #80]	@ (8001a18 <MX_DAC2_Init+0x6c>)
 80019c6:	f003 fecc 	bl	8005762 <HAL_DAC_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80019d0:	f000 fe32 	bl	8002638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80019d4:	2302      	movs	r3, #2
 80019d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80019f0:	2304      	movs	r3, #4
 80019f2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_DAC2_Init+0x6c>)
 8001a00:	f003 ff6c 	bl	80058dc <HAL_DAC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001a0a:	f000 fe15 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3730      	adds	r7, #48	@ 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000644 	.word	0x20000644
 8001a1c:	50000c00 	.word	0x50000c00

08001a20 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2230      	movs	r2, #48	@ 0x30
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f010 fa87 	bl	8011f40 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <MX_DAC4_Init+0x6c>)
 8001a34:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <MX_DAC4_Init+0x70>)
 8001a36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001a38:	4814      	ldr	r0, [pc, #80]	@ (8001a8c <MX_DAC4_Init+0x6c>)
 8001a3a:	f003 fe92 	bl	8005762 <HAL_DAC_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001a44:	f000 fdf8 	bl	8002638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001a60:	2302      	movs	r3, #2
 8001a62:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <MX_DAC4_Init+0x6c>)
 8001a74:	f003 ff32 	bl	80058dc <HAL_DAC_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001a7e:	f000 fddb 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	@ 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000658 	.word	0x20000658
 8001a90:	50001400 	.word	0x50001400

08001a94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b0c <MX_I2C3_Init+0x78>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30D293D6;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <MX_I2C3_Init+0x7c>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ace:	480e      	ldr	r0, [pc, #56]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001ad0:	f004 fced 	bl	80064ae <HAL_I2C_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ada:	f000 fdad 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4809      	ldr	r0, [pc, #36]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001ae2:	f005 f907 	bl	8006cf4 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001aec:	f000 fda4 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001af0:	2100      	movs	r1, #0
 8001af2:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_I2C3_Init+0x74>)
 8001af4:	f005 f949 	bl	8006d8a <HAL_I2CEx_ConfigDigitalFilter>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001afe:	f000 fd9b 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000066c 	.word	0x2000066c
 8001b0c:	40007800 	.word	0x40007800
 8001b10:	30d293d6 	.word	0x30d293d6

08001b14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b18:	4b21      	ldr	r3, [pc, #132]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ba4 <MX_LPUART1_UART_Init+0x90>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b20:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001b24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b56:	4812      	ldr	r0, [pc, #72]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b58:	f00a fae4 	bl	800c124 <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b62:	f000 fd69 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b6a:	f00b f90d 	bl	800cd88 <HAL_UARTEx_SetTxFifoThreshold>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b74:	f000 fd60 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4809      	ldr	r0, [pc, #36]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b7c:	f00b f942 	bl	800ce04 <HAL_UARTEx_SetRxFifoThreshold>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b86:	f000 fd57 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b8c:	f00b f8c3 	bl	800cd16 <HAL_UARTEx_DisableFifoMode>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b96:	f000 fd4f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200006c0 	.word	0x200006c0
 8001ba4:	40008000 	.word	0x40008000

08001ba8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bae:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <MX_OPAMP1_Init+0x54>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bba:	2240      	movs	r2, #64	@ 0x40
 8001bbc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_OPAMP1_Init+0x50>)
 8001be4:	f005 f91e 	bl	8006e24 <HAL_OPAMP_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 8001bee:	f000 fd23 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000754 	.word	0x20000754
 8001bfc:	40010300 	.word	0x40010300

08001c00 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c06:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <MX_OPAMP2_Init+0x48>)
 8001c08:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c12:	2260      	movs	r2, #96	@ 0x60
 8001c14:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_OPAMP2_Init+0x44>)
 8001c30:	f005 f8f8 	bl	8006e24 <HAL_OPAMP_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8001c3a:	f000 fcfd 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000790 	.word	0x20000790
 8001c48:	40010304 	.word	0x40010304

08001c4c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c52:	4a10      	ldr	r2, [pc, #64]	@ (8001c94 <MX_OPAMP3_Init+0x48>)
 8001c54:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c5e:	2260      	movs	r2, #96	@ 0x60
 8001c60:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c64:	2204      	movs	r2, #4
 8001c66:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_OPAMP3_Init+0x44>)
 8001c7c:	f005 f8d2 	bl	8006e24 <HAL_OPAMP_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001c86:	f000 fcd7 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200007cc 	.word	0x200007cc
 8001c94:	40010308 	.word	0x40010308

08001c98 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <MX_OPAMP4_Init+0x48>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001ca4:	2280      	movs	r2, #128	@ 0x80
 8001ca6:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001caa:	2260      	movs	r2, #96	@ 0x60
 8001cac:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_OPAMP4_Init+0x44>)
 8001cc8:	f005 f8ac 	bl	8006e24 <HAL_OPAMP_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8001cd2:	f000 fcb1 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000808 	.word	0x20000808
 8001ce0:	4001030c 	.word	0x4001030c

08001ce4 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001cea:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <MX_OPAMP5_Init+0x48>)
 8001cec:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001cf6:	2260      	movs	r2, #96	@ 0x60
 8001cf8:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_OPAMP5_Init+0x44>)
 8001d14:	f005 f886 	bl	8006e24 <HAL_OPAMP_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8001d1e:	f000 fc8b 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000844 	.word	0x20000844
 8001d2c:	40010310 	.word	0x40010310

08001d30 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <MX_OPAMP6_Init+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d48:	2208      	movs	r2, #8
 8001d4a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_OPAMP6_Init+0x50>)
 8001d6c:	f005 f85a 	bl	8006e24 <HAL_OPAMP_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 8001d76:	f000 fc5f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000880 	.word	0x20000880
 8001d84:	40010314 	.word	0x40010314

08001d88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <MX_SPI3_Init+0x78>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001d9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001da0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001da4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001da8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001daa:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dac:	2202      	movs	r2, #2
 8001dae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dbc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001de4:	2208      	movs	r2, #8
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_SPI3_Init+0x74>)
 8001dea:	f007 fe79 	bl	8009ae0 <HAL_SPI_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001df4:	f000 fc20 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200008bc 	.word	0x200008bc
 8001e00:	40003c00 	.word	0x40003c00

08001e04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2224      	movs	r2, #36	@ 0x24
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f010 f894 	bl	8011f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	463b      	mov	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e22:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <MX_TIM1_Init+0xb0>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e28:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e56:	2301      	movs	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e66:	2301      	movs	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001e6e:	230f      	movs	r3, #15
 8001e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	480d      	ldr	r0, [pc, #52]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e7a:	f008 ff3b 	bl	800acf4 <HAL_TIM_Encoder_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001e84:	f000 fbd8 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_TIM1_Init+0xac>)
 8001e9a:	f00a f819 	bl	800bed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ea4:	f000 fbc8 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	3730      	adds	r7, #48	@ 0x30
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000980 	.word	0x20000980
 8001eb4:	40012c00 	.word	0x40012c00

08001eb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	@ 0x30
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f010 f83a 	bl	8011f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	463b      	mov	r3, r7
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001ed8:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <MX_TIM3_Init+0xa8>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f04:	2301      	movs	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f14:	2301      	movs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	4619      	mov	r1, r3
 8001f26:	480d      	ldr	r0, [pc, #52]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001f28:	f008 fee4 	bl	800acf4 <HAL_TIM_Encoder_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001f32:	f000 fb81 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f3e:	463b      	mov	r3, r7
 8001f40:	4619      	mov	r1, r3
 8001f42:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <MX_TIM3_Init+0xa4>)
 8001f44:	f009 ffc4 	bl	800bed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f4e:	f000 fb73 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	3730      	adds	r7, #48	@ 0x30
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200009cc 	.word	0x200009cc
 8001f60:	40000400 	.word	0x40000400

08001f64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	@ 0x30
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00f ffe4 	bl	8011f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f82:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001f84:	4a21      	ldr	r2, [pc, #132]	@ (800200c <MX_TIM4_Init+0xa8>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001f96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001fb8:	230f      	movs	r3, #15
 8001fba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001fc8:	230f      	movs	r3, #15
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001fd4:	f008 fe8e 	bl	800acf4 <HAL_TIM_Encoder_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001fde:	f000 fb2b 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fea:	463b      	mov	r3, r7
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	@ (8002008 <MX_TIM4_Init+0xa4>)
 8001ff0:	f009 ff6e 	bl	800bed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ffa:	f000 fb1d 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	3730      	adds	r7, #48	@ 0x30
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000a18 	.word	0x20000a18
 800200c:	40000800 	.word	0x40000800

08002010 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09c      	sub	sp, #112	@ 0x70
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002030:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2234      	movs	r2, #52	@ 0x34
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f00f ff78 	bl	8011f40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002050:	4b4e      	ldr	r3, [pc, #312]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002052:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <MX_TIM8_Init+0x180>)
 8002054:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002056:	4b4d      	ldr	r3, [pc, #308]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <MX_TIM8_Init+0x17c>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 8002062:	4b4a      	ldr	r3, [pc, #296]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002064:	22b3      	movs	r2, #179	@ 0xb3
 8002066:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b48      	ldr	r3, [pc, #288]	@ (800218c <MX_TIM8_Init+0x17c>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002074:	4b45      	ldr	r3, [pc, #276]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800207a:	4844      	ldr	r0, [pc, #272]	@ (800218c <MX_TIM8_Init+0x17c>)
 800207c:	f008 fa44 	bl	800a508 <HAL_TIM_Base_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002086:	f000 fad7 	bl	8002638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002090:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002094:	4619      	mov	r1, r3
 8002096:	483d      	ldr	r0, [pc, #244]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002098:	f009 f874 	bl	800b184 <HAL_TIM_ConfigClockSource>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020a2:	f000 fac9 	bl	8002638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020a6:	4839      	ldr	r0, [pc, #228]	@ (800218c <MX_TIM8_Init+0x17c>)
 80020a8:	f008 fa85 	bl	800a5b6 <HAL_TIM_PWM_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80020b2:	f000 fac1 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c6:	4619      	mov	r1, r3
 80020c8:	4830      	ldr	r0, [pc, #192]	@ (800218c <MX_TIM8_Init+0x17c>)
 80020ca:	f009 ff01 	bl	800bed0 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80020d4:	f000 fab0 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020d8:	2370      	movs	r3, #112	@ 0x70
 80020da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 80020dc:	235a      	movs	r3, #90	@ 0x5a
 80020de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80020e0:	2302      	movs	r3, #2
 80020e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4823      	ldr	r0, [pc, #140]	@ (800218c <MX_TIM8_Init+0x17c>)
 80020fe:	f008 ff2d 	bl	800af5c <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002108:	f000 fa96 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210c:	2360      	movs	r3, #96	@ 0x60
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002110:	2300      	movs	r3, #0
 8002112:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800211a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800211e:	2208      	movs	r2, #8
 8002120:	4619      	mov	r1, r3
 8002122:	481a      	ldr	r0, [pc, #104]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002124:	f008 ff1a 	bl	800af5c <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 800212e:	f000 fa83 	bl	8002638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800215c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4807      	ldr	r0, [pc, #28]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002170:	f009 ff44 	bl	800bffc <HAL_TIMEx_ConfigBreakDeadTime>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 800217a:	f000 fa5d 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800217e:	4803      	ldr	r0, [pc, #12]	@ (800218c <MX_TIM8_Init+0x17c>)
 8002180:	f001 fc00 	bl	8003984 <HAL_TIM_MspPostInit>

}
 8002184:	bf00      	nop
 8002186:	3770      	adds	r7, #112	@ 0x70
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000a64 	.word	0x20000a64
 8002190:	40013400 	.word	0x40013400

08002194 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b09c      	sub	sp, #112	@ 0x70
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	615a      	str	r2, [r3, #20]
 80021c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2234      	movs	r2, #52	@ 0x34
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00f feb6 	bl	8011f40 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80021d4:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021d6:	4a40      	ldr	r2, [pc, #256]	@ (80022d8 <MX_TIM15_Init+0x144>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 80021da:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021dc:	2296      	movs	r2, #150	@ 0x96
 80021de:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b3c      	ldr	r3, [pc, #240]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021ec:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80021f4:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002200:	4834      	ldr	r0, [pc, #208]	@ (80022d4 <MX_TIM15_Init+0x140>)
 8002202:	f008 f981 	bl	800a508 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800220c:	f000 fa14 	bl	8002638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002214:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002216:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800221a:	4619      	mov	r1, r3
 800221c:	482d      	ldr	r0, [pc, #180]	@ (80022d4 <MX_TIM15_Init+0x140>)
 800221e:	f008 ffb1 	bl	800b184 <HAL_TIM_ConfigClockSource>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002228:	f000 fa06 	bl	8002638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800222c:	4829      	ldr	r0, [pc, #164]	@ (80022d4 <MX_TIM15_Init+0x140>)
 800222e:	f008 f9c2 	bl	800a5b6 <HAL_TIM_PWM_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002238:	f000 f9fe 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002244:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002248:	4619      	mov	r1, r3
 800224a:	4822      	ldr	r0, [pc, #136]	@ (80022d4 <MX_TIM15_Init+0x140>)
 800224c:	f009 fe40 	bl	800bed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002256:	f000 f9ef 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225a:	2360      	movs	r3, #96	@ 0x60
 800225c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 800225e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002264:	2300      	movs	r3, #0
 8002266:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002268:	2300      	movs	r3, #0
 800226a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002278:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	4814      	ldr	r0, [pc, #80]	@ (80022d4 <MX_TIM15_Init+0x140>)
 8002282:	f008 fe6b 	bl	800af5c <HAL_TIM_PWM_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800228c:	f000 f9d4 	bl	8002638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80022b8:	f009 fea0 	bl	800bffc <HAL_TIMEx_ConfigBreakDeadTime>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80022c2:	f000 f9b9 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80022c6:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <MX_TIM15_Init+0x140>)
 80022c8:	f001 fb5c 	bl	8003984 <HAL_TIM_MspPostInit>

}
 80022cc:	bf00      	nop
 80022ce:	3770      	adds	r7, #112	@ 0x70
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000ab0 	.word	0x20000ab0
 80022d8:	40014000 	.word	0x40014000

080022dc <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	@ 0x30
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	2224      	movs	r2, #36	@ 0x24
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00f fe28 	bl	8011f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	463b      	mov	r3, r7
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <MX_TIM20_Init+0xac>)
 80022fc:	4a23      	ldr	r2, [pc, #140]	@ (800238c <MX_TIM20_Init+0xb0>)
 80022fe:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002300:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <MX_TIM20_Init+0xac>)
 8002302:	2200      	movs	r2, #0
 8002304:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <MX_TIM20_Init+0xac>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800230c:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <MX_TIM20_Init+0xac>)
 800230e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002312:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002314:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <MX_TIM20_Init+0xac>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <MX_TIM20_Init+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <MX_TIM20_Init+0xac>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002326:	2301      	movs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232e:	2301      	movs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002336:	230f      	movs	r3, #15
 8002338:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233e:	2301      	movs	r3, #1
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002346:	230f      	movs	r3, #15
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	480d      	ldr	r0, [pc, #52]	@ (8002388 <MX_TIM20_Init+0xac>)
 8002352:	f008 fccf 	bl	800acf4 <HAL_TIM_Encoder_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 800235c:	f000 f96c 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002364:	2300      	movs	r3, #0
 8002366:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800236c:	463b      	mov	r3, r7
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	@ (8002388 <MX_TIM20_Init+0xac>)
 8002372:	f009 fdad 	bl	800bed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 800237c:	f000 f95c 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	3730      	adds	r7, #48	@ 0x30
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000afc 	.word	0x20000afc
 800238c:	40015000 	.word	0x40015000

08002390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <MX_DMA_Init+0x70>)
 8002398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239a:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <MX_DMA_Init+0x70>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80023a2:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <MX_DMA_Init+0x70>)
 80023a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ae:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <MX_DMA_Init+0x70>)
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <MX_DMA_Init+0x70>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <MX_DMA_Init+0x70>)
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	200b      	movs	r0, #11
 80023cc:	f003 f995 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023d0:	200b      	movs	r0, #11
 80023d2:	f003 f9ac 	bl	800572e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	200c      	movs	r0, #12
 80023dc:	f003 f98d 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80023e0:	200c      	movs	r0, #12
 80023e2:	f003 f9a4 	bl	800572e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	200d      	movs	r0, #13
 80023ec:	f003 f985 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80023f0:	200d      	movs	r0, #13
 80023f2:	f003 f99c 	bl	800572e <HAL_NVIC_EnableIRQ>

}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	4b83      	ldr	r3, [pc, #524]	@ (8002628 <MX_GPIO_Init+0x224>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	4a82      	ldr	r2, [pc, #520]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002426:	4b80      	ldr	r3, [pc, #512]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002432:	4b7d      	ldr	r3, [pc, #500]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	4a7c      	ldr	r2, [pc, #496]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243e:	4b7a      	ldr	r3, [pc, #488]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b77      	ldr	r3, [pc, #476]	@ (8002628 <MX_GPIO_Init+0x224>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	4a76      	ldr	r2, [pc, #472]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002456:	4b74      	ldr	r3, [pc, #464]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4b71      	ldr	r3, [pc, #452]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	4a70      	ldr	r2, [pc, #448]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246e:	4b6e      	ldr	r3, [pc, #440]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247a:	4b6b      	ldr	r3, [pc, #428]	@ (8002628 <MX_GPIO_Init+0x224>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	4a6a      	ldr	r2, [pc, #424]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002486:	4b68      	ldr	r3, [pc, #416]	@ (8002628 <MX_GPIO_Init+0x224>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 8002492:	2200      	movs	r2, #0
 8002494:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002498:	4864      	ldr	r0, [pc, #400]	@ (800262c <MX_GPIO_Init+0x228>)
 800249a:	f003 ffcd 	bl	8006438 <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80024a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024a8:	f003 ffc6 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f248 0138 	movw	r1, #32824	@ 0x8038
 80024b2:	485f      	ldr	r0, [pc, #380]	@ (8002630 <MX_GPIO_Init+0x22c>)
 80024b4:	f003 ffc0 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2104      	movs	r1, #4
 80024bc:	485d      	ldr	r0, [pc, #372]	@ (8002634 <MX_GPIO_Init+0x230>)
 80024be:	f003 ffbb 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 80024c2:	f64e 0320 	movw	r3, #59424	@ 0xe820
 80024c6:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4854      	ldr	r0, [pc, #336]	@ (800262c <MX_GPIO_Init+0x228>)
 80024dc:	f003 fe2a 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024e0:	2301      	movs	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80024f0:	230e      	movs	r3, #14
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fe:	f003 fe19 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 8002502:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800251e:	f003 fe09 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8002522:	f240 430c 	movw	r3, #1036	@ 0x40c
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002528:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800252c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800253c:	f003 fdfa 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002540:	2310      	movs	r3, #16
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002544:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4835      	ldr	r0, [pc, #212]	@ (800262c <MX_GPIO_Init+0x228>)
 8002556:	f003 fded 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 800255a:	f240 1303 	movw	r3, #259	@ 0x103
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002560:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	482f      	ldr	r0, [pc, #188]	@ (8002630 <MX_GPIO_Init+0x22c>)
 8002572:	f003 fddf 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 8002576:	f248 0338 	movw	r3, #32824	@ 0x8038
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4828      	ldr	r0, [pc, #160]	@ (8002630 <MX_GPIO_Init+0x22c>)
 8002590:	f003 fdd0 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8002594:	2304      	movs	r3, #4
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4822      	ldr	r0, [pc, #136]	@ (8002634 <MX_GPIO_Init+0x230>)
 80025ac:	f003 fdc2 	bl	8006134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2006      	movs	r0, #6
 80025b6:	f003 f8a0 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025ba:	2006      	movs	r0, #6
 80025bc:	f003 f8b7 	bl	800572e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2100      	movs	r1, #0
 80025c4:	2007      	movs	r0, #7
 80025c6:	f003 f898 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025ca:	2007      	movs	r0, #7
 80025cc:	f003 f8af 	bl	800572e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2008      	movs	r0, #8
 80025d6:	f003 f890 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025da:	2008      	movs	r0, #8
 80025dc:	f003 f8a7 	bl	800572e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2009      	movs	r0, #9
 80025e6:	f003 f888 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025ea:	2009      	movs	r0, #9
 80025ec:	f003 f89f 	bl	800572e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	200a      	movs	r0, #10
 80025f6:	f003 f880 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025fa:	200a      	movs	r0, #10
 80025fc:	f003 f897 	bl	800572e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2017      	movs	r0, #23
 8002606:	f003 f878 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800260a:	2017      	movs	r0, #23
 800260c:	f003 f88f 	bl	800572e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2028      	movs	r0, #40	@ 0x28
 8002616:	f003 f870 	bl	80056fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800261a:	2028      	movs	r0, #40	@ 0x28
 800261c:	f003 f887 	bl	800572e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	48000800 	.word	0x48000800
 8002630:	48000400 	.word	0x48000400
 8002634:	48000c00 	.word	0x48000c00

08002638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <Error_Handler+0x8>

08002644 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800264e:	bf00      	nop
	ST7789_DC_Clr();
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <ST7789_WriteCommand+0x30>)
 8002658:	f003 feee 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800265c:	1df9      	adds	r1, r7, #7
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	2201      	movs	r2, #1
 8002664:	4804      	ldr	r0, [pc, #16]	@ (8002678 <ST7789_WriteCommand+0x34>)
 8002666:	f007 fae6 	bl	8009c36 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800266a:	bf00      	nop
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	48000800 	.word	0x48000800
 8002678:	200008bc 	.word	0x200008bc

0800267c <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8002686:	bf00      	nop
	ST7789_DC_Set();
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800268e:	481b      	ldr	r0, [pc, #108]	@ (80026fc <ST7789_WriteData+0x80>)
 8002690:	f003 fed2 	bl	8006438 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8002694:	e02a      	b.n	80026ec <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800269c:	4293      	cmp	r3, r2
 800269e:	bf28      	it	cs
 80026a0:	4613      	movcs	r3, r2
 80026a2:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80026a4:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <ST7789_WriteData+0x84>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d30e      	bcc.n	80026ce <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	461a      	mov	r2, r3
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4813      	ldr	r0, [pc, #76]	@ (8002704 <ST7789_WriteData+0x88>)
 80026b8:	f007 fc34 	bl	8009f24 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80026bc:	bf00      	nop
 80026be:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <ST7789_WriteData+0x88>)
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d1f8      	bne.n	80026be <ST7789_WriteData+0x42>
 80026cc:	e006      	b.n	80026dc <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80026ce:	89fa      	ldrh	r2, [r7, #14]
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	480b      	ldr	r0, [pc, #44]	@ (8002704 <ST7789_WriteData+0x88>)
 80026d8:	f007 faad 	bl	8009c36 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1d1      	bne.n	8002696 <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 80026f2:	bf00      	nop
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	48000800 	.word	0x48000800
 8002700:	20000200 	.word	0x20000200
 8002704:	200008bc 	.word	0x200008bc

08002708 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002712:	bf00      	nop
	ST7789_DC_Set();
 8002714:	2201      	movs	r2, #1
 8002716:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800271a:	4807      	ldr	r0, [pc, #28]	@ (8002738 <ST7789_WriteSmallData+0x30>)
 800271c:	f003 fe8c 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8002720:	1df9      	adds	r1, r7, #7
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	2201      	movs	r2, #1
 8002728:	4804      	ldr	r0, [pc, #16]	@ (800273c <ST7789_WriteSmallData+0x34>)
 800272a:	f007 fa84 	bl	8009c36 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800272e:	bf00      	nop
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	48000800 	.word	0x48000800
 800273c:	200008bc 	.word	0x200008bc

08002740 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800274a:	2036      	movs	r0, #54	@ 0x36
 800274c:	f7ff ff7a 	bl	8002644 <ST7789_WriteCommand>
	switch (m) {
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d81a      	bhi.n	800278c <ST7789_SetRotation+0x4c>
 8002756:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <ST7789_SetRotation+0x1c>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	0800276d 	.word	0x0800276d
 8002760:	08002775 	.word	0x08002775
 8002764:	0800277d 	.word	0x0800277d
 8002768:	08002785 	.word	0x08002785
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800276c:	20c0      	movs	r0, #192	@ 0xc0
 800276e:	f7ff ffcb 	bl	8002708 <ST7789_WriteSmallData>
		break;
 8002772:	e00c      	b.n	800278e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002774:	20a0      	movs	r0, #160	@ 0xa0
 8002776:	f7ff ffc7 	bl	8002708 <ST7789_WriteSmallData>
		break;
 800277a:	e008      	b.n	800278e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800277c:	2000      	movs	r0, #0
 800277e:	f7ff ffc3 	bl	8002708 <ST7789_WriteSmallData>
		break;
 8002782:	e004      	b.n	800278e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002784:	2060      	movs	r0, #96	@ 0x60
 8002786:	f7ff ffbf 	bl	8002708 <ST7789_WriteSmallData>
		break;
 800278a:	e000      	b.n	800278e <ST7789_SetRotation+0x4e>
	default:
		break;
 800278c:	bf00      	nop
	}
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop

08002798 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	4604      	mov	r4, r0
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	80fb      	strh	r3, [r7, #6]
 80027aa:	4603      	mov	r3, r0
 80027ac:	80bb      	strh	r3, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]
 80027b2:	4613      	mov	r3, r2
 80027b4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80027b6:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	82fb      	strh	r3, [r7, #22]
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80027c0:	88bb      	ldrh	r3, [r7, #4]
 80027c2:	827b      	strh	r3, [r7, #18]
 80027c4:	883b      	ldrh	r3, [r7, #0]
 80027c6:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80027c8:	202a      	movs	r0, #42	@ 0x2a
 80027ca:	f7ff ff3b 	bl	8002644 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80027ce:	8afb      	ldrh	r3, [r7, #22]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	733b      	strb	r3, [r7, #12]
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	737b      	strb	r3, [r7, #13]
 80027de:	8abb      	ldrh	r3, [r7, #20]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	73bb      	strb	r3, [r7, #14]
 80027e8:	8abb      	ldrh	r3, [r7, #20]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	2104      	movs	r1, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff41 	bl	800267c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80027fa:	202b      	movs	r0, #43	@ 0x2b
 80027fc:	f7ff ff22 	bl	8002644 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002800:	8a7b      	ldrh	r3, [r7, #18]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29b      	uxth	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	723b      	strb	r3, [r7, #8]
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	727b      	strb	r3, [r7, #9]
 8002810:	8a3b      	ldrh	r3, [r7, #16]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b29b      	uxth	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	72bb      	strb	r3, [r7, #10]
 800281a:	8a3b      	ldrh	r3, [r7, #16]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	2104      	movs	r1, #4
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff28 	bl	800267c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800282c:	202c      	movs	r0, #44	@ 0x2c
 800282e:	f7ff ff09 	bl	8002644 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002832:	bf00      	nop
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}

0800283c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b08b      	sub	sp, #44	@ 0x2c
 8002840:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8002842:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002846:	2100      	movs	r1, #0
 8002848:	484a      	ldr	r0, [pc, #296]	@ (8002974 <ST7789_Init+0x138>)
 800284a:	f00f fb79 	bl	8011f40 <memset>
	#endif
	HAL_Delay(10);
 800284e:	200a      	movs	r0, #10
 8002850:	f001 fb76 	bl	8003f40 <HAL_Delay>
    ST7789_RST_Clr();
 8002854:	2200      	movs	r2, #0
 8002856:	2104      	movs	r1, #4
 8002858:	4847      	ldr	r0, [pc, #284]	@ (8002978 <ST7789_Init+0x13c>)
 800285a:	f003 fded 	bl	8006438 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800285e:	200a      	movs	r0, #10
 8002860:	f001 fb6e 	bl	8003f40 <HAL_Delay>
    ST7789_RST_Set();
 8002864:	2201      	movs	r2, #1
 8002866:	2104      	movs	r1, #4
 8002868:	4843      	ldr	r0, [pc, #268]	@ (8002978 <ST7789_Init+0x13c>)
 800286a:	f003 fde5 	bl	8006438 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800286e:	2014      	movs	r0, #20
 8002870:	f001 fb66 	bl	8003f40 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002874:	203a      	movs	r0, #58	@ 0x3a
 8002876:	f7ff fee5 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800287a:	2055      	movs	r0, #85	@ 0x55
 800287c:	f7ff ff44 	bl	8002708 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002880:	20b2      	movs	r0, #178	@ 0xb2
 8002882:	f7ff fedf 	bl	8002644 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002886:	4a3d      	ldr	r2, [pc, #244]	@ (800297c <ST7789_Init+0x140>)
 8002888:	f107 0320 	add.w	r3, r7, #32
 800288c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002890:	6018      	str	r0, [r3, #0]
 8002892:	3304      	adds	r3, #4
 8002894:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	2105      	movs	r1, #5
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff feed 	bl	800267c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80028a2:	2003      	movs	r0, #3
 80028a4:	f7ff ff4c 	bl	8002740 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80028a8:	20b7      	movs	r0, #183	@ 0xb7
 80028aa:	f7ff fecb 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80028ae:	2035      	movs	r0, #53	@ 0x35
 80028b0:	f7ff ff2a 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80028b4:	20bb      	movs	r0, #187	@ 0xbb
 80028b6:	f7ff fec5 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80028ba:	2019      	movs	r0, #25
 80028bc:	f7ff ff24 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80028c0:	20c0      	movs	r0, #192	@ 0xc0
 80028c2:	f7ff febf 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80028c6:	202c      	movs	r0, #44	@ 0x2c
 80028c8:	f7ff ff1e 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80028cc:	20c2      	movs	r0, #194	@ 0xc2
 80028ce:	f7ff feb9 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7ff ff18 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80028d8:	20c3      	movs	r0, #195	@ 0xc3
 80028da:	f7ff feb3 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80028de:	2012      	movs	r0, #18
 80028e0:	f7ff ff12 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80028e4:	20c4      	movs	r0, #196	@ 0xc4
 80028e6:	f7ff fead 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80028ea:	2020      	movs	r0, #32
 80028ec:	f7ff ff0c 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80028f0:	20c6      	movs	r0, #198	@ 0xc6
 80028f2:	f7ff fea7 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80028f6:	200f      	movs	r0, #15
 80028f8:	f7ff ff06 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80028fc:	20d0      	movs	r0, #208	@ 0xd0
 80028fe:	f7ff fea1 	bl	8002644 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8002902:	20a4      	movs	r0, #164	@ 0xa4
 8002904:	f7ff ff00 	bl	8002708 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8002908:	20a1      	movs	r0, #161	@ 0xa1
 800290a:	f7ff fefd 	bl	8002708 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800290e:	20e0      	movs	r0, #224	@ 0xe0
 8002910:	f7ff fe98 	bl	8002644 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002914:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <ST7789_Init+0x144>)
 8002916:	f107 0410 	add.w	r4, r7, #16
 800291a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800291c:	c407      	stmia	r4!, {r0, r1, r2}
 800291e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	210e      	movs	r1, #14
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fea8 	bl	800267c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800292c:	20e1      	movs	r0, #225	@ 0xe1
 800292e:	f7ff fe89 	bl	8002644 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002932:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <ST7789_Init+0x148>)
 8002934:	463c      	mov	r4, r7
 8002936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002938:	c407      	stmia	r4!, {r0, r1, r2}
 800293a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800293c:	463b      	mov	r3, r7
 800293e:	210e      	movs	r1, #14
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fe9b 	bl	800267c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002946:	2021      	movs	r0, #33	@ 0x21
 8002948:	f7ff fe7c 	bl	8002644 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800294c:	2011      	movs	r0, #17
 800294e:	f7ff fe79 	bl	8002644 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002952:	2013      	movs	r0, #19
 8002954:	f7ff fe76 	bl	8002644 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002958:	2029      	movs	r0, #41	@ 0x29
 800295a:	f7ff fe73 	bl	8002644 <ST7789_WriteCommand>

	HAL_Delay(50);
 800295e:	2032      	movs	r0, #50	@ 0x32
 8002960:	f001 faee 	bl	8003f40 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002964:	2000      	movs	r0, #0
 8002966:	f000 f80f 	bl	8002988 <ST7789_Fill_Color>
}
 800296a:	bf00      	nop
 800296c:	372c      	adds	r7, #44	@ 0x2c
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	20000c10 	.word	0x20000c10
 8002978:	48000c00 	.word	0x48000c00
 800297c:	08015618 	.word	0x08015618
 8002980:	08015620 	.word	0x08015620
 8002984:	08015630 	.word	0x08015630

08002988 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002992:	23ef      	movs	r3, #239	@ 0xef
 8002994:	f240 123f 	movw	r2, #319	@ 0x13f
 8002998:	2100      	movs	r1, #0
 800299a:	2000      	movs	r0, #0
 800299c:	f7ff fefc 	bl	8002798 <ST7789_SetAddressWindow>
	ST7789_Select();
 80029a0:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	81fb      	strh	r3, [r7, #14]
 80029a6:	e00e      	b.n	80029c6 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80029ae:	4619      	mov	r1, r3
 80029b0:	4809      	ldr	r0, [pc, #36]	@ (80029d8 <ST7789_Fill_Color+0x50>)
 80029b2:	f00f fac5 	bl	8011f40 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 80029b6:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 80029ba:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <ST7789_Fill_Color+0x50>)
 80029bc:	f7ff fe5e 	bl	800267c <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	3301      	adds	r3, #1
 80029c4:	81fb      	strh	r3, [r7, #14]
 80029c6:	89fb      	ldrh	r3, [r7, #14]
 80029c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80029ca:	d9ed      	bls.n	80029a8 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 80029cc:	bf00      	nop
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000c10 	.word	0x20000c10

080029dc <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
 80029e6:	460b      	mov	r3, r1
 80029e8:	80bb      	strh	r3, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80029f4:	d219      	bcs.n	8002a2a <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80029f6:	88bb      	ldrh	r3, [r7, #4]
 80029f8:	2bef      	cmp	r3, #239	@ 0xef
 80029fa:	d816      	bhi.n	8002a2a <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80029fc:	88bb      	ldrh	r3, [r7, #4]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	88b9      	ldrh	r1, [r7, #4]
 8002a02:	88f8      	ldrh	r0, [r7, #6]
 8002a04:	f7ff fec8 	bl	8002798 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	733b      	strb	r3, [r7, #12]
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8002a18:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	2102      	movs	r1, #2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fe2b 	bl	800267c <ST7789_WriteData>
	ST7789_UnSelect();
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002a2a:	bf00      	nop
}
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8002a32:	b590      	push	{r4, r7, lr}
 8002a34:	b087      	sub	sp, #28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4604      	mov	r4, r0
 8002a3a:	4608      	mov	r0, r1
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4623      	mov	r3, r4
 8002a42:	80fb      	strh	r3, [r7, #6]
 8002a44:	4603      	mov	r3, r0
 8002a46:	80bb      	strh	r3, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8002a50:	883a      	ldrh	r2, [r7, #0]
 8002a52:	88bb      	ldrh	r3, [r7, #4]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a5e:	8879      	ldrh	r1, [r7, #2]
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bfb8      	it	lt
 8002a68:	425b      	neglt	r3, r3
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	bfcc      	ite	gt
 8002a6e:	2301      	movgt	r3, #1
 8002a70:	2300      	movle	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <ST7789_DrawLine+0x62>
		swap = x0;
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8002a80:	88bb      	ldrh	r3, [r7, #4]
 8002a82:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8002a84:	8a3b      	ldrh	r3, [r7, #16]
 8002a86:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8002a8c:	883b      	ldrh	r3, [r7, #0]
 8002a8e:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8002a90:	8a3b      	ldrh	r3, [r7, #16]
 8002a92:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d90b      	bls.n	8002ab4 <ST7789_DrawLine+0x82>
		swap = x0;
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8002aa4:	8a3b      	ldrh	r3, [r7, #16]
 8002aa6:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8002aa8:	88bb      	ldrh	r3, [r7, #4]
 8002aaa:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8002aac:	883b      	ldrh	r3, [r7, #0]
 8002aae:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8002ab0:	8a3b      	ldrh	r3, [r7, #16]
 8002ab2:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8002abe:	883a      	ldrh	r2, [r7, #0]
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bfb8      	it	lt
 8002ac8:	425b      	neglt	r3, r3
 8002aca:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8002acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ad0:	0fda      	lsrs	r2, r3, #31
 8002ad2:	4413      	add	r3, r2
 8002ad4:	105b      	asrs	r3, r3, #1
 8002ad6:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8002ad8:	88ba      	ldrh	r2, [r7, #4]
 8002ada:	883b      	ldrh	r3, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d202      	bcs.n	8002ae6 <ST7789_DrawLine+0xb4>
        ystep = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	82bb      	strh	r3, [r7, #20]
 8002ae4:	e028      	b.n	8002b38 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8002ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aea:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8002aec:	e024      	b.n	8002b38 <ST7789_DrawLine+0x106>
        if (steep) {
 8002aee:	8a7b      	ldrh	r3, [r7, #18]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8002af4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002af6:	88f9      	ldrh	r1, [r7, #6]
 8002af8:	88bb      	ldrh	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff6e 	bl	80029dc <ST7789_DrawPixel>
 8002b00:	e005      	b.n	8002b0e <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8002b02:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002b04:	88b9      	ldrh	r1, [r7, #4]
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff67 	bl	80029dc <ST7789_DrawPixel>
        }
        err -= dy;
 8002b0e:	8afa      	ldrh	r2, [r7, #22]
 8002b10:	89bb      	ldrh	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8002b18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	da08      	bge.n	8002b32 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8002b20:	8aba      	ldrh	r2, [r7, #20]
 8002b22:	88bb      	ldrh	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002b28:	8afa      	ldrh	r2, [r7, #22]
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	3301      	adds	r3, #1
 8002b36:	80fb      	strh	r3, [r7, #6]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d9d6      	bls.n	8002aee <ST7789_DrawLine+0xbc>
        }
    }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}

08002b4a <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002b4a:	b590      	push	{r4, r7, lr}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af02      	add	r7, sp, #8
 8002b50:	4604      	mov	r4, r0
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	461a      	mov	r2, r3
 8002b58:	4623      	mov	r3, r4
 8002b5a:	80fb      	strh	r3, [r7, #6]
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	80bb      	strh	r3, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002b68:	bf00      	nop
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8002b6a:	88bc      	ldrh	r4, [r7, #4]
 8002b6c:	887a      	ldrh	r2, [r7, #2]
 8002b6e:	88b9      	ldrh	r1, [r7, #4]
 8002b70:	88f8      	ldrh	r0, [r7, #6]
 8002b72:	8b3b      	ldrh	r3, [r7, #24]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4623      	mov	r3, r4
 8002b78:	f7ff ff5b 	bl	8002a32 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8002b7c:	883c      	ldrh	r4, [r7, #0]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	88b9      	ldrh	r1, [r7, #4]
 8002b82:	88f8      	ldrh	r0, [r7, #6]
 8002b84:	8b3b      	ldrh	r3, [r7, #24]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	4623      	mov	r3, r4
 8002b8a:	f7ff ff52 	bl	8002a32 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8002b8e:	883c      	ldrh	r4, [r7, #0]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	8839      	ldrh	r1, [r7, #0]
 8002b94:	88f8      	ldrh	r0, [r7, #6]
 8002b96:	8b3b      	ldrh	r3, [r7, #24]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7ff ff49 	bl	8002a32 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8002ba0:	883c      	ldrh	r4, [r7, #0]
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	88b9      	ldrh	r1, [r7, #4]
 8002ba6:	8878      	ldrh	r0, [r7, #2]
 8002ba8:	8b3b      	ldrh	r3, [r7, #24]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4623      	mov	r3, r4
 8002bae:	f7ff ff40 	bl	8002a32 <ST7789_DrawLine>
	ST7789_UnSelect();
 8002bb2:	bf00      	nop
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	80fb      	strh	r3, [r7, #6]
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80bb      	strh	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	70fb      	strb	r3, [r7, #3]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f1c3 0301 	rsb	r3, r3, #1
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	03d2      	lsls	r2, r2, #15
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8002c02:	bf00      	nop
	ST7789_DrawPixel(x0, y0 + r, color);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	88bb      	ldrh	r3, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	883a      	ldrh	r2, [r7, #0]
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fee2 	bl	80029dc <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	88ba      	ldrh	r2, [r7, #4]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	b299      	uxth	r1, r3
 8002c22:	883a      	ldrh	r2, [r7, #0]
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fed8 	bl	80029dc <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	4413      	add	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	883a      	ldrh	r2, [r7, #0]
 8002c38:	88b9      	ldrh	r1, [r7, #4]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fece 	bl	80029dc <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	883a      	ldrh	r2, [r7, #0]
 8002c4c:	88b9      	ldrh	r1, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fec4 	bl	80029dc <ST7789_DrawPixel>

	while (x < y) {
 8002c54:	e081      	b.n	8002d5a <ST7789_DrawCircle+0x19e>
		if (f >= 0) {
 8002c56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0e      	blt.n	8002c7c <ST7789_DrawCircle+0xc0>
			y--;
 8002c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002c6a:	8a7b      	ldrh	r3, [r7, #18]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002c72:	8afa      	ldrh	r2, [r7, #22]
 8002c74:	8a7b      	ldrh	r3, [r7, #18]
 8002c76:	4413      	add	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002c7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002c88:	8abb      	ldrh	r3, [r7, #20]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002c90:	8afa      	ldrh	r2, [r7, #22]
 8002c92:	8abb      	ldrh	r3, [r7, #20]
 8002c94:	4413      	add	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8002c9a:	8a3a      	ldrh	r2, [r7, #16]
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b298      	uxth	r0, r3
 8002ca2:	89fa      	ldrh	r2, [r7, #14]
 8002ca4:	88bb      	ldrh	r3, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	883a      	ldrh	r2, [r7, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7ff fe95 	bl	80029dc <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8002cb2:	8a3b      	ldrh	r3, [r7, #16]
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b298      	uxth	r0, r3
 8002cba:	89fa      	ldrh	r2, [r7, #14]
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	883a      	ldrh	r2, [r7, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f7ff fe89 	bl	80029dc <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8002cca:	8a3a      	ldrh	r2, [r7, #16]
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b298      	uxth	r0, r3
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	88ba      	ldrh	r2, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	883a      	ldrh	r2, [r7, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7ff fe7d 	bl	80029dc <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8002ce2:	8a3b      	ldrh	r3, [r7, #16]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b298      	uxth	r0, r3
 8002cea:	89fb      	ldrh	r3, [r7, #14]
 8002cec:	88ba      	ldrh	r2, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	883a      	ldrh	r2, [r7, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7ff fe71 	bl	80029dc <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8002cfa:	89fa      	ldrh	r2, [r7, #14]
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	4413      	add	r3, r2
 8002d00:	b298      	uxth	r0, r3
 8002d02:	8a3a      	ldrh	r2, [r7, #16]
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	883a      	ldrh	r2, [r7, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7ff fe65 	bl	80029dc <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8002d12:	89fb      	ldrh	r3, [r7, #14]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b298      	uxth	r0, r3
 8002d1a:	8a3a      	ldrh	r2, [r7, #16]
 8002d1c:	88bb      	ldrh	r3, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	883a      	ldrh	r2, [r7, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7ff fe59 	bl	80029dc <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8002d2a:	89fa      	ldrh	r2, [r7, #14]
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	4413      	add	r3, r2
 8002d30:	b298      	uxth	r0, r3
 8002d32:	8a3b      	ldrh	r3, [r7, #16]
 8002d34:	88ba      	ldrh	r2, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	883a      	ldrh	r2, [r7, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f7ff fe4d 	bl	80029dc <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	b298      	uxth	r0, r3
 8002d4a:	8a3b      	ldrh	r3, [r7, #16]
 8002d4c:	88ba      	ldrh	r2, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	883a      	ldrh	r2, [r7, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7ff fe41 	bl	80029dc <ST7789_DrawPixel>
	while (x < y) {
 8002d5a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f6ff af77 	blt.w	8002c56 <ST7789_DrawCircle+0x9a>
	}
	ST7789_UnSelect();
 8002d68:	bf00      	nop
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}

08002d72 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8002d72:	b590      	push	{r4, r7, lr}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4604      	mov	r4, r0
 8002d7a:	4608      	mov	r0, r1
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4623      	mov	r3, r4
 8002d82:	80fb      	strh	r3, [r7, #6]
 8002d84:	4603      	mov	r3, r0
 8002d86:	80bb      	strh	r3, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d96:	d22a      	bcs.n	8002dee <ST7789_DrawImage+0x7c>
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	2bef      	cmp	r3, #239	@ 0xef
 8002d9c:	d827      	bhi.n	8002dee <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	4413      	add	r3, r2
 8002da4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002da8:	dc23      	bgt.n	8002df2 <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8002daa:	88ba      	ldrh	r2, [r7, #4]
 8002dac:	883b      	ldrh	r3, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	2bf0      	cmp	r3, #240	@ 0xf0
 8002db2:	dc20      	bgt.n	8002df6 <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8002db4:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4413      	add	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29c      	uxth	r4, r3
 8002dc2:	88ba      	ldrh	r2, [r7, #4]
 8002dc4:	883b      	ldrh	r3, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	88b9      	ldrh	r1, [r7, #4]
 8002dd0:	88f8      	ldrh	r0, [r7, #6]
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	f7ff fce0 	bl	8002798 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	883a      	ldrh	r2, [r7, #0]
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4619      	mov	r1, r3
 8002de4:	69b8      	ldr	r0, [r7, #24]
 8002de6:	f7ff fc49 	bl	800267c <ST7789_WriteData>
	ST7789_UnSelect();
 8002dea:	bf00      	nop
 8002dec:	e004      	b.n	8002df8 <ST7789_DrawImage+0x86>
		return;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <ST7789_DrawImage+0x86>
		return;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <ST7789_DrawImage+0x86>
		return;
 8002df6:	bf00      	nop
}
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}

08002dfe <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002dfe:	b082      	sub	sp, #8
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e08:	4603      	mov	r3, r0
 8002e0a:	80fb      	strh	r3, [r7, #6]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	80bb      	strh	r3, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8002e14:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002e16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	440b      	add	r3, r1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	88b9      	ldrh	r1, [r7, #4]
 8002e38:	88f8      	ldrh	r0, [r7, #6]
 8002e3a:	f7ff fcad 	bl	8002798 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e041      	b.n	8002ec8 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8002e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	3b20      	subs	r3, #32
 8002e4a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	440b      	add	r3, r1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e027      	b.n	8002eb6 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002e76:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	743b      	strb	r3, [r7, #16]
 8002e80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fbf5 	bl	800267c <ST7789_WriteData>
 8002e92:	e00d      	b.n	8002eb0 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002e94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	733b      	strb	r3, [r7, #12]
 8002e9e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fbe6 	bl	800267c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002eba:	461a      	mov	r2, r3
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d3d1      	bcc.n	8002e66 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002ecc:	461a      	mov	r2, r3
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d3b7      	bcc.n	8002e44 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8002ed4:	bf00      	nop
}
 8002ed6:	bf00      	nop
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ee0:	b002      	add	sp, #8
 8002ee2:	4770      	bx	lr

08002ee4 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af04      	add	r7, sp, #16
 8002eec:	603a      	str	r2, [r7, #0]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	80fb      	strh	r3, [r7, #6]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002ef8:	bf00      	nop
	while (*str) {
 8002efa:	e02e      	b.n	8002f5a <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	7d3a      	ldrb	r2, [r7, #20]
 8002f00:	4413      	add	r3, r2
 8002f02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f06:	db13      	blt.n	8002f30 <ST7789_WriteString+0x4c>
			x = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002f0c:	7d7b      	ldrb	r3, [r7, #21]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	88bb      	ldrh	r3, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	7d7a      	ldrb	r2, [r7, #21]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	2bef      	cmp	r3, #239	@ 0xef
 8002f1e:	dc21      	bgt.n	8002f64 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d103      	bne.n	8002f30 <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
				continue;
 8002f2e:	e014      	b.n	8002f5a <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	88b9      	ldrh	r1, [r7, #4]
 8002f36:	88f8      	ldrh	r0, [r7, #6]
 8002f38:	8c3b      	ldrh	r3, [r7, #32]
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	8bbb      	ldrh	r3, [r7, #28]
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f7ff ff5a 	bl	8002dfe <ST7789_WriteChar>
		x += font.width;
 8002f4a:	7d3b      	ldrb	r3, [r7, #20]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4413      	add	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
		str++;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cc      	bne.n	8002efc <ST7789_WriteString+0x18>
 8002f62:	e000      	b.n	8002f66 <ST7789_WriteString+0x82>
				break;
 8002f64:	bf00      	nop
	}
	ST7789_UnSelect();
 8002f66:	bf00      	nop
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f72:	b002      	add	sp, #8
 8002f74:	4770      	bx	lr

08002f76 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8002f76:	b590      	push	{r4, r7, lr}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af02      	add	r7, sp, #8
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4608      	mov	r0, r1
 8002f80:	4611      	mov	r1, r2
 8002f82:	461a      	mov	r2, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	80fb      	strh	r3, [r7, #6]
 8002f88:	4603      	mov	r3, r0
 8002f8a:	80bb      	strh	r3, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002f94:	bf00      	nop
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8002f96:	883c      	ldrh	r4, [r7, #0]
 8002f98:	887a      	ldrh	r2, [r7, #2]
 8002f9a:	88b9      	ldrh	r1, [r7, #4]
 8002f9c:	88f8      	ldrh	r0, [r7, #6]
 8002f9e:	8c3b      	ldrh	r3, [r7, #32]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	f7ff fd45 	bl	8002a32 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8002fa8:	8bbc      	ldrh	r4, [r7, #28]
 8002faa:	8b3a      	ldrh	r2, [r7, #24]
 8002fac:	8839      	ldrh	r1, [r7, #0]
 8002fae:	8878      	ldrh	r0, [r7, #2]
 8002fb0:	8c3b      	ldrh	r3, [r7, #32]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f7ff fd3c 	bl	8002a32 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8002fba:	88bc      	ldrh	r4, [r7, #4]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	8bb9      	ldrh	r1, [r7, #28]
 8002fc0:	8b38      	ldrh	r0, [r7, #24]
 8002fc2:	8c3b      	ldrh	r3, [r7, #32]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	f7ff fd33 	bl	8002a32 <ST7789_DrawLine>
	ST7789_UnSelect();
 8002fcc:	bf00      	nop
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}
	...

08002fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <HAL_MspInit+0x4c>)
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	4a10      	ldr	r2, [pc, #64]	@ (8003024 <HAL_MspInit+0x4c>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fea:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <HAL_MspInit+0x4c>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_MspInit+0x4c>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <HAL_MspInit+0x4c>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003000:	6593      	str	r3, [r2, #88]	@ 0x58
 8003002:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <HAL_MspInit+0x4c>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800300e:	f000 ffcd 	bl	8003fac <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003012:	2002      	movs	r0, #2
 8003014:	f000 ffb6 	bl	8003f84 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003018:	f005 fdaa 	bl	8008b70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b09e      	sub	sp, #120	@ 0x78
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	2254      	movs	r2, #84	@ 0x54
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f00e ff79 	bl	8011f40 <memset>
  if(hadc->Instance==ADC5)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <HAL_ADC_MspInit+0xa4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d135      	bne.n	80030c4 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003058:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800305c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800305e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003062:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003064:	f107 0310 	add.w	r3, r7, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f006 faeb 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003074:	f7ff fae0 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_ADC_MspInit+0xa8>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	4a14      	ldr	r2, [pc, #80]	@ (80030d0 <HAL_ADC_MspInit+0xa8>)
 800307e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003084:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <HAL_ADC_MspInit+0xa8>)
 8003086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003090:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <HAL_ADC_MspInit+0xa8>)
 8003092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003094:	4a0e      	ldr	r2, [pc, #56]	@ (80030d0 <HAL_ADC_MspInit+0xa8>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309c:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <HAL_ADC_MspInit+0xa8>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC5 GPIO Configuration
    PA9     ------> ADC5_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ae:	2303      	movs	r3, #3
 80030b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c0:	f003 f838 	bl	8006134 <HAL_GPIO_Init>

  /* USER CODE END ADC5_MspInit 1 */

  }

}
 80030c4:	bf00      	nop
 80030c6:	3778      	adds	r7, #120	@ 0x78
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	50000600 	.word	0x50000600
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	@ 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003170 <HAL_COMP_MspInit+0x9c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d119      	bne.n	800312a <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_COMP_MspInit+0xa0>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003174 <HAL_COMP_MspInit+0xa0>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003102:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <HAL_COMP_MspInit+0xa0>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003112:	2303      	movs	r3, #3
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003124:	f003 f806 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8003128:	e01d      	b.n	8003166 <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <HAL_COMP_MspInit+0xa4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d118      	bne.n	8003166 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <HAL_COMP_MspInit+0xa0>)
 8003136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003138:	4a0e      	ldr	r2, [pc, #56]	@ (8003174 <HAL_COMP_MspInit+0xa0>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <HAL_COMP_MspInit+0xa0>)
 8003142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800314c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003152:	2303      	movs	r3, #3
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4806      	ldr	r0, [pc, #24]	@ (800317c <HAL_COMP_MspInit+0xa8>)
 8003162:	f002 ffe7 	bl	8006134 <HAL_GPIO_Init>
}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	@ 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40010204 	.word	0x40010204
 8003174:	40021000 	.word	0x40021000
 8003178:	40010210 	.word	0x40010210
 800317c:	48000400 	.word	0x48000400

08003180 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08c      	sub	sp, #48	@ 0x30
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a34      	ldr	r2, [pc, #208]	@ (8003270 <HAL_DAC_MspInit+0xf0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d125      	bne.n	80031ee <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80031a2:	4b34      	ldr	r3, [pc, #208]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a6:	4a33      	ldr	r2, [pc, #204]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ae:	4b31      	ldr	r3, [pc, #196]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	4a2d      	ldr	r2, [pc, #180]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031d2:	2310      	movs	r3, #16
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d6:	2303      	movs	r3, #3
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	4619      	mov	r1, r3
 80031e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031e8:	f002 ffa4 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80031ec:	e03b      	b.n	8003266 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a21      	ldr	r2, [pc, #132]	@ (8003278 <HAL_DAC_MspInit+0xf8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80031f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003204:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 8003206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003210:	4b18      	ldr	r3, [pc, #96]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 8003212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003214:	4a17      	ldr	r2, [pc, #92]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800321c:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 800321e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003228:	2340      	movs	r3, #64	@ 0x40
 800322a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800322c:	2303      	movs	r3, #3
 800322e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800323e:	f002 ff79 	bl	8006134 <HAL_GPIO_Init>
}
 8003242:	e010      	b.n	8003266 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <HAL_DAC_MspInit+0xfc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10b      	bne.n	8003266 <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 800324e:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	4a08      	ldr	r2, [pc, #32]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 8003254:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_DAC_MspInit+0xf4>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
}
 8003266:	bf00      	nop
 8003268:	3730      	adds	r7, #48	@ 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	50000800 	.word	0x50000800
 8003274:	40021000 	.word	0x40021000
 8003278:	50000c00 	.word	0x50000c00
 800327c:	50001400 	.word	0x50001400

08003280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b09e      	sub	sp, #120	@ 0x78
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	2254      	movs	r2, #84	@ 0x54
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f00e fe4d 	bl	8011f40 <memset>
  if(hi2c->Instance==I2C3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <HAL_I2C_MspInit+0xa8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d137      	bne.n	8003320 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80032b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ba:	f107 0310 	add.w	r3, r7, #16
 80032be:	4618      	mov	r0, r3
 80032c0:	f006 f9c0 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80032ca:	f7ff f9b5 	bl	8002638 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ce:	4b17      	ldr	r3, [pc, #92]	@ (800332c <HAL_I2C_MspInit+0xac>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	4a16      	ldr	r2, [pc, #88]	@ (800332c <HAL_I2C_MspInit+0xac>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032da:	4b14      	ldr	r3, [pc, #80]	@ (800332c <HAL_I2C_MspInit+0xac>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ec:	2312      	movs	r3, #18
 80032ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80032f8:	2308      	movs	r3, #8
 80032fa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003300:	4619      	mov	r1, r3
 8003302:	480b      	ldr	r0, [pc, #44]	@ (8003330 <HAL_I2C_MspInit+0xb0>)
 8003304:	f002 ff16 	bl	8006134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_I2C_MspInit+0xac>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	4a07      	ldr	r2, [pc, #28]	@ (800332c <HAL_I2C_MspInit+0xac>)
 800330e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003312:	6593      	str	r3, [r2, #88]	@ 0x58
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_I2C_MspInit+0xac>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003320:	bf00      	nop
 8003322:	3778      	adds	r7, #120	@ 0x78
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40007800 	.word	0x40007800
 800332c:	40021000 	.word	0x40021000
 8003330:	48000800 	.word	0x48000800

08003334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b09e      	sub	sp, #120	@ 0x78
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800334c:	f107 0310 	add.w	r3, r7, #16
 8003350:	2254      	movs	r2, #84	@ 0x54
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f00e fdf3 	bl	8011f40 <memset>
  if(huart->Instance==LPUART1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <HAL_UART_MspInit+0xa8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d136      	bne.n	80033d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003364:	2320      	movs	r3, #32
 8003366:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003368:	2300      	movs	r3, #0
 800336a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800336c:	f107 0310 	add.w	r3, r7, #16
 8003370:	4618      	mov	r0, r3
 8003372:	f006 f967 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800337c:	f7ff f95c 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003380:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <HAL_UART_MspInit+0xac>)
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	4a16      	ldr	r2, [pc, #88]	@ (80033e0 <HAL_UART_MspInit+0xac>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800338c:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <HAL_UART_MspInit+0xac>)
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003398:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <HAL_UART_MspInit+0xac>)
 800339a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339c:	4a10      	ldr	r2, [pc, #64]	@ (80033e0 <HAL_UART_MspInit+0xac>)
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a4:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_UART_MspInit+0xac>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80033c2:	2308      	movs	r3, #8
 80033c4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80033ca:	4619      	mov	r1, r3
 80033cc:	4805      	ldr	r0, [pc, #20]	@ (80033e4 <HAL_UART_MspInit+0xb0>)
 80033ce:	f002 feb1 	bl	8006134 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80033d2:	bf00      	nop
 80033d4:	3778      	adds	r7, #120	@ 0x78
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40008000 	.word	0x40008000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	48000400 	.word	0x48000400

080033e8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	@ 0x38
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5c      	ldr	r2, [pc, #368]	@ (8003578 <HAL_OPAMP_MspInit+0x190>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d119      	bne.n	800343e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	4b5c      	ldr	r3, [pc, #368]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	4a5b      	ldr	r2, [pc, #364]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003416:	4b59      	ldr	r3, [pc, #356]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003426:	2303      	movs	r3, #3
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003438:	f002 fe7c 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 800343c:	e098      	b.n	8003570 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a4f      	ldr	r2, [pc, #316]	@ (8003580 <HAL_OPAMP_MspInit+0x198>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d119      	bne.n	800347c <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b4c      	ldr	r3, [pc, #304]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 800344a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344c:	4a4b      	ldr	r2, [pc, #300]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003454:	4b49      	ldr	r3, [pc, #292]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003464:	2303      	movs	r3, #3
 8003466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003476:	f002 fe5d 	bl	8006134 <HAL_GPIO_Init>
}
 800347a:	e079      	b.n	8003570 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a40      	ldr	r2, [pc, #256]	@ (8003584 <HAL_OPAMP_MspInit+0x19c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d119      	bne.n	80034ba <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	4b3d      	ldr	r3, [pc, #244]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348a:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003492:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800349e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a4:	2303      	movs	r3, #3
 80034a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	4835      	ldr	r0, [pc, #212]	@ (8003588 <HAL_OPAMP_MspInit+0x1a0>)
 80034b4:	f002 fe3e 	bl	8006134 <HAL_GPIO_Init>
}
 80034b8:	e05a      	b.n	8003570 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP4)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a33      	ldr	r2, [pc, #204]	@ (800358c <HAL_OPAMP_MspInit+0x1a4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d119      	bne.n	80034f8 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 80034c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c8:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034d0:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 80034d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e2:	2303      	movs	r3, #3
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ee:	4619      	mov	r1, r3
 80034f0:	4825      	ldr	r0, [pc, #148]	@ (8003588 <HAL_OPAMP_MspInit+0x1a0>)
 80034f2:	f002 fe1f 	bl	8006134 <HAL_GPIO_Init>
}
 80034f6:	e03b      	b.n	8003570 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP5)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a24      	ldr	r2, [pc, #144]	@ (8003590 <HAL_OPAMP_MspInit+0x1a8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d118      	bne.n	8003534 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800351a:	2308      	movs	r3, #8
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800351e:	2303      	movs	r3, #3
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352a:	4619      	mov	r1, r3
 800352c:	4819      	ldr	r0, [pc, #100]	@ (8003594 <HAL_OPAMP_MspInit+0x1ac>)
 800352e:	f002 fe01 	bl	8006134 <HAL_GPIO_Init>
}
 8003532:	e01d      	b.n	8003570 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP6)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_OPAMP_MspInit+0x1b0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d118      	bne.n	8003570 <HAL_OPAMP_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003542:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_OPAMP_MspInit+0x194>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800355c:	2303      	movs	r3, #3
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003568:	4619      	mov	r1, r3
 800356a:	4807      	ldr	r0, [pc, #28]	@ (8003588 <HAL_OPAMP_MspInit+0x1a0>)
 800356c:	f002 fde2 	bl	8006134 <HAL_GPIO_Init>
}
 8003570:	bf00      	nop
 8003572:	3738      	adds	r7, #56	@ 0x38
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40010300 	.word	0x40010300
 800357c:	40021000 	.word	0x40021000
 8003580:	40010304 	.word	0x40010304
 8003584:	40010308 	.word	0x40010308
 8003588:	48000400 	.word	0x48000400
 800358c:	4001030c 	.word	0x4001030c
 8003590:	40010310 	.word	0x40010310
 8003594:	48000800 	.word	0x48000800
 8003598:	40010314 	.word	0x40010314

0800359c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	@ 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	@ (800366c <HAL_SPI_MspInit+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d151      	bne.n	8003662 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035be:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <HAL_SPI_MspInit+0xd4>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <HAL_SPI_MspInit+0xd4>)
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ca:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_SPI_MspInit+0xd4>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <HAL_SPI_MspInit+0xd4>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <HAL_SPI_MspInit+0xd4>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e2:	4b23      	ldr	r3, [pc, #140]	@ (8003670 <HAL_SPI_MspInit+0xd4>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80035ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003600:	2306      	movs	r3, #6
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	481a      	ldr	r0, [pc, #104]	@ (8003674 <HAL_SPI_MspInit+0xd8>)
 800360c:	f002 fd92 	bl	8006134 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003612:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <HAL_SPI_MspInit+0xe0>)
 8003614:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003618:	220f      	movs	r2, #15
 800361a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361c:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 800361e:	2210      	movs	r2, #16
 8003620:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362e:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800363a:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 800363c:	2200      	movs	r2, #0
 800363e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003640:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003646:	480c      	ldr	r0, [pc, #48]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 8003648:	f002 fb02 	bl	8005c50 <HAL_DMA_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003652:	f7fe fff1 	bl	8002638 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a07      	ldr	r2, [pc, #28]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
 800365c:	4a06      	ldr	r2, [pc, #24]	@ (8003678 <HAL_SPI_MspInit+0xdc>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003662:	bf00      	nop
 8003664:	3728      	adds	r7, #40	@ 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40003c00 	.word	0x40003c00
 8003670:	40021000 	.word	0x40021000
 8003674:	48000800 	.word	0x48000800
 8003678:	20000920 	.word	0x20000920
 800367c:	40020030 	.word	0x40020030

08003680 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b090      	sub	sp, #64	@ 0x40
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6a      	ldr	r2, [pc, #424]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d128      	bne.n	80036f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036a2:	4b6a      	ldr	r3, [pc, #424]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	4a69      	ldr	r2, [pc, #420]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ae:	4b67      	ldr	r3, [pc, #412]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	4b64      	ldr	r3, [pc, #400]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	4a63      	ldr	r2, [pc, #396]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c6:	4b61      	ldr	r3, [pc, #388]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036d2:	2303      	movs	r3, #3
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036da:	2301      	movs	r3, #1
 80036dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036de:	2303      	movs	r3, #3
 80036e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80036e2:	2302      	movs	r3, #2
 80036e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036ea:	4619      	mov	r1, r3
 80036ec:	4858      	ldr	r0, [pc, #352]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80036ee:	f002 fd21 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80036f2:	e0a4      	b.n	800383e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a56      	ldr	r2, [pc, #344]	@ (8003854 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d128      	bne.n	8003750 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036fe:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	6593      	str	r3, [r2, #88]	@ 0x58
 800370a:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003716:	4b4d      	ldr	r3, [pc, #308]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	4a4c      	ldr	r2, [pc, #304]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003722:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800372e:	23c0      	movs	r3, #192	@ 0xc0
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003736:	2301      	movs	r3, #1
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800373e:	2302      	movs	r3, #2
 8003740:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003742:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003746:	4619      	mov	r1, r3
 8003748:	4841      	ldr	r0, [pc, #260]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800374a:	f002 fcf3 	bl	8006134 <HAL_GPIO_Init>
}
 800374e:	e076      	b.n	800383e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a40      	ldr	r2, [pc, #256]	@ (8003858 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d128      	bne.n	80037ac <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800375a:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	4a3b      	ldr	r2, [pc, #236]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	6593      	str	r3, [r2, #88]	@ 0x58
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003772:	4b36      	ldr	r3, [pc, #216]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	4a35      	ldr	r2, [pc, #212]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800377e:	4b33      	ldr	r3, [pc, #204]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800378a:	23c0      	movs	r3, #192	@ 0xc0
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003792:	2301      	movs	r3, #1
 8003794:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003796:	2303      	movs	r3, #3
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800379a:	2302      	movs	r3, #2
 800379c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037a2:	4619      	mov	r1, r3
 80037a4:	482d      	ldr	r0, [pc, #180]	@ (800385c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80037a6:	f002 fcc5 	bl	8006134 <HAL_GPIO_Init>
}
 80037aa:	e048      	b.n	800383e <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003860 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d143      	bne.n	800383e <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80037b6:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ba:	4a24      	ldr	r2, [pc, #144]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80037c2:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	4a1e      	ldr	r2, [pc, #120]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037da:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e6:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	4a18      	ldr	r2, [pc, #96]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037fe:	2304      	movs	r3, #4
 8003800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003806:	2301      	movs	r3, #1
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800380e:	2306      	movs	r3, #6
 8003810:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003812:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003816:	4619      	mov	r1, r3
 8003818:	480d      	ldr	r0, [pc, #52]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800381a:	f002 fc8b 	bl	8006134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800381e:	2304      	movs	r3, #4
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003826:	2301      	movs	r3, #1
 8003828:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382a:	2303      	movs	r3, #3
 800382c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800382e:	2303      	movs	r3, #3
 8003830:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003836:	4619      	mov	r1, r3
 8003838:	4808      	ldr	r0, [pc, #32]	@ (800385c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800383a:	f002 fc7b 	bl	8006134 <HAL_GPIO_Init>
}
 800383e:	bf00      	nop
 8003840:	3740      	adds	r7, #64	@ 0x40
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40021000 	.word	0x40021000
 8003850:	48000800 	.word	0x48000800
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	48000400 	.word	0x48000400
 8003860:	40015000 	.word	0x40015000

08003864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a3d      	ldr	r2, [pc, #244]	@ (8003968 <HAL_TIM_Base_MspInit+0x104>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d137      	bne.n	80038e6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003876:	4b3d      	ldr	r3, [pc, #244]	@ (800396c <HAL_TIM_Base_MspInit+0x108>)
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	4a3c      	ldr	r2, [pc, #240]	@ (800396c <HAL_TIM_Base_MspInit+0x108>)
 800387c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003880:	6613      	str	r3, [r2, #96]	@ 0x60
 8003882:	4b3a      	ldr	r3, [pc, #232]	@ (800396c <HAL_TIM_Base_MspInit+0x108>)
 8003884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 800388e:	4b38      	ldr	r3, [pc, #224]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 8003890:	4a38      	ldr	r2, [pc, #224]	@ (8003974 <HAL_TIM_Base_MspInit+0x110>)
 8003892:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8003894:	4b36      	ldr	r3, [pc, #216]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 8003896:	2233      	movs	r2, #51	@ 0x33
 8003898:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800389a:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 800389c:	2210      	movs	r2, #16
 800389e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a0:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80038a6:	4b32      	ldr	r3, [pc, #200]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038a8:	2280      	movs	r2, #128	@ 0x80
 80038aa:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038ac:	4b30      	ldr	r3, [pc, #192]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038b2:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ba:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 80038bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80038c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 80038c8:	4829      	ldr	r0, [pc, #164]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038ca:	f002 f9c1 	bl	8005c50 <HAL_DMA_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80038d4:	f7fe feb0 	bl	8002638 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a25      	ldr	r2, [pc, #148]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038de:	4a24      	ldr	r2, [pc, #144]	@ (8003970 <HAL_TIM_Base_MspInit+0x10c>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80038e4:	e03b      	b.n	800395e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM15)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a23      	ldr	r2, [pc, #140]	@ (8003978 <HAL_TIM_Base_MspInit+0x114>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d136      	bne.n	800395e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80038f0:	4b1e      	ldr	r3, [pc, #120]	@ (800396c <HAL_TIM_Base_MspInit+0x108>)
 80038f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f4:	4a1d      	ldr	r2, [pc, #116]	@ (800396c <HAL_TIM_Base_MspInit+0x108>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_TIM_Base_MspInit+0x108>)
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8003908:	4b1c      	ldr	r3, [pc, #112]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 800390a:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <HAL_TIM_Base_MspInit+0x11c>)
 800390c:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 800390e:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003910:	224e      	movs	r2, #78	@ 0x4e
 8003912:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003916:	2210      	movs	r2, #16
 8003918:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800391a:	4b18      	ldr	r3, [pc, #96]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003922:	2280      	movs	r2, #128	@ 0x80
 8003924:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003926:	4b15      	ldr	r3, [pc, #84]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800392c:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003930:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003934:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 8003936:	4b11      	ldr	r3, [pc, #68]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800393c:	4b0f      	ldr	r3, [pc, #60]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 800393e:	2200      	movs	r2, #0
 8003940:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8003942:	480e      	ldr	r0, [pc, #56]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003944:	f002 f984 	bl	8005c50 <HAL_DMA_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 800394e:	f7fe fe73 	bl	8002638 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a09      	ldr	r2, [pc, #36]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24
 8003958:	4a08      	ldr	r2, [pc, #32]	@ (800397c <HAL_TIM_Base_MspInit+0x118>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40013400 	.word	0x40013400
 800396c:	40021000 	.word	0x40021000
 8003970:	20000b48 	.word	0x20000b48
 8003974:	40020008 	.word	0x40020008
 8003978:	40014000 	.word	0x40014000
 800397c:	20000ba8 	.word	0x20000ba8
 8003980:	4002001c 	.word	0x4002001c

08003984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	@ 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a32      	ldr	r2, [pc, #200]	@ (8003a6c <HAL_TIM_MspPostInit+0xe8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d13b      	bne.n	8003a1e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b32      	ldr	r3, [pc, #200]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	4a31      	ldr	r2, [pc, #196]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039be:	4b2c      	ldr	r3, [pc, #176]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ca:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80039d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039e0:	2302      	movs	r3, #2
 80039e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80039e8:	2302      	movs	r3, #2
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039f6:	f002 fb9d 	bl	8006134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a04:	2302      	movs	r3, #2
 8003a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003a0c:	230a      	movs	r3, #10
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	4619      	mov	r1, r3
 8003a16:	4817      	ldr	r0, [pc, #92]	@ (8003a74 <HAL_TIM_MspPostInit+0xf0>)
 8003a18:	f002 fb8c 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003a1c:	e021      	b.n	8003a62 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <HAL_TIM_MspPostInit+0xf4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d11c      	bne.n	8003a62 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a28:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2c:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a34:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_TIM_MspPostInit+0xec>)
 8003a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003a52:	2301      	movs	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4805      	ldr	r0, [pc, #20]	@ (8003a74 <HAL_TIM_MspPostInit+0xf0>)
 8003a5e:	f002 fb69 	bl	8006134 <HAL_GPIO_Init>
}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	@ 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40013400 	.word	0x40013400
 8003a70:	40021000 	.word	0x40021000
 8003a74:	48000400 	.word	0x48000400
 8003a78:	40014000 	.word	0x40014000

08003a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003a80:	f005 fd7e 	bl	8009580 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <NMI_Handler+0x8>

08003a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <HardFault_Handler+0x4>

08003a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <MemManage_Handler+0x4>

08003a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <BusFault_Handler+0x4>

08003aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <UsageFault_Handler+0x4>

08003aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad6:	f000 fa15 	bl	8003f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}

08003ade <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f002 fcc0 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003af0:	2002      	movs	r0, #2
 8003af2:	f002 fcb9 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}

08003afa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003afe:	2004      	movs	r0, #4
 8003b00:	f002 fcb2 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b0c:	2008      	movs	r0, #8
 8003b0e:	f002 fcab 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003b1a:	2010      	movs	r0, #16
 8003b1c:	f002 fca4 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003b28:	4802      	ldr	r0, [pc, #8]	@ (8003b34 <DMA1_Channel1_IRQHandler+0x10>)
 8003b2a:	f002 f9b4 	bl	8005e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000b48 	.word	0x20000b48

08003b38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 8003b3c:	4802      	ldr	r0, [pc, #8]	@ (8003b48 <DMA1_Channel2_IRQHandler+0x10>)
 8003b3e:	f002 f9aa 	bl	8005e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000ba8 	.word	0x20000ba8

08003b4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <DMA1_Channel3_IRQHandler+0x10>)
 8003b52:	f002 f9a0 	bl	8005e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000920 	.word	0x20000920

08003b60 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b64:	4802      	ldr	r0, [pc, #8]	@ (8003b70 <USB_LP_IRQHandler+0x10>)
 8003b66:	f003 fb4e 	bl	8007206 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000277c 	.word	0x2000277c

08003b74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003b7c:	f002 fc74 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8003b88:	4808      	ldr	r0, [pc, #32]	@ (8003bac <EXTI15_10_IRQHandler+0x28>)
 8003b8a:	f7fd fb87 	bl	800129c <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 8003b8e:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <EXTI15_10_IRQHandler+0x28>)
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	4a06      	ldr	r2, [pc, #24]	@ (8003bac <EXTI15_10_IRQHandler+0x28>)
 8003b94:	8851      	ldrh	r1, [r2, #2]
 8003b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe ff1e 	bl	80029dc <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003ba0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003ba4:	f002 fc60 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000574 	.word	0x20000574

08003bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return 1;
 8003bb4:	2301      	movs	r3, #1
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <_kill>:

int _kill(int pid, int sig)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bca:	f00e fa0b 	bl	8011fe4 <__errno>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2216      	movs	r2, #22
 8003bd2:	601a      	str	r2, [r3, #0]
  return -1;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <_exit>:

void _exit (int status)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003be8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ffe7 	bl	8003bc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <_exit+0x12>

08003bf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e00a      	b.n	8003c1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c08:	f3af 8000 	nop.w
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	60ba      	str	r2, [r7, #8]
 8003c14:	b2ca      	uxtb	r2, r1
 8003c16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	dbf0      	blt.n	8003c08 <_read+0x12>
  }

  return len;
 8003c26:	687b      	ldr	r3, [r7, #4]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e009      	b.n	8003c56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	60ba      	str	r2, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fb94 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dbf1      	blt.n	8003c42 <_write+0x12>
  }
  return len;
 8003c5e:	687b      	ldr	r3, [r7, #4]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_close>:

int _close(int file)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c90:	605a      	str	r2, [r3, #4]
  return 0;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_isatty>:

int _isatty(int file)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ca8:	2301      	movs	r3, #1
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd8:	4a14      	ldr	r2, [pc, #80]	@ (8003d2c <_sbrk+0x5c>)
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <_sbrk+0x60>)
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce4:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <_sbrk+0x64>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <_sbrk+0x64>)
 8003cee:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <_sbrk+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d207      	bcs.n	8003d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d00:	f00e f970 	bl	8011fe4 <__errno>
 8003d04:	4603      	mov	r3, r0
 8003d06:	220c      	movs	r2, #12
 8003d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e009      	b.n	8003d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <_sbrk+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <_sbrk+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	4a05      	ldr	r2, [pc, #20]	@ (8003d34 <_sbrk+0x64>)
 8003d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20020000 	.word	0x20020000
 8003d30:	00000400 	.word	0x00000400
 8003d34:	20001890 	.word	0x20001890
 8003d38:	20002dc8 	.word	0x20002dc8

08003d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <SystemInit+0x20>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d46:	4a05      	ldr	r2, [pc, #20]	@ (8003d5c <SystemInit+0x20>)
 8003d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	e018      	b.n	8003da4 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <WS2812_Write_Data+0x26>
 8003d82:	215a      	movs	r1, #90	@ 0x5a
 8003d84:	e000      	b.n	8003d88 <WS2812_Write_Data+0x28>
 8003d86:	212d      	movs	r1, #45	@ 0x2d
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	461a      	mov	r2, r3
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	4413      	add	r3, r2
 8003d98:	4a07      	ldr	r2, [pc, #28]	@ (8003db8 <WS2812_Write_Data+0x58>)
 8003d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	3301      	adds	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b17      	cmp	r3, #23
 8003da8:	d9e3      	bls.n	8003d72 <WS2812_Write_Data+0x12>
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	20001894 	.word	0x20001894

08003dbc <WS2812_Set_All>:
 * @brief  所有灯数据更新
 * @param  Color:颜色24bit of RGB888
 * @return None
 */
void WS2812_Set_All(uint32_t Color)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	/*循环写入所有灯珠数组*/
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	e007      	b.n	8003dda <WS2812_Set_All+0x1e>
		WS2812_Write_Data(Color,index);
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ffc6 	bl	8003d60 <WS2812_Write_Data>
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b09      	cmp	r3, #9
 8003dde:	d9f4      	bls.n	8003dca <WS2812_Set_All+0xe>
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 8003df0:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003df4:	4a03      	ldr	r2, [pc, #12]	@ (8003e04 <WS2812_Update+0x18>)
 8003df6:	2108      	movs	r1, #8
 8003df8:	4803      	ldr	r0, [pc, #12]	@ (8003e08 <WS2812_Update+0x1c>)
 8003dfa:	f006 fd4f 	bl	800a89c <HAL_TIM_PWM_Start_DMA>
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20001894 	.word	0x20001894
 8003e08:	20000a64 	.word	0x20000a64

08003e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e0c:	480d      	ldr	r0, [pc, #52]	@ (8003e44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e10:	f7ff ff94 	bl	8003d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e14:	480c      	ldr	r0, [pc, #48]	@ (8003e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e16:	490d      	ldr	r1, [pc, #52]	@ (8003e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e18:	4a0d      	ldr	r2, [pc, #52]	@ (8003e50 <LoopForever+0xe>)
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e1c:	e002      	b.n	8003e24 <LoopCopyDataInit>

08003e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e22:	3304      	adds	r3, #4

08003e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e28:	d3f9      	bcc.n	8003e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e58 <LoopForever+0x16>)
  movs r3, #0
 8003e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e30:	e001      	b.n	8003e36 <LoopFillZerobss>

08003e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e34:	3204      	adds	r2, #4

08003e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e38:	d3fb      	bcc.n	8003e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e3a:	f00e f8d9 	bl	8011ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e3e:	f7fd fb49 	bl	80014d4 <main>

08003e42 <LoopForever>:

LoopForever:
    b LoopForever
 8003e42:	e7fe      	b.n	8003e42 <LoopForever>
  ldr   r0, =_estack
 8003e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e4c:	20000550 	.word	0x20000550
  ldr r2, =_sidata
 8003e50:	080230d0 	.word	0x080230d0
  ldr r2, =_sbss
 8003e54:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8003e58:	20002dc4 	.word	0x20002dc4

08003e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e5c:	e7fe      	b.n	8003e5c <ADC1_2_IRQHandler>

08003e5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e68:	2003      	movs	r0, #3
 8003e6a:	f001 fc3b 	bl	80056e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e6e:	200f      	movs	r0, #15
 8003e70:	f000 f80e 	bl	8003e90 <HAL_InitTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	71fb      	strb	r3, [r7, #7]
 8003e7e:	e001      	b.n	8003e84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e80:	f7ff f8aa 	bl	8002fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e84:	79fb      	ldrb	r3, [r7, #7]

}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_InitTick+0x68>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d022      	beq.n	8003eea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_InitTick+0x6c>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <HAL_InitTick+0x68>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fc46 	bl	800574a <HAL_SYSTICK_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10f      	bne.n	8003ee4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d809      	bhi.n	8003ede <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	f001 fc12 	bl	80056fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <HAL_InitTick+0x70>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e007      	b.n	8003eee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e004      	b.n	8003eee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e001      	b.n	8003eee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	2000020c 	.word	0x2000020c
 8003efc:	20000204 	.word	0x20000204
 8003f00:	20000208 	.word	0x20000208

08003f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_IncTick+0x1c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_IncTick+0x20>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	4a03      	ldr	r2, [pc, #12]	@ (8003f20 <HAL_IncTick+0x1c>)
 8003f14:	6013      	str	r3, [r2, #0]
}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	20001aa4 	.word	0x20001aa4
 8003f24:	2000020c 	.word	0x2000020c

08003f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	@ (8003f3c <HAL_GetTick+0x14>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20001aa4 	.word	0x20001aa4

08003f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff ffee 	bl	8003f28 <HAL_GetTick>
 8003f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d004      	beq.n	8003f64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <HAL_Delay+0x40>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f64:	bf00      	nop
 8003f66:	f7ff ffdf 	bl	8003f28 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d8f7      	bhi.n	8003f66 <HAL_Delay+0x26>
  {
  }
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	2000020c 	.word	0x2000020c

08003f84 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 0202 	bic.w	r2, r3, #2
 8003f94:	4904      	ldr	r1, [pc, #16]	@ (8003fa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010030 	.word	0x40010030

08003fac <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a04      	ldr	r2, [pc, #16]	@ (8003fc8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010030 	.word	0x40010030

08003fcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	609a      	str	r2, [r3, #8]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3360      	adds	r3, #96	@ 0x60
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <LL_ADC_SetOffset+0x44>)
 8004056:	4013      	ands	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	03fff000 	.word	0x03fff000

0800407c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3360      	adds	r3, #96	@ 0x60
 800408a:	461a      	mov	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3360      	adds	r3, #96	@ 0x60
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3360      	adds	r3, #96	@ 0x60
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	431a      	orrs	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3360      	adds	r3, #96	@ 0x60
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	431a      	orrs	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	615a      	str	r2, [r3, #20]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3330      	adds	r3, #48	@ 0x30
 8004180:	461a      	mov	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	4413      	add	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	211f      	movs	r1, #31
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	401a      	ands	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0e9b      	lsrs	r3, r3, #26
 80041a8:	f003 011f 	and.w	r1, r3, #31
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	431a      	orrs	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3314      	adds	r3, #20
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	0e5b      	lsrs	r3, r3, #25
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	0d1b      	lsrs	r3, r3, #20
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2107      	movs	r1, #7
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	401a      	ands	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0d1b      	lsrs	r3, r3, #20
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	431a      	orrs	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004238:	43db      	mvns	r3, r3
 800423a:	401a      	ands	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0318 	and.w	r3, r3, #24
 8004242:	4908      	ldr	r1, [pc, #32]	@ (8004264 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004244:	40d9      	lsrs	r1, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	400b      	ands	r3, r1
 800424a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424e:	431a      	orrs	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	0007ffff 	.word	0x0007ffff

08004268 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6093      	str	r3, [r2, #8]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800429c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042a0:	d101      	bne.n	80042a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80042c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042f0:	d101      	bne.n	80042f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <LL_ADC_IsEnabled+0x18>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <LL_ADC_IsEnabled+0x1a>
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b04      	cmp	r3, #4
 800433c:	d101      	bne.n	8004342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d101      	bne.n	8004368 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1a9      	b.n	80046e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fe fe41 	bl	8003028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff67 	bl	800428c <LL_ADC_IsDeepPowerDownEnabled>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ff4d 	bl	8004268 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff82 	bl	80042dc <LL_ADC_IsInternalRegulatorEnabled>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d115      	bne.n	800440a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff ff66 	bl	80042b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043e8:	4b9c      	ldr	r3, [pc, #624]	@ (800465c <HAL_ADC_Init+0x2e4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	4a9c      	ldr	r2, [pc, #624]	@ (8004660 <HAL_ADC_Init+0x2e8>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043fc:	e002      	b.n	8004404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b01      	subs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f9      	bne.n	80043fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff64 	bl	80042dc <LL_ADC_IsInternalRegulatorEnabled>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441e:	f043 0210 	orr.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442a:	f043 0201 	orr.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ff75 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 8004440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 8142 	bne.w	80046d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 813e 	bne.w	80046d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004460:	f043 0202 	orr.w	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff49 	bl	8004304 <LL_ADC_IsEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d141      	bne.n	80044fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004480:	d004      	beq.n	800448c <HAL_ADC_Init+0x114>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a77      	ldr	r2, [pc, #476]	@ (8004664 <HAL_ADC_Init+0x2ec>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10f      	bne.n	80044ac <HAL_ADC_Init+0x134>
 800448c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004490:	f7ff ff38 	bl	8004304 <LL_ADC_IsEnabled>
 8004494:	4604      	mov	r4, r0
 8004496:	4873      	ldr	r0, [pc, #460]	@ (8004664 <HAL_ADC_Init+0x2ec>)
 8004498:	f7ff ff34 	bl	8004304 <LL_ADC_IsEnabled>
 800449c:	4603      	mov	r3, r0
 800449e:	4323      	orrs	r3, r4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e012      	b.n	80044d2 <HAL_ADC_Init+0x15a>
 80044ac:	486e      	ldr	r0, [pc, #440]	@ (8004668 <HAL_ADC_Init+0x2f0>)
 80044ae:	f7ff ff29 	bl	8004304 <LL_ADC_IsEnabled>
 80044b2:	4604      	mov	r4, r0
 80044b4:	486d      	ldr	r0, [pc, #436]	@ (800466c <HAL_ADC_Init+0x2f4>)
 80044b6:	f7ff ff25 	bl	8004304 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	431c      	orrs	r4, r3
 80044be:	486c      	ldr	r0, [pc, #432]	@ (8004670 <HAL_ADC_Init+0x2f8>)
 80044c0:	f7ff ff20 	bl	8004304 <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4323      	orrs	r3, r4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044de:	d004      	beq.n	80044ea <HAL_ADC_Init+0x172>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004664 <HAL_ADC_Init+0x2ec>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_Init+0x176>
 80044ea:	4a62      	ldr	r2, [pc, #392]	@ (8004674 <HAL_ADC_Init+0x2fc>)
 80044ec:	e000      	b.n	80044f0 <HAL_ADC_Init+0x178>
 80044ee:	4a62      	ldr	r2, [pc, #392]	@ (8004678 <HAL_ADC_Init+0x300>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7ff fd68 	bl	8003fcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7f5b      	ldrb	r3, [r3, #29]
 8004500:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004506:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800450c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004512:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800451a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004526:	2b01      	cmp	r3, #1
 8004528:	d106      	bne.n	8004538 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	045b      	lsls	r3, r3, #17
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b48      	ldr	r3, [pc, #288]	@ (800467c <HAL_ADC_Init+0x304>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	430b      	orrs	r3, r1
 8004566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fee4 	bl	8004350 <LL_ADC_INJ_IsConversionOngoing>
 8004588:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d17f      	bne.n	8004690 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d17c      	bne.n	8004690 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800459a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b2:	f023 0302 	bic.w	r3, r3, #2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	430b      	orrs	r3, r1
 80045be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80045d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80045e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6911      	ldr	r1, [r2, #16]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80045f6:	e013      	b.n	8004620 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004618:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800461c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004626:	2b01      	cmp	r3, #1
 8004628:	d12a      	bne.n	8004680 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004640:	4311      	orrs	r1, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800464c:	430a      	orrs	r2, r1
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e019      	b.n	8004690 <HAL_ADC_Init+0x318>
 800465c:	20000204 	.word	0x20000204
 8004660:	053e2d63 	.word	0x053e2d63
 8004664:	50000100 	.word	0x50000100
 8004668:	50000400 	.word	0x50000400
 800466c:	50000500 	.word	0x50000500
 8004670:	50000600 	.word	0x50000600
 8004674:	50000300 	.word	0x50000300
 8004678:	50000700 	.word	0x50000700
 800467c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10c      	bne.n	80046b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	f023 010f 	bic.w	r1, r3, #15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b0:	e007      	b.n	80046c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 020f 	bic.w	r2, r2, #15
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	f043 0201 	orr.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046d2:	e007      	b.n	80046e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	f043 0210 	orr.w	r2, r3, #16
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3724      	adds	r7, #36	@ 0x24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}
 80046ee:	bf00      	nop

080046f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b0b6      	sub	sp, #216	@ 0xd8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x24>
 800470e:	2302      	movs	r3, #2
 8004710:	f000 bc13 	b.w	8004f3a <HAL_ADC_ConfigChannel+0x84a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fe02 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 83f3 	bne.w	8004f14 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	f7ff fd18 	bl	8004170 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fdf0 	bl	800432a <LL_ADC_REG_IsConversionOngoing>
 800474a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fdfc 	bl	8004350 <LL_ADC_INJ_IsConversionOngoing>
 8004758:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800475c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 81d9 	bne.w	8004b18 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 81d4 	bne.w	8004b18 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004778:	d10f      	bne.n	800479a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	4619      	mov	r1, r3
 8004786:	f7ff fd1f 	bl	80041c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fcd9 	bl	800414a <LL_ADC_SetSamplingTimeCommonConfig>
 8004798:	e00e      	b.n	80047b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f7ff fd0e 	bl	80041c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fcc9 	bl	800414a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	08db      	lsrs	r3, r3, #3
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d022      	beq.n	8004820 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6919      	ldr	r1, [r3, #16]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047ea:	f7ff fc23 	bl	8004034 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6919      	ldr	r1, [r3, #16]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7ff fc6f 	bl	80040de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800480c:	2b01      	cmp	r3, #1
 800480e:	d102      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x126>
 8004810:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004814:	e000      	b.n	8004818 <HAL_ADC_ConfigChannel+0x128>
 8004816:	2300      	movs	r3, #0
 8004818:	461a      	mov	r2, r3
 800481a:	f7ff fc7b 	bl	8004114 <LL_ADC_SetOffsetSaturation>
 800481e:	e17b      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fc28 	bl	800407c <LL_ADC_GetOffsetChannel>
 800482c:	4603      	mov	r3, r0
 800482e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <HAL_ADC_ConfigChannel+0x15c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fc1d 	bl	800407c <LL_ADC_GetOffsetChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	0e9b      	lsrs	r3, r3, #26
 8004846:	f003 021f 	and.w	r2, r3, #31
 800484a:	e01e      	b.n	800488a <HAL_ADC_ConfigChannel+0x19a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fc12 	bl	800407c <LL_ADC_GetOffsetChannel>
 8004858:	4603      	mov	r3, r0
 800485a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800486a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800486e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e004      	b.n	8004888 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800487e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x1b2>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	0e9b      	lsrs	r3, r3, #26
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	e018      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x1e4>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80048b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80048be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80048c6:	2320      	movs	r3, #32
 80048c8:	e004      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80048ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d106      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fbe1 	bl	80040a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fbc5 	bl	800407c <LL_ADC_GetOffsetChannel>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x222>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fbba 	bl	800407c <LL_ADC_GetOffsetChannel>
 8004908:	4603      	mov	r3, r0
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	f003 021f 	and.w	r2, r3, #31
 8004910:	e01e      	b.n	8004950 <HAL_ADC_ConfigChannel+0x260>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fbaf 	bl	800407c <LL_ADC_GetOffsetChannel>
 800491e:	4603      	mov	r3, r0
 8004920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004930:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e004      	b.n	800494e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004958:	2b00      	cmp	r3, #0
 800495a:	d105      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x278>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	0e9b      	lsrs	r3, r3, #26
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	e018      	b.n	800499a <HAL_ADC_ConfigChannel+0x2aa>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004974:	fa93 f3a3 	rbit	r3, r3
 8004978:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800497c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800498c:	2320      	movs	r3, #32
 800498e:	e004      	b.n	800499a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800499a:	429a      	cmp	r2, r3
 800499c:	d106      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb7e 	bl	80040a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2102      	movs	r1, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fb62 	bl	800407c <LL_ADC_GetOffsetChannel>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x2e8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fb57 	bl	800407c <LL_ADC_GetOffsetChannel>
 80049ce:	4603      	mov	r3, r0
 80049d0:	0e9b      	lsrs	r3, r3, #26
 80049d2:	f003 021f 	and.w	r2, r3, #31
 80049d6:	e01e      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x326>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fb4c 	bl	800407c <LL_ADC_GetOffsetChannel>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80049f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80049fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a06:	2320      	movs	r3, #32
 8004a08:	e004      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x33e>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	0e9b      	lsrs	r3, r3, #26
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	e016      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x36c>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004a4e:	2320      	movs	r3, #32
 8004a50:	e004      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d106      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fb1d 	bl	80040a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2103      	movs	r1, #3
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fb01 	bl	800407c <LL_ADC_GetOffsetChannel>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x3aa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2103      	movs	r1, #3
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff faf6 	bl	800407c <LL_ADC_GetOffsetChannel>
 8004a90:	4603      	mov	r3, r0
 8004a92:	0e9b      	lsrs	r3, r3, #26
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	e017      	b.n	8004aca <HAL_ADC_ConfigChannel+0x3da>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff faeb 	bl	800407c <LL_ADC_GetOffsetChannel>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004ab6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004abc:	2320      	movs	r3, #32
 8004abe:	e003      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x3f2>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0e9b      	lsrs	r3, r3, #26
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	e011      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x416>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aea:	fa93 f3a3 	rbit	r3, r3
 8004aee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004afa:	2320      	movs	r3, #32
 8004afc:	e003      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d106      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2103      	movs	r1, #3
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fac8 	bl	80040a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fbf1 	bl	8004304 <LL_ADC_IsEnabled>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f040 813d 	bne.w	8004da4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6819      	ldr	r1, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7ff fb72 	bl	8004220 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4aa2      	ldr	r2, [pc, #648]	@ (8004dcc <HAL_ADC_ConfigChannel+0x6dc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	f040 812e 	bne.w	8004da4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x480>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0e9b      	lsrs	r3, r3, #26
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2b09      	cmp	r3, #9
 8004b66:	bf94      	ite	ls
 8004b68:	2301      	movls	r3, #1
 8004b6a:	2300      	movhi	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e019      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x4b4>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b80:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	e003      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004b8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	3301      	adds	r3, #1
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	2b09      	cmp	r3, #9
 8004b9c:	bf94      	ite	ls
 8004b9e:	2301      	movls	r3, #1
 8004ba0:	2300      	movhi	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d079      	beq.n	8004c9c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x4d4>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	0e9b      	lsrs	r3, r3, #26
 8004bba:	3301      	adds	r3, #1
 8004bbc:	069b      	lsls	r3, r3, #26
 8004bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bc2:	e015      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x500>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	e003      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	069b      	lsls	r3, r3, #26
 8004bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x520>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	0e9b      	lsrs	r3, r3, #26
 8004c02:	3301      	adds	r3, #1
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2101      	movs	r1, #1
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	e017      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x550>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c18:	fa93 f3a3 	rbit	r3, r3
 8004c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c28:	2320      	movs	r3, #32
 8004c2a:	e003      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3301      	adds	r3, #1
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	ea42 0103 	orr.w	r1, r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x576>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	f003 021f 	and.w	r2, r3, #31
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	4413      	add	r3, r2
 8004c62:	051b      	lsls	r3, r3, #20
 8004c64:	e018      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x5a8>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004c7e:	2320      	movs	r3, #32
 8004c80:	e003      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	fab3 f383 	clz	r3, r3
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	e07e      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x5c8>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0e9b      	lsrs	r3, r3, #26
 8004cae:	3301      	adds	r3, #1
 8004cb0:	069b      	lsls	r3, r3, #26
 8004cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cb6:	e015      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x5f4>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e003      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	069b      	lsls	r3, r3, #26
 8004ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x614>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0e9b      	lsrs	r3, r3, #26
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	e017      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x644>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	61fb      	str	r3, [r7, #28]
  return result;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	e003      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10d      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x670>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	3b1e      	subs	r3, #30
 8004d58:	051b      	lsls	r3, r3, #20
 8004d5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	e01b      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x6a8>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	613b      	str	r3, [r7, #16]
  return result;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004d78:	2320      	movs	r3, #32
 8004d7a:	e003      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	3301      	adds	r3, #1
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	3b1e      	subs	r3, #30
 8004d92:	051b      	lsls	r3, r3, #20
 8004d94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f7ff fa12 	bl	80041c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <HAL_ADC_ConfigChannel+0x6e0>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80be 	beq.w	8004f2e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_ConfigChannel+0x6d6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <HAL_ADC_ConfigChannel+0x6e4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10a      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x6ec>
 8004dc6:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <HAL_ADC_ConfigChannel+0x6e8>)
 8004dc8:	e009      	b.n	8004dde <HAL_ADC_ConfigChannel+0x6ee>
 8004dca:	bf00      	nop
 8004dcc:	407f0000 	.word	0x407f0000
 8004dd0:	80080000 	.word	0x80080000
 8004dd4:	50000100 	.word	0x50000100
 8004dd8:	50000300 	.word	0x50000300
 8004ddc:	4b59      	ldr	r3, [pc, #356]	@ (8004f44 <HAL_ADC_ConfigChannel+0x854>)
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff f91a 	bl	8004018 <LL_ADC_GetCommonPathInternalCh>
 8004de4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a56      	ldr	r2, [pc, #344]	@ (8004f48 <HAL_ADC_ConfigChannel+0x858>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_ADC_ConfigChannel+0x70c>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a55      	ldr	r2, [pc, #340]	@ (8004f4c <HAL_ADC_ConfigChannel+0x85c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d13a      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d134      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e10:	d005      	beq.n	8004e1e <HAL_ADC_ConfigChannel+0x72e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4e      	ldr	r2, [pc, #312]	@ (8004f50 <HAL_ADC_ConfigChannel+0x860>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	f040 8085 	bne.w	8004f28 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e26:	d004      	beq.n	8004e32 <HAL_ADC_ConfigChannel+0x742>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a49      	ldr	r2, [pc, #292]	@ (8004f54 <HAL_ADC_ConfigChannel+0x864>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0x746>
 8004e32:	4a49      	ldr	r2, [pc, #292]	@ (8004f58 <HAL_ADC_ConfigChannel+0x868>)
 8004e34:	e000      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x748>
 8004e36:	4a43      	ldr	r2, [pc, #268]	@ (8004f44 <HAL_ADC_ConfigChannel+0x854>)
 8004e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f7ff f8d5 	bl	8003ff2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e48:	4b44      	ldr	r3, [pc, #272]	@ (8004f5c <HAL_ADC_ConfigChannel+0x86c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	4a44      	ldr	r2, [pc, #272]	@ (8004f60 <HAL_ADC_ConfigChannel+0x870>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e62:	e002      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f9      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e70:	e05a      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3b      	ldr	r2, [pc, #236]	@ (8004f64 <HAL_ADC_ConfigChannel+0x874>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d125      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11f      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a31      	ldr	r2, [pc, #196]	@ (8004f54 <HAL_ADC_ConfigChannel+0x864>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d104      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x7ac>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a34      	ldr	r2, [pc, #208]	@ (8004f68 <HAL_ADC_ConfigChannel+0x878>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d047      	beq.n	8004f2c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ea4:	d004      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0x7c0>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8004f54 <HAL_ADC_ConfigChannel+0x864>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x7c4>
 8004eb0:	4a29      	ldr	r2, [pc, #164]	@ (8004f58 <HAL_ADC_ConfigChannel+0x868>)
 8004eb2:	e000      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x7c6>
 8004eb4:	4a23      	ldr	r2, [pc, #140]	@ (8004f44 <HAL_ADC_ConfigChannel+0x854>)
 8004eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7ff f896 	bl	8003ff2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ec6:	e031      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <HAL_ADC_ConfigChannel+0x87c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d12d      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d127      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f54 <HAL_ADC_ConfigChannel+0x864>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ef0:	d004      	beq.n	8004efc <HAL_ADC_ConfigChannel+0x80c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <HAL_ADC_ConfigChannel+0x864>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x810>
 8004efc:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <HAL_ADC_ConfigChannel+0x868>)
 8004efe:	e000      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x812>
 8004f00:	4a10      	ldr	r2, [pc, #64]	@ (8004f44 <HAL_ADC_ConfigChannel+0x854>)
 8004f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7ff f870 	bl	8003ff2 <LL_ADC_SetCommonPathInternalCh>
 8004f12:	e00c      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f26:	e002      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f36:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	37d8      	adds	r7, #216	@ 0xd8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	50000700 	.word	0x50000700
 8004f48:	c3210000 	.word	0xc3210000
 8004f4c:	90c00010 	.word	0x90c00010
 8004f50:	50000600 	.word	0x50000600
 8004f54:	50000100 	.word	0x50000100
 8004f58:	50000300 	.word	0x50000300
 8004f5c:	20000204 	.word	0x20000204
 8004f60:	053e2d63 	.word	0x053e2d63
 8004f64:	c7520000 	.word	0xc7520000
 8004f68:	50000500 	.word	0x50000500
 8004f6c:	cb840000 	.word	0xcb840000

08004f70 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40010400 	.word	0x40010400

08004f94 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <LL_EXTI_EnableIT_32_63+0x20>)
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	4904      	ldr	r1, [pc, #16]	@ (8004fb4 <LL_EXTI_EnableIT_32_63+0x20>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	620b      	str	r3, [r1, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40010400 	.word	0x40010400

08004fb8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <LL_EXTI_DisableIT_0_31+0x24>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	4904      	ldr	r1, [pc, #16]	@ (8004fdc <LL_EXTI_DisableIT_0_31+0x24>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004fe8:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <LL_EXTI_DisableIT_32_63+0x24>)
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	4904      	ldr	r1, [pc, #16]	@ (8005004 <LL_EXTI_DisableIT_32_63+0x24>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	620b      	str	r3, [r1, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010400 	.word	0x40010400

08005008 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4904      	ldr	r1, [pc, #16]	@ (8005028 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]

}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40010400 	.word	0x40010400

0800502c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <LL_EXTI_EnableEvent_32_63+0x20>)
 8005036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <LL_EXTI_EnableEvent_32_63+0x20>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010400 	.word	0x40010400

08005050 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <LL_EXTI_DisableEvent_0_31+0x24>)
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	43db      	mvns	r3, r3
 8005060:	4904      	ldr	r1, [pc, #16]	@ (8005074 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005062:	4013      	ands	r3, r2
 8005064:	604b      	str	r3, [r1, #4]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010400 	.word	0x40010400

08005078 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	43db      	mvns	r3, r3
 8005088:	4904      	ldr	r1, [pc, #16]	@ (800509c <LL_EXTI_DisableEvent_32_63+0x24>)
 800508a:	4013      	ands	r3, r2
 800508c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010400 	.word	0x40010400

080050a0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4904      	ldr	r1, [pc, #16]	@ (80050c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]

}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40010400 	.word	0x40010400

080050c4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80050ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050d0:	4904      	ldr	r1, [pc, #16]	@ (80050e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40010400 	.word	0x40010400

080050e8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80050f0:	4b06      	ldr	r3, [pc, #24]	@ (800510c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	4904      	ldr	r1, [pc, #16]	@ (800510c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]

}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010400 	.word	0x40010400

08005110 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005118:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800511a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	43db      	mvns	r3, r3
 8005120:	4904      	ldr	r1, [pc, #16]	@ (8005134 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005122:	4013      	ands	r3, r2
 8005124:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010400 	.word	0x40010400

08005138 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	4904      	ldr	r1, [pc, #16]	@ (8005158 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4313      	orrs	r3, r2
 800514a:	60cb      	str	r3, [r1, #12]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010400 	.word	0x40010400

0800515c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005168:	4904      	ldr	r1, [pc, #16]	@ (800517c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4313      	orrs	r3, r2
 800516e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40010400 	.word	0x40010400

08005180 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005188:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	43db      	mvns	r3, r3
 8005190:	4904      	ldr	r1, [pc, #16]	@ (80051a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005192:	4013      	ands	r3, r2
 8005194:	60cb      	str	r3, [r1, #12]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010400 	.word	0x40010400

080051a8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80051b0:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80051b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	4904      	ldr	r1, [pc, #16]	@ (80051cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010400 	.word	0x40010400

080051d0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80051d8:	4a04      	ldr	r2, [pc, #16]	@ (80051ec <LL_EXTI_ClearFlag_0_31+0x1c>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6153      	str	r3, [r2, #20]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010400 	.word	0x40010400

080051f0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80051f8:	4a04      	ldr	r2, [pc, #16]	@ (800520c <LL_EXTI_ClearFlag_32_63+0x1c>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010400 	.word	0x40010400

08005210 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e181      	b.n	8005530 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800523a:	d102      	bne.n	8005242 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e176      	b.n	8005530 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7f5b      	ldrb	r3, [r3, #29]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7fd ff3b 	bl	80030d4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005268:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b90      	ldr	r3, [pc, #576]	@ (80054d0 <HAL_COMP_Init+0x2c0>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	6979      	ldr	r1, [r7, #20]
 8005298:	430b      	orrs	r3, r1
 800529a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_COMP_Init+0xc8>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052b0:	4b88      	ldr	r3, [pc, #544]	@ (80054d4 <HAL_COMP_Init+0x2c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	4a88      	ldr	r2, [pc, #544]	@ (80054d8 <HAL_COMP_Init+0x2c8>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80052ca:	e002      	b.n	80052d2 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f9      	bne.n	80052cc <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a7f      	ldr	r2, [pc, #508]	@ (80054dc <HAL_COMP_Init+0x2cc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d028      	beq.n	8005334 <HAL_COMP_Init+0x124>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a7e      	ldr	r2, [pc, #504]	@ (80054e0 <HAL_COMP_Init+0x2d0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d020      	beq.n	800532e <HAL_COMP_Init+0x11e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a7c      	ldr	r2, [pc, #496]	@ (80054e4 <HAL_COMP_Init+0x2d4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_COMP_Init+0x118>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a7b      	ldr	r2, [pc, #492]	@ (80054e8 <HAL_COMP_Init+0x2d8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d010      	beq.n	8005322 <HAL_COMP_Init+0x112>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a79      	ldr	r2, [pc, #484]	@ (80054ec <HAL_COMP_Init+0x2dc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d008      	beq.n	800531c <HAL_COMP_Init+0x10c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a78      	ldr	r2, [pc, #480]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d101      	bne.n	8005318 <HAL_COMP_Init+0x108>
 8005314:	2301      	movs	r3, #1
 8005316:	e00f      	b.n	8005338 <HAL_COMP_Init+0x128>
 8005318:	2302      	movs	r3, #2
 800531a:	e00d      	b.n	8005338 <HAL_COMP_Init+0x128>
 800531c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005320:	e00a      	b.n	8005338 <HAL_COMP_Init+0x128>
 8005322:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005326:	e007      	b.n	8005338 <HAL_COMP_Init+0x128>
 8005328:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800532c:	e004      	b.n	8005338 <HAL_COMP_Init+0x128>
 800532e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005332:	e001      	b.n	8005338 <HAL_COMP_Init+0x128>
 8005334:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005338:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 80b6 	beq.w	80054b4 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d011      	beq.n	8005378 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a65      	ldr	r2, [pc, #404]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <HAL_COMP_Init+0x158>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a64      	ldr	r2, [pc, #400]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d103      	bne.n	8005370 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005368:	6938      	ldr	r0, [r7, #16]
 800536a:	f7ff feab 	bl	80050c4 <LL_EXTI_EnableRisingTrig_32_63>
 800536e:	e014      	b.n	800539a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005370:	6938      	ldr	r0, [r7, #16]
 8005372:	f7ff fe95 	bl	80050a0 <LL_EXTI_EnableRisingTrig_0_31>
 8005376:	e010      	b.n	800539a <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5c      	ldr	r2, [pc, #368]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_COMP_Init+0x17c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5b      	ldr	r2, [pc, #364]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800538c:	6938      	ldr	r0, [r7, #16]
 800538e:	f7ff febf 	bl	8005110 <LL_EXTI_DisableRisingTrig_32_63>
 8005392:	e002      	b.n	800539a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005394:	6938      	ldr	r0, [r7, #16]
 8005396:	f7ff fea7 	bl	80050e8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a51      	ldr	r2, [pc, #324]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_COMP_Init+0x1aa>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4f      	ldr	r2, [pc, #316]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d103      	bne.n	80053c2 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f7ff fece 	bl	800515c <LL_EXTI_EnableFallingTrig_32_63>
 80053c0:	e014      	b.n	80053ec <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80053c2:	6938      	ldr	r0, [r7, #16]
 80053c4:	f7ff feb8 	bl	8005138 <LL_EXTI_EnableFallingTrig_0_31>
 80053c8:	e010      	b.n	80053ec <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a48      	ldr	r2, [pc, #288]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_COMP_Init+0x1ce>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a46      	ldr	r2, [pc, #280]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d103      	bne.n	80053e6 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f7ff fee2 	bl	80051a8 <LL_EXTI_DisableFallingTrig_32_63>
 80053e4:	e002      	b.n	80053ec <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80053e6:	6938      	ldr	r0, [r7, #16]
 80053e8:	f7ff feca 	bl	8005180 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_COMP_Init+0x1f0>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d103      	bne.n	8005408 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005400:	6938      	ldr	r0, [r7, #16]
 8005402:	f7ff fef5 	bl	80051f0 <LL_EXTI_ClearFlag_32_63>
 8005406:	e002      	b.n	800540e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005408:	6938      	ldr	r0, [r7, #16]
 800540a:	f7ff fee1 	bl	80051d0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d011      	beq.n	800543e <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_COMP_Init+0x21e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a32      	ldr	r2, [pc, #200]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d103      	bne.n	8005436 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800542e:	6938      	ldr	r0, [r7, #16]
 8005430:	f7ff fdfc 	bl	800502c <LL_EXTI_EnableEvent_32_63>
 8005434:	e014      	b.n	8005460 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005436:	6938      	ldr	r0, [r7, #16]
 8005438:	f7ff fde6 	bl	8005008 <LL_EXTI_EnableEvent_0_31>
 800543c:	e010      	b.n	8005460 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2b      	ldr	r2, [pc, #172]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_COMP_Init+0x242>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a29      	ldr	r2, [pc, #164]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d103      	bne.n	800545a <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f7ff fe10 	bl	8005078 <LL_EXTI_DisableEvent_32_63>
 8005458:	e002      	b.n	8005460 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f7ff fdf8 	bl	8005050 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d011      	beq.n	8005490 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_COMP_Init+0x270>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d103      	bne.n	8005488 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8005480:	6938      	ldr	r0, [r7, #16]
 8005482:	f7ff fd87 	bl	8004f94 <LL_EXTI_EnableIT_32_63>
 8005486:	e04b      	b.n	8005520 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8005488:	6938      	ldr	r0, [r7, #16]
 800548a:	f7ff fd71 	bl	8004f70 <LL_EXTI_EnableIT_0_31>
 800548e:	e047      	b.n	8005520 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_COMP_Init+0x294>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a15      	ldr	r2, [pc, #84]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d103      	bne.n	80054ac <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f7ff fd9b 	bl	8004fe0 <LL_EXTI_DisableIT_32_63>
 80054aa:	e039      	b.n	8005520 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80054ac:	6938      	ldr	r0, [r7, #16]
 80054ae:	f7ff fd83 	bl	8004fb8 <LL_EXTI_DisableIT_0_31>
 80054b2:	e035      	b.n	8005520 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0d      	ldr	r2, [pc, #52]	@ (80054f0 <HAL_COMP_Init+0x2e0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_COMP_Init+0x2b8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a0c      	ldr	r2, [pc, #48]	@ (80054f4 <HAL_COMP_Init+0x2e4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d117      	bne.n	80054f8 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80054c8:	6938      	ldr	r0, [r7, #16]
 80054ca:	f7ff fdd5 	bl	8005078 <LL_EXTI_DisableEvent_32_63>
 80054ce:	e016      	b.n	80054fe <HAL_COMP_Init+0x2ee>
 80054d0:	ff007e0f 	.word	0xff007e0f
 80054d4:	20000204 	.word	0x20000204
 80054d8:	053e2d63 	.word	0x053e2d63
 80054dc:	40010200 	.word	0x40010200
 80054e0:	40010204 	.word	0x40010204
 80054e4:	40010208 	.word	0x40010208
 80054e8:	4001020c 	.word	0x4001020c
 80054ec:	40010210 	.word	0x40010210
 80054f0:	40010214 	.word	0x40010214
 80054f4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f7ff fda9 	bl	8005050 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0e      	ldr	r2, [pc, #56]	@ (800553c <HAL_COMP_Init+0x32c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_COMP_Init+0x302>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0c      	ldr	r2, [pc, #48]	@ (8005540 <HAL_COMP_Init+0x330>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d103      	bne.n	800551a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f7ff fd64 	bl	8004fe0 <LL_EXTI_DisableIT_32_63>
 8005518:	e002      	b.n	8005520 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f7ff fd4c 	bl	8004fb8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7f5b      	ldrb	r3, [r3, #29]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005530:	7ffb      	ldrb	r3, [r7, #31]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40010214 	.word	0x40010214
 8005540:	40010218 	.word	0x40010218

08005544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <__NVIC_SetPriorityGrouping+0x44>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005560:	4013      	ands	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800556c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005576:	4a04      	ldr	r2, [pc, #16]	@ (8005588 <__NVIC_SetPriorityGrouping+0x44>)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	60d3      	str	r3, [r2, #12]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	f003 0307 	and.w	r3, r3, #7
}
 800559a:	4618      	mov	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	db0b      	blt.n	80055d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f003 021f 	and.w	r2, r3, #31
 80055c0:	4907      	ldr	r1, [pc, #28]	@ (80055e0 <__NVIC_EnableIRQ+0x38>)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2001      	movs	r0, #1
 80055ca:	fa00 f202 	lsl.w	r2, r0, r2
 80055ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000e100 	.word	0xe000e100

080055e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db0a      	blt.n	800560e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	490c      	ldr	r1, [pc, #48]	@ (8005630 <__NVIC_SetPriority+0x4c>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	440b      	add	r3, r1
 8005608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800560c:	e00a      	b.n	8005624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4908      	ldr	r1, [pc, #32]	@ (8005634 <__NVIC_SetPriority+0x50>)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3b04      	subs	r3, #4
 800561c:	0112      	lsls	r2, r2, #4
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	440b      	add	r3, r1
 8005622:	761a      	strb	r2, [r3, #24]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000e100 	.word	0xe000e100
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	@ 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f1c3 0307 	rsb	r3, r3, #7
 8005652:	2b04      	cmp	r3, #4
 8005654:	bf28      	it	cs
 8005656:	2304      	movcs	r3, #4
 8005658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3304      	adds	r3, #4
 800565e:	2b06      	cmp	r3, #6
 8005660:	d902      	bls.n	8005668 <NVIC_EncodePriority+0x30>
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3b03      	subs	r3, #3
 8005666:	e000      	b.n	800566a <NVIC_EncodePriority+0x32>
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43da      	mvns	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	401a      	ands	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005680:	f04f 31ff 	mov.w	r1, #4294967295
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	43d9      	mvns	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	4313      	orrs	r3, r2
         );
}
 8005692:	4618      	mov	r0, r3
 8005694:	3724      	adds	r7, #36	@ 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056b0:	d301      	bcc.n	80056b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056b2:	2301      	movs	r3, #1
 80056b4:	e00f      	b.n	80056d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056b6:	4a0a      	ldr	r2, [pc, #40]	@ (80056e0 <SysTick_Config+0x40>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056be:	210f      	movs	r1, #15
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	f7ff ff8e 	bl	80055e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <SysTick_Config+0x40>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ce:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <SysTick_Config+0x40>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	e000e010 	.word	0xe000e010

080056e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff29 	bl	8005544 <__NVIC_SetPriorityGrouping>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	4603      	mov	r3, r0
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005708:	f7ff ff40 	bl	800558c <__NVIC_GetPriorityGrouping>
 800570c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	f7ff ff90 	bl	8005638 <NVIC_EncodePriority>
 8005718:	4602      	mov	r2, r0
 800571a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff5f 	bl	80055e4 <__NVIC_SetPriority>
}
 8005726:	bf00      	nop
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	4603      	mov	r3, r0
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff33 	bl	80055a8 <__NVIC_EnableIRQ>
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ffa4 	bl	80056a0 <SysTick_Config>
 8005758:	4603      	mov	r3, r0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e014      	b.n	800579e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	791b      	ldrb	r3, [r3, #4]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d105      	bne.n	800578a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fd fcfb 	bl	8003180 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e056      	b.n	800586a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	795b      	ldrb	r3, [r3, #5]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_DAC_Start+0x20>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e050      	b.n	800586a <HAL_DAC_Start+0xc2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057ec:	4b22      	ldr	r3, [pc, #136]	@ (8005878 <HAL_DAC_Start+0xd0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	099b      	lsrs	r3, r3, #6
 80057f2:	4a22      	ldr	r2, [pc, #136]	@ (800587c <HAL_DAC_Start+0xd4>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80057fe:	e002      	b.n	8005806 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f9      	bne.n	8005800 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11d      	bne.n	800585c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	e014      	b.n	800585c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2102      	movs	r1, #2
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0202 	orr.w	r2, r2, #2
 800585a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000204 	.word	0x20000204
 800587c:	053e2d63 	.word	0x053e2d63

08005880 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e018      	b.n	80058ce <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4413      	add	r3, r2
 80058b4:	3308      	adds	r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e004      	b.n	80058c4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	3314      	adds	r3, #20
 80058c2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	461a      	mov	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	@ 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_DAC_ConfigChannel+0x1c>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e1a1      	b.n	8005c40 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	795b      	ldrb	r3, [r3, #5]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_DAC_ConfigChannel+0x32>
 800590a:	2302      	movs	r3, #2
 800590c:	e198      	b.n	8005c40 <HAL_DAC_ConfigChannel+0x364>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2202      	movs	r2, #2
 8005918:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b04      	cmp	r3, #4
 8005920:	d17a      	bne.n	8005a18 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005922:	f7fe fb01 	bl	8003f28 <HAL_GetTick>
 8005926:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d13d      	bne.n	80059aa <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800592e:	e018      	b.n	8005962 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005930:	f7fe fafa 	bl	8003f28 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d911      	bls.n	8005962 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f043 0208 	orr.w	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2203      	movs	r2, #3
 800595c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e16e      	b.n	8005c40 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1df      	bne.n	8005930 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005978:	641a      	str	r2, [r3, #64]	@ 0x40
 800597a:	e020      	b.n	80059be <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800597c:	f7fe fad4 	bl	8003f28 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d90f      	bls.n	80059aa <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005990:	2b00      	cmp	r3, #0
 8005992:	da0a      	bge.n	80059aa <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f043 0208 	orr.w	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2203      	movs	r2, #3
 80059a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e14a      	b.n	8005c40 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dbe3      	blt.n	800597c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80059ce:	fa01 f303 	lsl.w	r3, r1, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	ea02 0103 	and.w	r1, r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	409a      	lsls	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	21ff      	movs	r1, #255	@ 0xff
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	ea02 0103 	and.w	r1, r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d11d      	bne.n	8005a5c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	221f      	movs	r2, #31
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a38:	4013      	ands	r3, r2
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a50:	4313      	orrs	r3, r2
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	4013      	ands	r3, r2
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d102      	bne.n	8005a86 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	e00f      	b.n	8005aa6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d102      	bne.n	8005a94 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	e008      	b.n	8005aa6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	e001      	b.n	8005aa6 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac8:	4013      	ands	r3, r2
 8005aca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	791b      	ldrb	r3, [r3, #4]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_DAC_ConfigChannel+0x1fe>
 8005ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ad8:	e000      	b.n	8005adc <HAL_DAC_ConfigChannel+0x200>
 8005ada:	2300      	movs	r3, #0
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af4:	4013      	ands	r3, r2
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	795b      	ldrb	r3, [r3, #5]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d102      	bne.n	8005b06 <HAL_DAC_ConfigChannel+0x22a>
 8005b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b04:	e000      	b.n	8005b08 <HAL_DAC_ConfigChannel+0x22c>
 8005b06:	2300      	movs	r3, #0
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d114      	bne.n	8005b48 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005b1e:	f003 fce7 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 8005b22:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4a48      	ldr	r2, [pc, #288]	@ (8005c48 <HAL_DAC_ConfigChannel+0x36c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d904      	bls.n	8005b36 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b34:	e00f      	b.n	8005b56 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4a44      	ldr	r2, [pc, #272]	@ (8005c4c <HAL_DAC_ConfigChannel+0x370>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d90a      	bls.n	8005b54 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b46:	e006      	b.n	8005b56 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b52:	e000      	b.n	8005b56 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005b54:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b64:	4313      	orrs	r3, r2
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6819      	ldr	r1, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43da      	mvns	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	400a      	ands	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba8:	4013      	ands	r3, r2
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	22c0      	movs	r2, #192	@ 0xc0
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43da      	mvns	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	400a      	ands	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	ea02 0103 	and.w	r1, r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3728      	adds	r7, #40	@ 0x28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	09896800 	.word	0x09896800
 8005c4c:	04c4b400 	.word	0x04c4b400

08005c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e08d      	b.n	8005d7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	4b47      	ldr	r3, [pc, #284]	@ (8005d88 <HAL_DMA_Init+0x138>)
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d80f      	bhi.n	8005c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	4b45      	ldr	r3, [pc, #276]	@ (8005d8c <HAL_DMA_Init+0x13c>)
 8005c76:	4413      	add	r3, r2
 8005c78:	4a45      	ldr	r2, [pc, #276]	@ (8005d90 <HAL_DMA_Init+0x140>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	009a      	lsls	r2, r3, #2
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a42      	ldr	r2, [pc, #264]	@ (8005d94 <HAL_DMA_Init+0x144>)
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c8c:	e00e      	b.n	8005cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	4b40      	ldr	r3, [pc, #256]	@ (8005d98 <HAL_DMA_Init+0x148>)
 8005c96:	4413      	add	r3, r2
 8005c98:	4a3d      	ldr	r2, [pc, #244]	@ (8005d90 <HAL_DMA_Init+0x140>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	009a      	lsls	r2, r3, #2
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8005d9c <HAL_DMA_Init+0x14c>)
 8005caa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f9b6 	bl	8006070 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d0c:	d102      	bne.n	8005d14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <HAL_DMA_Init+0x104>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d80c      	bhi.n	8005d54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9d6 	bl	80060ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	e008      	b.n	8005d66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40020407 	.word	0x40020407
 8005d8c:	bffdfff8 	.word	0xbffdfff8
 8005d90:	cccccccd 	.word	0xcccccccd
 8005d94:	40020000 	.word	0x40020000
 8005d98:	bffdfbf8 	.word	0xbffdfbf8
 8005d9c:	40020400 	.word	0x40020400

08005da0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_DMA_Start_IT+0x20>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e066      	b.n	8005e8e <HAL_DMA_Start_IT+0xee>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d155      	bne.n	8005e80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f8fb 	bl	8005ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 020e 	orr.w	r2, r2, #14
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e00f      	b.n	8005e38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 020a 	orr.w	r2, r2, #10
 8005e36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e005      	b.n	8005e8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d026      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x7a>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d021      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0204 	bic.w	r2, r2, #4
 8005ee8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eee:	f003 021f 	and.w	r2, r3, #31
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	2104      	movs	r1, #4
 8005ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8005efc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d071      	beq.n	8005fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f0e:	e06c      	b.n	8005fea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2202      	movs	r2, #2
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02e      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d029      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 020a 	bic.w	r2, r2, #10
 8005f4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f58:	f003 021f 	and.w	r2, r3, #31
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f60:	2102      	movs	r1, #2
 8005f62:	fa01 f202 	lsl.w	r2, r1, r2
 8005f66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d038      	beq.n	8005fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f80:	e033      	b.n	8005fea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02a      	beq.n	8005fec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d025      	beq.n	8005fec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 020e 	bic.w	r2, r2, #14
 8005fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
}
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800600a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800601c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006022:	f003 021f 	and.w	r2, r3, #31
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	2101      	movs	r1, #1
 800602c:	fa01 f202 	lsl.w	r2, r1, r2
 8006030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b10      	cmp	r3, #16
 8006040:	d108      	bne.n	8006054 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006052:	e007      	b.n	8006064 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006080:	429a      	cmp	r2, r3
 8006082:	d802      	bhi.n	800608a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006084:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e001      	b.n	800608e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800608a:	4b15      	ldr	r3, [pc, #84]	@ (80060e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800608c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	3b08      	subs	r3, #8
 800609a:	4a12      	ldr	r2, [pc, #72]	@ (80060e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	009a      	lsls	r2, r3, #2
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4413      	add	r3, r2
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a0b      	ldr	r2, [pc, #44]	@ (80060e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2201      	movs	r2, #1
 80060c4:	409a      	lsls	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40020407 	.word	0x40020407
 80060dc:	40020800 	.word	0x40020800
 80060e0:	40020820 	.word	0x40020820
 80060e4:	cccccccd 	.word	0xcccccccd
 80060e8:	40020880 	.word	0x40020880

080060ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800610e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b01      	subs	r3, #1
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	1000823f 	.word	0x1000823f
 8006130:	40020940 	.word	0x40020940

08006134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006142:	e15a      	b.n	80063fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 814c 	beq.w	80063f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d005      	beq.n	8006174 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006170:	2b02      	cmp	r3, #2
 8006172:	d130      	bne.n	80061d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061aa:	2201      	movs	r2, #1
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0201 	and.w	r2, r3, #1
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d017      	beq.n	8006212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	2203      	movs	r2, #3
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4013      	ands	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d123      	bne.n	8006266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	08da      	lsrs	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3208      	adds	r2, #8
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	08da      	lsrs	r2, r3, #3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3208      	adds	r2, #8
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	2203      	movs	r2, #3
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4013      	ands	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80a6 	beq.w	80063f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006418 <HAL_GPIO_Init+0x2e4>)
 80062aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006418 <HAL_GPIO_Init+0x2e4>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80062b4:	4b58      	ldr	r3, [pc, #352]	@ (8006418 <HAL_GPIO_Init+0x2e4>)
 80062b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062c0:	4a56      	ldr	r2, [pc, #344]	@ (800641c <HAL_GPIO_Init+0x2e8>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	3302      	adds	r3, #2
 80062c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	220f      	movs	r2, #15
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80062ea:	d01f      	beq.n	800632c <HAL_GPIO_Init+0x1f8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006420 <HAL_GPIO_Init+0x2ec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d019      	beq.n	8006328 <HAL_GPIO_Init+0x1f4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a4b      	ldr	r2, [pc, #300]	@ (8006424 <HAL_GPIO_Init+0x2f0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_GPIO_Init+0x1f0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006428 <HAL_GPIO_Init+0x2f4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00d      	beq.n	8006320 <HAL_GPIO_Init+0x1ec>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a49      	ldr	r2, [pc, #292]	@ (800642c <HAL_GPIO_Init+0x2f8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <HAL_GPIO_Init+0x1e8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a48      	ldr	r2, [pc, #288]	@ (8006430 <HAL_GPIO_Init+0x2fc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d101      	bne.n	8006318 <HAL_GPIO_Init+0x1e4>
 8006314:	2305      	movs	r3, #5
 8006316:	e00a      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006318:	2306      	movs	r3, #6
 800631a:	e008      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 800631c:	2304      	movs	r3, #4
 800631e:	e006      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006320:	2303      	movs	r3, #3
 8006322:	e004      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006324:	2302      	movs	r3, #2
 8006326:	e002      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 800632c:	2300      	movs	r3, #0
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	f002 0203 	and.w	r2, r2, #3
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	4093      	lsls	r3, r2
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800633e:	4937      	ldr	r1, [pc, #220]	@ (800641c <HAL_GPIO_Init+0x2e8>)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	3302      	adds	r3, #2
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800634c:	4b39      	ldr	r3, [pc, #228]	@ (8006434 <HAL_GPIO_Init+0x300>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	43db      	mvns	r3, r3
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4013      	ands	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006370:	4a30      	ldr	r2, [pc, #192]	@ (8006434 <HAL_GPIO_Init+0x300>)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006376:	4b2f      	ldr	r3, [pc, #188]	@ (8006434 <HAL_GPIO_Init+0x300>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	43db      	mvns	r3, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4013      	ands	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800639a:	4a26      	ldr	r2, [pc, #152]	@ (8006434 <HAL_GPIO_Init+0x300>)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063a0:	4b24      	ldr	r3, [pc, #144]	@ (8006434 <HAL_GPIO_Init+0x300>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4013      	ands	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <HAL_GPIO_Init+0x300>)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006434 <HAL_GPIO_Init+0x300>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063ee:	4a11      	ldr	r2, [pc, #68]	@ (8006434 <HAL_GPIO_Init+0x300>)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3301      	adds	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	f47f ae9d 	bne.w	8006144 <HAL_GPIO_Init+0x10>
  }
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40021000 	.word	0x40021000
 800641c:	40010000 	.word	0x40010000
 8006420:	48000400 	.word	0x48000400
 8006424:	48000800 	.word	0x48000800
 8006428:	48000c00 	.word	0x48000c00
 800642c:	48001000 	.word	0x48001000
 8006430:	48001400 	.word	0x48001400
 8006434:	40010400 	.word	0x40010400

08006438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
 8006444:	4613      	mov	r3, r2
 8006446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006448:	787b      	ldrb	r3, [r7, #1]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006454:	e002      	b.n	800645c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006456:	887a      	ldrh	r2, [r7, #2]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006472:	4b08      	ldr	r3, [pc, #32]	@ (8006494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800647e:	4a05      	ldr	r2, [pc, #20]	@ (8006494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f806 	bl	8006498 <HAL_GPIO_EXTI_Callback>
  }
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40010400 	.word	0x40010400

08006498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e08d      	b.n	80065dc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fc fed3 	bl	8003280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2224      	movs	r2, #36	@ 0x24
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80064fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800650e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d107      	bne.n	8006528 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	e006      	b.n	8006536 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006534:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d108      	bne.n	8006550 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	e007      	b.n	8006560 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800655e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006572:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006582:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69d9      	ldr	r1, [r3, #28]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0201 	orr.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	461a      	mov	r2, r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	817b      	strh	r3, [r7, #10]
 80065f6:	460b      	mov	r3, r1
 80065f8:	813b      	strh	r3, [r7, #8]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b20      	cmp	r3, #32
 8006608:	f040 80fd 	bne.w	8006806 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_I2C_Mem_Read+0x34>
 8006612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800661e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0f1      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_I2C_Mem_Read+0x4e>
 800662e:	2302      	movs	r3, #2
 8006630:	e0ea      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800663a:	f7fd fc75 	bl	8003f28 <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2319      	movs	r3, #25
 8006646:	2201      	movs	r2, #1
 8006648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f95b 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0d5      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2222      	movs	r2, #34	@ 0x22
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2240      	movs	r2, #64	@ 0x40
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800667c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006684:	88f8      	ldrh	r0, [r7, #6]
 8006686:	893a      	ldrh	r2, [r7, #8]
 8006688:	8979      	ldrh	r1, [r7, #10]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4603      	mov	r3, r0
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f8bf 	bl	8006818 <I2C_RequestMemoryRead>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0ad      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2bff      	cmp	r3, #255	@ 0xff
 80066b4:	d90e      	bls.n	80066d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	22ff      	movs	r2, #255	@ 0xff
 80066ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	8979      	ldrh	r1, [r7, #10]
 80066c4:	4b52      	ldr	r3, [pc, #328]	@ (8006810 <HAL_I2C_Mem_Read+0x22c>)
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fadf 	bl	8006c90 <I2C_TransferConfig>
 80066d2:	e00f      	b.n	80066f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	8979      	ldrh	r1, [r7, #10]
 80066e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <HAL_I2C_Mem_Read+0x22c>)
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 face 	bl	8006c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	2200      	movs	r2, #0
 80066fc:	2104      	movs	r1, #4
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f902 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e07c      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d034      	beq.n	80067b4 <HAL_I2C_Mem_Read+0x1d0>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d130      	bne.n	80067b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	2200      	movs	r2, #0
 800675a:	2180      	movs	r1, #128	@ 0x80
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f8d3 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e04d      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2bff      	cmp	r3, #255	@ 0xff
 8006774:	d90e      	bls.n	8006794 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	22ff      	movs	r2, #255	@ 0xff
 800677a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	8979      	ldrh	r1, [r7, #10]
 8006784:	2300      	movs	r3, #0
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 fa7f 	bl	8006c90 <I2C_TransferConfig>
 8006792:	e00f      	b.n	80067b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	8979      	ldrh	r1, [r7, #10]
 80067a6:	2300      	movs	r3, #0
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fa6e 	bl	8006c90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d19a      	bne.n	80066f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f940 	bl	8006a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e01a      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2220      	movs	r2, #32
 80067d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <HAL_I2C_Mem_Read+0x230>)
 80067e6:	400b      	ands	r3, r1
 80067e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e000      	b.n	8006808 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006806:	2302      	movs	r3, #2
  }
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	80002400 	.word	0x80002400
 8006814:	fe00e800 	.word	0xfe00e800

08006818 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	817b      	strh	r3, [r7, #10]
 800682a:	460b      	mov	r3, r1
 800682c:	813b      	strh	r3, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	b2da      	uxtb	r2, r3
 8006836:	8979      	ldrh	r1, [r7, #10]
 8006838:	4b20      	ldr	r3, [pc, #128]	@ (80068bc <I2C_RequestMemoryRead+0xa4>)
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2300      	movs	r3, #0
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fa26 	bl	8006c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	69b9      	ldr	r1, [r7, #24]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f8b6 	bl	80069ba <I2C_WaitOnTXISFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e02c      	b.n	80068b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800685e:	893b      	ldrh	r3, [r7, #8]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	629a      	str	r2, [r3, #40]	@ 0x28
 8006868:	e015      	b.n	8006896 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800686a:	893b      	ldrh	r3, [r7, #8]
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	b29b      	uxth	r3, r3
 8006870:	b2da      	uxtb	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	69b9      	ldr	r1, [r7, #24]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f89c 	bl	80069ba <I2C_WaitOnTXISFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e012      	b.n	80068b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800688c:	893b      	ldrh	r3, [r7, #8]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2200      	movs	r2, #0
 800689e:	2140      	movs	r1, #64	@ 0x40
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f831 	bl	8006908 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	80002000 	.word	0x80002000

080068c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d103      	bne.n	80068de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d007      	beq.n	80068fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	619a      	str	r2, [r3, #24]
  }
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006918:	e03b      	b.n	8006992 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f8d6 	bl	8006ad0 <I2C_IsErrorOccurred>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e041      	b.n	80069b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d02d      	beq.n	8006992 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006936:	f7fd faf7 	bl	8003f28 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d302      	bcc.n	800694c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d122      	bne.n	8006992 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	429a      	cmp	r2, r3
 8006968:	d113      	bne.n	8006992 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e00f      	b.n	80069b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699a      	ldr	r2, [r3, #24]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4013      	ands	r3, r2
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	429a      	cmp	r2, r3
 80069a0:	bf0c      	ite	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	2300      	movne	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d0b4      	beq.n	800691a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069c6:	e033      	b.n	8006a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f87f 	bl	8006ad0 <I2C_IsErrorOccurred>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e031      	b.n	8006a40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d025      	beq.n	8006a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e4:	f7fd faa0 	bl	8003f28 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d302      	bcc.n	80069fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11a      	bne.n	8006a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d013      	beq.n	8006a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0c:	f043 0220 	orr.w	r2, r3, #32
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e007      	b.n	8006a40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d1c4      	bne.n	80069c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a54:	e02f      	b.n	8006ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f838 	bl	8006ad0 <I2C_IsErrorOccurred>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e02d      	b.n	8006ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6a:	f7fd fa5d 	bl	8003f28 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d302      	bcc.n	8006a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11a      	bne.n	8006ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d013      	beq.n	8006ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e007      	b.n	8006ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d1c8      	bne.n	8006a56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	@ 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d068      	beq.n	8006bce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2210      	movs	r2, #16
 8006b02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b04:	e049      	b.n	8006b9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d045      	beq.n	8006b9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fd fa0b 	bl	8003f28 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_IsErrorOccurred+0x54>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d13a      	bne.n	8006b9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b46:	d121      	bne.n	8006b8c <I2C_IsErrorOccurred+0xbc>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b4e:	d01d      	beq.n	8006b8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b50:	7cfb      	ldrb	r3, [r7, #19]
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d01a      	beq.n	8006b8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b66:	f7fd f9df 	bl	8003f28 <HAL_GetTick>
 8006b6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b6c:	e00e      	b.n	8006b8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b6e:	f7fd f9db 	bl	8003f28 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b19      	cmp	r3, #25
 8006b7a:	d907      	bls.n	8006b8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f043 0320 	orr.w	r3, r3, #32
 8006b82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006b8a:	e006      	b.n	8006b9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d1e9      	bne.n	8006b6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d003      	beq.n	8006bb0 <I2C_IsErrorOccurred+0xe0>
 8006ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0aa      	beq.n	8006b06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	f043 0304 	orr.w	r3, r3, #4
 8006bc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	f043 0308 	orr.w	r3, r3, #8
 8006c08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f043 0302 	orr.w	r3, r3, #2
 8006c2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01c      	beq.n	8006c7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff fe3b 	bl	80068c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <I2C_IsErrorOccurred+0x1bc>)
 8006c56:	400b      	ands	r3, r1
 8006c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3728      	adds	r7, #40	@ 0x28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	fe00e800 	.word	0xfe00e800

08006c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	817b      	strh	r3, [r7, #10]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ca8:	7a7b      	ldrb	r3, [r7, #9]
 8006caa:	041b      	lsls	r3, r3, #16
 8006cac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	0d5b      	lsrs	r3, r3, #21
 8006cca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006cce:	4b08      	ldr	r3, [pc, #32]	@ (8006cf0 <I2C_TransferConfig+0x60>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	ea02 0103 	and.w	r1, r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	03ff63ff 	.word	0x03ff63ff

08006cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d138      	bne.n	8006d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e032      	b.n	8006d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2224      	movs	r2, #36	@ 0x24
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6819      	ldr	r1, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e000      	b.n	8006d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d139      	bne.n	8006e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e033      	b.n	8006e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2224      	movs	r2, #36	@ 0x24
 8006dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0bb      	b.n	8006fb2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d101      	bne.n	8006e4a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0b3      	b.n	8006fb2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d101      	bne.n	8006e5a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e0ab      	b.n	8006fb2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5a:	4b58      	ldr	r3, [pc, #352]	@ (8006fbc <HAL_OPAMP_Init+0x198>)
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5e:	4a57      	ldr	r2, [pc, #348]	@ (8006fbc <HAL_OPAMP_Init+0x198>)
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e66:	4b55      	ldr	r3, [pc, #340]	@ (8006fbc <HAL_OPAMP_Init+0x198>)
 8006e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fc faae 	bl	80033e8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b40      	cmp	r3, #64	@ 0x40
 8006e92:	d003      	beq.n	8006e9c <HAL_OPAMP_Init+0x78>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b60      	cmp	r3, #96	@ 0x60
 8006e9a:	d133      	bne.n	8006f04 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 0110 	bic.w	r1, r3, #16
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b41      	ldr	r3, [pc, #260]	@ (8006fc0 <HAL_OPAMP_Init+0x19c>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6851      	ldr	r1, [r2, #4]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6892      	ldr	r2, [r2, #8]
 8006ec4:	4311      	orrs	r1, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6912      	ldr	r2, [r2, #16]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	7d09      	ldrb	r1, [r1, #20]
 8006ed0:	2901      	cmp	r1, #1
 8006ed2:	d102      	bne.n	8006eda <HAL_OPAMP_Init+0xb6>
 8006ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ed8:	e000      	b.n	8006edc <HAL_OPAMP_Init+0xb8>
 8006eda:	2100      	movs	r1, #0
 8006edc:	4311      	orrs	r1, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ee2:	4311      	orrs	r1, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006eee:	04d2      	lsls	r2, r2, #19
 8006ef0:	4311      	orrs	r1, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ef6:	0612      	lsls	r2, r2, #24
 8006ef8:	4311      	orrs	r1, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	430b      	orrs	r3, r1
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e035      	b.n	8006f70 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 0110 	bic.w	r1, r3, #16
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b27      	ldr	r3, [pc, #156]	@ (8006fc0 <HAL_OPAMP_Init+0x19c>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6851      	ldr	r1, [r2, #4]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6892      	ldr	r2, [r2, #8]
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68d2      	ldr	r2, [r2, #12]
 8006f32:	4311      	orrs	r1, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6912      	ldr	r2, [r2, #16]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	7d09      	ldrb	r1, [r1, #20]
 8006f3e:	2901      	cmp	r1, #1
 8006f40:	d102      	bne.n	8006f48 <HAL_OPAMP_Init+0x124>
 8006f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f46:	e000      	b.n	8006f4a <HAL_OPAMP_Init+0x126>
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4311      	orrs	r1, r2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f50:	4311      	orrs	r1, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f56:	4311      	orrs	r1, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f5c:	04d2      	lsls	r2, r2, #19
 8006f5e:	4311      	orrs	r1, r2
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f64:	0612      	lsls	r2, r2, #24
 8006f66:	4311      	orrs	r1, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	db10      	blt.n	8006f9c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	e0003e11 	.word	0xe0003e11

08006fc4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
 8006fda:	e01d      	b.n	8007018 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	d102      	bne.n	8006fee <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e014      	b.n	8007018 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d10c      	bne.n	8007014 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007012:	e001      	b.n	8007018 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e0c0      	b.n	80071ba <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d106      	bne.n	8007052 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f009 fbef 	bl	8010830 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2203      	movs	r2, #3
 8007056:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f005 ff73 	bl	800cf4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e03e      	b.n	80070e8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800706a:	7bfa      	ldrb	r2, [r7, #15]
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	440b      	add	r3, r1
 8007078:	3311      	adds	r3, #17
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	440b      	add	r3, r1
 800708c:	3310      	adds	r3, #16
 800708e:	7bfa      	ldrb	r2, [r7, #15]
 8007090:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	440b      	add	r3, r1
 80070a0:	3313      	adds	r3, #19
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070a6:	7bfa      	ldrb	r2, [r7, #15]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	440b      	add	r3, r1
 80070b4:	3320      	adds	r3, #32
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070ba:	7bfa      	ldrb	r2, [r7, #15]
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	440b      	add	r3, r1
 80070c8:	3324      	adds	r3, #36	@ 0x24
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	440b      	add	r3, r1
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	3301      	adds	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	7bfa      	ldrb	r2, [r7, #15]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d3bb      	bcc.n	800706a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
 80070f6:	e044      	b.n	8007182 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070f8:	7bfa      	ldrb	r2, [r7, #15]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	440b      	add	r3, r1
 8007106:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800710e:	7bfa      	ldrb	r2, [r7, #15]
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	440b      	add	r3, r1
 800711c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007124:	7bfa      	ldrb	r2, [r7, #15]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	440b      	add	r3, r1
 8007132:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	440b      	add	r3, r1
 8007148:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007150:	7bfa      	ldrb	r2, [r7, #15]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	440b      	add	r3, r1
 800715e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	440b      	add	r3, r1
 8007174:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	3301      	adds	r3, #1
 8007180:	73fb      	strb	r3, [r7, #15]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	791b      	ldrb	r3, [r3, #4]
 8007186:	7bfa      	ldrb	r2, [r7, #15]
 8007188:	429a      	cmp	r2, r3
 800718a:	d3b5      	bcc.n	80070f8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3304      	adds	r3, #4
 8007194:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007198:	f005 fef2 	bl	800cf80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7a9b      	ldrb	r3, [r3, #10]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d102      	bne.n	80071b8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fc0e 	bl	80089d4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_PCD_Start+0x16>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e012      	b.n	80071fe <HAL_PCD_Start+0x3c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f005 fe99 	bl	800cf1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f007 fc76 	bl	800eae0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f007 fc7b 	bl	800eb0e <USB_ReadInterrupts>
 8007218:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fb06 	bl	8007836 <PCD_EP_ISR_Handler>

    return;
 800722a:	e110      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007232:	2b00      	cmp	r3, #0
 8007234:	d013      	beq.n	800725e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800723e:	b29a      	uxth	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007248:	b292      	uxth	r2, r2
 800724a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f009 fb7f 	bl	8010952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007254:	2100      	movs	r1, #0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f8fc 	bl	8007454 <HAL_PCD_SetAddress>

    return;
 800725c:	e0f7      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800727a:	b292      	uxth	r2, r2
 800727c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007280:	e0e5      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800729e:	b292      	uxth	r2, r2
 80072a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80072a4:	e0d3      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d034      	beq.n	800731a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0204 	bic.w	r2, r2, #4
 80072c2:	b292      	uxth	r2, r2
 80072c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0208 	bic.w	r2, r2, #8
 80072da:	b292      	uxth	r2, r2
 80072dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d107      	bne.n	80072fa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072f2:	2100      	movs	r1, #0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f009 fd1f 	bl	8010d38 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f009 fb62 	bl	80109c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007308:	b29a      	uxth	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007312:	b292      	uxth	r2, r2
 8007314:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007318:	e099      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007320:	2b00      	cmp	r3, #0
 8007322:	d027      	beq.n	8007374 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0208 	orr.w	r2, r2, #8
 8007336:	b292      	uxth	r2, r2
 8007338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007344:	b29a      	uxth	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800734e:	b292      	uxth	r2, r2
 8007350:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0204 	orr.w	r2, r2, #4
 8007366:	b292      	uxth	r2, r2
 8007368:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f009 fb0f 	bl	8010990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007372:	e06c      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d040      	beq.n	8007400 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007386:	b29a      	uxth	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007390:	b292      	uxth	r2, r2
 8007392:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800739c:	2b00      	cmp	r3, #0
 800739e:	d12b      	bne.n	80073f8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0204 	orr.w	r2, r2, #4
 80073b2:	b292      	uxth	r2, r2
 80073b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0208 	orr.w	r2, r2, #8
 80073ca:	b292      	uxth	r2, r2
 80073cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80073ee:	2101      	movs	r1, #1
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f009 fca1 	bl	8010d38 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80073f6:	e02a      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f009 fac9 	bl	8010990 <HAL_PCD_SuspendCallback>
    return;
 80073fe:	e026      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00f      	beq.n	800742a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007412:	b29a      	uxth	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800741c:	b292      	uxth	r2, r2
 800741e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f009 fa87 	bl	8010936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007428:	e011      	b.n	800744e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800743c:	b29a      	uxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007446:	b292      	uxth	r2, r2
 8007448:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800744c:	bf00      	nop
  }
}
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_PCD_SetAddress+0x1a>
 800746a:	2302      	movs	r3, #2
 800746c:	e012      	b.n	8007494 <HAL_PCD_SetAddress+0x40>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f007 fb17 	bl	800eab8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	70fb      	strb	r3, [r7, #3]
 80074ae:	460b      	mov	r3, r1
 80074b0:	803b      	strh	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da0e      	bge.n	80074e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	f003 0207 	and.w	r2, r3, #7
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	3310      	adds	r3, #16
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	705a      	strb	r2, [r3, #1]
 80074de:	e00e      	b.n	80074fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	f003 0207 	and.w	r2, r3, #7
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	b2da      	uxtb	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800750a:	883b      	ldrh	r3, [r7, #0]
 800750c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	78ba      	ldrb	r2, [r7, #2]
 8007518:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800751a:	78bb      	ldrb	r3, [r7, #2]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d102      	bne.n	8007526 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_PCD_EP_Open+0x98>
 8007530:	2302      	movs	r3, #2
 8007532:	e00e      	b.n	8007552 <HAL_PCD_EP_Open+0xb6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68f9      	ldr	r1, [r7, #12]
 8007542:	4618      	mov	r0, r3
 8007544:	f005 fd3a 	bl	800cfbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007550:	7afb      	ldrb	r3, [r7, #11]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800756a:	2b00      	cmp	r3, #0
 800756c:	da0e      	bge.n	800758c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	f003 0207 	and.w	r2, r3, #7
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	3310      	adds	r3, #16
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	705a      	strb	r2, [r3, #1]
 800758a:	e00e      	b.n	80075aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	f003 0207 	and.w	r2, r3, #7
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_PCD_EP_Close+0x6a>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e00e      	b.n	80075e2 <HAL_PCD_EP_Close+0x88>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68f9      	ldr	r1, [r7, #12]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f006 f9da 	bl	800d98c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	460b      	mov	r3, r1
 80075f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	f003 0207 	and.w	r2, r3, #7
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2200      	movs	r2, #0
 8007628:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	b2da      	uxtb	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	4618      	mov	r0, r3
 800763e:	f006 fb92 	bl	800dd66 <USB_EPStartXfer>

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	f003 0207 	and.w	r2, r3, #7
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	440b      	add	r3, r1
 800766a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800766e:	681b      	ldr	r3, [r3, #0]
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	460b      	mov	r3, r1
 800768a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	f003 0207 	and.w	r2, r3, #7
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	3310      	adds	r3, #16
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2200      	movs	r2, #0
 80076c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2201      	movs	r2, #1
 80076c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076c8:	7afb      	ldrb	r3, [r7, #11]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6979      	ldr	r1, [r7, #20]
 80076da:	4618      	mov	r0, r3
 80076dc:	f006 fb43 	bl	800dd66 <USB_EPStartXfer>

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7912      	ldrb	r2, [r2, #4]
 8007700:	4293      	cmp	r3, r2
 8007702:	d901      	bls.n	8007708 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e03e      	b.n	8007786 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800770c:	2b00      	cmp	r3, #0
 800770e:	da0e      	bge.n	800772e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	f003 0207 	and.w	r2, r3, #7
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	3310      	adds	r3, #16
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	705a      	strb	r2, [r3, #1]
 800772c:	e00c      	b.n	8007748 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_PCD_EP_SetStall+0x7e>
 8007764:	2302      	movs	r3, #2
 8007766:	e00e      	b.n	8007786 <HAL_PCD_EP_SetStall+0x9c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	4618      	mov	r0, r3
 8007778:	f007 f8a4 	bl	800e8c4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7912      	ldrb	r2, [r2, #4]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d901      	bls.n	80077ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e040      	b.n	800782e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da0e      	bge.n	80077d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	f003 0207 	and.w	r2, r3, #7
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	3310      	adds	r3, #16
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	705a      	strb	r2, [r3, #1]
 80077d0:	e00e      	b.n	80077f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	f003 0207 	and.w	r2, r3, #7
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_PCD_EP_ClrStall+0x82>
 800780c:	2302      	movs	r3, #2
 800780e:	e00e      	b.n	800782e <HAL_PCD_EP_ClrStall+0xa0>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68f9      	ldr	r1, [r7, #12]
 800781e:	4618      	mov	r0, r3
 8007820:	f007 f8a1 	bl	800e966 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b092      	sub	sp, #72	@ 0x48
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800783e:	e333      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007848:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800784a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8007856:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 8108 	bne.w	8007a70 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007860:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b00      	cmp	r3, #0
 8007868:	d14c      	bne.n	8007904 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787a:	813b      	strh	r3, [r7, #8]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	893b      	ldrh	r3, [r7, #8]
 8007882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788a:	b29b      	uxth	r3, r3
 800788c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3310      	adds	r3, #16
 8007892:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4413      	add	r3, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80078bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	441a      	add	r2, r3
 80078c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80078ca:	2100      	movs	r1, #0
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f009 f818 	bl	8010902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	7b1b      	ldrb	r3, [r3, #12]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 82e5 	beq.w	8007ea8 <PCD_EP_ISR_Handler+0x672>
 80078de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 82e0 	bne.w	8007ea8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7b1b      	ldrb	r3, [r3, #12]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	731a      	strb	r2, [r3, #12]
 8007902:	e2d1      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800790a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007914:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800791a:	2b00      	cmp	r3, #0
 800791c:	d032      	beq.n	8007984 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007926:	b29b      	uxth	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4413      	add	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	4413      	add	r3, r2
 8007938:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007944:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007952:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007956:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007958:	b29b      	uxth	r3, r3
 800795a:	f007 f92a 	bl	800ebb2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29a      	uxth	r2, r3
 8007966:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800796a:	4013      	ands	r3, r2
 800796c:	817b      	strh	r3, [r7, #10]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	897a      	ldrh	r2, [r7, #10]
 8007974:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007978:	b292      	uxth	r2, r2
 800797a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f008 ff93 	bl	80108a8 <HAL_PCD_SetupStageCallback>
 8007982:	e291      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007984:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007988:	2b00      	cmp	r3, #0
 800798a:	f280 828d 	bge.w	8007ea8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800799a:	4013      	ands	r3, r2
 800799c:	81fb      	strh	r3, [r7, #14]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	89fa      	ldrh	r2, [r7, #14]
 80079a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079a8:	b292      	uxth	r2, r2
 80079aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4413      	add	r3, r2
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80079d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80079d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d019      	beq.n	8007a10 <PCD_EP_ISR_Handler+0x1da>
 80079dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d015      	beq.n	8007a10 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ea:	6959      	ldr	r1, [r3, #20]
 80079ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80079f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f007 f8dc 	bl	800ebb2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80079fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fc:	695a      	ldr	r2, [r3, #20]
 80079fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	441a      	add	r2, r3
 8007a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a06:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f008 ff5e 	bl	80108cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007a18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 8242 	bne.w	8007ea8 <PCD_EP_ISR_Handler+0x672>
 8007a24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a26:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a2e:	f000 823b 	beq.w	8007ea8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	81bb      	strh	r3, [r7, #12]
 8007a44:	89bb      	ldrh	r3, [r7, #12]
 8007a46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a4a:	81bb      	strh	r3, [r7, #12]
 8007a4c:	89bb      	ldrh	r3, [r7, #12]
 8007a4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a52:	81bb      	strh	r3, [r7, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	89bb      	ldrh	r3, [r7, #12]
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]
 8007a6e:	e21b      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a82:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f280 80f1 	bge.w	8007c6e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007ab6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007aba:	b292      	uxth	r2, r2
 8007abc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007abe:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad6:	7b1b      	ldrb	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d123      	bne.n	8007b24 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	4413      	add	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	4413      	add	r3, r2
 8007af6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b00:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8007b04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 808b 	beq.w	8007c24 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b14:	6959      	ldr	r1, [r3, #20]
 8007b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b18:	88da      	ldrh	r2, [r3, #6]
 8007b1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b1e:	f007 f848 	bl	800ebb2 <USB_ReadPMA>
 8007b22:	e07f      	b.n	8007c24 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b26:	78db      	ldrb	r3, [r3, #3]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d109      	bne.n	8007b40 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007b2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9c6 	bl	8007ec4 <HAL_PCD_EP_DB_Receive>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007b3e:	e071      	b.n	8007c24 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b5a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	441a      	add	r2, r3
 8007b6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d022      	beq.n	8007be0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007bc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d02c      	beq.n	8007c24 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd0:	6959      	ldr	r1, [r3, #20]
 8007bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd4:	891a      	ldrh	r2, [r3, #8]
 8007bd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007bda:	f006 ffea 	bl	800ebb2 <USB_ReadPMA>
 8007bde:	e021      	b.n	8007c24 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c04:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007c08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c16:	6959      	ldr	r1, [r3, #20]
 8007c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c1a:	895a      	ldrh	r2, [r3, #10]
 8007c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c20:	f006 ffc7 	bl	800ebb2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c26:	69da      	ldr	r2, [r3, #28]
 8007c28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c2c:	441a      	add	r2, r3
 8007c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c34:	695a      	ldr	r2, [r3, #20]
 8007c36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007c3a:	441a      	add	r2, r3
 8007c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <PCD_EP_ISR_Handler+0x41e>
 8007c48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d206      	bcs.n	8007c62 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f008 fe36 	bl	80108cc <HAL_PCD_DataOutStageCallback>
 8007c60:	e005      	b.n	8007c6e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f006 f87c 	bl	800dd66 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007c6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8117 	beq.w	8007ea8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007c7a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	3310      	adds	r3, #16
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	441a      	add	r2, r3
 8007cb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc8:	78db      	ldrb	r3, [r3, #3]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	f040 80a1 	bne.w	8007e12 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd8:	7b1b      	ldrb	r3, [r3, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8092 	beq.w	8007e04 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007ce0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d046      	beq.n	8007d78 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d126      	bne.n	8007d40 <PCD_EP_ISR_Handler+0x50a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	4413      	add	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	00da      	lsls	r2, r3, #3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	4413      	add	r3, r2
 8007d14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d18:	613b      	str	r3, [r7, #16]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e061      	b.n	8007e04 <PCD_EP_ISR_Handler+0x5ce>
 8007d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d15d      	bne.n	8007e04 <PCD_EP_ISR_Handler+0x5ce>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	00da      	lsls	r2, r3, #3
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d6e:	61bb      	str	r3, [r7, #24]
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2200      	movs	r2, #0
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	e045      	b.n	8007e04 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d126      	bne.n	8007dd4 <PCD_EP_ISR_Handler+0x59e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	4413      	add	r3, r2
 8007d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	00da      	lsls	r2, r3, #3
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	4413      	add	r3, r2
 8007da8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dac:	623b      	str	r3, [r7, #32]
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	e017      	b.n	8007e04 <PCD_EP_ISR_Handler+0x5ce>
 8007dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dd6:	785b      	ldrb	r3, [r3, #1]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d113      	bne.n	8007e04 <PCD_EP_ISR_Handler+0x5ce>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	4413      	add	r3, r2
 8007dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	00da      	lsls	r2, r3, #3
 8007df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df6:	4413      	add	r3, r2
 8007df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	2200      	movs	r2, #0
 8007e02:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f008 fd79 	bl	8010902 <HAL_PCD_DataInStageCallback>
 8007e10:	e04a      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007e12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d13f      	bne.n	8007e9c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	4413      	add	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6812      	ldr	r2, [r2, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e40:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d906      	bls.n	8007e5a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e52:	1ad2      	subs	r2, r2, r3
 8007e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e56:	619a      	str	r2, [r3, #24]
 8007e58:	e002      	b.n	8007e60 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d106      	bne.n	8007e76 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f008 fd47 	bl	8010902 <HAL_PCD_DataInStageCallback>
 8007e74:	e018      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e7c:	441a      	add	r2, r3
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e84:	69da      	ldr	r2, [r3, #28]
 8007e86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e88:	441a      	add	r2, r3
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e94:	4618      	mov	r0, r3
 8007e96:	f005 ff66 	bl	800dd66 <USB_EPStartXfer>
 8007e9a:	e005      	b.n	8007ea8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007e9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f917 	bl	80080d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	b21b      	sxth	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f6ff acc3 	blt.w	8007840 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3748      	adds	r7, #72	@ 0x48
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d07c      	beq.n	8007fd6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	4413      	add	r3, r2
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	8b7b      	ldrh	r3, [r7, #26]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d306      	bcc.n	8007f1a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	8b7b      	ldrh	r3, [r7, #26]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	619a      	str	r2, [r3, #24]
 8007f18:	e002      	b.n	8007f20 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d123      	bne.n	8007f70 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f42:	833b      	strh	r3, [r7, #24]
 8007f44:	8b3b      	ldrh	r3, [r7, #24]
 8007f46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f4a:	833b      	strh	r3, [r7, #24]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	441a      	add	r2, r3
 8007f5a:	8b3b      	ldrh	r3, [r7, #24]
 8007f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01f      	beq.n	8007fba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f94:	82fb      	strh	r3, [r7, #22]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	441a      	add	r2, r3
 8007fa4:	8afb      	ldrh	r3, [r7, #22]
 8007fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007fba:	8b7b      	ldrh	r3, [r7, #26]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 8085 	beq.w	80080cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6959      	ldr	r1, [r3, #20]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	891a      	ldrh	r2, [r3, #8]
 8007fce:	8b7b      	ldrh	r3, [r7, #26]
 8007fd0:	f006 fdef 	bl	800ebb2 <USB_ReadPMA>
 8007fd4:	e07a      	b.n	80080cc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	4413      	add	r3, r2
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ffa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	699a      	ldr	r2, [r3, #24]
 8008000:	8b7b      	ldrh	r3, [r7, #26]
 8008002:	429a      	cmp	r2, r3
 8008004:	d306      	bcc.n	8008014 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	8b7b      	ldrh	r3, [r7, #26]
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	619a      	str	r2, [r3, #24]
 8008012:	e002      	b.n	800801a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d123      	bne.n	800806a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800803c:	83fb      	strh	r3, [r7, #30]
 800803e:	8bfb      	ldrh	r3, [r7, #30]
 8008040:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008044:	83fb      	strh	r3, [r7, #30]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	8bfb      	ldrh	r3, [r7, #30]
 8008056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800805e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008066:	b29b      	uxth	r3, r3
 8008068:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11f      	bne.n	80080b4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808e:	83bb      	strh	r3, [r7, #28]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	8bbb      	ldrh	r3, [r7, #28]
 80080a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80080b4:	8b7b      	ldrh	r3, [r7, #26]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6959      	ldr	r1, [r3, #20]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	895a      	ldrh	r2, [r3, #10]
 80080c6:	8b7b      	ldrh	r3, [r7, #26]
 80080c8:	f006 fd73 	bl	800ebb2 <USB_ReadPMA>
    }
  }

  return count;
 80080cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b0a6      	sub	sp, #152	@ 0x98
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	4613      	mov	r3, r2
 80080e2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 81f7 	beq.w	80084de <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	4413      	add	r3, r2
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	4413      	add	r3, r2
 800810a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008114:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008120:	429a      	cmp	r2, r3
 8008122:	d907      	bls.n	8008134 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	699a      	ldr	r2, [r3, #24]
 8008128:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800812c:	1ad2      	subs	r2, r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	619a      	str	r2, [r3, #24]
 8008132:	e002      	b.n	800813a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2200      	movs	r2, #0
 8008138:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f040 80e1 	bne.w	8008306 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d126      	bne.n	800819a <HAL_PCD_EP_DB_Transmit+0xc4>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	633b      	str	r3, [r7, #48]	@ 0x30
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800815a:	b29b      	uxth	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	4413      	add	r3, r2
 8008162:	633b      	str	r3, [r7, #48]	@ 0x30
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	00da      	lsls	r2, r3, #3
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	4413      	add	r3, r2
 800816e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800817e:	b29a      	uxth	r2, r3
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008192:	b29a      	uxth	r2, r3
 8008194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	e01a      	b.n	80081d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d116      	bne.n	80081d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	4413      	add	r3, r2
 80081b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	00da      	lsls	r2, r3, #3
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	4413      	add	r3, r2
 80081c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081cc:	2200      	movs	r2, #0
 80081ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	785b      	ldrb	r3, [r3, #1]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d126      	bne.n	800822c <HAL_PCD_EP_DB_Transmit+0x156>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	623b      	str	r3, [r7, #32]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	4413      	add	r3, r2
 80081f4:	623b      	str	r3, [r7, #32]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	00da      	lsls	r2, r3, #3
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	4413      	add	r3, r2
 8008200:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008210:	b29a      	uxth	r2, r3
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008224:	b29a      	uxth	r2, r3
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	801a      	strh	r2, [r3, #0]
 800822a:	e017      	b.n	800825c <HAL_PCD_EP_DB_Transmit+0x186>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d113      	bne.n	800825c <HAL_PCD_EP_DB_Transmit+0x186>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800823c:	b29b      	uxth	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	4413      	add	r3, r2
 8008244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	00da      	lsls	r2, r3, #3
 800824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824e:	4413      	add	r3, r2
 8008250:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008254:	627b      	str	r3, [r7, #36]	@ 0x24
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	2200      	movs	r2, #0
 800825a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	78db      	ldrb	r3, [r3, #3]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d123      	bne.n	80082ac <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800827e:	837b      	strh	r3, [r7, #26]
 8008280:	8b7b      	ldrh	r3, [r7, #26]
 8008282:	f083 0320 	eor.w	r3, r3, #32
 8008286:	837b      	strh	r3, [r7, #26]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	441a      	add	r2, r3
 8008296:	8b7b      	ldrh	r3, [r7, #26]
 8008298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	4619      	mov	r1, r3
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f008 fb25 	bl	8010902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01f      	beq.n	8008302 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082dc:	833b      	strh	r3, [r7, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	441a      	add	r2, r3
 80082ec:	8b3b      	ldrh	r3, [r7, #24]
 80082ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fe:	b29b      	uxth	r3, r3
 8008300:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e31f      	b.n	8008946 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d021      	beq.n	8008354 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	441a      	add	r2, r3
 800833c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800834c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008350:	b29b      	uxth	r3, r3
 8008352:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800835a:	2b01      	cmp	r3, #1
 800835c:	f040 82ca 	bne.w	80088f4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	695a      	ldr	r2, [r3, #20]
 8008364:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008368:	441a      	add	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	69da      	ldr	r2, [r3, #28]
 8008372:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008376:	441a      	add	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6a1a      	ldr	r2, [r3, #32]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d309      	bcc.n	800839c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008394:	1ad2      	subs	r2, r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	621a      	str	r2, [r3, #32]
 800839a:	e015      	b.n	80083c8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d107      	bne.n	80083b4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80083a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083b2:	e009      	b.n	80083c8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d15f      	bne.n	8008490 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083de:	b29b      	uxth	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083e4:	4413      	add	r3, r2
 80083e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	00da      	lsls	r2, r3, #3
 80083ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083f0:	4413      	add	r3, r2
 80083f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008402:	b29a      	uxth	r2, r3
 8008404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <HAL_PCD_EP_DB_Transmit+0x34e>
 800840e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e051      	b.n	80084c8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008426:	2b3e      	cmp	r3, #62	@ 0x3e
 8008428:	d816      	bhi.n	8008458 <HAL_PCD_EP_DB_Transmit+0x382>
 800842a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_PCD_EP_DB_Transmit+0x36a>
 800843a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800843c:	3301      	adds	r3, #1
 800843e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29a      	uxth	r2, r3
 8008446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008448:	b29b      	uxth	r3, r3
 800844a:	029b      	lsls	r3, r3, #10
 800844c:	b29b      	uxth	r3, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	b29a      	uxth	r2, r3
 8008452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	e037      	b.n	80084c8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008458:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	653b      	str	r3, [r7, #80]	@ 0x50
 800845e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <HAL_PCD_EP_DB_Transmit+0x398>
 8008468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800846a:	3b01      	subs	r3, #1
 800846c:	653b      	str	r3, [r7, #80]	@ 0x50
 800846e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29a      	uxth	r2, r3
 8008474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	029b      	lsls	r3, r3, #10
 800847a:	b29b      	uxth	r3, r3
 800847c:	4313      	orrs	r3, r2
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008488:	b29a      	uxth	r2, r3
 800848a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848c:	801a      	strh	r2, [r3, #0]
 800848e:	e01b      	b.n	80084c8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d117      	bne.n	80084c8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ac:	4413      	add	r3, r2
 80084ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	00da      	lsls	r2, r3, #3
 80084b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b8:	4413      	add	r3, r2
 80084ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084be:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6959      	ldr	r1, [r3, #20]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	891a      	ldrh	r2, [r3, #8]
 80084d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f006 fb29 	bl	800eb2e <USB_WritePMA>
 80084dc:	e20a      	b.n	80088f4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4413      	add	r3, r2
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	4413      	add	r3, r2
 80084f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008502:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800850e:	429a      	cmp	r2, r3
 8008510:	d307      	bcc.n	8008522 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	619a      	str	r2, [r3, #24]
 8008520:	e002      	b.n	8008528 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 80f6 	bne.w	800871e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d126      	bne.n	8008588 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008548:	b29b      	uxth	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800854e:	4413      	add	r3, r2
 8008550:	677b      	str	r3, [r7, #116]	@ 0x74
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	00da      	lsls	r2, r3, #3
 8008558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800855a:	4413      	add	r3, r2
 800855c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008560:	673b      	str	r3, [r7, #112]	@ 0x70
 8008562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800856c:	b29a      	uxth	r2, r3
 800856e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008580:	b29a      	uxth	r2, r3
 8008582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008584:	801a      	strh	r2, [r3, #0]
 8008586:	e01a      	b.n	80085be <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d116      	bne.n	80085be <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085a4:	4413      	add	r3, r2
 80085a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	00da      	lsls	r2, r3, #3
 80085ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085b0:	4413      	add	r3, r2
 80085b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ba:	2200      	movs	r2, #0
 80085bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d12f      	bne.n	800862e <HAL_PCD_EP_DB_Transmit+0x558>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085de:	b29b      	uxth	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085e6:	4413      	add	r3, r2
 80085e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	00da      	lsls	r2, r3, #3
 80085f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085f6:	4413      	add	r3, r2
 80085f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800860c:	b29a      	uxth	r2, r3
 800860e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008624:	b29a      	uxth	r2, r3
 8008626:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800862a:	801a      	strh	r2, [r3, #0]
 800862c:	e01c      	b.n	8008668 <HAL_PCD_EP_DB_Transmit+0x592>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d118      	bne.n	8008668 <HAL_PCD_EP_DB_Transmit+0x592>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	00da      	lsls	r2, r3, #3
 8008652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008656:	4413      	add	r3, r2
 8008658:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800865c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008664:	2200      	movs	r2, #0
 8008666:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	78db      	ldrb	r3, [r3, #3]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d127      	bne.n	80086c0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800868a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800868e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008692:	f083 0320 	eor.w	r3, r3, #32
 8008696:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80086ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4619      	mov	r1, r3
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f008 f91b 	bl	8010902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d121      	bne.n	800871a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	441a      	add	r2, r3
 8008702:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800870a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800870e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	b29b      	uxth	r3, r3
 8008718:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	e113      	b.n	8008946 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d121      	bne.n	800876c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800873e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008742:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	441a      	add	r2, r3
 8008754:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800875c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008768:	b29b      	uxth	r3, r3
 800876a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008772:	2b01      	cmp	r3, #1
 8008774:	f040 80be 	bne.w	80088f4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	695a      	ldr	r2, [r3, #20]
 800877c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008780:	441a      	add	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	69da      	ldr	r2, [r3, #28]
 800878a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800878e:	441a      	add	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	6a1a      	ldr	r2, [r3, #32]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	429a      	cmp	r2, r3
 800879e:	d309      	bcc.n	80087b4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6a1a      	ldr	r2, [r3, #32]
 80087aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087ac:	1ad2      	subs	r2, r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	621a      	str	r2, [r3, #32]
 80087b2:	e015      	b.n	80087e0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d107      	bne.n	80087cc <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80087bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087c0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80087ca:	e009      	b.n	80087e0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2200      	movs	r2, #0
 80087d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	785b      	ldrb	r3, [r3, #1]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d15f      	bne.n	80088ae <HAL_PCD_EP_DB_Transmit+0x7d8>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008802:	4413      	add	r3, r2
 8008804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	00da      	lsls	r2, r3, #3
 800880c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800880e:	4413      	add	r3, r2
 8008810:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008814:	667b      	str	r3, [r7, #100]	@ 0x64
 8008816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008820:	b29a      	uxth	r2, r3
 8008822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008824:	801a      	strh	r2, [r3, #0]
 8008826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <HAL_PCD_EP_DB_Transmit+0x76c>
 800882c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	b29b      	uxth	r3, r3
 8008832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883a:	b29a      	uxth	r2, r3
 800883c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800883e:	801a      	strh	r2, [r3, #0]
 8008840:	e04e      	b.n	80088e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008844:	2b3e      	cmp	r3, #62	@ 0x3e
 8008846:	d816      	bhi.n	8008876 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	663b      	str	r3, [r7, #96]	@ 0x60
 800884e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <HAL_PCD_EP_DB_Transmit+0x788>
 8008858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800885a:	3301      	adds	r3, #1
 800885c:	663b      	str	r3, [r7, #96]	@ 0x60
 800885e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b29a      	uxth	r2, r3
 8008864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008866:	b29b      	uxth	r3, r3
 8008868:	029b      	lsls	r3, r3, #10
 800886a:	b29b      	uxth	r3, r3
 800886c:	4313      	orrs	r3, r2
 800886e:	b29a      	uxth	r2, r3
 8008870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	e034      	b.n	80088e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008878:	095b      	lsrs	r3, r3, #5
 800887a:	663b      	str	r3, [r7, #96]	@ 0x60
 800887c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800887e:	f003 031f 	and.w	r3, r3, #31
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8008886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008888:	3b01      	subs	r3, #1
 800888a:	663b      	str	r3, [r7, #96]	@ 0x60
 800888c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b29a      	uxth	r2, r3
 8008892:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008894:	b29b      	uxth	r3, r3
 8008896:	029b      	lsls	r3, r3, #10
 8008898:	b29b      	uxth	r3, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	b29b      	uxth	r3, r3
 800889e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088aa:	801a      	strh	r2, [r3, #0]
 80088ac:	e018      	b.n	80088e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d114      	bne.n	80088e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088c4:	4413      	add	r3, r2
 80088c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	00da      	lsls	r2, r3, #3
 80088ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6959      	ldr	r1, [r3, #20]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	895a      	ldrh	r2, [r3, #10]
 80088ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f006 f91d 	bl	800eb2e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800890a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800890e:	82fb      	strh	r3, [r7, #22]
 8008910:	8afb      	ldrh	r3, [r7, #22]
 8008912:	f083 0310 	eor.w	r3, r3, #16
 8008916:	82fb      	strh	r3, [r7, #22]
 8008918:	8afb      	ldrh	r3, [r7, #22]
 800891a:	f083 0320 	eor.w	r3, r3, #32
 800891e:	82fb      	strh	r3, [r7, #22]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	8afb      	ldrh	r3, [r7, #22]
 8008930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008940:	b29b      	uxth	r3, r3
 8008942:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3798      	adds	r7, #152	@ 0x98
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800894e:	b480      	push	{r7}
 8008950:	b087      	sub	sp, #28
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	607b      	str	r3, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	817b      	strh	r3, [r7, #10]
 800895c:	4613      	mov	r3, r2
 800895e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008960:	897b      	ldrh	r3, [r7, #10]
 8008962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800896c:	897b      	ldrh	r3, [r7, #10]
 800896e:	f003 0207 	and.w	r2, r3, #7
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	3310      	adds	r3, #16
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e009      	b.n	8008998 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008984:	897a      	ldrh	r2, [r7, #10]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008998:	893b      	ldrh	r3, [r7, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d107      	bne.n	80089ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2200      	movs	r2, #0
 80089a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	80da      	strh	r2, [r3, #6]
 80089ac:	e00b      	b.n	80089c6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2201      	movs	r2, #1
 80089b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	f043 0302 	orr.w	r3, r3, #2
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d141      	bne.n	8008aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a36:	4b4b      	ldr	r3, [pc, #300]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a42:	d131      	bne.n	8008aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a44:	4b47      	ldr	r3, [pc, #284]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a4a:	4a46      	ldr	r2, [pc, #280]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a54:	4b43      	ldr	r3, [pc, #268]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a5c:	4a41      	ldr	r2, [pc, #260]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a64:	4b40      	ldr	r3, [pc, #256]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2232      	movs	r2, #50	@ 0x32
 8008a6a:	fb02 f303 	mul.w	r3, r2, r3
 8008a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8008b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	0c9b      	lsrs	r3, r3, #18
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a7a:	e002      	b.n	8008a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a82:	4b38      	ldr	r3, [pc, #224]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8e:	d102      	bne.n	8008a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f2      	bne.n	8008a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a96:	4b33      	ldr	r3, [pc, #204]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa2:	d158      	bne.n	8008b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e057      	b.n	8008b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aae:	4a2d      	ldr	r2, [pc, #180]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ab8:	e04d      	b.n	8008b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac0:	d141      	bne.n	8008b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ac2:	4b28      	ldr	r3, [pc, #160]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ace:	d131      	bne.n	8008b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ad0:	4b24      	ldr	r3, [pc, #144]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ad6:	4a23      	ldr	r2, [pc, #140]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008adc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ae0:	4b20      	ldr	r3, [pc, #128]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008af0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2232      	movs	r2, #50	@ 0x32
 8008af6:	fb02 f303 	mul.w	r3, r2, r3
 8008afa:	4a1c      	ldr	r2, [pc, #112]	@ (8008b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	0c9b      	lsrs	r3, r3, #18
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b06:	e002      	b.n	8008b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b0e:	4b15      	ldr	r3, [pc, #84]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b1a:	d102      	bne.n	8008b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f2      	bne.n	8008b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b22:	4b10      	ldr	r3, [pc, #64]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b2e:	d112      	bne.n	8008b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e011      	b.n	8008b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b34:	4b0b      	ldr	r3, [pc, #44]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b44:	e007      	b.n	8008b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b46:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b4e:	4a05      	ldr	r2, [pc, #20]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	40007000 	.word	0x40007000
 8008b68:	20000204 	.word	0x20000204
 8008b6c:	431bde83 	.word	0x431bde83

08008b70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008b74:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	4a04      	ldr	r2, [pc, #16]	@ (8008b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b7e:	6093      	str	r3, [r2, #8]
}
 8008b80:	bf00      	nop
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	40007000 	.word	0x40007000

08008b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e2fe      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d075      	beq.n	8008c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bae:	4b97      	ldr	r3, [pc, #604]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 030c 	and.w	r3, r3, #12
 8008bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bb8:	4b94      	ldr	r3, [pc, #592]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d102      	bne.n	8008bce <HAL_RCC_OscConfig+0x3e>
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d002      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x44>
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d10b      	bne.n	8008bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d05b      	beq.n	8008c98 <HAL_RCC_OscConfig+0x108>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d157      	bne.n	8008c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e2d9      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bf4:	d106      	bne.n	8008c04 <HAL_RCC_OscConfig+0x74>
 8008bf6:	4b85      	ldr	r3, [pc, #532]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a84      	ldr	r2, [pc, #528]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	e01d      	b.n	8008c40 <HAL_RCC_OscConfig+0xb0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c0c:	d10c      	bne.n	8008c28 <HAL_RCC_OscConfig+0x98>
 8008c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a7e      	ldr	r2, [pc, #504]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	e00b      	b.n	8008c40 <HAL_RCC_OscConfig+0xb0>
 8008c28:	4b78      	ldr	r3, [pc, #480]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a77      	ldr	r2, [pc, #476]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	4b75      	ldr	r3, [pc, #468]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a74      	ldr	r2, [pc, #464]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d013      	beq.n	8008c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c48:	f7fb f96e 	bl	8003f28 <HAL_GetTick>
 8008c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c50:	f7fb f96a 	bl	8003f28 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b64      	cmp	r3, #100	@ 0x64
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e29e      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c62:	4b6a      	ldr	r3, [pc, #424]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0f0      	beq.n	8008c50 <HAL_RCC_OscConfig+0xc0>
 8008c6e:	e014      	b.n	8008c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c70:	f7fb f95a 	bl	8003f28 <HAL_GetTick>
 8008c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c76:	e008      	b.n	8008c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c78:	f7fb f956 	bl	8003f28 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b64      	cmp	r3, #100	@ 0x64
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e28a      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c8a:	4b60      	ldr	r3, [pc, #384]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f0      	bne.n	8008c78 <HAL_RCC_OscConfig+0xe8>
 8008c96:	e000      	b.n	8008c9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d075      	beq.n	8008d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ca6:	4b59      	ldr	r3, [pc, #356]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 030c 	and.w	r3, r3, #12
 8008cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cb0:	4b56      	ldr	r3, [pc, #344]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	2b0c      	cmp	r3, #12
 8008cbe:	d102      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x136>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d002      	beq.n	8008ccc <HAL_RCC_OscConfig+0x13c>
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d11f      	bne.n	8008d0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x154>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e25d      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce4:	4b49      	ldr	r3, [pc, #292]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	061b      	lsls	r3, r3, #24
 8008cf2:	4946      	ldr	r1, [pc, #280]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008cf8:	4b45      	ldr	r3, [pc, #276]	@ (8008e10 <HAL_RCC_OscConfig+0x280>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fb f8c7 	bl	8003e90 <HAL_InitTick>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d043      	beq.n	8008d90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e249      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d023      	beq.n	8008d5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d14:	4b3d      	ldr	r3, [pc, #244]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a3c      	ldr	r2, [pc, #240]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d20:	f7fb f902 	bl	8003f28 <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d28:	f7fb f8fe 	bl	8003f28 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e232      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d3a:	4b34      	ldr	r3, [pc, #208]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f0      	beq.n	8008d28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d46:	4b31      	ldr	r3, [pc, #196]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	061b      	lsls	r3, r3, #24
 8008d54:	492d      	ldr	r1, [pc, #180]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	604b      	str	r3, [r1, #4]
 8008d5a:	e01a      	b.n	8008d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2a      	ldr	r2, [pc, #168]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d68:	f7fb f8de 	bl	8003f28 <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d70:	f7fb f8da 	bl	8003f28 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e20e      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d82:	4b22      	ldr	r3, [pc, #136]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f0      	bne.n	8008d70 <HAL_RCC_OscConfig+0x1e0>
 8008d8e:	e000      	b.n	8008d92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d041      	beq.n	8008e22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01c      	beq.n	8008de0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008da6:	4b19      	ldr	r3, [pc, #100]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dac:	4a17      	ldr	r2, [pc, #92]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008dae:	f043 0301 	orr.w	r3, r3, #1
 8008db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db6:	f7fb f8b7 	bl	8003f28 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dbc:	e008      	b.n	8008dd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dbe:	f7fb f8b3 	bl	8003f28 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e1e7      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0ef      	beq.n	8008dbe <HAL_RCC_OscConfig+0x22e>
 8008dde:	e020      	b.n	8008e22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de0:	4b0a      	ldr	r3, [pc, #40]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008de6:	4a09      	ldr	r2, [pc, #36]	@ (8008e0c <HAL_RCC_OscConfig+0x27c>)
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df0:	f7fb f89a 	bl	8003f28 <HAL_GetTick>
 8008df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008df6:	e00d      	b.n	8008e14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008df8:	f7fb f896 	bl	8003f28 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d906      	bls.n	8008e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e1ca      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
 8008e0a:	bf00      	nop
 8008e0c:	40021000 	.word	0x40021000
 8008e10:	20000208 	.word	0x20000208
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e14:	4b8c      	ldr	r3, [pc, #560]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1ea      	bne.n	8008df8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80a6 	beq.w	8008f7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e30:	2300      	movs	r3, #0
 8008e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e34:	4b84      	ldr	r3, [pc, #528]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <HAL_RCC_OscConfig+0x2b4>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <HAL_RCC_OscConfig+0x2b6>
 8008e44:	2300      	movs	r3, #0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e56:	4b7c      	ldr	r3, [pc, #496]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e62:	2301      	movs	r3, #1
 8008e64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e66:	4b79      	ldr	r3, [pc, #484]	@ (800904c <HAL_RCC_OscConfig+0x4bc>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d118      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e72:	4b76      	ldr	r3, [pc, #472]	@ (800904c <HAL_RCC_OscConfig+0x4bc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a75      	ldr	r2, [pc, #468]	@ (800904c <HAL_RCC_OscConfig+0x4bc>)
 8008e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e7e:	f7fb f853 	bl	8003f28 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e86:	f7fb f84f 	bl	8003f28 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e183      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e98:	4b6c      	ldr	r3, [pc, #432]	@ (800904c <HAL_RCC_OscConfig+0x4bc>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d108      	bne.n	8008ebe <HAL_RCC_OscConfig+0x32e>
 8008eac:	4b66      	ldr	r3, [pc, #408]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb2:	4a65      	ldr	r2, [pc, #404]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ebc:	e024      	b.n	8008f08 <HAL_RCC_OscConfig+0x378>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d110      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x358>
 8008ec6:	4b60      	ldr	r3, [pc, #384]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008ece:	f043 0304 	orr.w	r3, r3, #4
 8008ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008edc:	4a5a      	ldr	r2, [pc, #360]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ee6:	e00f      	b.n	8008f08 <HAL_RCC_OscConfig+0x378>
 8008ee8:	4b57      	ldr	r3, [pc, #348]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eee:	4a56      	ldr	r2, [pc, #344]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ef8:	4b53      	ldr	r3, [pc, #332]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008efe:	4a52      	ldr	r2, [pc, #328]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f00:	f023 0304 	bic.w	r3, r3, #4
 8008f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f10:	f7fb f80a 	bl	8003f28 <HAL_GetTick>
 8008f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f16:	e00a      	b.n	8008f2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f18:	f7fb f806 	bl	8003f28 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d901      	bls.n	8008f2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e138      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f2e:	4b46      	ldr	r3, [pc, #280]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0ed      	beq.n	8008f18 <HAL_RCC_OscConfig+0x388>
 8008f3c:	e015      	b.n	8008f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f3e:	f7fa fff3 	bl	8003f28 <HAL_GetTick>
 8008f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f44:	e00a      	b.n	8008f5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f46:	f7fa ffef 	bl	8003f28 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d901      	bls.n	8008f5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e121      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1ed      	bne.n	8008f46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f6a:	7ffb      	ldrb	r3, [r7, #31]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d105      	bne.n	8008f7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f70:	4b35      	ldr	r3, [pc, #212]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f74:	4a34      	ldr	r2, [pc, #208]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d03c      	beq.n	8009002 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01c      	beq.n	8008fca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f90:	4b2d      	ldr	r3, [pc, #180]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f96:	4a2c      	ldr	r2, [pc, #176]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008f98:	f043 0301 	orr.w	r3, r3, #1
 8008f9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa0:	f7fa ffc2 	bl	8003f28 <HAL_GetTick>
 8008fa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fa6:	e008      	b.n	8008fba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fa8:	f7fa ffbe 	bl	8003f28 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e0f2      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fba:	4b23      	ldr	r3, [pc, #140]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0ef      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x418>
 8008fc8:	e01b      	b.n	8009002 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fca:	4b1f      	ldr	r3, [pc, #124]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008fd2:	f023 0301 	bic.w	r3, r3, #1
 8008fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fda:	f7fa ffa5 	bl	8003f28 <HAL_GetTick>
 8008fde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008fe0:	e008      	b.n	8008ff4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fe2:	f7fa ffa1 	bl	8003f28 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e0d5      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ff4:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8008ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1ef      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 80c9 	beq.w	800919e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800900c:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f003 030c 	and.w	r3, r3, #12
 8009014:	2b0c      	cmp	r3, #12
 8009016:	f000 8083 	beq.w	8009120 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d15e      	bne.n	80090e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009022:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a08      	ldr	r2, [pc, #32]	@ (8009048 <HAL_RCC_OscConfig+0x4b8>)
 8009028:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800902c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902e:	f7fa ff7b 	bl	8003f28 <HAL_GetTick>
 8009032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009034:	e00c      	b.n	8009050 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009036:	f7fa ff77 	bl	8003f28 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d905      	bls.n	8009050 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e0ab      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
 8009048:	40021000 	.word	0x40021000
 800904c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009050:	4b55      	ldr	r3, [pc, #340]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1ec      	bne.n	8009036 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800905c:	4b52      	ldr	r3, [pc, #328]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	4b52      	ldr	r3, [pc, #328]	@ (80091ac <HAL_RCC_OscConfig+0x61c>)
 8009062:	4013      	ands	r3, r2
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	6a11      	ldr	r1, [r2, #32]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800906c:	3a01      	subs	r2, #1
 800906e:	0112      	lsls	r2, r2, #4
 8009070:	4311      	orrs	r1, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009076:	0212      	lsls	r2, r2, #8
 8009078:	4311      	orrs	r1, r2
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800907e:	0852      	lsrs	r2, r2, #1
 8009080:	3a01      	subs	r2, #1
 8009082:	0552      	lsls	r2, r2, #21
 8009084:	4311      	orrs	r1, r2
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800908a:	0852      	lsrs	r2, r2, #1
 800908c:	3a01      	subs	r2, #1
 800908e:	0652      	lsls	r2, r2, #25
 8009090:	4311      	orrs	r1, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009096:	06d2      	lsls	r2, r2, #27
 8009098:	430a      	orrs	r2, r1
 800909a:	4943      	ldr	r1, [pc, #268]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 800909c:	4313      	orrs	r3, r2
 800909e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090a0:	4b41      	ldr	r3, [pc, #260]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a40      	ldr	r2, [pc, #256]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090ac:	4b3e      	ldr	r3, [pc, #248]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	4a3d      	ldr	r2, [pc, #244]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090b8:	f7fa ff36 	bl	8003f28 <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090be:	e008      	b.n	80090d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090c0:	f7fa ff32 	bl	8003f28 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d901      	bls.n	80090d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e066      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090d2:	4b35      	ldr	r3, [pc, #212]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0f0      	beq.n	80090c0 <HAL_RCC_OscConfig+0x530>
 80090de:	e05e      	b.n	800919e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090e0:	4b31      	ldr	r3, [pc, #196]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a30      	ldr	r2, [pc, #192]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 80090e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ec:	f7fa ff1c 	bl	8003f28 <HAL_GetTick>
 80090f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f4:	f7fa ff18 	bl	8003f28 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e04c      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009106:	4b28      	ldr	r3, [pc, #160]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f0      	bne.n	80090f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009112:	4b25      	ldr	r3, [pc, #148]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	4924      	ldr	r1, [pc, #144]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 8009118:	4b25      	ldr	r3, [pc, #148]	@ (80091b0 <HAL_RCC_OscConfig+0x620>)
 800911a:	4013      	ands	r3, r2
 800911c:	60cb      	str	r3, [r1, #12]
 800911e:	e03e      	b.n	800919e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e039      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800912c:	4b1e      	ldr	r3, [pc, #120]	@ (80091a8 <HAL_RCC_OscConfig+0x618>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f003 0203 	and.w	r2, r3, #3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	429a      	cmp	r2, r3
 800913e:	d12c      	bne.n	800919a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914a:	3b01      	subs	r3, #1
 800914c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800914e:	429a      	cmp	r2, r3
 8009150:	d123      	bne.n	800919a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800915e:	429a      	cmp	r2, r3
 8009160:	d11b      	bne.n	800919a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800916e:	429a      	cmp	r2, r3
 8009170:	d113      	bne.n	800919a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917c:	085b      	lsrs	r3, r3, #1
 800917e:	3b01      	subs	r3, #1
 8009180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009182:	429a      	cmp	r2, r3
 8009184:	d109      	bne.n	800919a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	3b01      	subs	r3, #1
 8009194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009196:	429a      	cmp	r2, r3
 8009198:	d001      	beq.n	800919e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40021000 	.word	0x40021000
 80091ac:	019f800c 	.word	0x019f800c
 80091b0:	feeefffc 	.word	0xfeeefffc

080091b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e11e      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091cc:	4b91      	ldr	r3, [pc, #580]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 030f 	and.w	r3, r3, #15
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d910      	bls.n	80091fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091da:	4b8e      	ldr	r3, [pc, #568]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f023 020f 	bic.w	r2, r3, #15
 80091e2:	498c      	ldr	r1, [pc, #560]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ea:	4b8a      	ldr	r3, [pc, #552]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e106      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d073      	beq.n	80092f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2b03      	cmp	r3, #3
 800920e:	d129      	bne.n	8009264 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009210:	4b81      	ldr	r3, [pc, #516]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0f4      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009220:	f000 f9ca 	bl	80095b8 <RCC_GetSysClockFreqFromPLLSource>
 8009224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	4a7c      	ldr	r2, [pc, #496]	@ (800941c <HAL_RCC_ClockConfig+0x268>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d93f      	bls.n	80092ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800922e:	4b7a      	ldr	r3, [pc, #488]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d009      	beq.n	800924e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009242:	2b00      	cmp	r3, #0
 8009244:	d033      	beq.n	80092ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800924a:	2b00      	cmp	r3, #0
 800924c:	d12f      	bne.n	80092ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800924e:	4b72      	ldr	r3, [pc, #456]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009256:	4a70      	ldr	r2, [pc, #448]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800925c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800925e:	2380      	movs	r3, #128	@ 0x80
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	e024      	b.n	80092ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d107      	bne.n	800927c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800926c:	4b6a      	ldr	r3, [pc, #424]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d109      	bne.n	800928c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0c6      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800927c:	4b66      	ldr	r3, [pc, #408]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e0be      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800928c:	f000 f8ce 	bl	800942c <HAL_RCC_GetSysClockFreq>
 8009290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	4a61      	ldr	r2, [pc, #388]	@ (800941c <HAL_RCC_ClockConfig+0x268>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d909      	bls.n	80092ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800929a:	4b5f      	ldr	r3, [pc, #380]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092a2:	4a5d      	ldr	r2, [pc, #372]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80092a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092aa:	2380      	movs	r3, #128	@ 0x80
 80092ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f023 0203 	bic.w	r2, r3, #3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	4957      	ldr	r1, [pc, #348]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c0:	f7fa fe32 	bl	8003f28 <HAL_GetTick>
 80092c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092c6:	e00a      	b.n	80092de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092c8:	f7fa fe2e 	bl	8003f28 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e095      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092de:	4b4e      	ldr	r3, [pc, #312]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f003 020c 	and.w	r2, r3, #12
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d1eb      	bne.n	80092c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d023      	beq.n	8009344 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009308:	4b43      	ldr	r3, [pc, #268]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	4a42      	ldr	r2, [pc, #264]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800930e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009312:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d007      	beq.n	8009330 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009320:	4b3d      	ldr	r3, [pc, #244]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009328:	4a3b      	ldr	r2, [pc, #236]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800932a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800932e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009330:	4b39      	ldr	r3, [pc, #228]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	4936      	ldr	r1, [pc, #216]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800933e:	4313      	orrs	r3, r2
 8009340:	608b      	str	r3, [r1, #8]
 8009342:	e008      	b.n	8009356 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b80      	cmp	r3, #128	@ 0x80
 8009348:	d105      	bne.n	8009356 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800934a:	4b33      	ldr	r3, [pc, #204]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	4a32      	ldr	r2, [pc, #200]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 8009350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009354:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009356:	4b2f      	ldr	r3, [pc, #188]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d21d      	bcs.n	80093a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009364:	4b2b      	ldr	r3, [pc, #172]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f023 020f 	bic.w	r2, r3, #15
 800936c:	4929      	ldr	r1, [pc, #164]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	4313      	orrs	r3, r2
 8009372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009374:	f7fa fdd8 	bl	8003f28 <HAL_GetTick>
 8009378:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800937a:	e00a      	b.n	8009392 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800937c:	f7fa fdd4 	bl	8003f28 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800938a:	4293      	cmp	r3, r2
 800938c:	d901      	bls.n	8009392 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e03b      	b.n	800940a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009392:	4b20      	ldr	r3, [pc, #128]	@ (8009414 <HAL_RCC_ClockConfig+0x260>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 030f 	and.w	r3, r3, #15
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d1ed      	bne.n	800937c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d008      	beq.n	80093be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	4917      	ldr	r1, [pc, #92]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d009      	beq.n	80093de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093ca:	4b13      	ldr	r3, [pc, #76]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	490f      	ldr	r1, [pc, #60]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80093de:	f000 f825 	bl	800942c <HAL_RCC_GetSysClockFreq>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <HAL_RCC_ClockConfig+0x264>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	091b      	lsrs	r3, r3, #4
 80093ea:	f003 030f 	and.w	r3, r3, #15
 80093ee:	490c      	ldr	r1, [pc, #48]	@ (8009420 <HAL_RCC_ClockConfig+0x26c>)
 80093f0:	5ccb      	ldrb	r3, [r1, r3]
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	fa22 f303 	lsr.w	r3, r2, r3
 80093fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009424 <HAL_RCC_ClockConfig+0x270>)
 80093fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80093fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <HAL_RCC_ClockConfig+0x274>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f7fa fd44 	bl	8003e90 <HAL_InitTick>
 8009408:	4603      	mov	r3, r0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40022000 	.word	0x40022000
 8009418:	40021000 	.word	0x40021000
 800941c:	04c4b400 	.word	0x04c4b400
 8009420:	08022c54 	.word	0x08022c54
 8009424:	20000204 	.word	0x20000204
 8009428:	20000208 	.word	0x20000208

0800942c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009432:	4b2c      	ldr	r3, [pc, #176]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f003 030c 	and.w	r3, r3, #12
 800943a:	2b04      	cmp	r3, #4
 800943c:	d102      	bne.n	8009444 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800943e:	4b2a      	ldr	r3, [pc, #168]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009440:	613b      	str	r3, [r7, #16]
 8009442:	e047      	b.n	80094d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009444:	4b27      	ldr	r3, [pc, #156]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f003 030c 	and.w	r3, r3, #12
 800944c:	2b08      	cmp	r3, #8
 800944e:	d102      	bne.n	8009456 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009450:	4b26      	ldr	r3, [pc, #152]	@ (80094ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	e03e      	b.n	80094d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009456:	4b23      	ldr	r3, [pc, #140]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 030c 	and.w	r3, r3, #12
 800945e:	2b0c      	cmp	r3, #12
 8009460:	d136      	bne.n	80094d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009462:	4b20      	ldr	r3, [pc, #128]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800946c:	4b1d      	ldr	r3, [pc, #116]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	3301      	adds	r3, #1
 8009478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b03      	cmp	r3, #3
 800947e:	d10c      	bne.n	800949a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009480:	4a1a      	ldr	r2, [pc, #104]	@ (80094ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	fbb2 f3f3 	udiv	r3, r2, r3
 8009488:	4a16      	ldr	r2, [pc, #88]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800948a:	68d2      	ldr	r2, [r2, #12]
 800948c:	0a12      	lsrs	r2, r2, #8
 800948e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009492:	fb02 f303 	mul.w	r3, r2, r3
 8009496:	617b      	str	r3, [r7, #20]
      break;
 8009498:	e00c      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800949a:	4a13      	ldr	r2, [pc, #76]	@ (80094e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a2:	4a10      	ldr	r2, [pc, #64]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094a4:	68d2      	ldr	r2, [r2, #12]
 80094a6:	0a12      	lsrs	r2, r2, #8
 80094a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	617b      	str	r3, [r7, #20]
      break;
 80094b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094b4:	4b0b      	ldr	r3, [pc, #44]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	0e5b      	lsrs	r3, r3, #25
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	3301      	adds	r3, #1
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	e001      	b.n	80094d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094d4:	693b      	ldr	r3, [r7, #16]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40021000 	.word	0x40021000
 80094e8:	00f42400 	.word	0x00f42400
 80094ec:	007a1200 	.word	0x007a1200

080094f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094f4:	4b03      	ldr	r3, [pc, #12]	@ (8009504 <HAL_RCC_GetHCLKFreq+0x14>)
 80094f6:	681b      	ldr	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000204 	.word	0x20000204

08009508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800950c:	f7ff fff0 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 8009510:	4602      	mov	r2, r0
 8009512:	4b06      	ldr	r3, [pc, #24]	@ (800952c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	4904      	ldr	r1, [pc, #16]	@ (8009530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800951e:	5ccb      	ldrb	r3, [r1, r3]
 8009520:	f003 031f 	and.w	r3, r3, #31
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009528:	4618      	mov	r0, r3
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40021000 	.word	0x40021000
 8009530:	08022c64 	.word	0x08022c64

08009534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009538:	f7ff ffda 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 800953c:	4602      	mov	r2, r0
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	0adb      	lsrs	r3, r3, #11
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	4904      	ldr	r1, [pc, #16]	@ (800955c <HAL_RCC_GetPCLK2Freq+0x28>)
 800954a:	5ccb      	ldrb	r3, [r1, r3]
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009554:	4618      	mov	r0, r3
 8009556:	bd80      	pop	{r7, pc}
 8009558:	40021000 	.word	0x40021000
 800955c:	08022c64 	.word	0x08022c64

08009560 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8009564:	4b05      	ldr	r3, [pc, #20]	@ (800957c <HAL_RCC_EnableCSS+0x1c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a04      	ldr	r2, [pc, #16]	@ (800957c <HAL_RCC_EnableCSS+0x1c>)
 800956a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800956e:	6013      	str	r3, [r2, #0]
}
 8009570:	bf00      	nop
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40021000 	.word	0x40021000

08009580 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009584:	4b07      	ldr	r3, [pc, #28]	@ (80095a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009590:	d105      	bne.n	800959e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009592:	f000 f809 	bl	80095a8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009596:	4b03      	ldr	r3, [pc, #12]	@ (80095a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800959c:	621a      	str	r2, [r3, #32]
  }
}
 800959e:	bf00      	nop
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40021000 	.word	0x40021000

080095a8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095be:	4b1e      	ldr	r3, [pc, #120]	@ (8009638 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009638 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	091b      	lsrs	r3, r3, #4
 80095ce:	f003 030f 	and.w	r3, r3, #15
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d10c      	bne.n	80095f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095dc:	4a17      	ldr	r2, [pc, #92]	@ (800963c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e4:	4a14      	ldr	r2, [pc, #80]	@ (8009638 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095e6:	68d2      	ldr	r2, [r2, #12]
 80095e8:	0a12      	lsrs	r2, r2, #8
 80095ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
 80095f2:	617b      	str	r3, [r7, #20]
    break;
 80095f4:	e00c      	b.n	8009610 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095f6:	4a12      	ldr	r2, [pc, #72]	@ (8009640 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009638 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009600:	68d2      	ldr	r2, [r2, #12]
 8009602:	0a12      	lsrs	r2, r2, #8
 8009604:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009608:	fb02 f303 	mul.w	r3, r2, r3
 800960c:	617b      	str	r3, [r7, #20]
    break;
 800960e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009610:	4b09      	ldr	r3, [pc, #36]	@ (8009638 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	0e5b      	lsrs	r3, r3, #25
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	3301      	adds	r3, #1
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	fbb2 f3f3 	udiv	r3, r2, r3
 8009628:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800962a:	687b      	ldr	r3, [r7, #4]
}
 800962c:	4618      	mov	r0, r3
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	40021000 	.word	0x40021000
 800963c:	007a1200 	.word	0x007a1200
 8009640:	00f42400 	.word	0x00f42400

08009644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800964c:	2300      	movs	r3, #0
 800964e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009650:	2300      	movs	r3, #0
 8009652:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 8098 	beq.w	8009792 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009662:	2300      	movs	r3, #0
 8009664:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009666:	4b43      	ldr	r3, [pc, #268]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10d      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009672:	4b40      	ldr	r3, [pc, #256]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009676:	4a3f      	ldr	r2, [pc, #252]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800967c:	6593      	str	r3, [r2, #88]	@ 0x58
 800967e:	4b3d      	ldr	r3, [pc, #244]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009686:	60bb      	str	r3, [r7, #8]
 8009688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800968a:	2301      	movs	r3, #1
 800968c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800968e:	4b3a      	ldr	r3, [pc, #232]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a39      	ldr	r2, [pc, #228]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009698:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800969a:	f7fa fc45 	bl	8003f28 <HAL_GetTick>
 800969e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096a0:	e009      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a2:	f7fa fc41 	bl	8003f28 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d902      	bls.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	74fb      	strb	r3, [r7, #19]
        break;
 80096b4:	e005      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096b6:	4b30      	ldr	r3, [pc, #192]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0ef      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80096c2:	7cfb      	ldrb	r3, [r7, #19]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d159      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80096c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01e      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d019      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80096e4:	4b23      	ldr	r3, [pc, #140]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096f0:	4b20      	ldr	r3, [pc, #128]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009700:	4b1c      	ldr	r3, [pc, #112]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009706:	4a1b      	ldr	r2, [pc, #108]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800970c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009710:	4a18      	ldr	r2, [pc, #96]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d016      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009722:	f7fa fc01 	bl	8003f28 <HAL_GetTick>
 8009726:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009728:	e00b      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800972a:	f7fa fbfd 	bl	8003f28 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009738:	4293      	cmp	r3, r2
 800973a:	d902      	bls.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	74fb      	strb	r3, [r7, #19]
            break;
 8009740:	e006      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009742:	4b0c      	ldr	r3, [pc, #48]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0ec      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009750:	7cfb      	ldrb	r3, [r7, #19]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009756:	4b07      	ldr	r3, [pc, #28]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009764:	4903      	ldr	r1, [pc, #12]	@ (8009774 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800976c:	e008      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800976e:	7cfb      	ldrb	r3, [r7, #19]
 8009770:	74bb      	strb	r3, [r7, #18]
 8009772:	e005      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009774:	40021000 	.word	0x40021000
 8009778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977c:	7cfb      	ldrb	r3, [r7, #19]
 800977e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009780:	7c7b      	ldrb	r3, [r7, #17]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d105      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009786:	4ba7      	ldr	r3, [pc, #668]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800978a:	4aa6      	ldr	r2, [pc, #664]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800978c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009790:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800979e:	4ba1      	ldr	r3, [pc, #644]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a4:	f023 0203 	bic.w	r2, r3, #3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	499d      	ldr	r1, [pc, #628]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80097c0:	4b98      	ldr	r3, [pc, #608]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c6:	f023 020c 	bic.w	r2, r3, #12
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	4995      	ldr	r1, [pc, #596]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80097e2:	4b90      	ldr	r3, [pc, #576]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	498c      	ldr	r1, [pc, #560]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0308 	and.w	r3, r3, #8
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00a      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009804:	4b87      	ldr	r3, [pc, #540]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	4984      	ldr	r1, [pc, #528]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009826:	4b7f      	ldr	r3, [pc, #508]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800982c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	497b      	ldr	r1, [pc, #492]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009836:	4313      	orrs	r3, r2
 8009838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009848:	4b76      	ldr	r3, [pc, #472]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800984a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800984e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	4973      	ldr	r1, [pc, #460]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009858:	4313      	orrs	r3, r2
 800985a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800986a:	4b6e      	ldr	r3, [pc, #440]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009870:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	496a      	ldr	r1, [pc, #424]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800987a:	4313      	orrs	r3, r2
 800987c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800988c:	4b65      	ldr	r3, [pc, #404]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009892:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	4962      	ldr	r1, [pc, #392]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989c:	4313      	orrs	r3, r2
 800989e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098ae:	4b5d      	ldr	r3, [pc, #372]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098bc:	4959      	ldr	r1, [pc, #356]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098d0:	4b54      	ldr	r3, [pc, #336]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098d6:	f023 0203 	bic.w	r2, r3, #3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098de:	4951      	ldr	r1, [pc, #324]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098f2:	4b4c      	ldr	r3, [pc, #304]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	4948      	ldr	r1, [pc, #288]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009902:	4313      	orrs	r3, r2
 8009904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009910:	2b00      	cmp	r3, #0
 8009912:	d015      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009914:	4b43      	ldr	r3, [pc, #268]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009922:	4940      	ldr	r1, [pc, #256]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009924:	4313      	orrs	r3, r2
 8009926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009932:	d105      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009934:	4b3b      	ldr	r3, [pc, #236]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	4a3a      	ldr	r2, [pc, #232]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800993a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800993e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009948:	2b00      	cmp	r3, #0
 800994a:	d015      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800994c:	4b35      	ldr	r3, [pc, #212]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009952:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995a:	4932      	ldr	r1, [pc, #200]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800996a:	d105      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800996c:	4b2d      	ldr	r3, [pc, #180]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4a2c      	ldr	r2, [pc, #176]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009976:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d015      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009984:	4b27      	ldr	r3, [pc, #156]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009992:	4924      	ldr	r1, [pc, #144]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009994:	4313      	orrs	r3, r2
 8009996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099a2:	d105      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	4a1e      	ldr	r2, [pc, #120]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d015      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099bc:	4b19      	ldr	r3, [pc, #100]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ca:	4916      	ldr	r1, [pc, #88]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099da:	d105      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099dc:	4b11      	ldr	r3, [pc, #68]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	4a10      	ldr	r2, [pc, #64]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d019      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	4908      	ldr	r1, [pc, #32]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a12:	d109      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a14:	4b03      	ldr	r3, [pc, #12]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	4a02      	ldr	r2, [pc, #8]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a1e:	60d3      	str	r3, [r2, #12]
 8009a20:	e002      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a22:	bf00      	nop
 8009a24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d015      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a34:	4b29      	ldr	r3, [pc, #164]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a42:	4926      	ldr	r1, [pc, #152]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a52:	d105      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a54:	4b21      	ldr	r3, [pc, #132]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	4a20      	ldr	r2, [pc, #128]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d015      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a7a:	4918      	ldr	r1, [pc, #96]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8a:	d105      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a8c:	4b13      	ldr	r3, [pc, #76]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	4a12      	ldr	r2, [pc, #72]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d015      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ab2:	490a      	ldr	r1, [pc, #40]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ac2:	d105      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ac4:	4b05      	ldr	r3, [pc, #20]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	4a04      	ldr	r2, [pc, #16]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ace:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009ad0:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	40021000 	.word	0x40021000

08009ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e09d      	b.n	8009c2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d108      	bne.n	8009b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b02:	d009      	beq.n	8009b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	61da      	str	r2, [r3, #28]
 8009b0a:	e005      	b.n	8009b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7f9 fd32 	bl	800359c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b58:	d902      	bls.n	8009b60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	e002      	b.n	8009b66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009b6e:	d007      	beq.n	8009b80 <HAL_SPI_Init+0xa0>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009b78:	d002      	beq.n	8009b80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b90:	431a      	orrs	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bc2:	ea42 0103 	orr.w	r1, r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	0c1b      	lsrs	r3, r3, #16
 8009bdc:	f003 0204 	and.w	r2, r3, #4
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009bfc:	ea42 0103 	orr.w	r1, r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b088      	sub	sp, #32
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	603b      	str	r3, [r7, #0]
 8009c42:	4613      	mov	r3, r2
 8009c44:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c46:	f7fa f96f 	bl	8003f28 <HAL_GetTick>
 8009c4a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d001      	beq.n	8009c60 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e15c      	b.n	8009f1a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_SPI_Transmit+0x36>
 8009c66:	88fb      	ldrh	r3, [r7, #6]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e154      	b.n	8009f1a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d101      	bne.n	8009c7e <HAL_SPI_Transmit+0x48>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e14d      	b.n	8009f1a <HAL_SPI_Transmit+0x2e4>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2203      	movs	r2, #3
 8009c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	88fa      	ldrh	r2, [r7, #6]
 8009c9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	88fa      	ldrh	r2, [r7, #6]
 8009ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cd0:	d10f      	bne.n	8009cf2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ce0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfc:	2b40      	cmp	r3, #64	@ 0x40
 8009cfe:	d007      	beq.n	8009d10 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d18:	d952      	bls.n	8009dc0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <HAL_SPI_Transmit+0xf2>
 8009d22:	8b7b      	ldrh	r3, [r7, #26]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d145      	bne.n	8009db4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	881a      	ldrh	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d38:	1c9a      	adds	r2, r3, #2
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d4c:	e032      	b.n	8009db4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d112      	bne.n	8009d82 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d60:	881a      	ldrh	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6c:	1c9a      	adds	r2, r3, #2
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d80:	e018      	b.n	8009db4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d82:	f7fa f8d1 	bl	8003f28 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d803      	bhi.n	8009d9a <HAL_SPI_Transmit+0x164>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d102      	bne.n	8009da0 <HAL_SPI_Transmit+0x16a>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e0b2      	b.n	8009f1a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1c7      	bne.n	8009d4e <HAL_SPI_Transmit+0x118>
 8009dbe:	e083      	b.n	8009ec8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <HAL_SPI_Transmit+0x198>
 8009dc8:	8b7b      	ldrh	r3, [r7, #26]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d177      	bne.n	8009ebe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d912      	bls.n	8009dfe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ddc:	881a      	ldrh	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de8:	1c9a      	adds	r2, r3, #2
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	3b02      	subs	r3, #2
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009dfc:	e05f      	b.n	8009ebe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	7812      	ldrb	r2, [r2, #0]
 8009e0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009e24:	e04b      	b.n	8009ebe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d12b      	bne.n	8009e8c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d912      	bls.n	8009e64 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e42:	881a      	ldrh	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4e:	1c9a      	adds	r2, r3, #2
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	3b02      	subs	r3, #2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e62:	e02c      	b.n	8009ebe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	3b01      	subs	r3, #1
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e8a:	e018      	b.n	8009ebe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e8c:	f7fa f84c 	bl	8003f28 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d803      	bhi.n	8009ea4 <HAL_SPI_Transmit+0x26e>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d102      	bne.n	8009eaa <HAL_SPI_Transmit+0x274>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d109      	bne.n	8009ebe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e02d      	b.n	8009f1a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ae      	bne.n	8009e26 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fad5 	bl	800a47c <SPI_EndRxTxTransaction>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2220      	movs	r2, #32
 8009edc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e000      	b.n	8009f1a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009f18:	2300      	movs	r3, #0
  }
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d001      	beq.n	8009f42 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e0d4      	b.n	800a0ec <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <HAL_SPI_Transmit_DMA+0x2a>
 8009f48:	88fb      	ldrh	r3, [r7, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e0cc      	b.n	800a0ec <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d101      	bne.n	8009f60 <HAL_SPI_Transmit_DMA+0x3c>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e0c5      	b.n	800a0ec <HAL_SPI_Transmit_DMA+0x1c8>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	88fa      	ldrh	r2, [r7, #6]
 8009f80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fb2:	d10f      	bne.n	8009fd4 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd8:	4a46      	ldr	r2, [pc, #280]	@ (800a0f4 <HAL_SPI_Transmit_DMA+0x1d0>)
 8009fda:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe0:	4a45      	ldr	r2, [pc, #276]	@ (800a0f8 <HAL_SPI_Transmit_DMA+0x1d4>)
 8009fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe8:	4a44      	ldr	r2, [pc, #272]	@ (800a0fc <HAL_SPI_Transmit_DMA+0x1d8>)
 8009fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a002:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a00c:	d82d      	bhi.n	800a06a <HAL_SPI_Transmit_DMA+0x146>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a018:	d127      	bne.n	800a06a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10f      	bne.n	800a048 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a036:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	085b      	lsrs	r3, r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a046:	e010      	b.n	800a06a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a056:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	b29b      	uxth	r3, r3
 800a062:	3301      	adds	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a072:	4619      	mov	r1, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	330c      	adds	r3, #12
 800a07a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a080:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a082:	f7fb fe8d 	bl	8005da0 <HAL_DMA_Start_IT>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a090:	f043 0210 	orr.w	r2, r3, #16
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e023      	b.n	800a0ec <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ae:	2b40      	cmp	r3, #64	@ 0x40
 800a0b0:	d007      	beq.n	800a0c2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0c0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f042 0220 	orr.w	r2, r2, #32
 800a0d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f042 0202 	orr.w	r2, r2, #2
 800a0e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	0800a1e3 	.word	0x0800a1e3
 800a0f8:	0800a13d 	.word	0x0800a13d
 800a0fc:	0800a1ff 	.word	0x0800a1ff

0800a100 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a148:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a14a:	f7f9 feed 	bl	8003f28 <HAL_GetTick>
 800a14e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	d03b      	beq.n	800a1d6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0220 	bic.w	r2, r2, #32
 800a16c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0202 	bic.w	r2, r2, #2
 800a17c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	2164      	movs	r1, #100	@ 0x64
 800a182:	6978      	ldr	r0, [r7, #20]
 800a184:	f000 f97a 	bl	800a47c <SPI_EndRxTxTransaction>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a192:	f043 0220 	orr.w	r2, r3, #32
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a1ce:	6978      	ldr	r0, [r7, #20]
 800a1d0:	f7ff ffaa 	bl	800a128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a1d4:	e002      	b.n	800a1dc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a1d6:	6978      	ldr	r0, [r7, #20]
 800a1d8:	f7ff ff92 	bl	800a100 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7ff ff8f 	bl	800a114 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0203 	bic.w	r2, r2, #3
 800a21a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a220:	f043 0210 	orr.w	r2, r3, #16
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff ff79 	bl	800a128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a250:	f7f9 fe6a 	bl	8003f28 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4413      	add	r3, r2
 800a25e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a260:	f7f9 fe62 	bl	8003f28 <HAL_GetTick>
 800a264:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a266:	4b39      	ldr	r3, [pc, #228]	@ (800a34c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	015b      	lsls	r3, r3, #5
 800a26c:	0d1b      	lsrs	r3, r3, #20
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	fb02 f303 	mul.w	r3, r2, r3
 800a274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a276:	e054      	b.n	800a322 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d050      	beq.n	800a322 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a280:	f7f9 fe52 	bl	8003f28 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	69fa      	ldr	r2, [r7, #28]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d902      	bls.n	800a296 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d13d      	bne.n	800a312 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a2a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2ae:	d111      	bne.n	800a2d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2b8:	d004      	beq.n	800a2c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2c2:	d107      	bne.n	800a2d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2dc:	d10f      	bne.n	800a2fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e017      	b.n	800a342 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	3b01      	subs	r3, #1
 800a320:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4013      	ands	r3, r2
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	429a      	cmp	r2, r3
 800a330:	bf0c      	ite	eq
 800a332:	2301      	moveq	r3, #1
 800a334:	2300      	movne	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d19b      	bne.n	800a278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000204 	.word	0x20000204

0800a350 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	@ 0x28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a362:	f7f9 fde1 	bl	8003f28 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	4413      	add	r3, r2
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a372:	f7f9 fdd9 	bl	8003f28 <HAL_GetTick>
 800a376:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	330c      	adds	r3, #12
 800a37e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a380:	4b3d      	ldr	r3, [pc, #244]	@ (800a478 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	00da      	lsls	r2, r3, #3
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	0d1b      	lsrs	r3, r3, #20
 800a390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a392:	fb02 f303 	mul.w	r3, r2, r3
 800a396:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a398:	e060      	b.n	800a45c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a3a0:	d107      	bne.n	800a3b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d050      	beq.n	800a45c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3ba:	f7f9 fdb5 	bl	8003f28 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d902      	bls.n	800a3d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d13d      	bne.n	800a44c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a3de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3e8:	d111      	bne.n	800a40e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f2:	d004      	beq.n	800a3fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3fc:	d107      	bne.n	800a40e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a40c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a416:	d10f      	bne.n	800a438 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a436:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e010      	b.n	800a46e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	3b01      	subs	r3, #1
 800a45a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689a      	ldr	r2, [r3, #8]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	4013      	ands	r3, r2
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d196      	bne.n	800a39a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3728      	adds	r7, #40	@ 0x28
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000204 	.word	0x20000204

0800a47c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2200      	movs	r2, #0
 800a490:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff ff5b 	bl	800a350 <SPI_WaitFifoStateUntilTimeout>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d007      	beq.n	800a4b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4a4:	f043 0220 	orr.w	r2, r3, #32
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e027      	b.n	800a500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2180      	movs	r1, #128	@ 0x80
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff fec0 	bl	800a240 <SPI_WaitFlagStateUntilTimeout>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d007      	beq.n	800a4d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ca:	f043 0220 	orr.w	r2, r3, #32
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e014      	b.n	800a500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff ff34 	bl	800a350 <SPI_WaitFifoStateUntilTimeout>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4f2:	f043 0220 	orr.w	r2, r3, #32
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e000      	b.n	800a500 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e049      	b.n	800a5ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7f9 f998 	bl	8003864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f001 f822 	bl	800b590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e049      	b.n	800a65c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d106      	bne.n	800a5e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f841 	bl	800a664 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f000 ffcb 	bl	800b590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d109      	bne.n	800a69c <HAL_TIM_PWM_Start+0x24>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b01      	cmp	r3, #1
 800a692:	bf14      	ite	ne
 800a694:	2301      	movne	r3, #1
 800a696:	2300      	moveq	r3, #0
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	e03c      	b.n	800a716 <HAL_TIM_PWM_Start+0x9e>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d109      	bne.n	800a6b6 <HAL_TIM_PWM_Start+0x3e>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	bf14      	ite	ne
 800a6ae:	2301      	movne	r3, #1
 800a6b0:	2300      	moveq	r3, #0
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	e02f      	b.n	800a716 <HAL_TIM_PWM_Start+0x9e>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d109      	bne.n	800a6d0 <HAL_TIM_PWM_Start+0x58>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	bf14      	ite	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	2300      	moveq	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	e022      	b.n	800a716 <HAL_TIM_PWM_Start+0x9e>
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	d109      	bne.n	800a6ea <HAL_TIM_PWM_Start+0x72>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	bf14      	ite	ne
 800a6e2:	2301      	movne	r3, #1
 800a6e4:	2300      	moveq	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	e015      	b.n	800a716 <HAL_TIM_PWM_Start+0x9e>
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d109      	bne.n	800a704 <HAL_TIM_PWM_Start+0x8c>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	e008      	b.n	800a716 <HAL_TIM_PWM_Start+0x9e>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	bf14      	ite	ne
 800a710:	2301      	movne	r3, #1
 800a712:	2300      	moveq	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e0a6      	b.n	800a86c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <HAL_TIM_PWM_Start+0xb6>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a72c:	e023      	b.n	800a776 <HAL_TIM_PWM_Start+0xfe>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b04      	cmp	r3, #4
 800a732:	d104      	bne.n	800a73e <HAL_TIM_PWM_Start+0xc6>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2202      	movs	r2, #2
 800a738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a73c:	e01b      	b.n	800a776 <HAL_TIM_PWM_Start+0xfe>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b08      	cmp	r3, #8
 800a742:	d104      	bne.n	800a74e <HAL_TIM_PWM_Start+0xd6>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a74c:	e013      	b.n	800a776 <HAL_TIM_PWM_Start+0xfe>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b0c      	cmp	r3, #12
 800a752:	d104      	bne.n	800a75e <HAL_TIM_PWM_Start+0xe6>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a75c:	e00b      	b.n	800a776 <HAL_TIM_PWM_Start+0xfe>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b10      	cmp	r3, #16
 800a762:	d104      	bne.n	800a76e <HAL_TIM_PWM_Start+0xf6>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a76c:	e003      	b.n	800a776 <HAL_TIM_PWM_Start+0xfe>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2202      	movs	r2, #2
 800a772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2201      	movs	r2, #1
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f001 fb80 	bl	800be84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a3a      	ldr	r2, [pc, #232]	@ (800a874 <HAL_TIM_PWM_Start+0x1fc>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d018      	beq.n	800a7c0 <HAL_TIM_PWM_Start+0x148>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a39      	ldr	r2, [pc, #228]	@ (800a878 <HAL_TIM_PWM_Start+0x200>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d013      	beq.n	800a7c0 <HAL_TIM_PWM_Start+0x148>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a37      	ldr	r2, [pc, #220]	@ (800a87c <HAL_TIM_PWM_Start+0x204>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d00e      	beq.n	800a7c0 <HAL_TIM_PWM_Start+0x148>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a36      	ldr	r2, [pc, #216]	@ (800a880 <HAL_TIM_PWM_Start+0x208>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d009      	beq.n	800a7c0 <HAL_TIM_PWM_Start+0x148>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a34      	ldr	r2, [pc, #208]	@ (800a884 <HAL_TIM_PWM_Start+0x20c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d004      	beq.n	800a7c0 <HAL_TIM_PWM_Start+0x148>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a33      	ldr	r2, [pc, #204]	@ (800a888 <HAL_TIM_PWM_Start+0x210>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d101      	bne.n	800a7c4 <HAL_TIM_PWM_Start+0x14c>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e000      	b.n	800a7c6 <HAL_TIM_PWM_Start+0x14e>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d007      	beq.n	800a7da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a25      	ldr	r2, [pc, #148]	@ (800a874 <HAL_TIM_PWM_Start+0x1fc>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d022      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ec:	d01d      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a26      	ldr	r2, [pc, #152]	@ (800a88c <HAL_TIM_PWM_Start+0x214>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d018      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a24      	ldr	r2, [pc, #144]	@ (800a890 <HAL_TIM_PWM_Start+0x218>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d013      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a23      	ldr	r2, [pc, #140]	@ (800a894 <HAL_TIM_PWM_Start+0x21c>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00e      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a19      	ldr	r2, [pc, #100]	@ (800a878 <HAL_TIM_PWM_Start+0x200>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d009      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a18      	ldr	r2, [pc, #96]	@ (800a87c <HAL_TIM_PWM_Start+0x204>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d004      	beq.n	800a82a <HAL_TIM_PWM_Start+0x1b2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a18      	ldr	r2, [pc, #96]	@ (800a888 <HAL_TIM_PWM_Start+0x210>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d115      	bne.n	800a856 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	4b19      	ldr	r3, [pc, #100]	@ (800a898 <HAL_TIM_PWM_Start+0x220>)
 800a832:	4013      	ands	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b06      	cmp	r3, #6
 800a83a:	d015      	beq.n	800a868 <HAL_TIM_PWM_Start+0x1f0>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a842:	d011      	beq.n	800a868 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0201 	orr.w	r2, r2, #1
 800a852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a854:	e008      	b.n	800a868 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f042 0201 	orr.w	r2, r2, #1
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	e000      	b.n	800a86a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a868:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	40012c00 	.word	0x40012c00
 800a878:	40013400 	.word	0x40013400
 800a87c:	40014000 	.word	0x40014000
 800a880:	40014400 	.word	0x40014400
 800a884:	40014800 	.word	0x40014800
 800a888:	40015000 	.word	0x40015000
 800a88c:	40000400 	.word	0x40000400
 800a890:	40000800 	.word	0x40000800
 800a894:	40000c00 	.word	0x40000c00
 800a898:	00010007 	.word	0x00010007

0800a89c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d109      	bne.n	800a8c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	bf0c      	ite	eq
 800a8c0:	2301      	moveq	r3, #1
 800a8c2:	2300      	movne	r3, #0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	e03c      	b.n	800a942 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d109      	bne.n	800a8e2 <HAL_TIM_PWM_Start_DMA+0x46>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	bf0c      	ite	eq
 800a8da:	2301      	moveq	r3, #1
 800a8dc:	2300      	movne	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	e02f      	b.n	800a942 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d109      	bne.n	800a8fc <HAL_TIM_PWM_Start_DMA+0x60>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	bf0c      	ite	eq
 800a8f4:	2301      	moveq	r3, #1
 800a8f6:	2300      	movne	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	e022      	b.n	800a942 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2b0c      	cmp	r3, #12
 800a900:	d109      	bne.n	800a916 <HAL_TIM_PWM_Start_DMA+0x7a>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	bf0c      	ite	eq
 800a90e:	2301      	moveq	r3, #1
 800a910:	2300      	movne	r3, #0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	e015      	b.n	800a942 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d109      	bne.n	800a930 <HAL_TIM_PWM_Start_DMA+0x94>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	bf0c      	ite	eq
 800a928:	2301      	moveq	r3, #1
 800a92a:	2300      	movne	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	e008      	b.n	800a942 <HAL_TIM_PWM_Start_DMA+0xa6>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	bf0c      	ite	eq
 800a93c:	2301      	moveq	r3, #1
 800a93e:	2300      	movne	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800a946:	2302      	movs	r3, #2
 800a948:	e1b5      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d109      	bne.n	800a964 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	bf0c      	ite	eq
 800a95c:	2301      	moveq	r3, #1
 800a95e:	2300      	movne	r3, #0
 800a960:	b2db      	uxtb	r3, r3
 800a962:	e03c      	b.n	800a9de <HAL_TIM_PWM_Start_DMA+0x142>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b04      	cmp	r3, #4
 800a968:	d109      	bne.n	800a97e <HAL_TIM_PWM_Start_DMA+0xe2>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b01      	cmp	r3, #1
 800a974:	bf0c      	ite	eq
 800a976:	2301      	moveq	r3, #1
 800a978:	2300      	movne	r3, #0
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	e02f      	b.n	800a9de <HAL_TIM_PWM_Start_DMA+0x142>
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b08      	cmp	r3, #8
 800a982:	d109      	bne.n	800a998 <HAL_TIM_PWM_Start_DMA+0xfc>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	bf0c      	ite	eq
 800a990:	2301      	moveq	r3, #1
 800a992:	2300      	movne	r3, #0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	e022      	b.n	800a9de <HAL_TIM_PWM_Start_DMA+0x142>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b0c      	cmp	r3, #12
 800a99c:	d109      	bne.n	800a9b2 <HAL_TIM_PWM_Start_DMA+0x116>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	bf0c      	ite	eq
 800a9aa:	2301      	moveq	r3, #1
 800a9ac:	2300      	movne	r3, #0
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	e015      	b.n	800a9de <HAL_TIM_PWM_Start_DMA+0x142>
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2b10      	cmp	r3, #16
 800a9b6:	d109      	bne.n	800a9cc <HAL_TIM_PWM_Start_DMA+0x130>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	bf0c      	ite	eq
 800a9c4:	2301      	moveq	r3, #1
 800a9c6:	2300      	movne	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	e008      	b.n	800a9de <HAL_TIM_PWM_Start_DMA+0x142>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2301      	moveq	r3, #1
 800a9da:	2300      	movne	r3, #0
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d034      	beq.n	800aa4c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <HAL_TIM_PWM_Start_DMA+0x152>
 800a9e8:	887b      	ldrh	r3, [r7, #2]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e161      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d104      	bne.n	800aa02 <HAL_TIM_PWM_Start_DMA+0x166>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa00:	e026      	b.n	800aa50 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d104      	bne.n	800aa12 <HAL_TIM_PWM_Start_DMA+0x176>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa10:	e01e      	b.n	800aa50 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d104      	bne.n	800aa22 <HAL_TIM_PWM_Start_DMA+0x186>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa20:	e016      	b.n	800aa50 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b0c      	cmp	r3, #12
 800aa26:	d104      	bne.n	800aa32 <HAL_TIM_PWM_Start_DMA+0x196>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa30:	e00e      	b.n	800aa50 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d104      	bne.n	800aa42 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa40:	e006      	b.n	800aa50 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2202      	movs	r2, #2
 800aa46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa4a:	e001      	b.n	800aa50 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e132      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2b0c      	cmp	r3, #12
 800aa54:	f200 80ae 	bhi.w	800abb4 <HAL_TIM_PWM_Start_DMA+0x318>
 800aa58:	a201      	add	r2, pc, #4	@ (adr r2, 800aa60 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800aa95 	.word	0x0800aa95
 800aa64:	0800abb5 	.word	0x0800abb5
 800aa68:	0800abb5 	.word	0x0800abb5
 800aa6c:	0800abb5 	.word	0x0800abb5
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800abb5 	.word	0x0800abb5
 800aa78:	0800abb5 	.word	0x0800abb5
 800aa7c:	0800abb5 	.word	0x0800abb5
 800aa80:	0800ab25 	.word	0x0800ab25
 800aa84:	0800abb5 	.word	0x0800abb5
 800aa88:	0800abb5 	.word	0x0800abb5
 800aa8c:	0800abb5 	.word	0x0800abb5
 800aa90:	0800ab6d 	.word	0x0800ab6d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa98:	4a89      	ldr	r2, [pc, #548]	@ (800acc0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800aa9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa0:	4a88      	ldr	r2, [pc, #544]	@ (800acc4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800aaa2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	4a87      	ldr	r2, [pc, #540]	@ (800acc8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aaaa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3334      	adds	r3, #52	@ 0x34
 800aab8:	461a      	mov	r2, r3
 800aaba:	887b      	ldrh	r3, [r7, #2]
 800aabc:	f7fb f970 	bl	8005da0 <HAL_DMA_Start_IT>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e0f5      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aad8:	60da      	str	r2, [r3, #12]
      break;
 800aada:	e06e      	b.n	800abba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae0:	4a77      	ldr	r2, [pc, #476]	@ (800acc0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800aae2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae8:	4a76      	ldr	r2, [pc, #472]	@ (800acc4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800aaea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf0:	4a75      	ldr	r2, [pc, #468]	@ (800acc8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aaf2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3338      	adds	r3, #56	@ 0x38
 800ab00:	461a      	mov	r2, r3
 800ab02:	887b      	ldrh	r3, [r7, #2]
 800ab04:	f7fb f94c 	bl	8005da0 <HAL_DMA_Start_IT>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e0d1      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68da      	ldr	r2, [r3, #12]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab20:	60da      	str	r2, [r3, #12]
      break;
 800ab22:	e04a      	b.n	800abba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	4a65      	ldr	r2, [pc, #404]	@ (800acc0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ab2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	4a64      	ldr	r2, [pc, #400]	@ (800acc4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ab32:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab38:	4a63      	ldr	r2, [pc, #396]	@ (800acc8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ab3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	333c      	adds	r3, #60	@ 0x3c
 800ab48:	461a      	mov	r2, r3
 800ab4a:	887b      	ldrh	r3, [r7, #2]
 800ab4c:	f7fb f928 	bl	8005da0 <HAL_DMA_Start_IT>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d001      	beq.n	800ab5a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e0ad      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab68:	60da      	str	r2, [r3, #12]
      break;
 800ab6a:	e026      	b.n	800abba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab70:	4a53      	ldr	r2, [pc, #332]	@ (800acc0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ab72:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab78:	4a52      	ldr	r2, [pc, #328]	@ (800acc4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ab7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab80:	4a51      	ldr	r2, [pc, #324]	@ (800acc8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ab82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3340      	adds	r3, #64	@ 0x40
 800ab90:	461a      	mov	r2, r3
 800ab92:	887b      	ldrh	r3, [r7, #2]
 800ab94:	f7fb f904 	bl	8005da0 <HAL_DMA_Start_IT>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e089      	b.n	800acb6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68da      	ldr	r2, [r3, #12]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800abb0:	60da      	str	r2, [r3, #12]
      break;
 800abb2:	e002      	b.n	800abba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	75fb      	strb	r3, [r7, #23]
      break;
 800abb8:	bf00      	nop
  }

  if (status == HAL_OK)
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d179      	bne.n	800acb4 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 f95b 	bl	800be84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a3e      	ldr	r2, [pc, #248]	@ (800accc <HAL_TIM_PWM_Start_DMA+0x430>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d018      	beq.n	800ac0a <HAL_TIM_PWM_Start_DMA+0x36e>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a3c      	ldr	r2, [pc, #240]	@ (800acd0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d013      	beq.n	800ac0a <HAL_TIM_PWM_Start_DMA+0x36e>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a3b      	ldr	r2, [pc, #236]	@ (800acd4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d00e      	beq.n	800ac0a <HAL_TIM_PWM_Start_DMA+0x36e>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a39      	ldr	r2, [pc, #228]	@ (800acd8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d009      	beq.n	800ac0a <HAL_TIM_PWM_Start_DMA+0x36e>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a38      	ldr	r2, [pc, #224]	@ (800acdc <HAL_TIM_PWM_Start_DMA+0x440>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d004      	beq.n	800ac0a <HAL_TIM_PWM_Start_DMA+0x36e>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a36      	ldr	r2, [pc, #216]	@ (800ace0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d101      	bne.n	800ac0e <HAL_TIM_PWM_Start_DMA+0x372>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <HAL_TIM_PWM_Start_DMA+0x374>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d007      	beq.n	800ac24 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a28      	ldr	r2, [pc, #160]	@ (800accc <HAL_TIM_PWM_Start_DMA+0x430>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d022      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac36:	d01d      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a29      	ldr	r2, [pc, #164]	@ (800ace4 <HAL_TIM_PWM_Start_DMA+0x448>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d018      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a28      	ldr	r2, [pc, #160]	@ (800ace8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d013      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a26      	ldr	r2, [pc, #152]	@ (800acec <HAL_TIM_PWM_Start_DMA+0x450>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00e      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a1d      	ldr	r2, [pc, #116]	@ (800acd0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d009      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a1b      	ldr	r2, [pc, #108]	@ (800acd4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d004      	beq.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a1c      	ldr	r2, [pc, #112]	@ (800ace0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d115      	bne.n	800aca0 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689a      	ldr	r2, [r3, #8]
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	@ (800acf0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	2b06      	cmp	r3, #6
 800ac84:	d015      	beq.n	800acb2 <HAL_TIM_PWM_Start_DMA+0x416>
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac8c:	d011      	beq.n	800acb2 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f042 0201 	orr.w	r2, r2, #1
 800ac9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac9e:	e008      	b.n	800acb2 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f042 0201 	orr.w	r2, r2, #1
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e000      	b.n	800acb4 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	0800b47f 	.word	0x0800b47f
 800acc4:	0800b527 	.word	0x0800b527
 800acc8:	0800b3ed 	.word	0x0800b3ed
 800accc:	40012c00 	.word	0x40012c00
 800acd0:	40013400 	.word	0x40013400
 800acd4:	40014000 	.word	0x40014000
 800acd8:	40014400 	.word	0x40014400
 800acdc:	40014800 	.word	0x40014800
 800ace0:	40015000 	.word	0x40015000
 800ace4:	40000400 	.word	0x40000400
 800ace8:	40000800 	.word	0x40000800
 800acec:	40000c00 	.word	0x40000c00
 800acf0:	00010007 	.word	0x00010007

0800acf4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e097      	b.n	800ae38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7f8 fcaf 	bl	8003680 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2202      	movs	r2, #2
 800ad26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ad38:	f023 0307 	bic.w	r3, r3, #7
 800ad3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4619      	mov	r1, r3
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f000 fc21 	bl	800b590 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6a1b      	ldr	r3, [r3, #32]
 800ad64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad76:	f023 0303 	bic.w	r3, r3, #3
 800ad7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	021b      	lsls	r3, r3, #8
 800ad86:	4313      	orrs	r3, r2
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ad94:	f023 030c 	bic.w	r3, r3, #12
 800ad98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ada0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ada4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	4313      	orrs	r3, r2
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	011a      	lsls	r2, r3, #4
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	031b      	lsls	r3, r3, #12
 800adc4:	4313      	orrs	r3, r2
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	4313      	orrs	r3, r2
 800adca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800add2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800adda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	011b      	lsls	r3, r3, #4
 800ade6:	4313      	orrs	r3, r2
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	4313      	orrs	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d110      	bne.n	800ae92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d102      	bne.n	800ae7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae76:	7b7b      	ldrb	r3, [r7, #13]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d001      	beq.n	800ae80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e069      	b.n	800af54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae90:	e031      	b.n	800aef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d110      	bne.n	800aeba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d102      	bne.n	800aea4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae9e:	7b3b      	ldrb	r3, [r7, #12]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d001      	beq.n	800aea8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e055      	b.n	800af54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aeb8:	e01d      	b.n	800aef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d108      	bne.n	800aed2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d105      	bne.n	800aed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aec6:	7b7b      	ldrb	r3, [r7, #13]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d102      	bne.n	800aed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aecc:	7b3b      	ldrb	r3, [r7, #12]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d001      	beq.n	800aed6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e03e      	b.n	800af54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2202      	movs	r2, #2
 800aeda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2202      	movs	r2, #2
 800aee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2202      	movs	r2, #2
 800aeea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2202      	movs	r2, #2
 800aef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <HAL_TIM_Encoder_Start+0xc4>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d008      	beq.n	800af14 <HAL_TIM_Encoder_Start+0xd4>
 800af02:	e00f      	b.n	800af24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2201      	movs	r2, #1
 800af0a:	2100      	movs	r1, #0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 ffb9 	bl	800be84 <TIM_CCxChannelCmd>
      break;
 800af12:	e016      	b.n	800af42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2201      	movs	r2, #1
 800af1a:	2104      	movs	r1, #4
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 ffb1 	bl	800be84 <TIM_CCxChannelCmd>
      break;
 800af22:	e00e      	b.n	800af42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2201      	movs	r2, #1
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 ffa9 	bl	800be84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2201      	movs	r2, #1
 800af38:	2104      	movs	r1, #4
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 ffa2 	bl	800be84 <TIM_CCxChannelCmd>
      break;
 800af40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f042 0201 	orr.w	r2, r2, #1
 800af50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af72:	2b01      	cmp	r3, #1
 800af74:	d101      	bne.n	800af7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af76:	2302      	movs	r3, #2
 800af78:	e0ff      	b.n	800b17a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b14      	cmp	r3, #20
 800af86:	f200 80f0 	bhi.w	800b16a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af8a:	a201      	add	r2, pc, #4	@ (adr r2, 800af90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af90:	0800afe5 	.word	0x0800afe5
 800af94:	0800b16b 	.word	0x0800b16b
 800af98:	0800b16b 	.word	0x0800b16b
 800af9c:	0800b16b 	.word	0x0800b16b
 800afa0:	0800b025 	.word	0x0800b025
 800afa4:	0800b16b 	.word	0x0800b16b
 800afa8:	0800b16b 	.word	0x0800b16b
 800afac:	0800b16b 	.word	0x0800b16b
 800afb0:	0800b067 	.word	0x0800b067
 800afb4:	0800b16b 	.word	0x0800b16b
 800afb8:	0800b16b 	.word	0x0800b16b
 800afbc:	0800b16b 	.word	0x0800b16b
 800afc0:	0800b0a7 	.word	0x0800b0a7
 800afc4:	0800b16b 	.word	0x0800b16b
 800afc8:	0800b16b 	.word	0x0800b16b
 800afcc:	0800b16b 	.word	0x0800b16b
 800afd0:	0800b0e9 	.word	0x0800b0e9
 800afd4:	0800b16b 	.word	0x0800b16b
 800afd8:	0800b16b 	.word	0x0800b16b
 800afdc:	0800b16b 	.word	0x0800b16b
 800afe0:	0800b129 	.word	0x0800b129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fb84 	bl	800b6f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699a      	ldr	r2, [r3, #24]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0208 	orr.w	r2, r2, #8
 800affe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	699a      	ldr	r2, [r3, #24]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0204 	bic.w	r2, r2, #4
 800b00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6999      	ldr	r1, [r3, #24]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	619a      	str	r2, [r3, #24]
      break;
 800b022:	e0a5      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fbfe 	bl	800b82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b03e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b04e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6999      	ldr	r1, [r3, #24]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	021a      	lsls	r2, r3, #8
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	619a      	str	r2, [r3, #24]
      break;
 800b064:	e084      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 fc71 	bl	800b954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f042 0208 	orr.w	r2, r2, #8
 800b080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69da      	ldr	r2, [r3, #28]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f022 0204 	bic.w	r2, r2, #4
 800b090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69d9      	ldr	r1, [r3, #28]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	691a      	ldr	r2, [r3, #16]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	61da      	str	r2, [r3, #28]
      break;
 800b0a4:	e064      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68b9      	ldr	r1, [r7, #8]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 fce3 	bl	800ba78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69d9      	ldr	r1, [r3, #28]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	021a      	lsls	r2, r3, #8
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	61da      	str	r2, [r3, #28]
      break;
 800b0e6:	e043      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fd56 	bl	800bba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0208 	orr.w	r2, r2, #8
 800b102:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0204 	bic.w	r2, r2, #4
 800b112:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	691a      	ldr	r2, [r3, #16]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b126:	e023      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fda0 	bl	800bc74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b152:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	021a      	lsls	r2, r3, #8
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b168:	e002      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	75fb      	strb	r3, [r7, #23]
      break;
 800b16e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b178:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop

0800b184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d101      	bne.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b19c:	2302      	movs	r3, #2
 800b19e:	e0f6      	b.n	800b38e <HAL_TIM_ConfigClockSource+0x20a>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b1be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a6f      	ldr	r2, [pc, #444]	@ (800b398 <HAL_TIM_ConfigClockSource+0x214>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	f000 80c1 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b1e0:	4a6d      	ldr	r2, [pc, #436]	@ (800b398 <HAL_TIM_ConfigClockSource+0x214>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	f200 80c6 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1e8:	4a6c      	ldr	r2, [pc, #432]	@ (800b39c <HAL_TIM_ConfigClockSource+0x218>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	f000 80b9 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b1f0:	4a6a      	ldr	r2, [pc, #424]	@ (800b39c <HAL_TIM_ConfigClockSource+0x218>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	f200 80be 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1f8:	4a69      	ldr	r2, [pc, #420]	@ (800b3a0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	f000 80b1 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b200:	4a67      	ldr	r2, [pc, #412]	@ (800b3a0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b202:	4293      	cmp	r3, r2
 800b204:	f200 80b6 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b208:	4a66      	ldr	r2, [pc, #408]	@ (800b3a4 <HAL_TIM_ConfigClockSource+0x220>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	f000 80a9 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b210:	4a64      	ldr	r2, [pc, #400]	@ (800b3a4 <HAL_TIM_ConfigClockSource+0x220>)
 800b212:	4293      	cmp	r3, r2
 800b214:	f200 80ae 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b218:	4a63      	ldr	r2, [pc, #396]	@ (800b3a8 <HAL_TIM_ConfigClockSource+0x224>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	f000 80a1 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b220:	4a61      	ldr	r2, [pc, #388]	@ (800b3a8 <HAL_TIM_ConfigClockSource+0x224>)
 800b222:	4293      	cmp	r3, r2
 800b224:	f200 80a6 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b228:	4a60      	ldr	r2, [pc, #384]	@ (800b3ac <HAL_TIM_ConfigClockSource+0x228>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	f000 8099 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b230:	4a5e      	ldr	r2, [pc, #376]	@ (800b3ac <HAL_TIM_ConfigClockSource+0x228>)
 800b232:	4293      	cmp	r3, r2
 800b234:	f200 809e 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b238:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b23c:	f000 8091 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b240:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b244:	f200 8096 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b248:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b24c:	f000 8089 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b254:	f200 808e 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b25c:	d03e      	beq.n	800b2dc <HAL_TIM_ConfigClockSource+0x158>
 800b25e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b262:	f200 8087 	bhi.w	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b26a:	f000 8086 	beq.w	800b37a <HAL_TIM_ConfigClockSource+0x1f6>
 800b26e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b272:	d87f      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b274:	2b70      	cmp	r3, #112	@ 0x70
 800b276:	d01a      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x12a>
 800b278:	2b70      	cmp	r3, #112	@ 0x70
 800b27a:	d87b      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b27c:	2b60      	cmp	r3, #96	@ 0x60
 800b27e:	d050      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0x19e>
 800b280:	2b60      	cmp	r3, #96	@ 0x60
 800b282:	d877      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b284:	2b50      	cmp	r3, #80	@ 0x50
 800b286:	d03c      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x17e>
 800b288:	2b50      	cmp	r3, #80	@ 0x50
 800b28a:	d873      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b28c:	2b40      	cmp	r3, #64	@ 0x40
 800b28e:	d058      	beq.n	800b342 <HAL_TIM_ConfigClockSource+0x1be>
 800b290:	2b40      	cmp	r3, #64	@ 0x40
 800b292:	d86f      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b294:	2b30      	cmp	r3, #48	@ 0x30
 800b296:	d064      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b298:	2b30      	cmp	r3, #48	@ 0x30
 800b29a:	d86b      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b29c:	2b20      	cmp	r3, #32
 800b29e:	d060      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b2a0:	2b20      	cmp	r3, #32
 800b2a2:	d867      	bhi.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d05c      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d05a      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0x1de>
 800b2ac:	e062      	b.n	800b374 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2be:	f000 fdc1 	bl	800be44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	609a      	str	r2, [r3, #8]
      break;
 800b2da:	e04f      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2ec:	f000 fdaa 	bl	800be44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689a      	ldr	r2, [r3, #8]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2fe:	609a      	str	r2, [r3, #8]
      break;
 800b300:	e03c      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b30e:	461a      	mov	r2, r3
 800b310:	f000 fd1c 	bl	800bd4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2150      	movs	r1, #80	@ 0x50
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fd75 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800b320:	e02c      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b32e:	461a      	mov	r2, r3
 800b330:	f000 fd3b 	bl	800bdaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2160      	movs	r1, #96	@ 0x60
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 fd65 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800b340:	e01c      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b34e:	461a      	mov	r2, r3
 800b350:	f000 fcfc 	bl	800bd4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2140      	movs	r1, #64	@ 0x40
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 fd55 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800b360:	e00c      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f000 fd4c 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800b372:	e003      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	73fb      	strb	r3, [r7, #15]
      break;
 800b378:	e000      	b.n	800b37c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b37a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	00100070 	.word	0x00100070
 800b39c:	00100060 	.word	0x00100060
 800b3a0:	00100050 	.word	0x00100050
 800b3a4:	00100040 	.word	0x00100040
 800b3a8:	00100030 	.word	0x00100030
 800b3ac:	00100020 	.word	0x00100020

0800b3b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	d107      	bne.n	800b414 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2201      	movs	r2, #1
 800b408:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b412:	e02a      	b.n	800b46a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d107      	bne.n	800b42e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2202      	movs	r2, #2
 800b422:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b42c:	e01d      	b.n	800b46a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	429a      	cmp	r2, r3
 800b436:	d107      	bne.n	800b448 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2204      	movs	r2, #4
 800b43c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b446:	e010      	b.n	800b46a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d107      	bne.n	800b462 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2208      	movs	r2, #8
 800b456:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b460:	e003      	b.n	800b46a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff ffb4 	bl	800b3d8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	771a      	strb	r2, [r3, #28]
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b48a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	429a      	cmp	r2, r3
 800b494:	d10b      	bne.n	800b4ae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d136      	bne.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4ac:	e031      	b.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d10b      	bne.n	800b4d0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d125      	bne.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4ce:	e020      	b.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d10b      	bne.n	800b4f2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2204      	movs	r2, #4
 800b4de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d114      	bne.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4f0:	e00f      	b.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d10a      	bne.n	800b512 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2208      	movs	r2, #8
 800b500:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d103      	bne.n	800b512 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f7ff ff4c 	bl	800b3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	771a      	strb	r2, [r3, #28]
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b532:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d103      	bne.n	800b546 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2201      	movs	r2, #1
 800b542:	771a      	strb	r2, [r3, #28]
 800b544:	e019      	b.n	800b57a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d103      	bne.n	800b558 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2202      	movs	r2, #2
 800b554:	771a      	strb	r2, [r3, #28]
 800b556:	e010      	b.n	800b57a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d103      	bne.n	800b56a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2204      	movs	r2, #4
 800b566:	771a      	strb	r2, [r3, #28]
 800b568:	e007      	b.n	800b57a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	429a      	cmp	r2, r3
 800b572:	d102      	bne.n	800b57a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2208      	movs	r2, #8
 800b578:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7ff ff22 	bl	800b3c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	771a      	strb	r2, [r3, #28]
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a4c      	ldr	r2, [pc, #304]	@ (800b6d4 <TIM_Base_SetConfig+0x144>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d017      	beq.n	800b5d8 <TIM_Base_SetConfig+0x48>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ae:	d013      	beq.n	800b5d8 <TIM_Base_SetConfig+0x48>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a49      	ldr	r2, [pc, #292]	@ (800b6d8 <TIM_Base_SetConfig+0x148>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00f      	beq.n	800b5d8 <TIM_Base_SetConfig+0x48>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a48      	ldr	r2, [pc, #288]	@ (800b6dc <TIM_Base_SetConfig+0x14c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00b      	beq.n	800b5d8 <TIM_Base_SetConfig+0x48>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a47      	ldr	r2, [pc, #284]	@ (800b6e0 <TIM_Base_SetConfig+0x150>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_Base_SetConfig+0x48>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a46      	ldr	r2, [pc, #280]	@ (800b6e4 <TIM_Base_SetConfig+0x154>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_Base_SetConfig+0x48>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a45      	ldr	r2, [pc, #276]	@ (800b6e8 <TIM_Base_SetConfig+0x158>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d108      	bne.n	800b5ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a39      	ldr	r2, [pc, #228]	@ (800b6d4 <TIM_Base_SetConfig+0x144>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d023      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5f8:	d01f      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a36      	ldr	r2, [pc, #216]	@ (800b6d8 <TIM_Base_SetConfig+0x148>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d01b      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a35      	ldr	r2, [pc, #212]	@ (800b6dc <TIM_Base_SetConfig+0x14c>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d017      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a34      	ldr	r2, [pc, #208]	@ (800b6e0 <TIM_Base_SetConfig+0x150>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d013      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a33      	ldr	r2, [pc, #204]	@ (800b6e4 <TIM_Base_SetConfig+0x154>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d00f      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a33      	ldr	r2, [pc, #204]	@ (800b6ec <TIM_Base_SetConfig+0x15c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d00b      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a32      	ldr	r2, [pc, #200]	@ (800b6f0 <TIM_Base_SetConfig+0x160>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d007      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a31      	ldr	r2, [pc, #196]	@ (800b6f4 <TIM_Base_SetConfig+0x164>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d003      	beq.n	800b63a <TIM_Base_SetConfig+0xaa>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a2c      	ldr	r2, [pc, #176]	@ (800b6e8 <TIM_Base_SetConfig+0x158>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d108      	bne.n	800b64c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	4313      	orrs	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	4313      	orrs	r3, r2
 800b658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a18      	ldr	r2, [pc, #96]	@ (800b6d4 <TIM_Base_SetConfig+0x144>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d013      	beq.n	800b6a0 <TIM_Base_SetConfig+0x110>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a1a      	ldr	r2, [pc, #104]	@ (800b6e4 <TIM_Base_SetConfig+0x154>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00f      	beq.n	800b6a0 <TIM_Base_SetConfig+0x110>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a1a      	ldr	r2, [pc, #104]	@ (800b6ec <TIM_Base_SetConfig+0x15c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00b      	beq.n	800b6a0 <TIM_Base_SetConfig+0x110>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a19      	ldr	r2, [pc, #100]	@ (800b6f0 <TIM_Base_SetConfig+0x160>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d007      	beq.n	800b6a0 <TIM_Base_SetConfig+0x110>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a18      	ldr	r2, [pc, #96]	@ (800b6f4 <TIM_Base_SetConfig+0x164>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d003      	beq.n	800b6a0 <TIM_Base_SetConfig+0x110>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a13      	ldr	r2, [pc, #76]	@ (800b6e8 <TIM_Base_SetConfig+0x158>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d103      	bne.n	800b6a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d105      	bne.n	800b6c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	f023 0201 	bic.w	r2, r3, #1
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	611a      	str	r2, [r3, #16]
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	40012c00 	.word	0x40012c00
 800b6d8:	40000400 	.word	0x40000400
 800b6dc:	40000800 	.word	0x40000800
 800b6e0:	40000c00 	.word	0x40000c00
 800b6e4:	40013400 	.word	0x40013400
 800b6e8:	40015000 	.word	0x40015000
 800b6ec:	40014000 	.word	0x40014000
 800b6f0:	40014400 	.word	0x40014400
 800b6f4:	40014800 	.word	0x40014800

0800b6f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
 800b70c:	f023 0201 	bic.w	r2, r3, #1
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f023 0303 	bic.w	r3, r3, #3
 800b732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f023 0302 	bic.w	r3, r3, #2
 800b744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a30      	ldr	r2, [pc, #192]	@ (800b814 <TIM_OC1_SetConfig+0x11c>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d013      	beq.n	800b780 <TIM_OC1_SetConfig+0x88>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a2f      	ldr	r2, [pc, #188]	@ (800b818 <TIM_OC1_SetConfig+0x120>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d00f      	beq.n	800b780 <TIM_OC1_SetConfig+0x88>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a2e      	ldr	r2, [pc, #184]	@ (800b81c <TIM_OC1_SetConfig+0x124>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d00b      	beq.n	800b780 <TIM_OC1_SetConfig+0x88>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a2d      	ldr	r2, [pc, #180]	@ (800b820 <TIM_OC1_SetConfig+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d007      	beq.n	800b780 <TIM_OC1_SetConfig+0x88>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a2c      	ldr	r2, [pc, #176]	@ (800b824 <TIM_OC1_SetConfig+0x12c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d003      	beq.n	800b780 <TIM_OC1_SetConfig+0x88>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a2b      	ldr	r2, [pc, #172]	@ (800b828 <TIM_OC1_SetConfig+0x130>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d10c      	bne.n	800b79a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f023 0308 	bic.w	r3, r3, #8
 800b786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f023 0304 	bic.w	r3, r3, #4
 800b798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a1d      	ldr	r2, [pc, #116]	@ (800b814 <TIM_OC1_SetConfig+0x11c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d013      	beq.n	800b7ca <TIM_OC1_SetConfig+0xd2>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b818 <TIM_OC1_SetConfig+0x120>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d00f      	beq.n	800b7ca <TIM_OC1_SetConfig+0xd2>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b81c <TIM_OC1_SetConfig+0x124>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d00b      	beq.n	800b7ca <TIM_OC1_SetConfig+0xd2>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a1a      	ldr	r2, [pc, #104]	@ (800b820 <TIM_OC1_SetConfig+0x128>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d007      	beq.n	800b7ca <TIM_OC1_SetConfig+0xd2>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a19      	ldr	r2, [pc, #100]	@ (800b824 <TIM_OC1_SetConfig+0x12c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d003      	beq.n	800b7ca <TIM_OC1_SetConfig+0xd2>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a18      	ldr	r2, [pc, #96]	@ (800b828 <TIM_OC1_SetConfig+0x130>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d111      	bne.n	800b7ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	621a      	str	r2, [r3, #32]
}
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	40012c00 	.word	0x40012c00
 800b818:	40013400 	.word	0x40013400
 800b81c:	40014000 	.word	0x40014000
 800b820:	40014400 	.word	0x40014400
 800b824:	40014800 	.word	0x40014800
 800b828:	40015000 	.word	0x40015000

0800b82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	f023 0210 	bic.w	r2, r3, #16
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4313      	orrs	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f023 0320 	bic.w	r3, r3, #32
 800b87a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	4313      	orrs	r3, r2
 800b886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a2c      	ldr	r2, [pc, #176]	@ (800b93c <TIM_OC2_SetConfig+0x110>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d007      	beq.n	800b8a0 <TIM_OC2_SetConfig+0x74>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a2b      	ldr	r2, [pc, #172]	@ (800b940 <TIM_OC2_SetConfig+0x114>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <TIM_OC2_SetConfig+0x74>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a2a      	ldr	r2, [pc, #168]	@ (800b944 <TIM_OC2_SetConfig+0x118>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d10d      	bne.n	800b8bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a1f      	ldr	r2, [pc, #124]	@ (800b93c <TIM_OC2_SetConfig+0x110>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <TIM_OC2_SetConfig+0xc0>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b940 <TIM_OC2_SetConfig+0x114>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC2_SetConfig+0xc0>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b948 <TIM_OC2_SetConfig+0x11c>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC2_SetConfig+0xc0>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a1d      	ldr	r2, [pc, #116]	@ (800b94c <TIM_OC2_SetConfig+0x120>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC2_SetConfig+0xc0>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1c      	ldr	r2, [pc, #112]	@ (800b950 <TIM_OC2_SetConfig+0x124>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC2_SetConfig+0xc0>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a17      	ldr	r2, [pc, #92]	@ (800b944 <TIM_OC2_SetConfig+0x118>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d113      	bne.n	800b914 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b8f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	621a      	str	r2, [r3, #32]
}
 800b92e:	bf00      	nop
 800b930:	371c      	adds	r7, #28
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	40012c00 	.word	0x40012c00
 800b940:	40013400 	.word	0x40013400
 800b944:	40015000 	.word	0x40015000
 800b948:	40014000 	.word	0x40014000
 800b94c:	40014400 	.word	0x40014400
 800b950:	40014800 	.word	0x40014800

0800b954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0303 	bic.w	r3, r3, #3
 800b98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	021b      	lsls	r3, r3, #8
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a2b      	ldr	r2, [pc, #172]	@ (800ba60 <TIM_OC3_SetConfig+0x10c>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d007      	beq.n	800b9c6 <TIM_OC3_SetConfig+0x72>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a2a      	ldr	r2, [pc, #168]	@ (800ba64 <TIM_OC3_SetConfig+0x110>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d003      	beq.n	800b9c6 <TIM_OC3_SetConfig+0x72>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a29      	ldr	r2, [pc, #164]	@ (800ba68 <TIM_OC3_SetConfig+0x114>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d10d      	bne.n	800b9e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	021b      	lsls	r3, r3, #8
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a1e      	ldr	r2, [pc, #120]	@ (800ba60 <TIM_OC3_SetConfig+0x10c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d013      	beq.n	800ba12 <TIM_OC3_SetConfig+0xbe>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a1d      	ldr	r2, [pc, #116]	@ (800ba64 <TIM_OC3_SetConfig+0x110>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00f      	beq.n	800ba12 <TIM_OC3_SetConfig+0xbe>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a1d      	ldr	r2, [pc, #116]	@ (800ba6c <TIM_OC3_SetConfig+0x118>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d00b      	beq.n	800ba12 <TIM_OC3_SetConfig+0xbe>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800ba70 <TIM_OC3_SetConfig+0x11c>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d007      	beq.n	800ba12 <TIM_OC3_SetConfig+0xbe>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a1b      	ldr	r2, [pc, #108]	@ (800ba74 <TIM_OC3_SetConfig+0x120>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d003      	beq.n	800ba12 <TIM_OC3_SetConfig+0xbe>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a16      	ldr	r2, [pc, #88]	@ (800ba68 <TIM_OC3_SetConfig+0x114>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d113      	bne.n	800ba3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	685a      	ldr	r2, [r3, #4]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	621a      	str	r2, [r3, #32]
}
 800ba54:	bf00      	nop
 800ba56:	371c      	adds	r7, #28
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	40012c00 	.word	0x40012c00
 800ba64:	40013400 	.word	0x40013400
 800ba68:	40015000 	.word	0x40015000
 800ba6c:	40014000 	.word	0x40014000
 800ba70:	40014400 	.word	0x40014400
 800ba74:	40014800 	.word	0x40014800

0800ba78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800baa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	021b      	lsls	r3, r3, #8
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	4313      	orrs	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	031b      	lsls	r3, r3, #12
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a2c      	ldr	r2, [pc, #176]	@ (800bb88 <TIM_OC4_SetConfig+0x110>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d007      	beq.n	800baec <TIM_OC4_SetConfig+0x74>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a2b      	ldr	r2, [pc, #172]	@ (800bb8c <TIM_OC4_SetConfig+0x114>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d003      	beq.n	800baec <TIM_OC4_SetConfig+0x74>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a2a      	ldr	r2, [pc, #168]	@ (800bb90 <TIM_OC4_SetConfig+0x118>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d10d      	bne.n	800bb08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800baf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	031b      	lsls	r3, r3, #12
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a1f      	ldr	r2, [pc, #124]	@ (800bb88 <TIM_OC4_SetConfig+0x110>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d013      	beq.n	800bb38 <TIM_OC4_SetConfig+0xc0>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a1e      	ldr	r2, [pc, #120]	@ (800bb8c <TIM_OC4_SetConfig+0x114>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d00f      	beq.n	800bb38 <TIM_OC4_SetConfig+0xc0>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb94 <TIM_OC4_SetConfig+0x11c>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00b      	beq.n	800bb38 <TIM_OC4_SetConfig+0xc0>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a1d      	ldr	r2, [pc, #116]	@ (800bb98 <TIM_OC4_SetConfig+0x120>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d007      	beq.n	800bb38 <TIM_OC4_SetConfig+0xc0>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a1c      	ldr	r2, [pc, #112]	@ (800bb9c <TIM_OC4_SetConfig+0x124>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d003      	beq.n	800bb38 <TIM_OC4_SetConfig+0xc0>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a17      	ldr	r2, [pc, #92]	@ (800bb90 <TIM_OC4_SetConfig+0x118>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d113      	bne.n	800bb60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bb46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	019b      	lsls	r3, r3, #6
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	019b      	lsls	r3, r3, #6
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	621a      	str	r2, [r3, #32]
}
 800bb7a:	bf00      	nop
 800bb7c:	371c      	adds	r7, #28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	40012c00 	.word	0x40012c00
 800bb8c:	40013400 	.word	0x40013400
 800bb90:	40015000 	.word	0x40015000
 800bb94:	40014000 	.word	0x40014000
 800bb98:	40014400 	.word	0x40014400
 800bb9c:	40014800 	.word	0x40014800

0800bba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a1b      	ldr	r3, [r3, #32]
 800bbb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bbe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	041b      	lsls	r3, r3, #16
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a19      	ldr	r2, [pc, #100]	@ (800bc5c <TIM_OC5_SetConfig+0xbc>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d013      	beq.n	800bc22 <TIM_OC5_SetConfig+0x82>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a18      	ldr	r2, [pc, #96]	@ (800bc60 <TIM_OC5_SetConfig+0xc0>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d00f      	beq.n	800bc22 <TIM_OC5_SetConfig+0x82>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a17      	ldr	r2, [pc, #92]	@ (800bc64 <TIM_OC5_SetConfig+0xc4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d00b      	beq.n	800bc22 <TIM_OC5_SetConfig+0x82>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a16      	ldr	r2, [pc, #88]	@ (800bc68 <TIM_OC5_SetConfig+0xc8>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d007      	beq.n	800bc22 <TIM_OC5_SetConfig+0x82>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a15      	ldr	r2, [pc, #84]	@ (800bc6c <TIM_OC5_SetConfig+0xcc>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d003      	beq.n	800bc22 <TIM_OC5_SetConfig+0x82>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a14      	ldr	r2, [pc, #80]	@ (800bc70 <TIM_OC5_SetConfig+0xd0>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d109      	bne.n	800bc36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	021b      	lsls	r3, r3, #8
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	621a      	str	r2, [r3, #32]
}
 800bc50:	bf00      	nop
 800bc52:	371c      	adds	r7, #28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	40012c00 	.word	0x40012c00
 800bc60:	40013400 	.word	0x40013400
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800
 800bc70:	40015000 	.word	0x40015000

0800bc74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	051b      	lsls	r3, r3, #20
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a1a      	ldr	r2, [pc, #104]	@ (800bd34 <TIM_OC6_SetConfig+0xc0>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d013      	beq.n	800bcf8 <TIM_OC6_SetConfig+0x84>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a19      	ldr	r2, [pc, #100]	@ (800bd38 <TIM_OC6_SetConfig+0xc4>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00f      	beq.n	800bcf8 <TIM_OC6_SetConfig+0x84>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a18      	ldr	r2, [pc, #96]	@ (800bd3c <TIM_OC6_SetConfig+0xc8>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00b      	beq.n	800bcf8 <TIM_OC6_SetConfig+0x84>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a17      	ldr	r2, [pc, #92]	@ (800bd40 <TIM_OC6_SetConfig+0xcc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d007      	beq.n	800bcf8 <TIM_OC6_SetConfig+0x84>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a16      	ldr	r2, [pc, #88]	@ (800bd44 <TIM_OC6_SetConfig+0xd0>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d003      	beq.n	800bcf8 <TIM_OC6_SetConfig+0x84>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a15      	ldr	r2, [pc, #84]	@ (800bd48 <TIM_OC6_SetConfig+0xd4>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d109      	bne.n	800bd0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	029b      	lsls	r3, r3, #10
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	621a      	str	r2, [r3, #32]
}
 800bd26:	bf00      	nop
 800bd28:	371c      	adds	r7, #28
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	40012c00 	.word	0x40012c00
 800bd38:	40013400 	.word	0x40013400
 800bd3c:	40014000 	.word	0x40014000
 800bd40:	40014400 	.word	0x40014400
 800bd44:	40014800 	.word	0x40014800
 800bd48:	40015000 	.word	0x40015000

0800bd4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	f023 0201 	bic.w	r2, r3, #1
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f023 030a 	bic.w	r3, r3, #10
 800bd88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	621a      	str	r2, [r3, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b087      	sub	sp, #28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6a1b      	ldr	r3, [r3, #32]
 800bdc0:	f023 0210 	bic.w	r2, r3, #16
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bdd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	031b      	lsls	r3, r3, #12
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bde6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	621a      	str	r2, [r3, #32]
}
 800bdfe:	bf00      	nop
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800be20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	f043 0307 	orr.w	r3, r3, #7
 800be30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	609a      	str	r2, [r3, #8]
}
 800be38:	bf00      	nop
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	021a      	lsls	r2, r3, #8
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	431a      	orrs	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	4313      	orrs	r3, r2
 800be70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	609a      	str	r2, [r3, #8]
}
 800be78:	bf00      	nop
 800be7a:	371c      	adds	r7, #28
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f003 031f 	and.w	r3, r3, #31
 800be96:	2201      	movs	r2, #1
 800be98:	fa02 f303 	lsl.w	r3, r2, r3
 800be9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6a1a      	ldr	r2, [r3, #32]
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	43db      	mvns	r3, r3
 800bea6:	401a      	ands	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6a1a      	ldr	r2, [r3, #32]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f003 031f 	and.w	r3, r3, #31
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	621a      	str	r2, [r3, #32]
}
 800bec2:	bf00      	nop
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e074      	b.n	800bfd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2202      	movs	r2, #2
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a34      	ldr	r2, [pc, #208]	@ (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d009      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a33      	ldr	r2, [pc, #204]	@ (800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d004      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a31      	ldr	r2, [pc, #196]	@ (800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d108      	bne.n	800bf38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bf3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a21      	ldr	r2, [pc, #132]	@ (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d022      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf68:	d01d      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a1f      	ldr	r2, [pc, #124]	@ (800bfec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d018      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a1d      	ldr	r2, [pc, #116]	@ (800bff0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d013      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a1c      	ldr	r2, [pc, #112]	@ (800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d00e      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a15      	ldr	r2, [pc, #84]	@ (800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d009      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a18      	ldr	r2, [pc, #96]	@ (800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d004      	beq.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a11      	ldr	r2, [pc, #68]	@ (800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d10c      	bne.n	800bfc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	40012c00 	.word	0x40012c00
 800bfe4:	40013400 	.word	0x40013400
 800bfe8:	40015000 	.word	0x40015000
 800bfec:	40000400 	.word	0x40000400
 800bff0:	40000800 	.word	0x40000800
 800bff4:	40000c00 	.word	0x40000c00
 800bff8:	40014000 	.word	0x40014000

0800bffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c010:	2b01      	cmp	r3, #1
 800c012:	d101      	bne.n	800c018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c014:	2302      	movs	r3, #2
 800c016:	e078      	b.n	800c10a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	4313      	orrs	r3, r2
 800c03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	4313      	orrs	r3, r2
 800c048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4313      	orrs	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	4313      	orrs	r3, r2
 800c072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c07e:	4313      	orrs	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	041b      	lsls	r3, r3, #16
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	69db      	ldr	r3, [r3, #28]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c118 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d009      	beq.n	800c0be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a1b      	ldr	r2, [pc, #108]	@ (800c11c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d004      	beq.n	800c0be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a19      	ldr	r2, [pc, #100]	@ (800c120 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d11c      	bne.n	800c0f8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c8:	051b      	lsls	r3, r3, #20
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	6a1b      	ldr	r3, [r3, #32]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	40012c00 	.word	0x40012c00
 800c11c:	40013400 	.word	0x40013400
 800c120:	40015000 	.word	0x40015000

0800c124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e042      	b.n	800c1bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7f7 f8f3 	bl	8003334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2224      	movs	r2, #36	@ 0x24
 800c152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f022 0201 	bic.w	r2, r2, #1
 800c164:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fbb2 	bl	800c8d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f8b3 	bl	800c2e0 <UART_SetConfig>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d101      	bne.n	800c184 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e01b      	b.n	800c1bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689a      	ldr	r2, [r3, #8]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f042 0201 	orr.w	r2, r2, #1
 800c1b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fc31 	bl	800ca1c <UART_CheckIdleState>
 800c1ba:	4603      	mov	r3, r0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08a      	sub	sp, #40	@ 0x28
 800c1c8:	af02      	add	r7, sp, #8
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1da:	2b20      	cmp	r3, #32
 800c1dc:	d17b      	bne.n	800c2d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <HAL_UART_Transmit+0x26>
 800c1e4:	88fb      	ldrh	r3, [r7, #6]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e074      	b.n	800c2d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2221      	movs	r2, #33	@ 0x21
 800c1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1fe:	f7f7 fe93 	bl	8003f28 <HAL_GetTick>
 800c202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	88fa      	ldrh	r2, [r7, #6]
 800c208:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	88fa      	ldrh	r2, [r7, #6]
 800c210:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c21c:	d108      	bne.n	800c230 <HAL_UART_Transmit+0x6c>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d104      	bne.n	800c230 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	61bb      	str	r3, [r7, #24]
 800c22e:	e003      	b.n	800c238 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c234:	2300      	movs	r3, #0
 800c236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c238:	e030      	b.n	800c29c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2200      	movs	r2, #0
 800c242:	2180      	movs	r1, #128	@ 0x80
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 fc93 	bl	800cb70 <UART_WaitOnFlagUntilTimeout>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2220      	movs	r2, #32
 800c254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c258:	2303      	movs	r3, #3
 800c25a:	e03d      	b.n	800c2d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10b      	bne.n	800c27a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c270:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	3302      	adds	r3, #2
 800c276:	61bb      	str	r3, [r7, #24]
 800c278:	e007      	b.n	800c28a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	781a      	ldrb	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	3301      	adds	r3, #1
 800c288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c290:	b29b      	uxth	r3, r3
 800c292:	3b01      	subs	r3, #1
 800c294:	b29a      	uxth	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1c8      	bne.n	800c23a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2140      	movs	r1, #64	@ 0x40
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f000 fc5c 	bl	800cb70 <UART_WaitOnFlagUntilTimeout>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e006      	b.n	800c2d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e000      	b.n	800c2d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c2d6:	2302      	movs	r3, #2
  }
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3720      	adds	r7, #32
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2e4:	b08c      	sub	sp, #48	@ 0x30
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	431a      	orrs	r2, r3
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	69db      	ldr	r3, [r3, #28]
 800c304:	4313      	orrs	r3, r2
 800c306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4baa      	ldr	r3, [pc, #680]	@ (800c5b8 <UART_SetConfig+0x2d8>)
 800c310:	4013      	ands	r3, r2
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	6812      	ldr	r2, [r2, #0]
 800c316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c318:	430b      	orrs	r3, r1
 800c31a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	430a      	orrs	r2, r1
 800c330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	699b      	ldr	r3, [r3, #24]
 800c336:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a9f      	ldr	r2, [pc, #636]	@ (800c5bc <UART_SetConfig+0x2dc>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d004      	beq.n	800c34c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c348:	4313      	orrs	r3, r2
 800c34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c356:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	6812      	ldr	r2, [r2, #0]
 800c35e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c360:	430b      	orrs	r3, r1
 800c362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36a:	f023 010f 	bic.w	r1, r3, #15
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	430a      	orrs	r2, r1
 800c378:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a90      	ldr	r2, [pc, #576]	@ (800c5c0 <UART_SetConfig+0x2e0>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d125      	bne.n	800c3d0 <UART_SetConfig+0xf0>
 800c384:	4b8f      	ldr	r3, [pc, #572]	@ (800c5c4 <UART_SetConfig+0x2e4>)
 800c386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d81a      	bhi.n	800c3c8 <UART_SetConfig+0xe8>
 800c392:	a201      	add	r2, pc, #4	@ (adr r2, 800c398 <UART_SetConfig+0xb8>)
 800c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3b9 	.word	0x0800c3b9
 800c3a0:	0800c3b1 	.word	0x0800c3b1
 800c3a4:	0800c3c1 	.word	0x0800c3c1
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ae:	e116      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3b6:	e112      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c3b8:	2304      	movs	r3, #4
 800c3ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3be:	e10e      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c3c0:	2308      	movs	r3, #8
 800c3c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3c6:	e10a      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c3c8:	2310      	movs	r3, #16
 800c3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3ce:	e106      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a7c      	ldr	r2, [pc, #496]	@ (800c5c8 <UART_SetConfig+0x2e8>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d138      	bne.n	800c44c <UART_SetConfig+0x16c>
 800c3da:	4b7a      	ldr	r3, [pc, #488]	@ (800c5c4 <UART_SetConfig+0x2e4>)
 800c3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e0:	f003 030c 	and.w	r3, r3, #12
 800c3e4:	2b0c      	cmp	r3, #12
 800c3e6:	d82d      	bhi.n	800c444 <UART_SetConfig+0x164>
 800c3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f0 <UART_SetConfig+0x110>)
 800c3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ee:	bf00      	nop
 800c3f0:	0800c425 	.word	0x0800c425
 800c3f4:	0800c445 	.word	0x0800c445
 800c3f8:	0800c445 	.word	0x0800c445
 800c3fc:	0800c445 	.word	0x0800c445
 800c400:	0800c435 	.word	0x0800c435
 800c404:	0800c445 	.word	0x0800c445
 800c408:	0800c445 	.word	0x0800c445
 800c40c:	0800c445 	.word	0x0800c445
 800c410:	0800c42d 	.word	0x0800c42d
 800c414:	0800c445 	.word	0x0800c445
 800c418:	0800c445 	.word	0x0800c445
 800c41c:	0800c445 	.word	0x0800c445
 800c420:	0800c43d 	.word	0x0800c43d
 800c424:	2300      	movs	r3, #0
 800c426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c42a:	e0d8      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c42c:	2302      	movs	r3, #2
 800c42e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c432:	e0d4      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c434:	2304      	movs	r3, #4
 800c436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c43a:	e0d0      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c43c:	2308      	movs	r3, #8
 800c43e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c442:	e0cc      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c444:	2310      	movs	r3, #16
 800c446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c44a:	e0c8      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a5e      	ldr	r2, [pc, #376]	@ (800c5cc <UART_SetConfig+0x2ec>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d125      	bne.n	800c4a2 <UART_SetConfig+0x1c2>
 800c456:	4b5b      	ldr	r3, [pc, #364]	@ (800c5c4 <UART_SetConfig+0x2e4>)
 800c458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c45c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c460:	2b30      	cmp	r3, #48	@ 0x30
 800c462:	d016      	beq.n	800c492 <UART_SetConfig+0x1b2>
 800c464:	2b30      	cmp	r3, #48	@ 0x30
 800c466:	d818      	bhi.n	800c49a <UART_SetConfig+0x1ba>
 800c468:	2b20      	cmp	r3, #32
 800c46a:	d00a      	beq.n	800c482 <UART_SetConfig+0x1a2>
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d814      	bhi.n	800c49a <UART_SetConfig+0x1ba>
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <UART_SetConfig+0x19a>
 800c474:	2b10      	cmp	r3, #16
 800c476:	d008      	beq.n	800c48a <UART_SetConfig+0x1aa>
 800c478:	e00f      	b.n	800c49a <UART_SetConfig+0x1ba>
 800c47a:	2300      	movs	r3, #0
 800c47c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c480:	e0ad      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c482:	2302      	movs	r3, #2
 800c484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c488:	e0a9      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c48a:	2304      	movs	r3, #4
 800c48c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c490:	e0a5      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c492:	2308      	movs	r3, #8
 800c494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c498:	e0a1      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c49a:	2310      	movs	r3, #16
 800c49c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4a0:	e09d      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a4a      	ldr	r2, [pc, #296]	@ (800c5d0 <UART_SetConfig+0x2f0>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d125      	bne.n	800c4f8 <UART_SetConfig+0x218>
 800c4ac:	4b45      	ldr	r3, [pc, #276]	@ (800c5c4 <UART_SetConfig+0x2e4>)
 800c4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c4b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4b8:	d016      	beq.n	800c4e8 <UART_SetConfig+0x208>
 800c4ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800c4bc:	d818      	bhi.n	800c4f0 <UART_SetConfig+0x210>
 800c4be:	2b80      	cmp	r3, #128	@ 0x80
 800c4c0:	d00a      	beq.n	800c4d8 <UART_SetConfig+0x1f8>
 800c4c2:	2b80      	cmp	r3, #128	@ 0x80
 800c4c4:	d814      	bhi.n	800c4f0 <UART_SetConfig+0x210>
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <UART_SetConfig+0x1f0>
 800c4ca:	2b40      	cmp	r3, #64	@ 0x40
 800c4cc:	d008      	beq.n	800c4e0 <UART_SetConfig+0x200>
 800c4ce:	e00f      	b.n	800c4f0 <UART_SetConfig+0x210>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4d6:	e082      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c4d8:	2302      	movs	r3, #2
 800c4da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4de:	e07e      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4e6:	e07a      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ee:	e076      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c4f0:	2310      	movs	r3, #16
 800c4f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4f6:	e072      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a35      	ldr	r2, [pc, #212]	@ (800c5d4 <UART_SetConfig+0x2f4>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d12a      	bne.n	800c558 <UART_SetConfig+0x278>
 800c502:	4b30      	ldr	r3, [pc, #192]	@ (800c5c4 <UART_SetConfig+0x2e4>)
 800c504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c50c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c510:	d01a      	beq.n	800c548 <UART_SetConfig+0x268>
 800c512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c516:	d81b      	bhi.n	800c550 <UART_SetConfig+0x270>
 800c518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c51c:	d00c      	beq.n	800c538 <UART_SetConfig+0x258>
 800c51e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c522:	d815      	bhi.n	800c550 <UART_SetConfig+0x270>
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <UART_SetConfig+0x250>
 800c528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c52c:	d008      	beq.n	800c540 <UART_SetConfig+0x260>
 800c52e:	e00f      	b.n	800c550 <UART_SetConfig+0x270>
 800c530:	2300      	movs	r3, #0
 800c532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c536:	e052      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c538:	2302      	movs	r3, #2
 800c53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c53e:	e04e      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c540:	2304      	movs	r3, #4
 800c542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c546:	e04a      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c548:	2308      	movs	r3, #8
 800c54a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c54e:	e046      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c550:	2310      	movs	r3, #16
 800c552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c556:	e042      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a17      	ldr	r2, [pc, #92]	@ (800c5bc <UART_SetConfig+0x2dc>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d13a      	bne.n	800c5d8 <UART_SetConfig+0x2f8>
 800c562:	4b18      	ldr	r3, [pc, #96]	@ (800c5c4 <UART_SetConfig+0x2e4>)
 800c564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c568:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c56c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c570:	d01a      	beq.n	800c5a8 <UART_SetConfig+0x2c8>
 800c572:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c576:	d81b      	bhi.n	800c5b0 <UART_SetConfig+0x2d0>
 800c578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c57c:	d00c      	beq.n	800c598 <UART_SetConfig+0x2b8>
 800c57e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c582:	d815      	bhi.n	800c5b0 <UART_SetConfig+0x2d0>
 800c584:	2b00      	cmp	r3, #0
 800c586:	d003      	beq.n	800c590 <UART_SetConfig+0x2b0>
 800c588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c58c:	d008      	beq.n	800c5a0 <UART_SetConfig+0x2c0>
 800c58e:	e00f      	b.n	800c5b0 <UART_SetConfig+0x2d0>
 800c590:	2300      	movs	r3, #0
 800c592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c596:	e022      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c598:	2302      	movs	r3, #2
 800c59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c59e:	e01e      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c5a0:	2304      	movs	r3, #4
 800c5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5a6:	e01a      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c5a8:	2308      	movs	r3, #8
 800c5aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5ae:	e016      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c5b0:	2310      	movs	r3, #16
 800c5b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5b6:	e012      	b.n	800c5de <UART_SetConfig+0x2fe>
 800c5b8:	cfff69f3 	.word	0xcfff69f3
 800c5bc:	40008000 	.word	0x40008000
 800c5c0:	40013800 	.word	0x40013800
 800c5c4:	40021000 	.word	0x40021000
 800c5c8:	40004400 	.word	0x40004400
 800c5cc:	40004800 	.word	0x40004800
 800c5d0:	40004c00 	.word	0x40004c00
 800c5d4:	40005000 	.word	0x40005000
 800c5d8:	2310      	movs	r3, #16
 800c5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4aae      	ldr	r2, [pc, #696]	@ (800c89c <UART_SetConfig+0x5bc>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	f040 8097 	bne.w	800c718 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5ee:	2b08      	cmp	r3, #8
 800c5f0:	d823      	bhi.n	800c63a <UART_SetConfig+0x35a>
 800c5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <UART_SetConfig+0x318>)
 800c5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f8:	0800c61d 	.word	0x0800c61d
 800c5fc:	0800c63b 	.word	0x0800c63b
 800c600:	0800c625 	.word	0x0800c625
 800c604:	0800c63b 	.word	0x0800c63b
 800c608:	0800c62b 	.word	0x0800c62b
 800c60c:	0800c63b 	.word	0x0800c63b
 800c610:	0800c63b 	.word	0x0800c63b
 800c614:	0800c63b 	.word	0x0800c63b
 800c618:	0800c633 	.word	0x0800c633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c61c:	f7fc ff74 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800c620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c622:	e010      	b.n	800c646 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c624:	4b9e      	ldr	r3, [pc, #632]	@ (800c8a0 <UART_SetConfig+0x5c0>)
 800c626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c628:	e00d      	b.n	800c646 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c62a:	f7fc feff 	bl	800942c <HAL_RCC_GetSysClockFreq>
 800c62e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c630:	e009      	b.n	800c646 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c638:	e005      	b.n	800c646 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c63a:	2300      	movs	r3, #0
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 8130 	beq.w	800c8ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c652:	4a94      	ldr	r2, [pc, #592]	@ (800c8a4 <UART_SetConfig+0x5c4>)
 800c654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c658:	461a      	mov	r2, r3
 800c65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c660:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	4613      	mov	r3, r2
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	4413      	add	r3, r2
 800c66c:	69ba      	ldr	r2, [r7, #24]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d305      	bcc.n	800c67e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d903      	bls.n	800c686 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c684:	e113      	b.n	800c8ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	2200      	movs	r2, #0
 800c68a:	60bb      	str	r3, [r7, #8]
 800c68c:	60fa      	str	r2, [r7, #12]
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c692:	4a84      	ldr	r2, [pc, #528]	@ (800c8a4 <UART_SetConfig+0x5c4>)
 800c694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c698:	b29b      	uxth	r3, r3
 800c69a:	2200      	movs	r2, #0
 800c69c:	603b      	str	r3, [r7, #0]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6a8:	f7f4 fb16 	bl	8000cd8 <__aeabi_uldivmod>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f04f 0200 	mov.w	r2, #0
 800c6b8:	f04f 0300 	mov.w	r3, #0
 800c6bc:	020b      	lsls	r3, r1, #8
 800c6be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6c2:	0202      	lsls	r2, r0, #8
 800c6c4:	6979      	ldr	r1, [r7, #20]
 800c6c6:	6849      	ldr	r1, [r1, #4]
 800c6c8:	0849      	lsrs	r1, r1, #1
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	eb12 0804 	adds.w	r8, r2, r4
 800c6d4:	eb43 0905 	adc.w	r9, r3, r5
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	469a      	mov	sl, r3
 800c6e0:	4693      	mov	fp, r2
 800c6e2:	4652      	mov	r2, sl
 800c6e4:	465b      	mov	r3, fp
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f4 faf5 	bl	8000cd8 <__aeabi_uldivmod>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6fc:	d308      	bcc.n	800c710 <UART_SetConfig+0x430>
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c704:	d204      	bcs.n	800c710 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6a3a      	ldr	r2, [r7, #32]
 800c70c:	60da      	str	r2, [r3, #12]
 800c70e:	e0ce      	b.n	800c8ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c716:	e0ca      	b.n	800c8ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c720:	d166      	bne.n	800c7f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c722:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c726:	2b08      	cmp	r3, #8
 800c728:	d827      	bhi.n	800c77a <UART_SetConfig+0x49a>
 800c72a:	a201      	add	r2, pc, #4	@ (adr r2, 800c730 <UART_SetConfig+0x450>)
 800c72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c730:	0800c755 	.word	0x0800c755
 800c734:	0800c75d 	.word	0x0800c75d
 800c738:	0800c765 	.word	0x0800c765
 800c73c:	0800c77b 	.word	0x0800c77b
 800c740:	0800c76b 	.word	0x0800c76b
 800c744:	0800c77b 	.word	0x0800c77b
 800c748:	0800c77b 	.word	0x0800c77b
 800c74c:	0800c77b 	.word	0x0800c77b
 800c750:	0800c773 	.word	0x0800c773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c754:	f7fc fed8 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800c758:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c75a:	e014      	b.n	800c786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c75c:	f7fc feea 	bl	8009534 <HAL_RCC_GetPCLK2Freq>
 800c760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c762:	e010      	b.n	800c786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c764:	4b4e      	ldr	r3, [pc, #312]	@ (800c8a0 <UART_SetConfig+0x5c0>)
 800c766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c768:	e00d      	b.n	800c786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c76a:	f7fc fe5f 	bl	800942c <HAL_RCC_GetSysClockFreq>
 800c76e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c770:	e009      	b.n	800c786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c778:	e005      	b.n	800c786 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c77a:	2300      	movs	r3, #0
 800c77c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 8090 	beq.w	800c8ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c792:	4a44      	ldr	r2, [pc, #272]	@ (800c8a4 <UART_SetConfig+0x5c4>)
 800c794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c798:	461a      	mov	r2, r3
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7a0:	005a      	lsls	r2, r3, #1
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	441a      	add	r2, r3
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	2b0f      	cmp	r3, #15
 800c7b8:	d916      	bls.n	800c7e8 <UART_SetConfig+0x508>
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7c0:	d212      	bcs.n	800c7e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	f023 030f 	bic.w	r3, r3, #15
 800c7ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7cc:	6a3b      	ldr	r3, [r7, #32]
 800c7ce:	085b      	lsrs	r3, r3, #1
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	8bfb      	ldrh	r3, [r7, #30]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	8bfa      	ldrh	r2, [r7, #30]
 800c7e4:	60da      	str	r2, [r3, #12]
 800c7e6:	e062      	b.n	800c8ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c7ee:	e05e      	b.n	800c8ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d828      	bhi.n	800c84a <UART_SetConfig+0x56a>
 800c7f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c800 <UART_SetConfig+0x520>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c825 	.word	0x0800c825
 800c804:	0800c82d 	.word	0x0800c82d
 800c808:	0800c835 	.word	0x0800c835
 800c80c:	0800c84b 	.word	0x0800c84b
 800c810:	0800c83b 	.word	0x0800c83b
 800c814:	0800c84b 	.word	0x0800c84b
 800c818:	0800c84b 	.word	0x0800c84b
 800c81c:	0800c84b 	.word	0x0800c84b
 800c820:	0800c843 	.word	0x0800c843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c824:	f7fc fe70 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800c828:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c82a:	e014      	b.n	800c856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c82c:	f7fc fe82 	bl	8009534 <HAL_RCC_GetPCLK2Freq>
 800c830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c832:	e010      	b.n	800c856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c834:	4b1a      	ldr	r3, [pc, #104]	@ (800c8a0 <UART_SetConfig+0x5c0>)
 800c836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c838:	e00d      	b.n	800c856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c83a:	f7fc fdf7 	bl	800942c <HAL_RCC_GetSysClockFreq>
 800c83e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c840:	e009      	b.n	800c856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c848:	e005      	b.n	800c856 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c84a:	2300      	movs	r3, #0
 800c84c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c854:	bf00      	nop
    }

    if (pclk != 0U)
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d028      	beq.n	800c8ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c860:	4a10      	ldr	r2, [pc, #64]	@ (800c8a4 <UART_SetConfig+0x5c4>)
 800c862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c866:	461a      	mov	r2, r3
 800c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	085b      	lsrs	r3, r3, #1
 800c874:	441a      	add	r2, r3
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	2b0f      	cmp	r3, #15
 800c884:	d910      	bls.n	800c8a8 <UART_SetConfig+0x5c8>
 800c886:	6a3b      	ldr	r3, [r7, #32]
 800c888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c88c:	d20c      	bcs.n	800c8a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	b29a      	uxth	r2, r3
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	60da      	str	r2, [r3, #12]
 800c898:	e009      	b.n	800c8ae <UART_SetConfig+0x5ce>
 800c89a:	bf00      	nop
 800c89c:	40008000 	.word	0x40008000
 800c8a0:	00f42400 	.word	0x00f42400
 800c8a4:	08022c6c 	.word	0x08022c6c
      }
      else
      {
        ret = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c8ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3730      	adds	r7, #48	@ 0x30
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c8d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e4:	f003 0308 	and.w	r3, r3, #8
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00a      	beq.n	800c902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	430a      	orrs	r2, r1
 800c922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c928:	f003 0302 	and.w	r3, r3, #2
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00a      	beq.n	800c946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00a      	beq.n	800c968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	430a      	orrs	r2, r1
 800c966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c96c:	f003 0310 	and.w	r3, r3, #16
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00a      	beq.n	800c98a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98e:	f003 0320 	and.w	r3, r3, #32
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01a      	beq.n	800c9ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9d6:	d10a      	bne.n	800c9ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	430a      	orrs	r2, r1
 800ca0e:	605a      	str	r2, [r3, #4]
  }
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b098      	sub	sp, #96	@ 0x60
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca2c:	f7f7 fa7c 	bl	8003f28 <HAL_GetTick>
 800ca30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b08      	cmp	r3, #8
 800ca3e:	d12f      	bne.n	800caa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f88e 	bl	800cb70 <UART_WaitOnFlagUntilTimeout>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d022      	beq.n	800caa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca80:	e841 2300 	strex	r3, r2, [r1]
 800ca84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e6      	bne.n	800ca5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e063      	b.n	800cb68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0304 	and.w	r3, r3, #4
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d149      	bne.n	800cb42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800caae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cab6:	2200      	movs	r2, #0
 800cab8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f857 	bl	800cb70 <UART_WaitOnFlagUntilTimeout>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d03c      	beq.n	800cb42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	623b      	str	r3, [r7, #32]
   return(result);
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cadc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cae6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800caec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800caf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e6      	bne.n	800cac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3308      	adds	r3, #8
 800cb00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	e853 3f00 	ldrex	r3, [r3]
 800cb08:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f023 0301 	bic.w	r3, r3, #1
 800cb10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3308      	adds	r3, #8
 800cb18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb1a:	61fa      	str	r2, [r7, #28]
 800cb1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	69b9      	ldr	r1, [r7, #24]
 800cb20:	69fa      	ldr	r2, [r7, #28]
 800cb22:	e841 2300 	strex	r3, r2, [r1]
 800cb26:	617b      	str	r3, [r7, #20]
   return(result);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e5      	bne.n	800cafa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e012      	b.n	800cb68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2220      	movs	r2, #32
 800cb46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3758      	adds	r7, #88	@ 0x58
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb80:	e04f      	b.n	800cc22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb88:	d04b      	beq.n	800cc22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb8a:	f7f7 f9cd 	bl	8003f28 <HAL_GetTick>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d302      	bcc.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e04e      	b.n	800cc42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d037      	beq.n	800cc22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b80      	cmp	r3, #128	@ 0x80
 800cbb6:	d034      	beq.n	800cc22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2b40      	cmp	r3, #64	@ 0x40
 800cbbc:	d031      	beq.n	800cc22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	f003 0308 	and.w	r3, r3, #8
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d110      	bne.n	800cbee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f838 	bl	800cc4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2208      	movs	r2, #8
 800cbde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e029      	b.n	800cc42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	69db      	ldr	r3, [r3, #28]
 800cbf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cbf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cbfc:	d111      	bne.n	800cc22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f000 f81e 	bl	800cc4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2220      	movs	r2, #32
 800cc12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	e00f      	b.n	800cc42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	69da      	ldr	r2, [r3, #28]
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	bf0c      	ite	eq
 800cc32:	2301      	moveq	r3, #1
 800cc34:	2300      	movne	r3, #0
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	461a      	mov	r2, r3
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d0a0      	beq.n	800cb82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b095      	sub	sp, #84	@ 0x54
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5a:	e853 3f00 	ldrex	r3, [r3]
 800cc5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc70:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc78:	e841 2300 	strex	r3, r2, [r1]
 800cc7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1e6      	bne.n	800cc52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3308      	adds	r3, #8
 800cc8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	e853 3f00 	ldrex	r3, [r3]
 800cc92:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc9a:	f023 0301 	bic.w	r3, r3, #1
 800cc9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3308      	adds	r3, #8
 800cca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb0:	e841 2300 	strex	r3, r2, [r1]
 800ccb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e3      	bne.n	800cc84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d118      	bne.n	800ccf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	f023 0310 	bic.w	r3, r3, #16
 800ccd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	461a      	mov	r2, r3
 800cce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	6979      	ldr	r1, [r7, #20]
 800cce8:	69ba      	ldr	r2, [r7, #24]
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	613b      	str	r3, [r7, #16]
   return(result);
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e6      	bne.n	800ccc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cd0a:	bf00      	nop
 800cd0c:	3754      	adds	r7, #84	@ 0x54
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b085      	sub	sp, #20
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d101      	bne.n	800cd2c <HAL_UARTEx_DisableFifoMode+0x16>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	e027      	b.n	800cd7c <HAL_UARTEx_DisableFifoMode+0x66>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2224      	movs	r2, #36	@ 0x24
 800cd38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f022 0201 	bic.w	r2, r2, #1
 800cd52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d101      	bne.n	800cda0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	e02d      	b.n	800cdfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2224      	movs	r2, #36	@ 0x24
 800cdac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0201 	bic.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f84f 	bl	800ce80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2220      	movs	r2, #32
 800cdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d101      	bne.n	800ce1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce18:	2302      	movs	r3, #2
 800ce1a:	e02d      	b.n	800ce78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2224      	movs	r2, #36	@ 0x24
 800ce28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 0201 	bic.w	r2, r2, #1
 800ce42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f811 	bl	800ce80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d108      	bne.n	800cea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cea0:	e031      	b.n	800cf06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cea2:	2308      	movs	r3, #8
 800cea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cea6:	2308      	movs	r3, #8
 800cea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	0e5b      	lsrs	r3, r3, #25
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0307 	and.w	r3, r3, #7
 800ceb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	0f5b      	lsrs	r3, r3, #29
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	f003 0307 	and.w	r3, r3, #7
 800cec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceca:	7bbb      	ldrb	r3, [r7, #14]
 800cecc:	7b3a      	ldrb	r2, [r7, #12]
 800cece:	4911      	ldr	r1, [pc, #68]	@ (800cf14 <UARTEx_SetNbDataToProcess+0x94>)
 800ced0:	5c8a      	ldrb	r2, [r1, r2]
 800ced2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ced6:	7b3a      	ldrb	r2, [r7, #12]
 800ced8:	490f      	ldr	r1, [pc, #60]	@ (800cf18 <UARTEx_SetNbDataToProcess+0x98>)
 800ceda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	7b7a      	ldrb	r2, [r7, #13]
 800ceec:	4909      	ldr	r1, [pc, #36]	@ (800cf14 <UARTEx_SetNbDataToProcess+0x94>)
 800ceee:	5c8a      	ldrb	r2, [r1, r2]
 800cef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cef4:	7b7a      	ldrb	r2, [r7, #13]
 800cef6:	4908      	ldr	r1, [pc, #32]	@ (800cf18 <UARTEx_SetNbDataToProcess+0x98>)
 800cef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cefa:	fb93 f3f2 	sdiv	r3, r3, r2
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf06:	bf00      	nop
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	08022c84 	.word	0x08022c84
 800cf18:	08022c8c 	.word	0x08022c8c

0800cf1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf2c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b085      	sub	sp, #20
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf52:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	43db      	mvns	r3, r3
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	4013      	ands	r3, r2
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	1d3b      	adds	r3, r7, #4
 800cf8a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b0a7      	sub	sp, #156	@ 0x9c
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800cfde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfe2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	78db      	ldrb	r3, [r3, #3]
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d81f      	bhi.n	800d02e <USB_ActivateEndpoint+0x72>
 800cfee:	a201      	add	r2, pc, #4	@ (adr r2, 800cff4 <USB_ActivateEndpoint+0x38>)
 800cff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff4:	0800d005 	.word	0x0800d005
 800cff8:	0800d021 	.word	0x0800d021
 800cffc:	0800d037 	.word	0x0800d037
 800d000:	0800d013 	.word	0x0800d013
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d004:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d00c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800d010:	e012      	b.n	800d038 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d012:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d016:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d01a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800d01e:	e00b      	b.n	800d038 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d020:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d028:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800d02c:	e004      	b.n	800d038 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800d034:	e000      	b.n	800d038 <USB_ActivateEndpoint+0x7c>
      break;
 800d036:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	441a      	add	r2, r3
 800d042:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d04a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d056:	b29b      	uxth	r3, r3
 800d058:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	b29b      	uxth	r3, r3
 800d068:	b21b      	sxth	r3, r3
 800d06a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d072:	b21a      	sxth	r2, r3
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	b21b      	sxth	r3, r3
 800d07a:	4313      	orrs	r3, r2
 800d07c:	b21b      	sxth	r3, r3
 800d07e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	441a      	add	r2, r3
 800d08c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800d090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	7b1b      	ldrb	r3, [r3, #12]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f040 8180 	bne.w	800d3ae <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f000 8084 	beq.w	800d1c0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	61bb      	str	r3, [r7, #24]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	61bb      	str	r3, [r7, #24]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	00da      	lsls	r2, r3, #3
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0da:	617b      	str	r3, [r7, #20]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	88db      	ldrh	r3, [r3, #6]
 800d0e0:	085b      	lsrs	r3, r3, #1
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	881b      	ldrh	r3, [r3, #0]
 800d0f8:	827b      	strh	r3, [r7, #18]
 800d0fa:	8a7b      	ldrh	r3, [r7, #18]
 800d0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d100:	2b00      	cmp	r3, #0
 800d102:	d01b      	beq.n	800d13c <USB_ActivateEndpoint+0x180>
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	b29b      	uxth	r3, r3
 800d112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d11a:	823b      	strh	r3, [r7, #16]
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	441a      	add	r2, r3
 800d126:	8a3b      	ldrh	r3, [r7, #16]
 800d128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d12c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d134:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d138:	b29b      	uxth	r3, r3
 800d13a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	78db      	ldrb	r3, [r3, #3]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d020      	beq.n	800d186 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	b29b      	uxth	r3, r3
 800d152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d15a:	81bb      	strh	r3, [r7, #12]
 800d15c:	89bb      	ldrh	r3, [r7, #12]
 800d15e:	f083 0320 	eor.w	r3, r3, #32
 800d162:	81bb      	strh	r3, [r7, #12]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	441a      	add	r2, r3
 800d16e:	89bb      	ldrh	r3, [r7, #12]
 800d170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d180:	b29b      	uxth	r3, r3
 800d182:	8013      	strh	r3, [r2, #0]
 800d184:	e3f9      	b.n	800d97a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	b29b      	uxth	r3, r3
 800d194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d19c:	81fb      	strh	r3, [r7, #14]
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	441a      	add	r2, r3
 800d1a8:	89fb      	ldrh	r3, [r7, #14]
 800d1aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	8013      	strh	r3, [r2, #0]
 800d1be:	e3dc      	b.n	800d97a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	4413      	add	r3, r2
 800d1d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	00da      	lsls	r2, r3, #3
 800d1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1dc:	4413      	add	r3, r2
 800d1de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	88db      	ldrh	r3, [r3, #6]
 800d1e8:	085b      	lsrs	r3, r3, #1
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	005b      	lsls	r3, r3, #1
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	461a      	mov	r2, r3
 800d202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d204:	4413      	add	r3, r2
 800d206:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	00da      	lsls	r2, r3, #3
 800d20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d210:	4413      	add	r3, r2
 800d212:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d216:	627b      	str	r3, [r7, #36]	@ 0x24
 800d218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d222:	b29a      	uxth	r2, r3
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	801a      	strh	r2, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10a      	bne.n	800d246 <USB_ActivateEndpoint+0x28a>
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	881b      	ldrh	r3, [r3, #0]
 800d234:	b29b      	uxth	r3, r3
 800d236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d23a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d23e:	b29a      	uxth	r2, r3
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d242:	801a      	strh	r2, [r3, #0]
 800d244:	e041      	b.n	800d2ca <USB_ActivateEndpoint+0x30e>
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d24c:	d81c      	bhi.n	800d288 <USB_ActivateEndpoint+0x2cc>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	085b      	lsrs	r3, r3, #1
 800d254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	f003 0301 	and.w	r3, r3, #1
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <USB_ActivateEndpoint+0x2b2>
 800d264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d268:	3301      	adds	r3, #1
 800d26a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	b29a      	uxth	r2, r3
 800d274:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d278:	b29b      	uxth	r3, r3
 800d27a:	029b      	lsls	r3, r3, #10
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	4313      	orrs	r3, r2
 800d280:	b29a      	uxth	r2, r3
 800d282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d284:	801a      	strh	r2, [r3, #0]
 800d286:	e020      	b.n	800d2ca <USB_ActivateEndpoint+0x30e>
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	095b      	lsrs	r3, r3, #5
 800d28e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	f003 031f 	and.w	r3, r3, #31
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d104      	bne.n	800d2a8 <USB_ActivateEndpoint+0x2ec>
 800d29e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	029b      	lsls	r3, r3, #10
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d2d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d01b      	beq.n	800d31a <USB_ActivateEndpoint+0x35e>
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2f8:	843b      	strh	r3, [r7, #32]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	441a      	add	r2, r3
 800d304:	8c3b      	ldrh	r3, [r7, #32]
 800d306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d30a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d30e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d316:	b29b      	uxth	r3, r3
 800d318:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d124      	bne.n	800d36c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d338:	83bb      	strh	r3, [r7, #28]
 800d33a:	8bbb      	ldrh	r3, [r7, #28]
 800d33c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d340:	83bb      	strh	r3, [r7, #28]
 800d342:	8bbb      	ldrh	r3, [r7, #28]
 800d344:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d348:	83bb      	strh	r3, [r7, #28]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	441a      	add	r2, r3
 800d354:	8bbb      	ldrh	r3, [r7, #28]
 800d356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d35a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d35e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d366:	b29b      	uxth	r3, r3
 800d368:	8013      	strh	r3, [r2, #0]
 800d36a:	e306      	b.n	800d97a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	b29b      	uxth	r3, r3
 800d37a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d37e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d382:	83fb      	strh	r3, [r7, #30]
 800d384:	8bfb      	ldrh	r3, [r7, #30]
 800d386:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d38a:	83fb      	strh	r3, [r7, #30]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	441a      	add	r2, r3
 800d396:	8bfb      	ldrh	r3, [r7, #30]
 800d398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d39c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	8013      	strh	r3, [r2, #0]
 800d3ac:	e2e5      	b.n	800d97a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	78db      	ldrb	r3, [r3, #3]
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d11e      	bne.n	800d3f4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d3c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3cc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	441a      	add	r2, r3
 800d3da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800d3de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	8013      	strh	r3, [r2, #0]
 800d3f2:	e01d      	b.n	800d430 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	b29b      	uxth	r3, r3
 800d402:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d40a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	441a      	add	r2, r3
 800d418:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800d41c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	461a      	mov	r2, r3
 800d43e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d440:	4413      	add	r3, r2
 800d442:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	00da      	lsls	r2, r3, #3
 800d44a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d44c:	4413      	add	r3, r2
 800d44e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d452:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	891b      	ldrh	r3, [r3, #8]
 800d458:	085b      	lsrs	r3, r3, #1
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	b29a      	uxth	r2, r3
 800d460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d462:	801a      	strh	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	677b      	str	r3, [r7, #116]	@ 0x74
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d46e:	b29b      	uxth	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d474:	4413      	add	r3, r2
 800d476:	677b      	str	r3, [r7, #116]	@ 0x74
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	00da      	lsls	r2, r3, #3
 800d47e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d480:	4413      	add	r3, r2
 800d482:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d486:	673b      	str	r3, [r7, #112]	@ 0x70
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	b29b      	uxth	r3, r3
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	b29a      	uxth	r2, r3
 800d494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d496:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	785b      	ldrb	r3, [r3, #1]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 81af 	bne.w	800d800 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	4413      	add	r3, r2
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d4b2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800d4b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d01d      	beq.n	800d4fa <USB_ActivateEndpoint+0x53e>
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4413      	add	r3, r2
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4d4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	441a      	add	r2, r3
 800d4e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800d4e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800d50a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800d50e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d512:	2b00      	cmp	r3, #0
 800d514:	d01d      	beq.n	800d552 <USB_ActivateEndpoint+0x596>
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4413      	add	r3, r2
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	b29b      	uxth	r3, r3
 800d524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d52c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	441a      	add	r2, r3
 800d53a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d53e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d54a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d54e:	b29b      	uxth	r3, r3
 800d550:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	785b      	ldrb	r3, [r3, #1]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d16b      	bne.n	800d632 <USB_ActivateEndpoint+0x676>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d564:	b29b      	uxth	r3, r3
 800d566:	461a      	mov	r2, r3
 800d568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d56a:	4413      	add	r3, r2
 800d56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	00da      	lsls	r2, r3, #3
 800d574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d576:	4413      	add	r3, r2
 800d578:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d57c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d57e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	b29b      	uxth	r3, r3
 800d584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d588:	b29a      	uxth	r2, r3
 800d58a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d58c:	801a      	strh	r2, [r3, #0]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10a      	bne.n	800d5ac <USB_ActivateEndpoint+0x5f0>
 800d596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5a8:	801a      	strh	r2, [r3, #0]
 800d5aa:	e05d      	b.n	800d668 <USB_ActivateEndpoint+0x6ac>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5b2:	d81c      	bhi.n	800d5ee <USB_ActivateEndpoint+0x632>
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	085b      	lsrs	r3, r3, #1
 800d5ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d004      	beq.n	800d5d4 <USB_ActivateEndpoint+0x618>
 800d5ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	029b      	lsls	r3, r3, #10
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5ea:	801a      	strh	r2, [r3, #0]
 800d5ec:	e03c      	b.n	800d668 <USB_ActivateEndpoint+0x6ac>
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	095b      	lsrs	r3, r3, #5
 800d5f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	f003 031f 	and.w	r3, r3, #31
 800d600:	2b00      	cmp	r3, #0
 800d602:	d104      	bne.n	800d60e <USB_ActivateEndpoint+0x652>
 800d604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d608:	3b01      	subs	r3, #1
 800d60a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d60e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	b29a      	uxth	r2, r3
 800d614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d618:	b29b      	uxth	r3, r3
 800d61a:	029b      	lsls	r3, r3, #10
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	4313      	orrs	r3, r2
 800d620:	b29b      	uxth	r3, r3
 800d622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d62e:	801a      	strh	r2, [r3, #0]
 800d630:	e01a      	b.n	800d668 <USB_ActivateEndpoint+0x6ac>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	785b      	ldrb	r3, [r3, #1]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d116      	bne.n	800d668 <USB_ActivateEndpoint+0x6ac>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d644:	b29b      	uxth	r3, r3
 800d646:	461a      	mov	r2, r3
 800d648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d64a:	4413      	add	r3, r2
 800d64c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	00da      	lsls	r2, r3, #3
 800d654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d656:	4413      	add	r3, r2
 800d658:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d65c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	b29a      	uxth	r2, r3
 800d664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d666:	801a      	strh	r2, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	785b      	ldrb	r3, [r3, #1]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d16b      	bne.n	800d74c <USB_ActivateEndpoint+0x790>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d67e:	b29b      	uxth	r3, r3
 800d680:	461a      	mov	r2, r3
 800d682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d684:	4413      	add	r3, r2
 800d686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	00da      	lsls	r2, r3, #3
 800d68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d690:	4413      	add	r3, r2
 800d692:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d696:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	801a      	strh	r2, [r3, #0]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <USB_ActivateEndpoint+0x70a>
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c2:	801a      	strh	r2, [r3, #0]
 800d6c4:	e05b      	b.n	800d77e <USB_ActivateEndpoint+0x7c2>
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6cc:	d81c      	bhi.n	800d708 <USB_ActivateEndpoint+0x74c>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	085b      	lsrs	r3, r3, #1
 800d6d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d004      	beq.n	800d6ee <USB_ActivateEndpoint+0x732>
 800d6e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	029b      	lsls	r3, r3, #10
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	4313      	orrs	r3, r2
 800d700:	b29a      	uxth	r2, r3
 800d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d704:	801a      	strh	r2, [r3, #0]
 800d706:	e03a      	b.n	800d77e <USB_ActivateEndpoint+0x7c2>
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	095b      	lsrs	r3, r3, #5
 800d70e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	f003 031f 	and.w	r3, r3, #31
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d104      	bne.n	800d728 <USB_ActivateEndpoint+0x76c>
 800d71e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d722:	3b01      	subs	r3, #1
 800d724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d732:	b29b      	uxth	r3, r3
 800d734:	029b      	lsls	r3, r3, #10
 800d736:	b29b      	uxth	r3, r3
 800d738:	4313      	orrs	r3, r2
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d744:	b29a      	uxth	r2, r3
 800d746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d748:	801a      	strh	r2, [r3, #0]
 800d74a:	e018      	b.n	800d77e <USB_ActivateEndpoint+0x7c2>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d114      	bne.n	800d77e <USB_ActivateEndpoint+0x7c2>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	461a      	mov	r2, r3
 800d75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d760:	4413      	add	r3, r2
 800d762:	647b      	str	r3, [r7, #68]	@ 0x44
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	00da      	lsls	r2, r3, #3
 800d76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d76c:	4413      	add	r3, r2
 800d76e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d772:	643b      	str	r3, [r7, #64]	@ 0x40
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	b29a      	uxth	r2, r3
 800d77a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d77c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d794:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d798:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d79c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d79e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d7a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	441a      	add	r2, r3
 800d7b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	441a      	add	r2, r3
 800d7e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d7ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	8013      	strh	r3, [r2, #0]
 800d7fe:	e0bc      	b.n	800d97a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d810:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d01d      	beq.n	800d858 <USB_ActivateEndpoint+0x89c>
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4413      	add	r3, r2
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d832:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	441a      	add	r2, r3
 800d840:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d84c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d854:	b29b      	uxth	r3, r3
 800d856:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800d868:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800d86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01d      	beq.n	800d8b0 <USB_ActivateEndpoint+0x8f4>
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	b29b      	uxth	r3, r3
 800d882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d88a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	441a      	add	r2, r3
 800d898:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d89c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	78db      	ldrb	r3, [r3, #3]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d024      	beq.n	800d902 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	881b      	ldrh	r3, [r3, #0]
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8ce:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d8d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8d6:	f083 0320 	eor.w	r3, r3, #32
 800d8da:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	441a      	add	r2, r3
 800d8e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	8013      	strh	r3, [r2, #0]
 800d900:	e01d      	b.n	800d93e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	b29b      	uxth	r3, r3
 800d910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d918:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	441a      	add	r2, r3
 800d926:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d92a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d92e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d954:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	441a      	add	r2, r3
 800d962:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d96a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d96e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d976:	b29b      	uxth	r3, r3
 800d978:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d97a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800d97e:	4618      	mov	r0, r3
 800d980:	379c      	adds	r7, #156	@ 0x9c
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop

0800d98c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b08d      	sub	sp, #52	@ 0x34
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	7b1b      	ldrb	r3, [r3, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f040 808e 	bne.w	800dabc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	785b      	ldrb	r3, [r3, #1]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d044      	beq.n	800da32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4413      	add	r3, r2
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	81bb      	strh	r3, [r7, #12]
 800d9b6:	89bb      	ldrh	r3, [r7, #12]
 800d9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d01b      	beq.n	800d9f8 <USB_DeactivateEndpoint+0x6c>
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	881b      	ldrh	r3, [r3, #0]
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9d6:	817b      	strh	r3, [r7, #10]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	441a      	add	r2, r3
 800d9e2:	897b      	ldrh	r3, [r7, #10]
 800d9e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4413      	add	r3, r2
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	b29b      	uxth	r3, r3
 800da06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da0e:	813b      	strh	r3, [r7, #8]
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	441a      	add	r2, r3
 800da1a:	893b      	ldrh	r3, [r7, #8]
 800da1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	8013      	strh	r3, [r2, #0]
 800da30:	e192      	b.n	800dd58 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	881b      	ldrh	r3, [r3, #0]
 800da3e:	827b      	strh	r3, [r7, #18]
 800da40:	8a7b      	ldrh	r3, [r7, #18]
 800da42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d01b      	beq.n	800da82 <USB_DeactivateEndpoint+0xf6>
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4413      	add	r3, r2
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	b29b      	uxth	r3, r3
 800da58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da60:	823b      	strh	r3, [r7, #16]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	441a      	add	r2, r3
 800da6c:	8a3b      	ldrh	r3, [r7, #16]
 800da6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da7e:	b29b      	uxth	r3, r3
 800da80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	4413      	add	r3, r2
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da98:	81fb      	strh	r3, [r7, #14]
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	441a      	add	r2, r3
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800daaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	8013      	strh	r3, [r2, #0]
 800daba:	e14d      	b.n	800dd58 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f040 80a5 	bne.w	800dc10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	843b      	strh	r3, [r7, #32]
 800dad4:	8c3b      	ldrh	r3, [r7, #32]
 800dad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d01b      	beq.n	800db16 <USB_DeactivateEndpoint+0x18a>
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
 800daec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800daf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daf4:	83fb      	strh	r3, [r7, #30]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	441a      	add	r2, r3
 800db00:	8bfb      	ldrh	r3, [r7, #30]
 800db02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800db0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db12:	b29b      	uxth	r3, r3
 800db14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	83bb      	strh	r3, [r7, #28]
 800db24:	8bbb      	ldrh	r3, [r7, #28]
 800db26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d01b      	beq.n	800db66 <USB_DeactivateEndpoint+0x1da>
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db44:	837b      	strh	r3, [r7, #26]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	441a      	add	r2, r3
 800db50:	8b7b      	ldrh	r3, [r7, #26]
 800db52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db62:	b29b      	uxth	r3, r3
 800db64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	4413      	add	r3, r2
 800db70:	881b      	ldrh	r3, [r3, #0]
 800db72:	b29b      	uxth	r3, r3
 800db74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db7c:	833b      	strh	r3, [r7, #24]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	441a      	add	r2, r3
 800db88:	8b3b      	ldrh	r3, [r7, #24]
 800db8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4413      	add	r3, r2
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dbb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbb4:	82fb      	strh	r3, [r7, #22]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	441a      	add	r2, r3
 800dbc0:	8afb      	ldrh	r3, [r7, #22]
 800dbc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbec:	82bb      	strh	r3, [r7, #20]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	441a      	add	r2, r3
 800dbf8:	8abb      	ldrh	r3, [r7, #20]
 800dbfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	8013      	strh	r3, [r2, #0]
 800dc0e:	e0a3      	b.n	800dd58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800dc1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dc20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01b      	beq.n	800dc60 <USB_DeactivateEndpoint+0x2d4>
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	441a      	add	r2, r3
 800dc4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800dc4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4413      	add	r3, r2
 800dc6a:	881b      	ldrh	r3, [r3, #0]
 800dc6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800dc6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dc70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01b      	beq.n	800dcb0 <USB_DeactivateEndpoint+0x324>
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	441a      	add	r2, r3
 800dc9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dc9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dca8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	441a      	add	r2, r3
 800dcd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dcd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	441a      	add	r2, r3
 800dd0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd36:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	441a      	add	r2, r3
 800dd42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3734      	adds	r7, #52	@ 0x34
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b0ac      	sub	sp, #176	@ 0xb0
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	f040 84ca 	bne.w	800e70e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	699a      	ldr	r2, [r3, #24]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d904      	bls.n	800dd90 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dd8e:	e003      	b.n	800dd98 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	7b1b      	ldrb	r3, [r3, #12]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d122      	bne.n	800dde6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	6959      	ldr	r1, [r3, #20]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	88da      	ldrh	r2, [r3, #6]
 800dda8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 febd 	bl	800eb2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	00da      	lsls	r2, r3, #3
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	801a      	strh	r2, [r3, #0]
 800dde2:	f000 bc6f 	b.w	800e6c4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	78db      	ldrb	r3, [r3, #3]
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	f040 831e 	bne.w	800e42c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	6a1a      	ldr	r2, [r3, #32]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f240 82cf 	bls.w	800e39c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de14:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	441a      	add	r2, r3
 800de22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de2e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800de32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de36:	b29b      	uxth	r3, r3
 800de38:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	6a1a      	ldr	r2, [r3, #32]
 800de3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de42:	1ad2      	subs	r2, r2, r3
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	881b      	ldrh	r3, [r3, #0]
 800de54:	b29b      	uxth	r3, r3
 800de56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 814f 	beq.w	800e0fe <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	633b      	str	r3, [r7, #48]	@ 0x30
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	785b      	ldrb	r3, [r3, #1]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d16b      	bne.n	800df44 <USB_EPStartXfer+0x1de>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de76:	b29b      	uxth	r3, r3
 800de78:	461a      	mov	r2, r3
 800de7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de7c:	4413      	add	r3, r2
 800de7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	00da      	lsls	r2, r3, #3
 800de86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de88:	4413      	add	r3, r2
 800de8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de92:	881b      	ldrh	r3, [r3, #0]
 800de94:	b29b      	uxth	r3, r3
 800de96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9e:	801a      	strh	r2, [r3, #0]
 800dea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d10a      	bne.n	800debe <USB_EPStartXfer+0x158>
 800dea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	b29b      	uxth	r3, r3
 800deae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800deb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deba:	801a      	strh	r2, [r3, #0]
 800debc:	e05b      	b.n	800df76 <USB_EPStartXfer+0x210>
 800debe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dec2:	2b3e      	cmp	r3, #62	@ 0x3e
 800dec4:	d81c      	bhi.n	800df00 <USB_EPStartXfer+0x19a>
 800dec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800deca:	085b      	lsrs	r3, r3, #1
 800decc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ded0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d004      	beq.n	800dee6 <USB_EPStartXfer+0x180>
 800dedc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dee0:	3301      	adds	r3, #1
 800dee2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	b29a      	uxth	r2, r3
 800deec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800def0:	b29b      	uxth	r3, r3
 800def2:	029b      	lsls	r3, r3, #10
 800def4:	b29b      	uxth	r3, r3
 800def6:	4313      	orrs	r3, r2
 800def8:	b29a      	uxth	r2, r3
 800defa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defc:	801a      	strh	r2, [r3, #0]
 800defe:	e03a      	b.n	800df76 <USB_EPStartXfer+0x210>
 800df00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df04:	095b      	lsrs	r3, r3, #5
 800df06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df0e:	f003 031f 	and.w	r3, r3, #31
 800df12:	2b00      	cmp	r3, #0
 800df14:	d104      	bne.n	800df20 <USB_EPStartXfer+0x1ba>
 800df16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df1a:	3b01      	subs	r3, #1
 800df1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	b29a      	uxth	r2, r3
 800df26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	029b      	lsls	r3, r3, #10
 800df2e:	b29b      	uxth	r3, r3
 800df30:	4313      	orrs	r3, r2
 800df32:	b29b      	uxth	r3, r3
 800df34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df40:	801a      	strh	r2, [r3, #0]
 800df42:	e018      	b.n	800df76 <USB_EPStartXfer+0x210>
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	785b      	ldrb	r3, [r3, #1]
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d114      	bne.n	800df76 <USB_EPStartXfer+0x210>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df52:	b29b      	uxth	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df58:	4413      	add	r3, r2
 800df5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	00da      	lsls	r2, r3, #3
 800df62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df64:	4413      	add	r3, r2
 800df66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df70:	b29a      	uxth	r2, r3
 800df72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	895b      	ldrh	r3, [r3, #10]
 800df7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	6959      	ldr	r1, [r3, #20]
 800df82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df86:	b29b      	uxth	r3, r3
 800df88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fdce 	bl	800eb2e <USB_WritePMA>
            ep->xfer_buff += len;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	695a      	ldr	r2, [r3, #20]
 800df96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df9a:	441a      	add	r2, r3
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	6a1a      	ldr	r2, [r3, #32]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d907      	bls.n	800dfbc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	6a1a      	ldr	r2, [r3, #32]
 800dfb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfb4:	1ad2      	subs	r2, r2, r3
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	621a      	str	r2, [r3, #32]
 800dfba:	e006      	b.n	800dfca <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	6a1b      	ldr	r3, [r3, #32]
 800dfc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	785b      	ldrb	r3, [r3, #1]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d16b      	bne.n	800e0aa <USB_EPStartXfer+0x344>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	61bb      	str	r3, [r7, #24]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	461a      	mov	r2, r3
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	61bb      	str	r3, [r7, #24]
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	00da      	lsls	r2, r3, #3
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	4413      	add	r3, r2
 800dff0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e000:	b29a      	uxth	r2, r3
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	801a      	strh	r2, [r3, #0]
 800e006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <USB_EPStartXfer+0x2be>
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	b29b      	uxth	r3, r3
 800e014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	801a      	strh	r2, [r3, #0]
 800e022:	e05d      	b.n	800e0e0 <USB_EPStartXfer+0x37a>
 800e024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e028:	2b3e      	cmp	r3, #62	@ 0x3e
 800e02a:	d81c      	bhi.n	800e066 <USB_EPStartXfer+0x300>
 800e02c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e030:	085b      	lsrs	r3, r3, #1
 800e032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d004      	beq.n	800e04c <USB_EPStartXfer+0x2e6>
 800e042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e046:	3301      	adds	r3, #1
 800e048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	b29a      	uxth	r2, r3
 800e052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e056:	b29b      	uxth	r3, r3
 800e058:	029b      	lsls	r3, r3, #10
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	4313      	orrs	r3, r2
 800e05e:	b29a      	uxth	r2, r3
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	801a      	strh	r2, [r3, #0]
 800e064:	e03c      	b.n	800e0e0 <USB_EPStartXfer+0x37a>
 800e066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e06a:	095b      	lsrs	r3, r3, #5
 800e06c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e074:	f003 031f 	and.w	r3, r3, #31
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d104      	bne.n	800e086 <USB_EPStartXfer+0x320>
 800e07c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e080:	3b01      	subs	r3, #1
 800e082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e090:	b29b      	uxth	r3, r3
 800e092:	029b      	lsls	r3, r3, #10
 800e094:	b29b      	uxth	r3, r3
 800e096:	4313      	orrs	r3, r2
 800e098:	b29b      	uxth	r3, r3
 800e09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	801a      	strh	r2, [r3, #0]
 800e0a8:	e01a      	b.n	800e0e0 <USB_EPStartXfer+0x37a>
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	785b      	ldrb	r3, [r3, #1]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d116      	bne.n	800e0e0 <USB_EPStartXfer+0x37a>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	623b      	str	r3, [r7, #32]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	461a      	mov	r2, r3
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	623b      	str	r3, [r7, #32]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	00da      	lsls	r2, r3, #3
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0d4:	61fb      	str	r3, [r7, #28]
 800e0d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	891b      	ldrh	r3, [r3, #8]
 800e0e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	6959      	ldr	r1, [r3, #20]
 800e0ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fd19 	bl	800eb2e <USB_WritePMA>
 800e0fc:	e2e2      	b.n	800e6c4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	785b      	ldrb	r3, [r3, #1]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d16b      	bne.n	800e1de <USB_EPStartXfer+0x478>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e110:	b29b      	uxth	r3, r3
 800e112:	461a      	mov	r2, r3
 800e114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e116:	4413      	add	r3, r2
 800e118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	00da      	lsls	r2, r3, #3
 800e120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e122:	4413      	add	r3, r2
 800e124:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e128:	647b      	str	r3, [r7, #68]	@ 0x44
 800e12a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e134:	b29a      	uxth	r2, r3
 800e136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e138:	801a      	strh	r2, [r3, #0]
 800e13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10a      	bne.n	800e158 <USB_EPStartXfer+0x3f2>
 800e142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	b29b      	uxth	r3, r3
 800e148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e150:	b29a      	uxth	r2, r3
 800e152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e154:	801a      	strh	r2, [r3, #0]
 800e156:	e05d      	b.n	800e214 <USB_EPStartXfer+0x4ae>
 800e158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e15c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e15e:	d81c      	bhi.n	800e19a <USB_EPStartXfer+0x434>
 800e160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e164:	085b      	lsrs	r3, r3, #1
 800e166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e16e:	f003 0301 	and.w	r3, r3, #1
 800e172:	2b00      	cmp	r3, #0
 800e174:	d004      	beq.n	800e180 <USB_EPStartXfer+0x41a>
 800e176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e17a:	3301      	adds	r3, #1
 800e17c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	b29a      	uxth	r2, r3
 800e186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	029b      	lsls	r3, r3, #10
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4313      	orrs	r3, r2
 800e192:	b29a      	uxth	r2, r3
 800e194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e196:	801a      	strh	r2, [r3, #0]
 800e198:	e03c      	b.n	800e214 <USB_EPStartXfer+0x4ae>
 800e19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e19e:	095b      	lsrs	r3, r3, #5
 800e1a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1a8:	f003 031f 	and.w	r3, r3, #31
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d104      	bne.n	800e1ba <USB_EPStartXfer+0x454>
 800e1b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	029b      	lsls	r3, r3, #10
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1da:	801a      	strh	r2, [r3, #0]
 800e1dc:	e01a      	b.n	800e214 <USB_EPStartXfer+0x4ae>
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	785b      	ldrb	r3, [r3, #1]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d116      	bne.n	800e214 <USB_EPStartXfer+0x4ae>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1f6:	4413      	add	r3, r2
 800e1f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	00da      	lsls	r2, r3, #3
 800e200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e202:	4413      	add	r3, r2
 800e204:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e20a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e20e:	b29a      	uxth	r2, r3
 800e210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e212:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	891b      	ldrh	r3, [r3, #8]
 800e218:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	6959      	ldr	r1, [r3, #20]
 800e220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e224:	b29b      	uxth	r3, r3
 800e226:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fc7f 	bl	800eb2e <USB_WritePMA>
            ep->xfer_buff += len;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	695a      	ldr	r2, [r3, #20]
 800e234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e238:	441a      	add	r2, r3
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	6a1a      	ldr	r2, [r3, #32]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	429a      	cmp	r2, r3
 800e248:	d907      	bls.n	800e25a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	6a1a      	ldr	r2, [r3, #32]
 800e24e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e252:	1ad2      	subs	r2, r2, r3
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	621a      	str	r2, [r3, #32]
 800e258:	e006      	b.n	800e268 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2200      	movs	r2, #0
 800e266:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	785b      	ldrb	r3, [r3, #1]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d16b      	bne.n	800e34c <USB_EPStartXfer+0x5e6>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e27e:	b29b      	uxth	r3, r3
 800e280:	461a      	mov	r2, r3
 800e282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e284:	4413      	add	r3, r2
 800e286:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	00da      	lsls	r2, r3, #3
 800e28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e290:	4413      	add	r3, r2
 800e292:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e296:	637b      	str	r3, [r7, #52]	@ 0x34
 800e298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e29a:	881b      	ldrh	r3, [r3, #0]
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a6:	801a      	strh	r2, [r3, #0]
 800e2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10a      	bne.n	800e2c6 <USB_EPStartXfer+0x560>
 800e2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2c2:	801a      	strh	r2, [r3, #0]
 800e2c4:	e05b      	b.n	800e37e <USB_EPStartXfer+0x618>
 800e2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2cc:	d81c      	bhi.n	800e308 <USB_EPStartXfer+0x5a2>
 800e2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2d2:	085b      	lsrs	r3, r3, #1
 800e2d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d004      	beq.n	800e2ee <USB_EPStartXfer+0x588>
 800e2e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f0:	881b      	ldrh	r3, [r3, #0]
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	029b      	lsls	r3, r3, #10
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	4313      	orrs	r3, r2
 800e300:	b29a      	uxth	r2, r3
 800e302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e304:	801a      	strh	r2, [r3, #0]
 800e306:	e03a      	b.n	800e37e <USB_EPStartXfer+0x618>
 800e308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e30c:	095b      	lsrs	r3, r3, #5
 800e30e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e316:	f003 031f 	and.w	r3, r3, #31
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d104      	bne.n	800e328 <USB_EPStartXfer+0x5c2>
 800e31e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e322:	3b01      	subs	r3, #1
 800e324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e32a:	881b      	ldrh	r3, [r3, #0]
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e332:	b29b      	uxth	r3, r3
 800e334:	029b      	lsls	r3, r3, #10
 800e336:	b29b      	uxth	r3, r3
 800e338:	4313      	orrs	r3, r2
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e344:	b29a      	uxth	r2, r3
 800e346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e348:	801a      	strh	r2, [r3, #0]
 800e34a:	e018      	b.n	800e37e <USB_EPStartXfer+0x618>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	785b      	ldrb	r3, [r3, #1]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d114      	bne.n	800e37e <USB_EPStartXfer+0x618>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	461a      	mov	r2, r3
 800e35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e360:	4413      	add	r3, r2
 800e362:	643b      	str	r3, [r7, #64]	@ 0x40
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	00da      	lsls	r2, r3, #3
 800e36a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e36c:	4413      	add	r3, r2
 800e36e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e378:	b29a      	uxth	r2, r3
 800e37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e37c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	895b      	ldrh	r3, [r3, #10]
 800e382:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	6959      	ldr	r1, [r3, #20]
 800e38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e38e:	b29b      	uxth	r3, r3
 800e390:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fbca 	bl	800eb2e <USB_WritePMA>
 800e39a:	e193      	b.n	800e6c4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	6a1b      	ldr	r3, [r3, #32]
 800e3a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4413      	add	r3, r2
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e3b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	441a      	add	r2, r3
 800e3c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e3cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3f0:	4413      	add	r3, r2
 800e3f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	00da      	lsls	r2, r3, #3
 800e3fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3fc:	4413      	add	r3, r2
 800e3fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e402:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e408:	b29a      	uxth	r2, r3
 800e40a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e40c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	891b      	ldrh	r3, [r3, #8]
 800e412:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	6959      	ldr	r1, [r3, #20]
 800e41a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e41e:	b29b      	uxth	r3, r3
 800e420:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fb82 	bl	800eb2e <USB_WritePMA>
 800e42a:	e14b      	b.n	800e6c4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	6a1a      	ldr	r2, [r3, #32]
 800e430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e434:	1ad2      	subs	r2, r2, r3
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	881b      	ldrh	r3, [r3, #0]
 800e446:	b29b      	uxth	r3, r3
 800e448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f000 809a 	beq.w	800e586 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	673b      	str	r3, [r7, #112]	@ 0x70
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	785b      	ldrb	r3, [r3, #1]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d16b      	bne.n	800e536 <USB_EPStartXfer+0x7d0>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e468:	b29b      	uxth	r3, r3
 800e46a:	461a      	mov	r2, r3
 800e46c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e46e:	4413      	add	r3, r2
 800e470:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	00da      	lsls	r2, r3, #3
 800e478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e47a:	4413      	add	r3, r2
 800e47c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e480:	667b      	str	r3, [r7, #100]	@ 0x64
 800e482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	b29b      	uxth	r3, r3
 800e488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e490:	801a      	strh	r2, [r3, #0]
 800e492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10a      	bne.n	800e4b0 <USB_EPStartXfer+0x74a>
 800e49a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4ac:	801a      	strh	r2, [r3, #0]
 800e4ae:	e05b      	b.n	800e568 <USB_EPStartXfer+0x802>
 800e4b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4b6:	d81c      	bhi.n	800e4f2 <USB_EPStartXfer+0x78c>
 800e4b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4bc:	085b      	lsrs	r3, r3, #1
 800e4be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4c6:	f003 0301 	and.w	r3, r3, #1
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d004      	beq.n	800e4d8 <USB_EPStartXfer+0x772>
 800e4ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4da:	881b      	ldrh	r3, [r3, #0]
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	029b      	lsls	r3, r3, #10
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4ee:	801a      	strh	r2, [r3, #0]
 800e4f0:	e03a      	b.n	800e568 <USB_EPStartXfer+0x802>
 800e4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4f6:	095b      	lsrs	r3, r3, #5
 800e4f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e500:	f003 031f 	and.w	r3, r3, #31
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <USB_EPStartXfer+0x7ac>
 800e508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e50c:	3b01      	subs	r3, #1
 800e50e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e514:	881b      	ldrh	r3, [r3, #0]
 800e516:	b29a      	uxth	r2, r3
 800e518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	029b      	lsls	r3, r3, #10
 800e520:	b29b      	uxth	r3, r3
 800e522:	4313      	orrs	r3, r2
 800e524:	b29b      	uxth	r3, r3
 800e526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e52e:	b29a      	uxth	r2, r3
 800e530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e532:	801a      	strh	r2, [r3, #0]
 800e534:	e018      	b.n	800e568 <USB_EPStartXfer+0x802>
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d114      	bne.n	800e568 <USB_EPStartXfer+0x802>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e544:	b29b      	uxth	r3, r3
 800e546:	461a      	mov	r2, r3
 800e548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e54a:	4413      	add	r3, r2
 800e54c:	673b      	str	r3, [r7, #112]	@ 0x70
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	00da      	lsls	r2, r3, #3
 800e554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e556:	4413      	add	r3, r2
 800e558:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e55c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e562:	b29a      	uxth	r2, r3
 800e564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e566:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	895b      	ldrh	r3, [r3, #10]
 800e56c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	6959      	ldr	r1, [r3, #20]
 800e574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fad5 	bl	800eb2e <USB_WritePMA>
 800e584:	e09e      	b.n	800e6c4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	785b      	ldrb	r3, [r3, #1]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d16b      	bne.n	800e666 <USB_EPStartXfer+0x900>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e598:	b29b      	uxth	r3, r3
 800e59a:	461a      	mov	r2, r3
 800e59c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e59e:	4413      	add	r3, r2
 800e5a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	00da      	lsls	r2, r3, #3
 800e5a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e5b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5c0:	801a      	strh	r2, [r3, #0]
 800e5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10a      	bne.n	800e5e0 <USB_EPStartXfer+0x87a>
 800e5ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5dc:	801a      	strh	r2, [r3, #0]
 800e5de:	e063      	b.n	800e6a8 <USB_EPStartXfer+0x942>
 800e5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e5e6:	d81c      	bhi.n	800e622 <USB_EPStartXfer+0x8bc>
 800e5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5ec:	085b      	lsrs	r3, r3, #1
 800e5ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <USB_EPStartXfer+0x8a2>
 800e5fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e602:	3301      	adds	r3, #1
 800e604:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e612:	b29b      	uxth	r3, r3
 800e614:	029b      	lsls	r3, r3, #10
 800e616:	b29b      	uxth	r3, r3
 800e618:	4313      	orrs	r3, r2
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e61e:	801a      	strh	r2, [r3, #0]
 800e620:	e042      	b.n	800e6a8 <USB_EPStartXfer+0x942>
 800e622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e626:	095b      	lsrs	r3, r3, #5
 800e628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e62c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e630:	f003 031f 	and.w	r3, r3, #31
 800e634:	2b00      	cmp	r3, #0
 800e636:	d104      	bne.n	800e642 <USB_EPStartXfer+0x8dc>
 800e638:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e63c:	3b01      	subs	r3, #1
 800e63e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	b29a      	uxth	r2, r3
 800e648:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	029b      	lsls	r3, r3, #10
 800e650:	b29b      	uxth	r3, r3
 800e652:	4313      	orrs	r3, r2
 800e654:	b29b      	uxth	r3, r3
 800e656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e65e:	b29a      	uxth	r2, r3
 800e660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e662:	801a      	strh	r2, [r3, #0]
 800e664:	e020      	b.n	800e6a8 <USB_EPStartXfer+0x942>
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	785b      	ldrb	r3, [r3, #1]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d11c      	bne.n	800e6a8 <USB_EPStartXfer+0x942>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	461a      	mov	r2, r3
 800e67e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e682:	4413      	add	r3, r2
 800e684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	00da      	lsls	r2, r3, #3
 800e68e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e692:	4413      	add	r3, r2
 800e694:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e69c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e6a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	891b      	ldrh	r3, [r3, #8]
 800e6ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	6959      	ldr	r1, [r3, #20]
 800e6b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fa35 	bl	800eb2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e6d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6da:	817b      	strh	r3, [r7, #10]
 800e6dc:	897b      	ldrh	r3, [r7, #10]
 800e6de:	f083 0310 	eor.w	r3, r3, #16
 800e6e2:	817b      	strh	r3, [r7, #10]
 800e6e4:	897b      	ldrh	r3, [r7, #10]
 800e6e6:	f083 0320 	eor.w	r3, r3, #32
 800e6ea:	817b      	strh	r3, [r7, #10]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	441a      	add	r2, r3
 800e6f6:	897b      	ldrh	r3, [r7, #10]
 800e6f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e708:	b29b      	uxth	r3, r3
 800e70a:	8013      	strh	r3, [r2, #0]
 800e70c:	e0d5      	b.n	800e8ba <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	7b1b      	ldrb	r3, [r3, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d156      	bne.n	800e7c4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	699b      	ldr	r3, [r3, #24]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d122      	bne.n	800e764 <USB_EPStartXfer+0x9fe>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	78db      	ldrb	r3, [r3, #3]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d11e      	bne.n	800e764 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	b29b      	uxth	r3, r3
 800e734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e73c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	441a      	add	r2, r3
 800e74a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e74e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e756:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e75e:	b29b      	uxth	r3, r3
 800e760:	8013      	strh	r3, [r2, #0]
 800e762:	e01d      	b.n	800e7a0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4413      	add	r3, r2
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	b29b      	uxth	r3, r3
 800e772:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e77a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	441a      	add	r2, r3
 800e788:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e78c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	699a      	ldr	r2, [r3, #24]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d907      	bls.n	800e7bc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	699a      	ldr	r2, [r3, #24]
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	1ad2      	subs	r2, r2, r3
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	619a      	str	r2, [r3, #24]
 800e7ba:	e054      	b.n	800e866 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	619a      	str	r2, [r3, #24]
 800e7c2:	e050      	b.n	800e866 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	78db      	ldrb	r3, [r3, #3]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d142      	bne.n	800e852 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	69db      	ldr	r3, [r3, #28]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d048      	beq.n	800e866 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e7e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e7e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d005      	beq.n	800e7fc <USB_EPStartXfer+0xa96>
 800e7f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10b      	bne.n	800e814 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e7fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e804:	2b00      	cmp	r3, #0
 800e806:	d12e      	bne.n	800e866 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e808:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e810:	2b00      	cmp	r3, #0
 800e812:	d128      	bne.n	800e866 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	b29b      	uxth	r3, r3
 800e822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e82a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	441a      	add	r2, r3
 800e838:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800e83c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e848:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	8013      	strh	r3, [r2, #0]
 800e850:	e009      	b.n	800e866 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	78db      	ldrb	r3, [r3, #3]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d103      	bne.n	800e862 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2200      	movs	r2, #0
 800e85e:	619a      	str	r2, [r3, #24]
 800e860:	e001      	b.n	800e866 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e02a      	b.n	800e8bc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4413      	add	r3, r2
 800e870:	881b      	ldrh	r3, [r3, #0]
 800e872:	b29b      	uxth	r3, r3
 800e874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e87c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e880:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e884:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e888:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e88c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e890:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e894:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	441a      	add	r2, r3
 800e8a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e8a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	37b0      	adds	r7, #176	@ 0xb0
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	785b      	ldrb	r3, [r3, #1]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d020      	beq.n	800e918 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4413      	add	r3, r2
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8ec:	81bb      	strh	r3, [r7, #12]
 800e8ee:	89bb      	ldrh	r3, [r7, #12]
 800e8f0:	f083 0310 	eor.w	r3, r3, #16
 800e8f4:	81bb      	strh	r3, [r7, #12]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	441a      	add	r2, r3
 800e900:	89bb      	ldrh	r3, [r7, #12]
 800e902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e90a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e90e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e912:	b29b      	uxth	r3, r3
 800e914:	8013      	strh	r3, [r2, #0]
 800e916:	e01f      	b.n	800e958 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	b29b      	uxth	r3, r3
 800e926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e92a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e92e:	81fb      	strh	r3, [r7, #14]
 800e930:	89fb      	ldrh	r3, [r7, #14]
 800e932:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e936:	81fb      	strh	r3, [r7, #14]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	441a      	add	r2, r3
 800e942:	89fb      	ldrh	r3, [r7, #14]
 800e944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e94c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e954:	b29b      	uxth	r3, r3
 800e956:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3714      	adds	r7, #20
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e966:	b480      	push	{r7}
 800e968:	b087      	sub	sp, #28
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	785b      	ldrb	r3, [r3, #1]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d04c      	beq.n	800ea12 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4413      	add	r3, r2
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	823b      	strh	r3, [r7, #16]
 800e986:	8a3b      	ldrh	r3, [r7, #16]
 800e988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d01b      	beq.n	800e9c8 <USB_EPClearStall+0x62>
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4413      	add	r3, r2
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9a6:	81fb      	strh	r3, [r7, #14]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	441a      	add	r2, r3
 800e9b2:	89fb      	ldrh	r3, [r7, #14]
 800e9b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	78db      	ldrb	r3, [r3, #3]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d06c      	beq.n	800eaaa <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4413      	add	r3, r2
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9e6:	81bb      	strh	r3, [r7, #12]
 800e9e8:	89bb      	ldrh	r3, [r7, #12]
 800e9ea:	f083 0320 	eor.w	r3, r3, #32
 800e9ee:	81bb      	strh	r3, [r7, #12]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	441a      	add	r2, r3
 800e9fa:	89bb      	ldrh	r3, [r7, #12]
 800e9fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	8013      	strh	r3, [r2, #0]
 800ea10:	e04b      	b.n	800eaaa <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4413      	add	r3, r2
 800ea1c:	881b      	ldrh	r3, [r3, #0]
 800ea1e:	82fb      	strh	r3, [r7, #22]
 800ea20:	8afb      	ldrh	r3, [r7, #22]
 800ea22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d01b      	beq.n	800ea62 <USB_EPClearStall+0xfc>
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea40:	82bb      	strh	r3, [r7, #20]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	441a      	add	r2, r3
 800ea4c:	8abb      	ldrh	r3, [r7, #20]
 800ea4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4413      	add	r3, r2
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea78:	827b      	strh	r3, [r7, #18]
 800ea7a:	8a7b      	ldrh	r3, [r7, #18]
 800ea7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ea80:	827b      	strh	r3, [r7, #18]
 800ea82:	8a7b      	ldrh	r3, [r7, #18]
 800ea84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ea88:	827b      	strh	r3, [r7, #18]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	441a      	add	r2, r3
 800ea94:	8a7b      	ldrh	r3, [r7, #18]
 800ea96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eaa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	371c      	adds	r7, #28
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	460b      	mov	r3, r1
 800eac2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d103      	bne.n	800ead2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2280      	movs	r2, #128	@ 0x80
 800eace:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr

0800eb0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800eb0e:	b480      	push	{r7}
 800eb10:	b085      	sub	sp, #20
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800eb20:	68fb      	ldr	r3, [r7, #12]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b08b      	sub	sp, #44	@ 0x2c
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	60f8      	str	r0, [r7, #12]
 800eb36:	60b9      	str	r1, [r7, #8]
 800eb38:	4611      	mov	r1, r2
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	80fb      	strh	r3, [r7, #6]
 800eb40:	4613      	mov	r3, r2
 800eb42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800eb44:	88bb      	ldrh	r3, [r7, #4]
 800eb46:	3301      	adds	r3, #1
 800eb48:	085b      	lsrs	r3, r3, #1
 800eb4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eb54:	88fa      	ldrh	r2, [r7, #6]
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	4413      	add	r3, r2
 800eb5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb64:	e01b      	b.n	800eb9e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	021b      	lsls	r3, r3, #8
 800eb74:	b21a      	sxth	r2, r3
 800eb76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	b21b      	sxth	r3, r3
 800eb7e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	8a7a      	ldrh	r2, [r7, #18]
 800eb84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800eb86:	6a3b      	ldr	r3, [r7, #32]
 800eb88:	3302      	adds	r3, #2
 800eb8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	3301      	adds	r3, #1
 800eb96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e0      	bne.n	800eb66 <USB_WritePMA+0x38>
  }
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop
 800eba8:	372c      	adds	r7, #44	@ 0x2c
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr

0800ebb2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b08b      	sub	sp, #44	@ 0x2c
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	60f8      	str	r0, [r7, #12]
 800ebba:	60b9      	str	r1, [r7, #8]
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	80fb      	strh	r3, [r7, #6]
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ebc8:	88bb      	ldrh	r3, [r7, #4]
 800ebca:	085b      	lsrs	r3, r3, #1
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ebd8:	88fa      	ldrh	r2, [r7, #6]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	4413      	add	r3, r2
 800ebde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebe2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebe8:	e018      	b.n	800ec1c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ebea:	6a3b      	ldr	r3, [r7, #32]
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	3302      	adds	r3, #2
 800ebf6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	3301      	adds	r3, #1
 800ec04:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	0a1b      	lsrs	r3, r3, #8
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	3301      	adds	r3, #1
 800ec14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ec16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e3      	bne.n	800ebea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ec22:	88bb      	ldrh	r3, [r7, #4]
 800ec24:	f003 0301 	and.w	r3, r3, #1
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d007      	beq.n	800ec3e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ec2e:	6a3b      	ldr	r3, [r7, #32]
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	701a      	strb	r2, [r3, #0]
  }
}
 800ec3e:	bf00      	nop
 800ec40:	372c      	adds	r7, #44	@ 0x2c
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b084      	sub	sp, #16
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	460b      	mov	r3, r1
 800ec54:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ec56:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ec5a:	f002 f8a3 	bl	8010da4 <USBD_static_malloc>
 800ec5e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d105      	bne.n	800ec72 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e066      	b.n	800ed40 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	7c1b      	ldrb	r3, [r3, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d119      	bne.n	800ecb6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ec82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec86:	2202      	movs	r2, #2
 800ec88:	2181      	movs	r1, #129	@ 0x81
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 ff31 	bl	8010af2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ec96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec9a:	2202      	movs	r2, #2
 800ec9c:	2101      	movs	r1, #1
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f001 ff27 	bl	8010af2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2210      	movs	r2, #16
 800ecb0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ecb4:	e016      	b.n	800ece4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ecb6:	2340      	movs	r3, #64	@ 0x40
 800ecb8:	2202      	movs	r2, #2
 800ecba:	2181      	movs	r1, #129	@ 0x81
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f001 ff18 	bl	8010af2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ecc8:	2340      	movs	r3, #64	@ 0x40
 800ecca:	2202      	movs	r2, #2
 800eccc:	2101      	movs	r1, #1
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f001 ff0f 	bl	8010af2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2210      	movs	r2, #16
 800ece0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ece4:	2308      	movs	r3, #8
 800ece6:	2203      	movs	r2, #3
 800ece8:	2182      	movs	r1, #130	@ 0x82
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f001 ff01 	bl	8010af2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	7c1b      	ldrb	r3, [r3, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d109      	bne.n	800ed2e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ed20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed24:	2101      	movs	r1, #1
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f001 ffd2 	bl	8010cd0 <USBD_LL_PrepareReceive>
 800ed2c:	e007      	b.n	800ed3e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ed34:	2340      	movs	r3, #64	@ 0x40
 800ed36:	2101      	movs	r1, #1
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f001 ffc9 	bl	8010cd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ed54:	2181      	movs	r1, #129	@ 0x81
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f001 fef1 	bl	8010b3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ed62:	2101      	movs	r1, #1
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f001 feea 	bl	8010b3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ed72:	2182      	movs	r1, #130	@ 0x82
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f001 fee2 	bl	8010b3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00e      	beq.n	800edb2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eda4:	4618      	mov	r0, r3
 800eda6:	f002 f80b 	bl	8010dc0 <USBD_static_free>
    pdev->pClassData = NULL;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800edce:	2300      	movs	r3, #0
 800edd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800edd2:	2300      	movs	r3, #0
 800edd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e0af      	b.n	800ef44 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800edec:	2b00      	cmp	r3, #0
 800edee:	d03f      	beq.n	800ee70 <USBD_CDC_Setup+0xb4>
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	f040 809f 	bne.w	800ef34 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	88db      	ldrh	r3, [r3, #6]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d02e      	beq.n	800ee5c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	b25b      	sxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da16      	bge.n	800ee36 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ee14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	88d2      	ldrh	r2, [r2, #6]
 800ee1a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	88db      	ldrh	r3, [r3, #6]
 800ee20:	2b07      	cmp	r3, #7
 800ee22:	bf28      	it	cs
 800ee24:	2307      	movcs	r3, #7
 800ee26:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	89fa      	ldrh	r2, [r7, #14]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f001 fa9d 	bl	801036e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ee34:	e085      	b.n	800ef42 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	785a      	ldrb	r2, [r3, #1]
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	88db      	ldrh	r3, [r3, #6]
 800ee44:	b2da      	uxtb	r2, r3
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ee4c:	6939      	ldr	r1, [r7, #16]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	88db      	ldrh	r3, [r3, #6]
 800ee52:	461a      	mov	r2, r3
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f001 fab6 	bl	80103c6 <USBD_CtlPrepareRx>
      break;
 800ee5a:	e072      	b.n	800ef42 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	7850      	ldrb	r0, [r2, #1]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	6839      	ldr	r1, [r7, #0]
 800ee6c:	4798      	blx	r3
      break;
 800ee6e:	e068      	b.n	800ef42 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	785b      	ldrb	r3, [r3, #1]
 800ee74:	2b0b      	cmp	r3, #11
 800ee76:	d852      	bhi.n	800ef1e <USBD_CDC_Setup+0x162>
 800ee78:	a201      	add	r2, pc, #4	@ (adr r2, 800ee80 <USBD_CDC_Setup+0xc4>)
 800ee7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7e:	bf00      	nop
 800ee80:	0800eeb1 	.word	0x0800eeb1
 800ee84:	0800ef2d 	.word	0x0800ef2d
 800ee88:	0800ef1f 	.word	0x0800ef1f
 800ee8c:	0800ef1f 	.word	0x0800ef1f
 800ee90:	0800ef1f 	.word	0x0800ef1f
 800ee94:	0800ef1f 	.word	0x0800ef1f
 800ee98:	0800ef1f 	.word	0x0800ef1f
 800ee9c:	0800ef1f 	.word	0x0800ef1f
 800eea0:	0800ef1f 	.word	0x0800ef1f
 800eea4:	0800ef1f 	.word	0x0800ef1f
 800eea8:	0800eedb 	.word	0x0800eedb
 800eeac:	0800ef05 	.word	0x0800ef05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d107      	bne.n	800eecc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eebc:	f107 030a 	add.w	r3, r7, #10
 800eec0:	2202      	movs	r2, #2
 800eec2:	4619      	mov	r1, r3
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f001 fa52 	bl	801036e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eeca:	e032      	b.n	800ef32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eecc:	6839      	ldr	r1, [r7, #0]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f001 f9dc 	bl	801028c <USBD_CtlError>
            ret = USBD_FAIL;
 800eed4:	2303      	movs	r3, #3
 800eed6:	75fb      	strb	r3, [r7, #23]
          break;
 800eed8:	e02b      	b.n	800ef32 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d107      	bne.n	800eef6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800eee6:	f107 030d 	add.w	r3, r7, #13
 800eeea:	2201      	movs	r2, #1
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f001 fa3d 	bl	801036e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eef4:	e01d      	b.n	800ef32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eef6:	6839      	ldr	r1, [r7, #0]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f001 f9c7 	bl	801028c <USBD_CtlError>
            ret = USBD_FAIL;
 800eefe:	2303      	movs	r3, #3
 800ef00:	75fb      	strb	r3, [r7, #23]
          break;
 800ef02:	e016      	b.n	800ef32 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b03      	cmp	r3, #3
 800ef0e:	d00f      	beq.n	800ef30 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f001 f9ba 	bl	801028c <USBD_CtlError>
            ret = USBD_FAIL;
 800ef18:	2303      	movs	r3, #3
 800ef1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ef1c:	e008      	b.n	800ef30 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f001 f9b3 	bl	801028c <USBD_CtlError>
          ret = USBD_FAIL;
 800ef26:	2303      	movs	r3, #3
 800ef28:	75fb      	strb	r3, [r7, #23]
          break;
 800ef2a:	e002      	b.n	800ef32 <USBD_CDC_Setup+0x176>
          break;
 800ef2c:	bf00      	nop
 800ef2e:	e008      	b.n	800ef42 <USBD_CDC_Setup+0x186>
          break;
 800ef30:	bf00      	nop
      }
      break;
 800ef32:	e006      	b.n	800ef42 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f001 f9a8 	bl	801028c <USBD_CtlError>
      ret = USBD_FAIL;
 800ef3c:	2303      	movs	r3, #3
 800ef3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ef40:	bf00      	nop
  }

  return (uint8_t)ret;
 800ef42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ef5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	e04f      	b.n	800f00e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ef76:	78fa      	ldrb	r2, [r7, #3]
 800ef78:	6879      	ldr	r1, [r7, #4]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4413      	add	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	440b      	add	r3, r1
 800ef84:	3318      	adds	r3, #24
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d029      	beq.n	800efe0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ef8c:	78fa      	ldrb	r2, [r7, #3]
 800ef8e:	6879      	ldr	r1, [r7, #4]
 800ef90:	4613      	mov	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	440b      	add	r3, r1
 800ef9a:	3318      	adds	r3, #24
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	78f9      	ldrb	r1, [r7, #3]
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	460b      	mov	r3, r1
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	440b      	add	r3, r1
 800efa8:	00db      	lsls	r3, r3, #3
 800efaa:	4403      	add	r3, r0
 800efac:	3320      	adds	r3, #32
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800efb4:	fb01 f303 	mul.w	r3, r1, r3
 800efb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d110      	bne.n	800efe0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	6879      	ldr	r1, [r7, #4]
 800efc2:	4613      	mov	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	440b      	add	r3, r1
 800efcc:	3318      	adds	r3, #24
 800efce:	2200      	movs	r2, #0
 800efd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800efd2:	78f9      	ldrb	r1, [r7, #3]
 800efd4:	2300      	movs	r3, #0
 800efd6:	2200      	movs	r2, #0
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f001 fe58 	bl	8010c8e <USBD_LL_Transmit>
 800efde:	e015      	b.n	800f00c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00b      	beq.n	800f00c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f008:	78fa      	ldrb	r2, [r7, #3]
 800f00a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b084      	sub	sp, #16
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	460b      	mov	r3, r1
 800f020:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f028:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f030:	2b00      	cmp	r3, #0
 800f032:	d101      	bne.n	800f038 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f034:	2303      	movs	r3, #3
 800f036:	e015      	b.n	800f064 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	4619      	mov	r1, r3
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f001 fe68 	bl	8010d12 <USBD_LL_GetRxDataSize>
 800f042:	4602      	mov	r2, r0
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f05e:	4611      	mov	r1, r2
 800f060:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f07a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f082:	2303      	movs	r3, #3
 800f084:	e01a      	b.n	800f0bc <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d014      	beq.n	800f0ba <USBD_CDC_EP0_RxReady+0x4e>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f096:	2bff      	cmp	r3, #255	@ 0xff
 800f098:	d00f      	beq.n	800f0ba <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800f0a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f0b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	22ff      	movs	r2, #255	@ 0xff
 800f0b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f0ba:	2300      	movs	r3, #0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2243      	movs	r2, #67	@ 0x43
 800f0d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f0d2:	4b03      	ldr	r3, [pc, #12]	@ (800f0e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	20000298 	.word	0x20000298

0800f0e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2243      	movs	r2, #67	@ 0x43
 800f0f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f0f2:	4b03      	ldr	r3, [pc, #12]	@ (800f100 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	20000254 	.word	0x20000254

0800f104 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2243      	movs	r2, #67	@ 0x43
 800f110:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f112:	4b03      	ldr	r3, [pc, #12]	@ (800f120 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f114:	4618      	mov	r0, r3
 800f116:	370c      	adds	r7, #12
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	200002dc 	.word	0x200002dc

0800f124 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	220a      	movs	r2, #10
 800f130:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f132:	4b03      	ldr	r3, [pc, #12]	@ (800f140 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f134:	4618      	mov	r0, r3
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr
 800f140:	20000210 	.word	0x20000210

0800f144 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f154:	2303      	movs	r3, #3
 800f156:	e004      	b.n	800f162 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f16e:	b480      	push	{r7}
 800f170:	b087      	sub	sp, #28
 800f172:	af00      	add	r7, sp, #0
 800f174:	60f8      	str	r0, [r7, #12]
 800f176:	60b9      	str	r1, [r7, #8]
 800f178:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f180:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d101      	bne.n	800f18c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f188:	2303      	movs	r3, #3
 800f18a:	e008      	b.n	800f19e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	b085      	sub	sp, #20
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f1c2:	2303      	movs	r3, #3
 800f1c4:	e004      	b.n	800f1d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f1f6:	2303      	movs	r3, #3
 800f1f8:	e016      	b.n	800f228 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	7c1b      	ldrb	r3, [r3, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d109      	bne.n	800f216 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f20c:	2101      	movs	r1, #1
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f001 fd5e 	bl	8010cd0 <USBD_LL_PrepareReceive>
 800f214:	e007      	b.n	800f226 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f21c:	2340      	movs	r3, #64	@ 0x40
 800f21e:	2101      	movs	r1, #1
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f001 fd55 	bl	8010cd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3710      	adds	r7, #16
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	4613      	mov	r3, r2
 800f23c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d101      	bne.n	800f248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f244:	2303      	movs	r3, #3
 800f246:	e01f      	b.n	800f288 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2200      	movs	r2, #0
 800f254:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d003      	beq.n	800f26e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	79fa      	ldrb	r2, [r7, #7]
 800f27a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f001 fbbd 	bl	80109fc <USBD_LL_Init>
 800f282:	4603      	mov	r3, r0
 800f284:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f286:	7dfb      	ldrb	r3, [r7, #23]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f29a:	2300      	movs	r3, #0
 800f29c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f2a4:	2303      	movs	r3, #3
 800f2a6:	e016      	b.n	800f2d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	683a      	ldr	r2, [r7, #0]
 800f2ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00b      	beq.n	800f2d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2c4:	f107 020e 	add.w	r2, r7, #14
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	4798      	blx	r3
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b082      	sub	sp, #8
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f001 fbe8 	bl	8010abc <USBD_LL_Start>
 800f2ec:	4603      	mov	r3, r0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f2f6:	b480      	push	{r7}
 800f2f8:	b083      	sub	sp, #12
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f2fe:	2300      	movs	r3, #0
}
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	460b      	mov	r3, r1
 800f316:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f318:	2303      	movs	r3, #3
 800f31a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f322:	2b00      	cmp	r3, #0
 800f324:	d009      	beq.n	800f33a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	78fa      	ldrb	r2, [r7, #3]
 800f330:	4611      	mov	r1, r2
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	4798      	blx	r3
 800f336:	4603      	mov	r3, r0
 800f338:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	460b      	mov	r3, r1
 800f34e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f356:	2b00      	cmp	r3, #0
 800f358:	d007      	beq.n	800f36a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	78fa      	ldrb	r2, [r7, #3]
 800f364:	4611      	mov	r1, r2
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	4798      	blx	r3
  }

  return USBD_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f384:	6839      	ldr	r1, [r7, #0]
 800f386:	4618      	mov	r0, r3
 800f388:	f000 ff46 	bl	8010218 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f39a:	461a      	mov	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f3a8:	f003 031f 	and.w	r3, r3, #31
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d01a      	beq.n	800f3e6 <USBD_LL_SetupStage+0x72>
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	d822      	bhi.n	800f3fa <USBD_LL_SetupStage+0x86>
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d002      	beq.n	800f3be <USBD_LL_SetupStage+0x4a>
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d00a      	beq.n	800f3d2 <USBD_LL_SetupStage+0x5e>
 800f3bc:	e01d      	b.n	800f3fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f9ee 	bl	800f7a8 <USBD_StdDevReq>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	73fb      	strb	r3, [r7, #15]
      break;
 800f3d0:	e020      	b.n	800f414 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3d8:	4619      	mov	r1, r3
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fa52 	bl	800f884 <USBD_StdItfReq>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f3e4:	e016      	b.n	800f414 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 fa91 	bl	800f916 <USBD_StdEPReq>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3f8:	e00c      	b.n	800f414 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f400:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f404:	b2db      	uxtb	r3, r3
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f001 fbb7 	bl	8010b7c <USBD_LL_StallEP>
 800f40e:	4603      	mov	r3, r0
 800f410:	73fb      	strb	r3, [r7, #15]
      break;
 800f412:	bf00      	nop
  }

  return ret;
 800f414:	7bfb      	ldrb	r3, [r7, #15]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b086      	sub	sp, #24
 800f422:	af00      	add	r7, sp, #0
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	460b      	mov	r3, r1
 800f428:	607a      	str	r2, [r7, #4]
 800f42a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f42c:	7afb      	ldrb	r3, [r7, #11]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d138      	bne.n	800f4a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f438:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f440:	2b03      	cmp	r3, #3
 800f442:	d14a      	bne.n	800f4da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	689a      	ldr	r2, [r3, #8]
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d913      	bls.n	800f478 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	689a      	ldr	r2, [r3, #8]
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	1ad2      	subs	r2, r2, r3
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	68da      	ldr	r2, [r3, #12]
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	4293      	cmp	r3, r2
 800f468:	bf28      	it	cs
 800f46a:	4613      	movcs	r3, r2
 800f46c:	461a      	mov	r2, r3
 800f46e:	6879      	ldr	r1, [r7, #4]
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f000 ffc5 	bl	8010400 <USBD_CtlContinueRx>
 800f476:	e030      	b.n	800f4da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	2b03      	cmp	r3, #3
 800f482:	d10b      	bne.n	800f49c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 ffc0 	bl	8010422 <USBD_CtlSendStatus>
 800f4a2:	e01a      	b.n	800f4da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b03      	cmp	r3, #3
 800f4ae:	d114      	bne.n	800f4da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4b6:	699b      	ldr	r3, [r3, #24]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00e      	beq.n	800f4da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4c2:	699b      	ldr	r3, [r3, #24]
 800f4c4:	7afa      	ldrb	r2, [r7, #11]
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	4798      	blx	r3
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f4d6:	7dfb      	ldrb	r3, [r7, #23]
 800f4d8:	e000      	b.n	800f4dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3718      	adds	r7, #24
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	607a      	str	r2, [r7, #4]
 800f4f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f4f2:	7afb      	ldrb	r3, [r7, #11]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d16b      	bne.n	800f5d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3314      	adds	r3, #20
 800f4fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f504:	2b02      	cmp	r3, #2
 800f506:	d156      	bne.n	800f5b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	429a      	cmp	r2, r3
 800f512:	d914      	bls.n	800f53e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	689a      	ldr	r2, [r3, #8]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	1ad2      	subs	r2, r2, r3
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	461a      	mov	r2, r3
 800f528:	6879      	ldr	r1, [r7, #4]
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f000 ff3a 	bl	80103a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f530:	2300      	movs	r3, #0
 800f532:	2200      	movs	r2, #0
 800f534:	2100      	movs	r1, #0
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f001 fbca 	bl	8010cd0 <USBD_LL_PrepareReceive>
 800f53c:	e03b      	b.n	800f5b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	68da      	ldr	r2, [r3, #12]
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	429a      	cmp	r2, r3
 800f548:	d11c      	bne.n	800f584 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f552:	429a      	cmp	r2, r3
 800f554:	d316      	bcc.n	800f584 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f560:	429a      	cmp	r2, r3
 800f562:	d20f      	bcs.n	800f584 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f564:	2200      	movs	r2, #0
 800f566:	2100      	movs	r1, #0
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f000 ff1b 	bl	80103a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2200      	movs	r2, #0
 800f572:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f576:	2300      	movs	r3, #0
 800f578:	2200      	movs	r2, #0
 800f57a:	2100      	movs	r1, #0
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f001 fba7 	bl	8010cd0 <USBD_LL_PrepareReceive>
 800f582:	e018      	b.n	800f5b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d10b      	bne.n	800f5a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d005      	beq.n	800f5a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5a8:	2180      	movs	r1, #128	@ 0x80
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f001 fae6 	bl	8010b7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f000 ff49 	bl	8010448 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d122      	bne.n	800f606 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f7ff fe98 	bl	800f2f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f5ce:	e01a      	b.n	800f606 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d114      	bne.n	800f606 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5e2:	695b      	ldr	r3, [r3, #20]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d00e      	beq.n	800f606 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5ee:	695b      	ldr	r3, [r3, #20]
 800f5f0:	7afa      	ldrb	r2, [r7, #11]
 800f5f2:	4611      	mov	r1, r2
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	4798      	blx	r3
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f602:	7dfb      	ldrb	r3, [r7, #23]
 800f604:	e000      	b.n	800f608 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f606:	2300      	movs	r3, #0
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f640:	2303      	movs	r3, #3
 800f642:	e02f      	b.n	800f6a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00f      	beq.n	800f66e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d009      	beq.n	800f66e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6852      	ldr	r2, [r2, #4]
 800f666:	b2d2      	uxtb	r2, r2
 800f668:	4611      	mov	r1, r2
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f66e:	2340      	movs	r3, #64	@ 0x40
 800f670:	2200      	movs	r2, #0
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f001 fa3c 	bl	8010af2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2240      	movs	r2, #64	@ 0x40
 800f686:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f68a:	2340      	movs	r3, #64	@ 0x40
 800f68c:	2200      	movs	r2, #0
 800f68e:	2180      	movs	r1, #128	@ 0x80
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f001 fa2e 	bl	8010af2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2240      	movs	r2, #64	@ 0x40
 800f6a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	78fa      	ldrb	r2, [r7, #3]
 800f6bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2204      	movs	r2, #4
 800f6e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b04      	cmp	r3, #4
 800f70a:	d106      	bne.n	800f71a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f712:	b2da      	uxtb	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f736:	2b00      	cmp	r3, #0
 800f738:	d101      	bne.n	800f73e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f73a:	2303      	movs	r3, #3
 800f73c:	e012      	b.n	800f764 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b03      	cmp	r3, #3
 800f748:	d10b      	bne.n	800f762 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f750:	69db      	ldr	r3, [r3, #28]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d005      	beq.n	800f762 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f75c:	69db      	ldr	r3, [r3, #28]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f762:	2300      	movs	r3, #0
}
 800f764:	4618      	mov	r0, r3
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b087      	sub	sp, #28
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	3301      	adds	r3, #1
 800f782:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f78a:	8a3b      	ldrh	r3, [r7, #16]
 800f78c:	021b      	lsls	r3, r3, #8
 800f78e:	b21a      	sxth	r2, r3
 800f790:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f794:	4313      	orrs	r3, r2
 800f796:	b21b      	sxth	r3, r3
 800f798:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f79a:	89fb      	ldrh	r3, [r7, #14]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	371c      	adds	r7, #28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f7be:	2b40      	cmp	r3, #64	@ 0x40
 800f7c0:	d005      	beq.n	800f7ce <USBD_StdDevReq+0x26>
 800f7c2:	2b40      	cmp	r3, #64	@ 0x40
 800f7c4:	d853      	bhi.n	800f86e <USBD_StdDevReq+0xc6>
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00b      	beq.n	800f7e2 <USBD_StdDevReq+0x3a>
 800f7ca:	2b20      	cmp	r3, #32
 800f7cc:	d14f      	bne.n	800f86e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	4798      	blx	r3
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]
      break;
 800f7e0:	e04a      	b.n	800f878 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	785b      	ldrb	r3, [r3, #1]
 800f7e6:	2b09      	cmp	r3, #9
 800f7e8:	d83b      	bhi.n	800f862 <USBD_StdDevReq+0xba>
 800f7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f7f0 <USBD_StdDevReq+0x48>)
 800f7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f0:	0800f845 	.word	0x0800f845
 800f7f4:	0800f859 	.word	0x0800f859
 800f7f8:	0800f863 	.word	0x0800f863
 800f7fc:	0800f84f 	.word	0x0800f84f
 800f800:	0800f863 	.word	0x0800f863
 800f804:	0800f823 	.word	0x0800f823
 800f808:	0800f819 	.word	0x0800f819
 800f80c:	0800f863 	.word	0x0800f863
 800f810:	0800f83b 	.word	0x0800f83b
 800f814:	0800f82d 	.word	0x0800f82d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f818:	6839      	ldr	r1, [r7, #0]
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 f9de 	bl	800fbdc <USBD_GetDescriptor>
          break;
 800f820:	e024      	b.n	800f86c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 fb6d 	bl	800ff04 <USBD_SetAddress>
          break;
 800f82a:	e01f      	b.n	800f86c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fbac 	bl	800ff8c <USBD_SetConfig>
 800f834:	4603      	mov	r3, r0
 800f836:	73fb      	strb	r3, [r7, #15]
          break;
 800f838:	e018      	b.n	800f86c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f83a:	6839      	ldr	r1, [r7, #0]
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 fc4b 	bl	80100d8 <USBD_GetConfig>
          break;
 800f842:	e013      	b.n	800f86c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f844:	6839      	ldr	r1, [r7, #0]
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fc7c 	bl	8010144 <USBD_GetStatus>
          break;
 800f84c:	e00e      	b.n	800f86c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f84e:	6839      	ldr	r1, [r7, #0]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 fcab 	bl	80101ac <USBD_SetFeature>
          break;
 800f856:	e009      	b.n	800f86c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f858:	6839      	ldr	r1, [r7, #0]
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 fcba 	bl	80101d4 <USBD_ClrFeature>
          break;
 800f860:	e004      	b.n	800f86c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f862:	6839      	ldr	r1, [r7, #0]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 fd11 	bl	801028c <USBD_CtlError>
          break;
 800f86a:	bf00      	nop
      }
      break;
 800f86c:	e004      	b.n	800f878 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fd0b 	bl	801028c <USBD_CtlError>
      break;
 800f876:	bf00      	nop
  }

  return ret;
 800f878:	7bfb      	ldrb	r3, [r7, #15]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop

0800f884 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f88e:	2300      	movs	r3, #0
 800f890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f89a:	2b40      	cmp	r3, #64	@ 0x40
 800f89c:	d005      	beq.n	800f8aa <USBD_StdItfReq+0x26>
 800f89e:	2b40      	cmp	r3, #64	@ 0x40
 800f8a0:	d82f      	bhi.n	800f902 <USBD_StdItfReq+0x7e>
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <USBD_StdItfReq+0x26>
 800f8a6:	2b20      	cmp	r3, #32
 800f8a8:	d12b      	bne.n	800f902 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	3b01      	subs	r3, #1
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d81d      	bhi.n	800f8f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	889b      	ldrh	r3, [r3, #4]
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d813      	bhi.n	800f8ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	4798      	blx	r3
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	88db      	ldrh	r3, [r3, #6]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d110      	bne.n	800f8fe <USBD_StdItfReq+0x7a>
 800f8dc:	7bfb      	ldrb	r3, [r7, #15]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10d      	bne.n	800f8fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fd9d 	bl	8010422 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f8e8:	e009      	b.n	800f8fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 fccd 	bl	801028c <USBD_CtlError>
          break;
 800f8f2:	e004      	b.n	800f8fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f8f4:	6839      	ldr	r1, [r7, #0]
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fcc8 	bl	801028c <USBD_CtlError>
          break;
 800f8fc:	e000      	b.n	800f900 <USBD_StdItfReq+0x7c>
          break;
 800f8fe:	bf00      	nop
      }
      break;
 800f900:	e004      	b.n	800f90c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f902:	6839      	ldr	r1, [r7, #0]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 fcc1 	bl	801028c <USBD_CtlError>
      break;
 800f90a:	bf00      	nop
  }

  return ret;
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b084      	sub	sp, #16
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	889b      	ldrh	r3, [r3, #4]
 800f928:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f932:	2b40      	cmp	r3, #64	@ 0x40
 800f934:	d007      	beq.n	800f946 <USBD_StdEPReq+0x30>
 800f936:	2b40      	cmp	r3, #64	@ 0x40
 800f938:	f200 8145 	bhi.w	800fbc6 <USBD_StdEPReq+0x2b0>
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00c      	beq.n	800f95a <USBD_StdEPReq+0x44>
 800f940:	2b20      	cmp	r3, #32
 800f942:	f040 8140 	bne.w	800fbc6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	6839      	ldr	r1, [r7, #0]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	4798      	blx	r3
 800f954:	4603      	mov	r3, r0
 800f956:	73fb      	strb	r3, [r7, #15]
      break;
 800f958:	e13a      	b.n	800fbd0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	785b      	ldrb	r3, [r3, #1]
 800f95e:	2b03      	cmp	r3, #3
 800f960:	d007      	beq.n	800f972 <USBD_StdEPReq+0x5c>
 800f962:	2b03      	cmp	r3, #3
 800f964:	f300 8129 	bgt.w	800fbba <USBD_StdEPReq+0x2a4>
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d07f      	beq.n	800fa6c <USBD_StdEPReq+0x156>
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d03c      	beq.n	800f9ea <USBD_StdEPReq+0xd4>
 800f970:	e123      	b.n	800fbba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d002      	beq.n	800f984 <USBD_StdEPReq+0x6e>
 800f97e:	2b03      	cmp	r3, #3
 800f980:	d016      	beq.n	800f9b0 <USBD_StdEPReq+0x9a>
 800f982:	e02c      	b.n	800f9de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f984:	7bbb      	ldrb	r3, [r7, #14]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00d      	beq.n	800f9a6 <USBD_StdEPReq+0x90>
 800f98a:	7bbb      	ldrb	r3, [r7, #14]
 800f98c:	2b80      	cmp	r3, #128	@ 0x80
 800f98e:	d00a      	beq.n	800f9a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f990:	7bbb      	ldrb	r3, [r7, #14]
 800f992:	4619      	mov	r1, r3
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f001 f8f1 	bl	8010b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f99a:	2180      	movs	r1, #128	@ 0x80
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f001 f8ed 	bl	8010b7c <USBD_LL_StallEP>
 800f9a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9a4:	e020      	b.n	800f9e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fc6f 	bl	801028c <USBD_CtlError>
              break;
 800f9ae:	e01b      	b.n	800f9e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	885b      	ldrh	r3, [r3, #2]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d10e      	bne.n	800f9d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00b      	beq.n	800f9d6 <USBD_StdEPReq+0xc0>
 800f9be:	7bbb      	ldrb	r3, [r7, #14]
 800f9c0:	2b80      	cmp	r3, #128	@ 0x80
 800f9c2:	d008      	beq.n	800f9d6 <USBD_StdEPReq+0xc0>
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	88db      	ldrh	r3, [r3, #6]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d104      	bne.n	800f9d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f001 f8d3 	bl	8010b7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fd23 	bl	8010422 <USBD_CtlSendStatus>

              break;
 800f9dc:	e004      	b.n	800f9e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 fc53 	bl	801028c <USBD_CtlError>
              break;
 800f9e6:	bf00      	nop
          }
          break;
 800f9e8:	e0ec      	b.n	800fbc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	d002      	beq.n	800f9fc <USBD_StdEPReq+0xe6>
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d016      	beq.n	800fa28 <USBD_StdEPReq+0x112>
 800f9fa:	e030      	b.n	800fa5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9fc:	7bbb      	ldrb	r3, [r7, #14]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d00d      	beq.n	800fa1e <USBD_StdEPReq+0x108>
 800fa02:	7bbb      	ldrb	r3, [r7, #14]
 800fa04:	2b80      	cmp	r3, #128	@ 0x80
 800fa06:	d00a      	beq.n	800fa1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa08:	7bbb      	ldrb	r3, [r7, #14]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f001 f8b5 	bl	8010b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa12:	2180      	movs	r1, #128	@ 0x80
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f001 f8b1 	bl	8010b7c <USBD_LL_StallEP>
 800fa1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa1c:	e025      	b.n	800fa6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fc33 	bl	801028c <USBD_CtlError>
              break;
 800fa26:	e020      	b.n	800fa6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	885b      	ldrh	r3, [r3, #2]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d11b      	bne.n	800fa68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fa30:	7bbb      	ldrb	r3, [r7, #14]
 800fa32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d004      	beq.n	800fa44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fa3a:	7bbb      	ldrb	r3, [r7, #14]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f001 f8bb 	bl	8010bba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 fcec 	bl	8010422 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	4798      	blx	r3
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fa5c:	e004      	b.n	800fa68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 fc13 	bl	801028c <USBD_CtlError>
              break;
 800fa66:	e000      	b.n	800fa6a <USBD_StdEPReq+0x154>
              break;
 800fa68:	bf00      	nop
          }
          break;
 800fa6a:	e0ab      	b.n	800fbc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d002      	beq.n	800fa7e <USBD_StdEPReq+0x168>
 800fa78:	2b03      	cmp	r3, #3
 800fa7a:	d032      	beq.n	800fae2 <USBD_StdEPReq+0x1cc>
 800fa7c:	e097      	b.n	800fbae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa7e:	7bbb      	ldrb	r3, [r7, #14]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d007      	beq.n	800fa94 <USBD_StdEPReq+0x17e>
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	2b80      	cmp	r3, #128	@ 0x80
 800fa88:	d004      	beq.n	800fa94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fa8a:	6839      	ldr	r1, [r7, #0]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 fbfd 	bl	801028c <USBD_CtlError>
                break;
 800fa92:	e091      	b.n	800fbb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	da0b      	bge.n	800fab4 <USBD_StdEPReq+0x19e>
 800fa9c:	7bbb      	ldrb	r3, [r7, #14]
 800fa9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	3310      	adds	r3, #16
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	4413      	add	r3, r2
 800fab0:	3304      	adds	r3, #4
 800fab2:	e00b      	b.n	800facc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fab4:	7bbb      	ldrb	r3, [r7, #14]
 800fab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800faba:	4613      	mov	r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	4413      	add	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	4413      	add	r3, r2
 800faca:	3304      	adds	r3, #4
 800facc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	2200      	movs	r2, #0
 800fad2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2202      	movs	r2, #2
 800fad8:	4619      	mov	r1, r3
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fc47 	bl	801036e <USBD_CtlSendData>
              break;
 800fae0:	e06a      	b.n	800fbb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	da11      	bge.n	800fb0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800faea:	7bbb      	ldrb	r3, [r7, #14]
 800faec:	f003 020f 	and.w	r2, r3, #15
 800faf0:	6879      	ldr	r1, [r7, #4]
 800faf2:	4613      	mov	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	4413      	add	r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	440b      	add	r3, r1
 800fafc:	3324      	adds	r3, #36	@ 0x24
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d117      	bne.n	800fb34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 fbc0 	bl	801028c <USBD_CtlError>
                  break;
 800fb0c:	e054      	b.n	800fbb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fb0e:	7bbb      	ldrb	r3, [r7, #14]
 800fb10:	f003 020f 	and.w	r2, r3, #15
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	4613      	mov	r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	4413      	add	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	440b      	add	r3, r1
 800fb20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fb24:	881b      	ldrh	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d104      	bne.n	800fb34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fbad 	bl	801028c <USBD_CtlError>
                  break;
 800fb32:	e041      	b.n	800fbb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	da0b      	bge.n	800fb54 <USBD_StdEPReq+0x23e>
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
 800fb3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fb42:	4613      	mov	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	4413      	add	r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	3310      	adds	r3, #16
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	4413      	add	r3, r2
 800fb50:	3304      	adds	r3, #4
 800fb52:	e00b      	b.n	800fb6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb54:	7bbb      	ldrb	r3, [r7, #14]
 800fb56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	4413      	add	r3, r2
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	4413      	add	r3, r2
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb6e:	7bbb      	ldrb	r3, [r7, #14]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d002      	beq.n	800fb7a <USBD_StdEPReq+0x264>
 800fb74:	7bbb      	ldrb	r3, [r7, #14]
 800fb76:	2b80      	cmp	r3, #128	@ 0x80
 800fb78:	d103      	bne.n	800fb82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	601a      	str	r2, [r3, #0]
 800fb80:	e00e      	b.n	800fba0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fb82:	7bbb      	ldrb	r3, [r7, #14]
 800fb84:	4619      	mov	r1, r3
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f001 f836 	bl	8010bf8 <USBD_LL_IsStallEP>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d003      	beq.n	800fb9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2201      	movs	r2, #1
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	e002      	b.n	800fba0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2202      	movs	r2, #2
 800fba4:	4619      	mov	r1, r3
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 fbe1 	bl	801036e <USBD_CtlSendData>
              break;
 800fbac:	e004      	b.n	800fbb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fbae:	6839      	ldr	r1, [r7, #0]
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 fb6b 	bl	801028c <USBD_CtlError>
              break;
 800fbb6:	bf00      	nop
          }
          break;
 800fbb8:	e004      	b.n	800fbc4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fb65 	bl	801028c <USBD_CtlError>
          break;
 800fbc2:	bf00      	nop
      }
      break;
 800fbc4:	e004      	b.n	800fbd0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fbc6:	6839      	ldr	r1, [r7, #0]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fb5f 	bl	801028c <USBD_CtlError>
      break;
 800fbce:	bf00      	nop
  }

  return ret;
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fbea:	2300      	movs	r3, #0
 800fbec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	885b      	ldrh	r3, [r3, #2]
 800fbf6:	0a1b      	lsrs	r3, r3, #8
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	2b0e      	cmp	r3, #14
 800fbfe:	f200 8152 	bhi.w	800fea6 <USBD_GetDescriptor+0x2ca>
 800fc02:	a201      	add	r2, pc, #4	@ (adr r2, 800fc08 <USBD_GetDescriptor+0x2c>)
 800fc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc08:	0800fc79 	.word	0x0800fc79
 800fc0c:	0800fc91 	.word	0x0800fc91
 800fc10:	0800fcd1 	.word	0x0800fcd1
 800fc14:	0800fea7 	.word	0x0800fea7
 800fc18:	0800fea7 	.word	0x0800fea7
 800fc1c:	0800fe47 	.word	0x0800fe47
 800fc20:	0800fe73 	.word	0x0800fe73
 800fc24:	0800fea7 	.word	0x0800fea7
 800fc28:	0800fea7 	.word	0x0800fea7
 800fc2c:	0800fea7 	.word	0x0800fea7
 800fc30:	0800fea7 	.word	0x0800fea7
 800fc34:	0800fea7 	.word	0x0800fea7
 800fc38:	0800fea7 	.word	0x0800fea7
 800fc3c:	0800fea7 	.word	0x0800fea7
 800fc40:	0800fc45 	.word	0x0800fc45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc4a:	69db      	ldr	r3, [r3, #28]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00b      	beq.n	800fc68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc56:	69db      	ldr	r3, [r3, #28]
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	7c12      	ldrb	r2, [r2, #16]
 800fc5c:	f107 0108 	add.w	r1, r7, #8
 800fc60:	4610      	mov	r0, r2
 800fc62:	4798      	blx	r3
 800fc64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc66:	e126      	b.n	800feb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fc68:	6839      	ldr	r1, [r7, #0]
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fb0e 	bl	801028c <USBD_CtlError>
        err++;
 800fc70:	7afb      	ldrb	r3, [r7, #11]
 800fc72:	3301      	adds	r3, #1
 800fc74:	72fb      	strb	r3, [r7, #11]
      break;
 800fc76:	e11e      	b.n	800feb6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	7c12      	ldrb	r2, [r2, #16]
 800fc84:	f107 0108 	add.w	r1, r7, #8
 800fc88:	4610      	mov	r0, r2
 800fc8a:	4798      	blx	r3
 800fc8c:	60f8      	str	r0, [r7, #12]
      break;
 800fc8e:	e112      	b.n	800feb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	7c1b      	ldrb	r3, [r3, #16]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10d      	bne.n	800fcb4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca0:	f107 0208 	add.w	r2, r7, #8
 800fca4:	4610      	mov	r0, r2
 800fca6:	4798      	blx	r3
 800fca8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3301      	adds	r3, #1
 800fcae:	2202      	movs	r2, #2
 800fcb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fcb2:	e100      	b.n	800feb6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcbc:	f107 0208 	add.w	r2, r7, #8
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	4798      	blx	r3
 800fcc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	2202      	movs	r2, #2
 800fccc:	701a      	strb	r2, [r3, #0]
      break;
 800fcce:	e0f2      	b.n	800feb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	885b      	ldrh	r3, [r3, #2]
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	2b05      	cmp	r3, #5
 800fcd8:	f200 80ac 	bhi.w	800fe34 <USBD_GetDescriptor+0x258>
 800fcdc:	a201      	add	r2, pc, #4	@ (adr r2, 800fce4 <USBD_GetDescriptor+0x108>)
 800fcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce2:	bf00      	nop
 800fce4:	0800fcfd 	.word	0x0800fcfd
 800fce8:	0800fd31 	.word	0x0800fd31
 800fcec:	0800fd65 	.word	0x0800fd65
 800fcf0:	0800fd99 	.word	0x0800fd99
 800fcf4:	0800fdcd 	.word	0x0800fdcd
 800fcf8:	0800fe01 	.word	0x0800fe01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00b      	beq.n	800fd20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	7c12      	ldrb	r2, [r2, #16]
 800fd14:	f107 0108 	add.w	r1, r7, #8
 800fd18:	4610      	mov	r0, r2
 800fd1a:	4798      	blx	r3
 800fd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd1e:	e091      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fab2 	bl	801028c <USBD_CtlError>
            err++;
 800fd28:	7afb      	ldrb	r3, [r7, #11]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd2e:	e089      	b.n	800fe44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00b      	beq.n	800fd54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	7c12      	ldrb	r2, [r2, #16]
 800fd48:	f107 0108 	add.w	r1, r7, #8
 800fd4c:	4610      	mov	r0, r2
 800fd4e:	4798      	blx	r3
 800fd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd52:	e077      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 fa98 	bl	801028c <USBD_CtlError>
            err++;
 800fd5c:	7afb      	ldrb	r3, [r7, #11]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	72fb      	strb	r3, [r7, #11]
          break;
 800fd62:	e06f      	b.n	800fe44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00b      	beq.n	800fd88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	7c12      	ldrb	r2, [r2, #16]
 800fd7c:	f107 0108 	add.w	r1, r7, #8
 800fd80:	4610      	mov	r0, r2
 800fd82:	4798      	blx	r3
 800fd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd86:	e05d      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd88:	6839      	ldr	r1, [r7, #0]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fa7e 	bl	801028c <USBD_CtlError>
            err++;
 800fd90:	7afb      	ldrb	r3, [r7, #11]
 800fd92:	3301      	adds	r3, #1
 800fd94:	72fb      	strb	r3, [r7, #11]
          break;
 800fd96:	e055      	b.n	800fe44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00b      	beq.n	800fdbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	7c12      	ldrb	r2, [r2, #16]
 800fdb0:	f107 0108 	add.w	r1, r7, #8
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	4798      	blx	r3
 800fdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdba:	e043      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fdbc:	6839      	ldr	r1, [r7, #0]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 fa64 	bl	801028c <USBD_CtlError>
            err++;
 800fdc4:	7afb      	ldrb	r3, [r7, #11]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800fdca:	e03b      	b.n	800fe44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdd2:	695b      	ldr	r3, [r3, #20]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d00b      	beq.n	800fdf0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdde:	695b      	ldr	r3, [r3, #20]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	7c12      	ldrb	r2, [r2, #16]
 800fde4:	f107 0108 	add.w	r1, r7, #8
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
 800fdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdee:	e029      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fa4a 	bl	801028c <USBD_CtlError>
            err++;
 800fdf8:	7afb      	ldrb	r3, [r7, #11]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800fdfe:	e021      	b.n	800fe44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe06:	699b      	ldr	r3, [r3, #24]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00b      	beq.n	800fe24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	7c12      	ldrb	r2, [r2, #16]
 800fe18:	f107 0108 	add.w	r1, r7, #8
 800fe1c:	4610      	mov	r0, r2
 800fe1e:	4798      	blx	r3
 800fe20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe22:	e00f      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 fa30 	bl	801028c <USBD_CtlError>
            err++;
 800fe2c:	7afb      	ldrb	r3, [r7, #11]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	72fb      	strb	r3, [r7, #11]
          break;
 800fe32:	e007      	b.n	800fe44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fe34:	6839      	ldr	r1, [r7, #0]
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fa28 	bl	801028c <USBD_CtlError>
          err++;
 800fe3c:	7afb      	ldrb	r3, [r7, #11]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fe42:	bf00      	nop
      }
      break;
 800fe44:	e037      	b.n	800feb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	7c1b      	ldrb	r3, [r3, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d109      	bne.n	800fe62 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe56:	f107 0208 	add.w	r2, r7, #8
 800fe5a:	4610      	mov	r0, r2
 800fe5c:	4798      	blx	r3
 800fe5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe60:	e029      	b.n	800feb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fa11 	bl	801028c <USBD_CtlError>
        err++;
 800fe6a:	7afb      	ldrb	r3, [r7, #11]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	72fb      	strb	r3, [r7, #11]
      break;
 800fe70:	e021      	b.n	800feb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	7c1b      	ldrb	r3, [r3, #16]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d10d      	bne.n	800fe96 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe82:	f107 0208 	add.w	r2, r7, #8
 800fe86:	4610      	mov	r0, r2
 800fe88:	4798      	blx	r3
 800fe8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	2207      	movs	r2, #7
 800fe92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe94:	e00f      	b.n	800feb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe96:	6839      	ldr	r1, [r7, #0]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f9f7 	bl	801028c <USBD_CtlError>
        err++;
 800fe9e:	7afb      	ldrb	r3, [r7, #11]
 800fea0:	3301      	adds	r3, #1
 800fea2:	72fb      	strb	r3, [r7, #11]
      break;
 800fea4:	e007      	b.n	800feb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fea6:	6839      	ldr	r1, [r7, #0]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f9ef 	bl	801028c <USBD_CtlError>
      err++;
 800feae:	7afb      	ldrb	r3, [r7, #11]
 800feb0:	3301      	adds	r3, #1
 800feb2:	72fb      	strb	r3, [r7, #11]
      break;
 800feb4:	bf00      	nop
  }

  if (err != 0U)
 800feb6:	7afb      	ldrb	r3, [r7, #11]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d11e      	bne.n	800fefa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	88db      	ldrh	r3, [r3, #6]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d016      	beq.n	800fef2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fec4:	893b      	ldrh	r3, [r7, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00e      	beq.n	800fee8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	88da      	ldrh	r2, [r3, #6]
 800fece:	893b      	ldrh	r3, [r7, #8]
 800fed0:	4293      	cmp	r3, r2
 800fed2:	bf28      	it	cs
 800fed4:	4613      	movcs	r3, r2
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800feda:	893b      	ldrh	r3, [r7, #8]
 800fedc:	461a      	mov	r2, r3
 800fede:	68f9      	ldr	r1, [r7, #12]
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fa44 	bl	801036e <USBD_CtlSendData>
 800fee6:	e009      	b.n	800fefc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f9ce 	bl	801028c <USBD_CtlError>
 800fef0:	e004      	b.n	800fefc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 fa95 	bl	8010422 <USBD_CtlSendStatus>
 800fef8:	e000      	b.n	800fefc <USBD_GetDescriptor+0x320>
    return;
 800fefa:	bf00      	nop
  }
}
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop

0800ff04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	889b      	ldrh	r3, [r3, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d131      	bne.n	800ff7a <USBD_SetAddress+0x76>
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	88db      	ldrh	r3, [r3, #6]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d12d      	bne.n	800ff7a <USBD_SetAddress+0x76>
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	885b      	ldrh	r3, [r3, #2]
 800ff22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff24:	d829      	bhi.n	800ff7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	885b      	ldrh	r3, [r3, #2]
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	d104      	bne.n	800ff48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 f9a3 	bl	801028c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff46:	e01d      	b.n	800ff84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	7bfa      	ldrb	r2, [r7, #15]
 800ff4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ff50:	7bfb      	ldrb	r3, [r7, #15]
 800ff52:	4619      	mov	r1, r3
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f000 fe7b 	bl	8010c50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fa61 	bl	8010422 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d004      	beq.n	800ff70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2202      	movs	r2, #2
 800ff6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff6e:	e009      	b.n	800ff84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff78:	e004      	b.n	800ff84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ff7a:	6839      	ldr	r1, [r7, #0]
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 f985 	bl	801028c <USBD_CtlError>
  }
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	885b      	ldrh	r3, [r3, #2]
 800ff9e:	b2da      	uxtb	r2, r3
 800ffa0:	4b4c      	ldr	r3, [pc, #304]	@ (80100d4 <USBD_SetConfig+0x148>)
 800ffa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ffa4:	4b4b      	ldr	r3, [pc, #300]	@ (80100d4 <USBD_SetConfig+0x148>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d905      	bls.n	800ffb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 f96c 	bl	801028c <USBD_CtlError>
    return USBD_FAIL;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	e088      	b.n	80100ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d002      	beq.n	800ffca <USBD_SetConfig+0x3e>
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	d025      	beq.n	8010014 <USBD_SetConfig+0x88>
 800ffc8:	e071      	b.n	80100ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ffca:	4b42      	ldr	r3, [pc, #264]	@ (80100d4 <USBD_SetConfig+0x148>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01c      	beq.n	801000c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ffd2:	4b40      	ldr	r3, [pc, #256]	@ (80100d4 <USBD_SetConfig+0x148>)
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffdc:	4b3d      	ldr	r3, [pc, #244]	@ (80100d4 <USBD_SetConfig+0x148>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff f992 	bl	800f30c <USBD_SetClassConfig>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ffec:	7bfb      	ldrb	r3, [r7, #15]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d004      	beq.n	800fffc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f949 	bl	801028c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fffa:	e065      	b.n	80100c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 fa10 	bl	8010422 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2203      	movs	r2, #3
 8010006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801000a:	e05d      	b.n	80100c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 fa08 	bl	8010422 <USBD_CtlSendStatus>
      break;
 8010012:	e059      	b.n	80100c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010014:	4b2f      	ldr	r3, [pc, #188]	@ (80100d4 <USBD_SetConfig+0x148>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d112      	bne.n	8010042 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2202      	movs	r2, #2
 8010020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010024:	4b2b      	ldr	r3, [pc, #172]	@ (80100d4 <USBD_SetConfig+0x148>)
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	461a      	mov	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801002e:	4b29      	ldr	r3, [pc, #164]	@ (80100d4 <USBD_SetConfig+0x148>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	4619      	mov	r1, r3
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7ff f985 	bl	800f344 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f9f1 	bl	8010422 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010040:	e042      	b.n	80100c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010042:	4b24      	ldr	r3, [pc, #144]	@ (80100d4 <USBD_SetConfig+0x148>)
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	461a      	mov	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	429a      	cmp	r2, r3
 801004e:	d02a      	beq.n	80100a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff f973 	bl	800f344 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801005e:	4b1d      	ldr	r3, [pc, #116]	@ (80100d4 <USBD_SetConfig+0x148>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010068:	4b1a      	ldr	r3, [pc, #104]	@ (80100d4 <USBD_SetConfig+0x148>)
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f7ff f94c 	bl	800f30c <USBD_SetClassConfig>
 8010074:	4603      	mov	r3, r0
 8010076:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010078:	7bfb      	ldrb	r3, [r7, #15]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00f      	beq.n	801009e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f903 	bl	801028c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	b2db      	uxtb	r3, r3
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff f958 	bl	800f344 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2202      	movs	r2, #2
 8010098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801009c:	e014      	b.n	80100c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f9bf 	bl	8010422 <USBD_CtlSendStatus>
      break;
 80100a4:	e010      	b.n	80100c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f9bb 	bl	8010422 <USBD_CtlSendStatus>
      break;
 80100ac:	e00c      	b.n	80100c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f8eb 	bl	801028c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80100b6:	4b07      	ldr	r3, [pc, #28]	@ (80100d4 <USBD_SetConfig+0x148>)
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	4619      	mov	r1, r3
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7ff f941 	bl	800f344 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80100c2:	2303      	movs	r3, #3
 80100c4:	73fb      	strb	r3, [r7, #15]
      break;
 80100c6:	bf00      	nop
  }

  return ret;
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20001aa8 	.word	0x20001aa8

080100d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	88db      	ldrh	r3, [r3, #6]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d004      	beq.n	80100f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 f8cd 	bl	801028c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80100f2:	e023      	b.n	801013c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	2b02      	cmp	r3, #2
 80100fe:	dc02      	bgt.n	8010106 <USBD_GetConfig+0x2e>
 8010100:	2b00      	cmp	r3, #0
 8010102:	dc03      	bgt.n	801010c <USBD_GetConfig+0x34>
 8010104:	e015      	b.n	8010132 <USBD_GetConfig+0x5a>
 8010106:	2b03      	cmp	r3, #3
 8010108:	d00b      	beq.n	8010122 <USBD_GetConfig+0x4a>
 801010a:	e012      	b.n	8010132 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	3308      	adds	r3, #8
 8010116:	2201      	movs	r2, #1
 8010118:	4619      	mov	r1, r3
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 f927 	bl	801036e <USBD_CtlSendData>
        break;
 8010120:	e00c      	b.n	801013c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	3304      	adds	r3, #4
 8010126:	2201      	movs	r2, #1
 8010128:	4619      	mov	r1, r3
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 f91f 	bl	801036e <USBD_CtlSendData>
        break;
 8010130:	e004      	b.n	801013c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 f8a9 	bl	801028c <USBD_CtlError>
        break;
 801013a:	bf00      	nop
}
 801013c:	bf00      	nop
 801013e:	3708      	adds	r7, #8
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010154:	b2db      	uxtb	r3, r3
 8010156:	3b01      	subs	r3, #1
 8010158:	2b02      	cmp	r3, #2
 801015a:	d81e      	bhi.n	801019a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	88db      	ldrh	r3, [r3, #6]
 8010160:	2b02      	cmp	r3, #2
 8010162:	d004      	beq.n	801016e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010164:	6839      	ldr	r1, [r7, #0]
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f890 	bl	801028c <USBD_CtlError>
        break;
 801016c:	e01a      	b.n	80101a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801017a:	2b00      	cmp	r3, #0
 801017c:	d005      	beq.n	801018a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	f043 0202 	orr.w	r2, r3, #2
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	330c      	adds	r3, #12
 801018e:	2202      	movs	r2, #2
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f8eb 	bl	801036e <USBD_CtlSendData>
      break;
 8010198:	e004      	b.n	80101a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f875 	bl	801028c <USBD_CtlError>
      break;
 80101a2:	bf00      	nop
  }
}
 80101a4:	bf00      	nop
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	885b      	ldrh	r3, [r3, #2]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d106      	bne.n	80101cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2201      	movs	r2, #1
 80101c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 f92b 	bl	8010422 <USBD_CtlSendStatus>
  }
}
 80101cc:	bf00      	nop
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	3b01      	subs	r3, #1
 80101e8:	2b02      	cmp	r3, #2
 80101ea:	d80b      	bhi.n	8010204 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	885b      	ldrh	r3, [r3, #2]
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d10c      	bne.n	801020e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 f910 	bl	8010422 <USBD_CtlSendStatus>
      }
      break;
 8010202:	e004      	b.n	801020e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010204:	6839      	ldr	r1, [r7, #0]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f840 	bl	801028c <USBD_CtlError>
      break;
 801020c:	e000      	b.n	8010210 <USBD_ClrFeature+0x3c>
      break;
 801020e:	bf00      	nop
  }
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	781a      	ldrb	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	3301      	adds	r3, #1
 8010232:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	781a      	ldrb	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3301      	adds	r3, #1
 8010240:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f7ff fa92 	bl	800f76c <SWAPBYTE>
 8010248:	4603      	mov	r3, r0
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	3301      	adds	r3, #1
 8010254:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	3301      	adds	r3, #1
 801025a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f7ff fa85 	bl	800f76c <SWAPBYTE>
 8010262:	4603      	mov	r3, r0
 8010264:	461a      	mov	r2, r3
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	3301      	adds	r3, #1
 801026e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	3301      	adds	r3, #1
 8010274:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f7ff fa78 	bl	800f76c <SWAPBYTE>
 801027c:	4603      	mov	r3, r0
 801027e:	461a      	mov	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	80da      	strh	r2, [r3, #6]
}
 8010284:	bf00      	nop
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010296:	2180      	movs	r1, #128	@ 0x80
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fc6f 	bl	8010b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801029e:	2100      	movs	r1, #0
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f000 fc6b 	bl	8010b7c <USBD_LL_StallEP>
}
 80102a6:	bf00      	nop
 80102a8:	3708      	adds	r7, #8
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b086      	sub	sp, #24
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	60f8      	str	r0, [r7, #12]
 80102b6:	60b9      	str	r1, [r7, #8]
 80102b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80102ba:	2300      	movs	r3, #0
 80102bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d036      	beq.n	8010332 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80102c8:	6938      	ldr	r0, [r7, #16]
 80102ca:	f000 f836 	bl	801033a <USBD_GetLen>
 80102ce:	4603      	mov	r3, r0
 80102d0:	3301      	adds	r3, #1
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	005b      	lsls	r3, r3, #1
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80102dc:	7dfb      	ldrb	r3, [r7, #23]
 80102de:	68ba      	ldr	r2, [r7, #8]
 80102e0:	4413      	add	r3, r2
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	7812      	ldrb	r2, [r2, #0]
 80102e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80102e8:	7dfb      	ldrb	r3, [r7, #23]
 80102ea:	3301      	adds	r3, #1
 80102ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	4413      	add	r3, r2
 80102f4:	2203      	movs	r2, #3
 80102f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80102f8:	7dfb      	ldrb	r3, [r7, #23]
 80102fa:	3301      	adds	r3, #1
 80102fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80102fe:	e013      	b.n	8010328 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010300:	7dfb      	ldrb	r3, [r7, #23]
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	4413      	add	r3, r2
 8010306:	693a      	ldr	r2, [r7, #16]
 8010308:	7812      	ldrb	r2, [r2, #0]
 801030a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	3301      	adds	r3, #1
 8010310:	613b      	str	r3, [r7, #16]
    idx++;
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	3301      	adds	r3, #1
 8010316:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010318:	7dfb      	ldrb	r3, [r7, #23]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	4413      	add	r3, r2
 801031e:	2200      	movs	r2, #0
 8010320:	701a      	strb	r2, [r3, #0]
    idx++;
 8010322:	7dfb      	ldrb	r3, [r7, #23]
 8010324:	3301      	adds	r3, #1
 8010326:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1e7      	bne.n	8010300 <USBD_GetString+0x52>
 8010330:	e000      	b.n	8010334 <USBD_GetString+0x86>
    return;
 8010332:	bf00      	nop
  }
}
 8010334:	3718      	adds	r7, #24
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801033a:	b480      	push	{r7}
 801033c:	b085      	sub	sp, #20
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010342:	2300      	movs	r3, #0
 8010344:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801034a:	e005      	b.n	8010358 <USBD_GetLen+0x1e>
  {
    len++;
 801034c:	7bfb      	ldrb	r3, [r7, #15]
 801034e:	3301      	adds	r3, #1
 8010350:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	3301      	adds	r3, #1
 8010356:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1f5      	bne.n	801034c <USBD_GetLen+0x12>
  }

  return len;
 8010360:	7bfb      	ldrb	r3, [r7, #15]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3714      	adds	r7, #20
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	60f8      	str	r0, [r7, #12]
 8010376:	60b9      	str	r1, [r7, #8]
 8010378:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2202      	movs	r2, #2
 801037e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	2100      	movs	r1, #0
 8010394:	68f8      	ldr	r0, [r7, #12]
 8010396:	f000 fc7a 	bl	8010c8e <USBD_LL_Transmit>

  return USBD_OK;
 801039a:	2300      	movs	r3, #0
}
 801039c:	4618      	mov	r0, r3
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	68ba      	ldr	r2, [r7, #8]
 80103b4:	2100      	movs	r1, #0
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f000 fc69 	bl	8010c8e <USBD_LL_Transmit>

  return USBD_OK;
 80103bc:	2300      	movs	r3, #0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b084      	sub	sp, #16
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	60f8      	str	r0, [r7, #12]
 80103ce:	60b9      	str	r1, [r7, #8]
 80103d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2203      	movs	r2, #3
 80103d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	2100      	movs	r1, #0
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f000 fc6d 	bl	8010cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103f6:	2300      	movs	r3, #0
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	68ba      	ldr	r2, [r7, #8]
 8010410:	2100      	movs	r1, #0
 8010412:	68f8      	ldr	r0, [r7, #12]
 8010414:	f000 fc5c 	bl	8010cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010422:	b580      	push	{r7, lr}
 8010424:	b082      	sub	sp, #8
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2204      	movs	r2, #4
 801042e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010432:	2300      	movs	r3, #0
 8010434:	2200      	movs	r2, #0
 8010436:	2100      	movs	r1, #0
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fc28 	bl	8010c8e <USBD_LL_Transmit>

  return USBD_OK;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2205      	movs	r2, #5
 8010454:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010458:	2300      	movs	r3, #0
 801045a:	2200      	movs	r2, #0
 801045c:	2100      	movs	r1, #0
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fc36 	bl	8010cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
	...

08010470 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010474:	2200      	movs	r2, #0
 8010476:	4912      	ldr	r1, [pc, #72]	@ (80104c0 <MX_USB_Device_Init+0x50>)
 8010478:	4812      	ldr	r0, [pc, #72]	@ (80104c4 <MX_USB_Device_Init+0x54>)
 801047a:	f7fe fed9 	bl	800f230 <USBD_Init>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010484:	f7f2 f8d8 	bl	8002638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010488:	490f      	ldr	r1, [pc, #60]	@ (80104c8 <MX_USB_Device_Init+0x58>)
 801048a:	480e      	ldr	r0, [pc, #56]	@ (80104c4 <MX_USB_Device_Init+0x54>)
 801048c:	f7fe ff00 	bl	800f290 <USBD_RegisterClass>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d001      	beq.n	801049a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010496:	f7f2 f8cf 	bl	8002638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801049a:	490c      	ldr	r1, [pc, #48]	@ (80104cc <MX_USB_Device_Init+0x5c>)
 801049c:	4809      	ldr	r0, [pc, #36]	@ (80104c4 <MX_USB_Device_Init+0x54>)
 801049e:	f7fe fe51 	bl	800f144 <USBD_CDC_RegisterInterface>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80104a8:	f7f2 f8c6 	bl	8002638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80104ac:	4805      	ldr	r0, [pc, #20]	@ (80104c4 <MX_USB_Device_Init+0x54>)
 80104ae:	f7fe ff16 	bl	800f2de <USBD_Start>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80104b8:	f7f2 f8be 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80104bc:	bf00      	nop
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	20000334 	.word	0x20000334
 80104c4:	20001aac 	.word	0x20001aac
 80104c8:	2000021c 	.word	0x2000021c
 80104cc:	20000320 	.word	0x20000320

080104d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80104d4:	2200      	movs	r2, #0
 80104d6:	4905      	ldr	r1, [pc, #20]	@ (80104ec <CDC_Init_FS+0x1c>)
 80104d8:	4805      	ldr	r0, [pc, #20]	@ (80104f0 <CDC_Init_FS+0x20>)
 80104da:	f7fe fe48 	bl	800f16e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80104de:	4905      	ldr	r1, [pc, #20]	@ (80104f4 <CDC_Init_FS+0x24>)
 80104e0:	4803      	ldr	r0, [pc, #12]	@ (80104f0 <CDC_Init_FS+0x20>)
 80104e2:	f7fe fe62 	bl	800f1aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80104e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	2000217c 	.word	0x2000217c
 80104f0:	20001aac 	.word	0x20001aac
 80104f4:	20001d7c 	.word	0x20001d7c

080104f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80104f8:	b480      	push	{r7}
 80104fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80104fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80104fe:	4618      	mov	r0, r3
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr

08010508 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	4603      	mov	r3, r0
 8010510:	6039      	str	r1, [r7, #0]
 8010512:	71fb      	strb	r3, [r7, #7]
 8010514:	4613      	mov	r3, r2
 8010516:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	2b23      	cmp	r3, #35	@ 0x23
 801051c:	d84a      	bhi.n	80105b4 <CDC_Control_FS+0xac>
 801051e:	a201      	add	r2, pc, #4	@ (adr r2, 8010524 <CDC_Control_FS+0x1c>)
 8010520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010524:	080105b5 	.word	0x080105b5
 8010528:	080105b5 	.word	0x080105b5
 801052c:	080105b5 	.word	0x080105b5
 8010530:	080105b5 	.word	0x080105b5
 8010534:	080105b5 	.word	0x080105b5
 8010538:	080105b5 	.word	0x080105b5
 801053c:	080105b5 	.word	0x080105b5
 8010540:	080105b5 	.word	0x080105b5
 8010544:	080105b5 	.word	0x080105b5
 8010548:	080105b5 	.word	0x080105b5
 801054c:	080105b5 	.word	0x080105b5
 8010550:	080105b5 	.word	0x080105b5
 8010554:	080105b5 	.word	0x080105b5
 8010558:	080105b5 	.word	0x080105b5
 801055c:	080105b5 	.word	0x080105b5
 8010560:	080105b5 	.word	0x080105b5
 8010564:	080105b5 	.word	0x080105b5
 8010568:	080105b5 	.word	0x080105b5
 801056c:	080105b5 	.word	0x080105b5
 8010570:	080105b5 	.word	0x080105b5
 8010574:	080105b5 	.word	0x080105b5
 8010578:	080105b5 	.word	0x080105b5
 801057c:	080105b5 	.word	0x080105b5
 8010580:	080105b5 	.word	0x080105b5
 8010584:	080105b5 	.word	0x080105b5
 8010588:	080105b5 	.word	0x080105b5
 801058c:	080105b5 	.word	0x080105b5
 8010590:	080105b5 	.word	0x080105b5
 8010594:	080105b5 	.word	0x080105b5
 8010598:	080105b5 	.word	0x080105b5
 801059c:	080105b5 	.word	0x080105b5
 80105a0:	080105b5 	.word	0x080105b5
 80105a4:	080105b5 	.word	0x080105b5
 80105a8:	080105b5 	.word	0x080105b5
 80105ac:	080105b5 	.word	0x080105b5
 80105b0:	080105b5 	.word	0x080105b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80105b4:	bf00      	nop
  }

  return (USBD_OK);
 80105b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	370c      	adds	r7, #12
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr

080105c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80105ce:	6879      	ldr	r1, [r7, #4]
 80105d0:	4805      	ldr	r0, [pc, #20]	@ (80105e8 <CDC_Receive_FS+0x24>)
 80105d2:	f7fe fdea 	bl	800f1aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80105d6:	4804      	ldr	r0, [pc, #16]	@ (80105e8 <CDC_Receive_FS+0x24>)
 80105d8:	f7fe fe00 	bl	800f1dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80105dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3708      	adds	r7, #8
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	20001aac 	.word	0x20001aac

080105ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	4613      	mov	r3, r2
 80105f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105fa:	2300      	movs	r3, #0
 80105fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010602:	4618      	mov	r0, r3
 8010604:	371c      	adds	r7, #28
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
	...

08010610 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	6039      	str	r1, [r7, #0]
 801061a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2212      	movs	r2, #18
 8010620:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010622:	4b03      	ldr	r3, [pc, #12]	@ (8010630 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010624:	4618      	mov	r0, r3
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr
 8010630:	20000354 	.word	0x20000354

08010634 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	4603      	mov	r3, r0
 801063c:	6039      	str	r1, [r7, #0]
 801063e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	2204      	movs	r2, #4
 8010644:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010646:	4b03      	ldr	r3, [pc, #12]	@ (8010654 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010648:	4618      	mov	r0, r3
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr
 8010654:	20000368 	.word	0x20000368

08010658 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	6039      	str	r1, [r7, #0]
 8010662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010664:	79fb      	ldrb	r3, [r7, #7]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d105      	bne.n	8010676 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	4907      	ldr	r1, [pc, #28]	@ (801068c <USBD_CDC_ProductStrDescriptor+0x34>)
 801066e:	4808      	ldr	r0, [pc, #32]	@ (8010690 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010670:	f7ff fe1d 	bl	80102ae <USBD_GetString>
 8010674:	e004      	b.n	8010680 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010676:	683a      	ldr	r2, [r7, #0]
 8010678:	4904      	ldr	r1, [pc, #16]	@ (801068c <USBD_CDC_ProductStrDescriptor+0x34>)
 801067a:	4805      	ldr	r0, [pc, #20]	@ (8010690 <USBD_CDC_ProductStrDescriptor+0x38>)
 801067c:	f7ff fe17 	bl	80102ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8010680:	4b02      	ldr	r3, [pc, #8]	@ (801068c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	2000257c 	.word	0x2000257c
 8010690:	080156b0 	.word	0x080156b0

08010694 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	4603      	mov	r3, r0
 801069c:	6039      	str	r1, [r7, #0]
 801069e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	4904      	ldr	r1, [pc, #16]	@ (80106b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80106a4:	4804      	ldr	r0, [pc, #16]	@ (80106b8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80106a6:	f7ff fe02 	bl	80102ae <USBD_GetString>
  return USBD_StrDesc;
 80106aa:	4b02      	ldr	r3, [pc, #8]	@ (80106b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	2000257c 	.word	0x2000257c
 80106b8:	080156c8 	.word	0x080156c8

080106bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	4603      	mov	r3, r0
 80106c4:	6039      	str	r1, [r7, #0]
 80106c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	221a      	movs	r2, #26
 80106cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106ce:	f000 f843 	bl	8010758 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80106d2:	4b02      	ldr	r3, [pc, #8]	@ (80106dc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	2000036c 	.word	0x2000036c

080106e0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	4603      	mov	r3, r0
 80106e8:	6039      	str	r1, [r7, #0]
 80106ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106ec:	79fb      	ldrb	r3, [r7, #7]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d105      	bne.n	80106fe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106f2:	683a      	ldr	r2, [r7, #0]
 80106f4:	4907      	ldr	r1, [pc, #28]	@ (8010714 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106f6:	4808      	ldr	r0, [pc, #32]	@ (8010718 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80106f8:	f7ff fdd9 	bl	80102ae <USBD_GetString>
 80106fc:	e004      	b.n	8010708 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	4904      	ldr	r1, [pc, #16]	@ (8010714 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010702:	4805      	ldr	r0, [pc, #20]	@ (8010718 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010704:	f7ff fdd3 	bl	80102ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8010708:	4b02      	ldr	r3, [pc, #8]	@ (8010714 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801070a:	4618      	mov	r0, r3
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	2000257c 	.word	0x2000257c
 8010718:	080156dc 	.word	0x080156dc

0801071c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	4603      	mov	r3, r0
 8010724:	6039      	str	r1, [r7, #0]
 8010726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010728:	79fb      	ldrb	r3, [r7, #7]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d105      	bne.n	801073a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	4907      	ldr	r1, [pc, #28]	@ (8010750 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010732:	4808      	ldr	r0, [pc, #32]	@ (8010754 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010734:	f7ff fdbb 	bl	80102ae <USBD_GetString>
 8010738:	e004      	b.n	8010744 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801073a:	683a      	ldr	r2, [r7, #0]
 801073c:	4904      	ldr	r1, [pc, #16]	@ (8010750 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801073e:	4805      	ldr	r0, [pc, #20]	@ (8010754 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010740:	f7ff fdb5 	bl	80102ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8010744:	4b02      	ldr	r3, [pc, #8]	@ (8010750 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010746:	4618      	mov	r0, r3
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	2000257c 	.word	0x2000257c
 8010754:	080156e8 	.word	0x080156e8

08010758 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801075e:	4b0f      	ldr	r3, [pc, #60]	@ (801079c <Get_SerialNum+0x44>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010764:	4b0e      	ldr	r3, [pc, #56]	@ (80107a0 <Get_SerialNum+0x48>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801076a:	4b0e      	ldr	r3, [pc, #56]	@ (80107a4 <Get_SerialNum+0x4c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4413      	add	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d009      	beq.n	8010792 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801077e:	2208      	movs	r2, #8
 8010780:	4909      	ldr	r1, [pc, #36]	@ (80107a8 <Get_SerialNum+0x50>)
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f000 f814 	bl	80107b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010788:	2204      	movs	r2, #4
 801078a:	4908      	ldr	r1, [pc, #32]	@ (80107ac <Get_SerialNum+0x54>)
 801078c:	68b8      	ldr	r0, [r7, #8]
 801078e:	f000 f80f 	bl	80107b0 <IntToUnicode>
  }
}
 8010792:	bf00      	nop
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	1fff7590 	.word	0x1fff7590
 80107a0:	1fff7594 	.word	0x1fff7594
 80107a4:	1fff7598 	.word	0x1fff7598
 80107a8:	2000036e 	.word	0x2000036e
 80107ac:	2000037e 	.word	0x2000037e

080107b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b087      	sub	sp, #28
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	4613      	mov	r3, r2
 80107bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107c2:	2300      	movs	r3, #0
 80107c4:	75fb      	strb	r3, [r7, #23]
 80107c6:	e027      	b.n	8010818 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	0f1b      	lsrs	r3, r3, #28
 80107cc:	2b09      	cmp	r3, #9
 80107ce:	d80b      	bhi.n	80107e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	0f1b      	lsrs	r3, r3, #28
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	7dfb      	ldrb	r3, [r7, #23]
 80107d8:	005b      	lsls	r3, r3, #1
 80107da:	4619      	mov	r1, r3
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	440b      	add	r3, r1
 80107e0:	3230      	adds	r2, #48	@ 0x30
 80107e2:	b2d2      	uxtb	r2, r2
 80107e4:	701a      	strb	r2, [r3, #0]
 80107e6:	e00a      	b.n	80107fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	0f1b      	lsrs	r3, r3, #28
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
 80107f0:	005b      	lsls	r3, r3, #1
 80107f2:	4619      	mov	r1, r3
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	440b      	add	r3, r1
 80107f8:	3237      	adds	r2, #55	@ 0x37
 80107fa:	b2d2      	uxtb	r2, r2
 80107fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	011b      	lsls	r3, r3, #4
 8010802:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010804:	7dfb      	ldrb	r3, [r7, #23]
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	3301      	adds	r3, #1
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	4413      	add	r3, r2
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	3301      	adds	r3, #1
 8010816:	75fb      	strb	r3, [r7, #23]
 8010818:	7dfa      	ldrb	r2, [r7, #23]
 801081a:	79fb      	ldrb	r3, [r7, #7]
 801081c:	429a      	cmp	r2, r3
 801081e:	d3d3      	bcc.n	80107c8 <IntToUnicode+0x18>
  }
}
 8010820:	bf00      	nop
 8010822:	bf00      	nop
 8010824:	371c      	adds	r7, #28
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr
	...

08010830 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b098      	sub	sp, #96	@ 0x60
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010838:	f107 030c 	add.w	r3, r7, #12
 801083c:	2254      	movs	r2, #84	@ 0x54
 801083e:	2100      	movs	r1, #0
 8010840:	4618      	mov	r0, r3
 8010842:	f001 fb7d 	bl	8011f40 <memset>
  if(pcdHandle->Instance==USB)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a15      	ldr	r2, [pc, #84]	@ (80108a0 <HAL_PCD_MspInit+0x70>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d122      	bne.n	8010896 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010854:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010856:	2300      	movs	r3, #0
 8010858:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801085a:	f107 030c 	add.w	r3, r7, #12
 801085e:	4618      	mov	r0, r3
 8010860:	f7f8 fef0 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801086a:	f7f1 fee5 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801086e:	4b0d      	ldr	r3, [pc, #52]	@ (80108a4 <HAL_PCD_MspInit+0x74>)
 8010870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010872:	4a0c      	ldr	r2, [pc, #48]	@ (80108a4 <HAL_PCD_MspInit+0x74>)
 8010874:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010878:	6593      	str	r3, [r2, #88]	@ 0x58
 801087a:	4b0a      	ldr	r3, [pc, #40]	@ (80108a4 <HAL_PCD_MspInit+0x74>)
 801087c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801087e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010882:	60bb      	str	r3, [r7, #8]
 8010884:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010886:	2200      	movs	r2, #0
 8010888:	2100      	movs	r1, #0
 801088a:	2014      	movs	r0, #20
 801088c:	f7f4 ff35 	bl	80056fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010890:	2014      	movs	r0, #20
 8010892:	f7f4 ff4c 	bl	800572e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010896:	bf00      	nop
 8010898:	3760      	adds	r7, #96	@ 0x60
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	40005c00 	.word	0x40005c00
 80108a4:	40021000 	.word	0x40021000

080108a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80108bc:	4619      	mov	r1, r3
 80108be:	4610      	mov	r0, r2
 80108c0:	f7fe fd58 	bl	800f374 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80108c4:	bf00      	nop
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	460b      	mov	r3, r1
 80108d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80108de:	78fa      	ldrb	r2, [r7, #3]
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4413      	add	r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	440b      	add	r3, r1
 80108ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	78fb      	ldrb	r3, [r7, #3]
 80108f4:	4619      	mov	r1, r3
 80108f6:	f7fe fd92 	bl	800f41e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80108fa:	bf00      	nop
 80108fc:	3708      	adds	r7, #8
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010902:	b580      	push	{r7, lr}
 8010904:	b082      	sub	sp, #8
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	460b      	mov	r3, r1
 801090c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010914:	78fa      	ldrb	r2, [r7, #3]
 8010916:	6879      	ldr	r1, [r7, #4]
 8010918:	4613      	mov	r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	4413      	add	r3, r2
 801091e:	00db      	lsls	r3, r3, #3
 8010920:	440b      	add	r3, r1
 8010922:	3324      	adds	r3, #36	@ 0x24
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	78fb      	ldrb	r3, [r7, #3]
 8010928:	4619      	mov	r1, r3
 801092a:	f7fe fddb 	bl	800f4e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010936:	b580      	push	{r7, lr}
 8010938:	b082      	sub	sp, #8
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010944:	4618      	mov	r0, r3
 8010946:	f7fe feef 	bl	800f728 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b084      	sub	sp, #16
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801095a:	2301      	movs	r3, #1
 801095c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	795b      	ldrb	r3, [r3, #5]
 8010962:	2b02      	cmp	r3, #2
 8010964:	d001      	beq.n	801096a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010966:	f7f1 fe67 	bl	8002638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010970:	7bfa      	ldrb	r2, [r7, #15]
 8010972:	4611      	mov	r1, r2
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe fe99 	bl	800f6ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010980:	4618      	mov	r0, r3
 8010982:	f7fe fe45 	bl	800f610 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010986:	bf00      	nop
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
	...

08010990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fe fe94 	bl	800f6cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	7a5b      	ldrb	r3, [r3, #9]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d005      	beq.n	80109b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109ac:	4b04      	ldr	r3, [pc, #16]	@ (80109c0 <HAL_PCD_SuspendCallback+0x30>)
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	4a03      	ldr	r2, [pc, #12]	@ (80109c0 <HAL_PCD_SuspendCallback+0x30>)
 80109b2:	f043 0306 	orr.w	r3, r3, #6
 80109b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	e000ed00 	.word	0xe000ed00

080109c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	7a5b      	ldrb	r3, [r3, #9]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d007      	beq.n	80109e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d4:	4b08      	ldr	r3, [pc, #32]	@ (80109f8 <HAL_PCD_ResumeCallback+0x34>)
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	4a07      	ldr	r2, [pc, #28]	@ (80109f8 <HAL_PCD_ResumeCallback+0x34>)
 80109da:	f023 0306 	bic.w	r3, r3, #6
 80109de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80109e0:	f000 f9f8 	bl	8010dd4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe fe84 	bl	800f6f8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	e000ed00 	.word	0xe000ed00

080109fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010a04:	4a2b      	ldr	r2, [pc, #172]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	4a29      	ldr	r2, [pc, #164]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a10:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010a14:	4b27      	ldr	r3, [pc, #156]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a16:	4a28      	ldr	r2, [pc, #160]	@ (8010ab8 <USBD_LL_Init+0xbc>)
 8010a18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010a1a:	4b26      	ldr	r3, [pc, #152]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a1c:	2208      	movs	r2, #8
 8010a1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010a20:	4b24      	ldr	r3, [pc, #144]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a22:	2202      	movs	r2, #2
 8010a24:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a26:	4b23      	ldr	r3, [pc, #140]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a28:	2202      	movs	r2, #2
 8010a2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010a2c:	4b21      	ldr	r3, [pc, #132]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010a32:	4b20      	ldr	r3, [pc, #128]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010a38:	4b1e      	ldr	r3, [pc, #120]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010a44:	481b      	ldr	r0, [pc, #108]	@ (8010ab4 <USBD_LL_Init+0xb8>)
 8010a46:	f7f6 faee 	bl	8007026 <HAL_PCD_Init>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d001      	beq.n	8010a54 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010a50:	f7f1 fdf2 	bl	8002638 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a5a:	2318      	movs	r3, #24
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	2100      	movs	r1, #0
 8010a60:	f7f7 ff75 	bl	800894e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a6a:	2358      	movs	r3, #88	@ 0x58
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	2180      	movs	r1, #128	@ 0x80
 8010a70:	f7f7 ff6d 	bl	800894e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a7a:	23c0      	movs	r3, #192	@ 0xc0
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2181      	movs	r1, #129	@ 0x81
 8010a80:	f7f7 ff65 	bl	800894e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a8a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010a8e:	2200      	movs	r2, #0
 8010a90:	2101      	movs	r1, #1
 8010a92:	f7f7 ff5c 	bl	800894e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	2182      	movs	r1, #130	@ 0x82
 8010aa4:	f7f7 ff53 	bl	800894e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3708      	adds	r7, #8
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	2000277c 	.word	0x2000277c
 8010ab8:	40005c00 	.word	0x40005c00

08010abc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7f6 fb75 	bl	80071c2 <HAL_PCD_Start>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 f97e 	bl	8010de0 <USBD_Get_USB_Status>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b084      	sub	sp, #16
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	4608      	mov	r0, r1
 8010afc:	4611      	mov	r1, r2
 8010afe:	461a      	mov	r2, r3
 8010b00:	4603      	mov	r3, r0
 8010b02:	70fb      	strb	r3, [r7, #3]
 8010b04:	460b      	mov	r3, r1
 8010b06:	70bb      	strb	r3, [r7, #2]
 8010b08:	4613      	mov	r3, r2
 8010b0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b1a:	78bb      	ldrb	r3, [r7, #2]
 8010b1c:	883a      	ldrh	r2, [r7, #0]
 8010b1e:	78f9      	ldrb	r1, [r7, #3]
 8010b20:	f7f6 fcbc 	bl	800749c <HAL_PCD_EP_Open>
 8010b24:	4603      	mov	r3, r0
 8010b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 f958 	bl	8010de0 <USBD_Get_USB_Status>
 8010b30:	4603      	mov	r3, r0
 8010b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b084      	sub	sp, #16
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	460b      	mov	r3, r1
 8010b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b58:	78fa      	ldrb	r2, [r7, #3]
 8010b5a:	4611      	mov	r1, r2
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f6 fcfc 	bl	800755a <HAL_PCD_EP_Close>
 8010b62:	4603      	mov	r3, r0
 8010b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b66:	7bfb      	ldrb	r3, [r7, #15]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 f939 	bl	8010de0 <USBD_Get_USB_Status>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b96:	78fa      	ldrb	r2, [r7, #3]
 8010b98:	4611      	mov	r1, r2
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7f6 fda5 	bl	80076ea <HAL_PCD_EP_SetStall>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f000 f91a 	bl	8010de0 <USBD_Get_USB_Status>
 8010bac:	4603      	mov	r3, r0
 8010bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3710      	adds	r7, #16
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}

08010bba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bba:	b580      	push	{r7, lr}
 8010bbc:	b084      	sub	sp, #16
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	6078      	str	r0, [r7, #4]
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bd4:	78fa      	ldrb	r2, [r7, #3]
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7f6 fdd8 	bl	800778e <HAL_PCD_EP_ClrStall>
 8010bde:	4603      	mov	r3, r0
 8010be0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010be2:	7bfb      	ldrb	r3, [r7, #15]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f000 f8fb 	bl	8010de0 <USBD_Get_USB_Status>
 8010bea:	4603      	mov	r3, r0
 8010bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	460b      	mov	r3, r1
 8010c02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	da0b      	bge.n	8010c2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c14:	78fb      	ldrb	r3, [r7, #3]
 8010c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c1a:	68f9      	ldr	r1, [r7, #12]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	440b      	add	r3, r1
 8010c26:	3312      	adds	r3, #18
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	e00b      	b.n	8010c44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c2c:	78fb      	ldrb	r3, [r7, #3]
 8010c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c32:	68f9      	ldr	r1, [r7, #12]
 8010c34:	4613      	mov	r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	4413      	add	r3, r2
 8010c3a:	00db      	lsls	r3, r3, #3
 8010c3c:	440b      	add	r3, r1
 8010c3e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010c42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3714      	adds	r7, #20
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c60:	2300      	movs	r3, #0
 8010c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c6a:	78fa      	ldrb	r2, [r7, #3]
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f6 fbf0 	bl	8007454 <HAL_PCD_SetAddress>
 8010c74:	4603      	mov	r3, r0
 8010c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f000 f8b0 	bl	8010de0 <USBD_Get_USB_Status>
 8010c80:	4603      	mov	r3, r0
 8010c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b086      	sub	sp, #24
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	607a      	str	r2, [r7, #4]
 8010c98:	603b      	str	r3, [r7, #0]
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010cac:	7af9      	ldrb	r1, [r7, #11]
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	f7f6 fce3 	bl	800767c <HAL_PCD_EP_Transmit>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cba:	7dfb      	ldrb	r3, [r7, #23]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 f88f 	bl	8010de0 <USBD_Get_USB_Status>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3718      	adds	r7, #24
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	607a      	str	r2, [r7, #4]
 8010cda:	603b      	str	r3, [r7, #0]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010cee:	7af9      	ldrb	r1, [r7, #11]
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	f7f6 fc79 	bl	80075ea <HAL_PCD_EP_Receive>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cfc:	7dfb      	ldrb	r3, [r7, #23]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f000 f86e 	bl	8010de0 <USBD_Get_USB_Status>
 8010d04:	4603      	mov	r3, r0
 8010d06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d08:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3718      	adds	r7, #24
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d24:	78fa      	ldrb	r2, [r7, #3]
 8010d26:	4611      	mov	r1, r2
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7f6 fc8f 	bl	800764c <HAL_PCD_EP_GetRxCount>
 8010d2e:	4603      	mov	r3, r0
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	460b      	mov	r3, r1
 8010d42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010d44:	78fb      	ldrb	r3, [r7, #3]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d002      	beq.n	8010d50 <HAL_PCDEx_LPM_Callback+0x18>
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d013      	beq.n	8010d76 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010d4e:	e023      	b.n	8010d98 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7a5b      	ldrb	r3, [r3, #9]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d007      	beq.n	8010d68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010d58:	f000 f83c 	bl	8010dd4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d5c:	4b10      	ldr	r3, [pc, #64]	@ (8010da0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d5e:	691b      	ldr	r3, [r3, #16]
 8010d60:	4a0f      	ldr	r2, [pc, #60]	@ (8010da0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d62:	f023 0306 	bic.w	r3, r3, #6
 8010d66:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fe fcc2 	bl	800f6f8 <USBD_LL_Resume>
    break;
 8010d74:	e010      	b.n	8010d98 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fe fca5 	bl	800f6cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7a5b      	ldrb	r3, [r3, #9]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d005      	beq.n	8010d96 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d8a:	4b05      	ldr	r3, [pc, #20]	@ (8010da0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d8c:	691b      	ldr	r3, [r3, #16]
 8010d8e:	4a04      	ldr	r2, [pc, #16]	@ (8010da0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d90:	f043 0306 	orr.w	r3, r3, #6
 8010d94:	6113      	str	r3, [r2, #16]
    break;
 8010d96:	bf00      	nop
}
 8010d98:	bf00      	nop
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	e000ed00 	.word	0xe000ed00

08010da4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010dac:	4b03      	ldr	r3, [pc, #12]	@ (8010dbc <USBD_static_malloc+0x18>)
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	370c      	adds	r7, #12
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	20002a58 	.word	0x20002a58

08010dc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]

}
 8010dc8:	bf00      	nop
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010dd8:	f7f0 fc9e 	bl	8001718 <SystemClock_Config>
}
 8010ddc:	bf00      	nop
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	4603      	mov	r3, r0
 8010de8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dea:	2300      	movs	r3, #0
 8010dec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010dee:	79fb      	ldrb	r3, [r7, #7]
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	d817      	bhi.n	8010e24 <USBD_Get_USB_Status+0x44>
 8010df4:	a201      	add	r2, pc, #4	@ (adr r2, 8010dfc <USBD_Get_USB_Status+0x1c>)
 8010df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfa:	bf00      	nop
 8010dfc:	08010e0d 	.word	0x08010e0d
 8010e00:	08010e13 	.word	0x08010e13
 8010e04:	08010e19 	.word	0x08010e19
 8010e08:	08010e1f 	.word	0x08010e1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e10:	e00b      	b.n	8010e2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e12:	2303      	movs	r3, #3
 8010e14:	73fb      	strb	r3, [r7, #15]
    break;
 8010e16:	e008      	b.n	8010e2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e1c:	e005      	b.n	8010e2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e1e:	2303      	movs	r3, #3
 8010e20:	73fb      	strb	r3, [r7, #15]
    break;
 8010e22:	e002      	b.n	8010e2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e24:	2303      	movs	r3, #3
 8010e26:	73fb      	strb	r3, [r7, #15]
    break;
 8010e28:	bf00      	nop
  }
  return usb_status;
 8010e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <__cvt>:
 8010e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e3c:	ec57 6b10 	vmov	r6, r7, d0
 8010e40:	2f00      	cmp	r7, #0
 8010e42:	460c      	mov	r4, r1
 8010e44:	4619      	mov	r1, r3
 8010e46:	463b      	mov	r3, r7
 8010e48:	bfbb      	ittet	lt
 8010e4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010e4e:	461f      	movlt	r7, r3
 8010e50:	2300      	movge	r3, #0
 8010e52:	232d      	movlt	r3, #45	@ 0x2d
 8010e54:	700b      	strb	r3, [r1, #0]
 8010e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010e5c:	4691      	mov	r9, r2
 8010e5e:	f023 0820 	bic.w	r8, r3, #32
 8010e62:	bfbc      	itt	lt
 8010e64:	4632      	movlt	r2, r6
 8010e66:	4616      	movlt	r6, r2
 8010e68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e6c:	d005      	beq.n	8010e7a <__cvt+0x42>
 8010e6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010e72:	d100      	bne.n	8010e76 <__cvt+0x3e>
 8010e74:	3401      	adds	r4, #1
 8010e76:	2102      	movs	r1, #2
 8010e78:	e000      	b.n	8010e7c <__cvt+0x44>
 8010e7a:	2103      	movs	r1, #3
 8010e7c:	ab03      	add	r3, sp, #12
 8010e7e:	9301      	str	r3, [sp, #4]
 8010e80:	ab02      	add	r3, sp, #8
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	ec47 6b10 	vmov	d0, r6, r7
 8010e88:	4653      	mov	r3, sl
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	f001 f968 	bl	8012160 <_dtoa_r>
 8010e90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010e94:	4605      	mov	r5, r0
 8010e96:	d119      	bne.n	8010ecc <__cvt+0x94>
 8010e98:	f019 0f01 	tst.w	r9, #1
 8010e9c:	d00e      	beq.n	8010ebc <__cvt+0x84>
 8010e9e:	eb00 0904 	add.w	r9, r0, r4
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	4639      	mov	r1, r7
 8010eaa:	f7ef fe35 	bl	8000b18 <__aeabi_dcmpeq>
 8010eae:	b108      	cbz	r0, 8010eb4 <__cvt+0x7c>
 8010eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010eb4:	2230      	movs	r2, #48	@ 0x30
 8010eb6:	9b03      	ldr	r3, [sp, #12]
 8010eb8:	454b      	cmp	r3, r9
 8010eba:	d31e      	bcc.n	8010efa <__cvt+0xc2>
 8010ebc:	9b03      	ldr	r3, [sp, #12]
 8010ebe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ec0:	1b5b      	subs	r3, r3, r5
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	6013      	str	r3, [r2, #0]
 8010ec6:	b004      	add	sp, #16
 8010ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ecc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010ed0:	eb00 0904 	add.w	r9, r0, r4
 8010ed4:	d1e5      	bne.n	8010ea2 <__cvt+0x6a>
 8010ed6:	7803      	ldrb	r3, [r0, #0]
 8010ed8:	2b30      	cmp	r3, #48	@ 0x30
 8010eda:	d10a      	bne.n	8010ef2 <__cvt+0xba>
 8010edc:	2200      	movs	r2, #0
 8010ede:	2300      	movs	r3, #0
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	f7ef fe18 	bl	8000b18 <__aeabi_dcmpeq>
 8010ee8:	b918      	cbnz	r0, 8010ef2 <__cvt+0xba>
 8010eea:	f1c4 0401 	rsb	r4, r4, #1
 8010eee:	f8ca 4000 	str.w	r4, [sl]
 8010ef2:	f8da 3000 	ldr.w	r3, [sl]
 8010ef6:	4499      	add	r9, r3
 8010ef8:	e7d3      	b.n	8010ea2 <__cvt+0x6a>
 8010efa:	1c59      	adds	r1, r3, #1
 8010efc:	9103      	str	r1, [sp, #12]
 8010efe:	701a      	strb	r2, [r3, #0]
 8010f00:	e7d9      	b.n	8010eb6 <__cvt+0x7e>

08010f02 <__exponent>:
 8010f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f04:	2900      	cmp	r1, #0
 8010f06:	bfba      	itte	lt
 8010f08:	4249      	neglt	r1, r1
 8010f0a:	232d      	movlt	r3, #45	@ 0x2d
 8010f0c:	232b      	movge	r3, #43	@ 0x2b
 8010f0e:	2909      	cmp	r1, #9
 8010f10:	7002      	strb	r2, [r0, #0]
 8010f12:	7043      	strb	r3, [r0, #1]
 8010f14:	dd29      	ble.n	8010f6a <__exponent+0x68>
 8010f16:	f10d 0307 	add.w	r3, sp, #7
 8010f1a:	461d      	mov	r5, r3
 8010f1c:	270a      	movs	r7, #10
 8010f1e:	461a      	mov	r2, r3
 8010f20:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f24:	fb07 1416 	mls	r4, r7, r6, r1
 8010f28:	3430      	adds	r4, #48	@ 0x30
 8010f2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010f2e:	460c      	mov	r4, r1
 8010f30:	2c63      	cmp	r4, #99	@ 0x63
 8010f32:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f36:	4631      	mov	r1, r6
 8010f38:	dcf1      	bgt.n	8010f1e <__exponent+0x1c>
 8010f3a:	3130      	adds	r1, #48	@ 0x30
 8010f3c:	1e94      	subs	r4, r2, #2
 8010f3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010f42:	1c41      	adds	r1, r0, #1
 8010f44:	4623      	mov	r3, r4
 8010f46:	42ab      	cmp	r3, r5
 8010f48:	d30a      	bcc.n	8010f60 <__exponent+0x5e>
 8010f4a:	f10d 0309 	add.w	r3, sp, #9
 8010f4e:	1a9b      	subs	r3, r3, r2
 8010f50:	42ac      	cmp	r4, r5
 8010f52:	bf88      	it	hi
 8010f54:	2300      	movhi	r3, #0
 8010f56:	3302      	adds	r3, #2
 8010f58:	4403      	add	r3, r0
 8010f5a:	1a18      	subs	r0, r3, r0
 8010f5c:	b003      	add	sp, #12
 8010f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010f64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f68:	e7ed      	b.n	8010f46 <__exponent+0x44>
 8010f6a:	2330      	movs	r3, #48	@ 0x30
 8010f6c:	3130      	adds	r1, #48	@ 0x30
 8010f6e:	7083      	strb	r3, [r0, #2]
 8010f70:	70c1      	strb	r1, [r0, #3]
 8010f72:	1d03      	adds	r3, r0, #4
 8010f74:	e7f1      	b.n	8010f5a <__exponent+0x58>
	...

08010f78 <_printf_float>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	b08d      	sub	sp, #52	@ 0x34
 8010f7e:	460c      	mov	r4, r1
 8010f80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010f84:	4616      	mov	r6, r2
 8010f86:	461f      	mov	r7, r3
 8010f88:	4605      	mov	r5, r0
 8010f8a:	f000 ffe1 	bl	8011f50 <_localeconv_r>
 8010f8e:	6803      	ldr	r3, [r0, #0]
 8010f90:	9304      	str	r3, [sp, #16]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ef f994 	bl	80002c0 <strlen>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8010fa0:	9005      	str	r0, [sp, #20]
 8010fa2:	3307      	adds	r3, #7
 8010fa4:	f023 0307 	bic.w	r3, r3, #7
 8010fa8:	f103 0208 	add.w	r2, r3, #8
 8010fac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010fb0:	f8d4 b000 	ldr.w	fp, [r4]
 8010fb4:	f8c8 2000 	str.w	r2, [r8]
 8010fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fbc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010fc0:	9307      	str	r3, [sp, #28]
 8010fc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8010fc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fce:	4b9c      	ldr	r3, [pc, #624]	@ (8011240 <_printf_float+0x2c8>)
 8010fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd4:	f7ef fdd2 	bl	8000b7c <__aeabi_dcmpun>
 8010fd8:	bb70      	cbnz	r0, 8011038 <_printf_float+0xc0>
 8010fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fde:	4b98      	ldr	r3, [pc, #608]	@ (8011240 <_printf_float+0x2c8>)
 8010fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe4:	f7ef fdac 	bl	8000b40 <__aeabi_dcmple>
 8010fe8:	bb30      	cbnz	r0, 8011038 <_printf_float+0xc0>
 8010fea:	2200      	movs	r2, #0
 8010fec:	2300      	movs	r3, #0
 8010fee:	4640      	mov	r0, r8
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	f7ef fd9b 	bl	8000b2c <__aeabi_dcmplt>
 8010ff6:	b110      	cbz	r0, 8010ffe <_printf_float+0x86>
 8010ff8:	232d      	movs	r3, #45	@ 0x2d
 8010ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ffe:	4a91      	ldr	r2, [pc, #580]	@ (8011244 <_printf_float+0x2cc>)
 8011000:	4b91      	ldr	r3, [pc, #580]	@ (8011248 <_printf_float+0x2d0>)
 8011002:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011006:	bf94      	ite	ls
 8011008:	4690      	movls	r8, r2
 801100a:	4698      	movhi	r8, r3
 801100c:	2303      	movs	r3, #3
 801100e:	6123      	str	r3, [r4, #16]
 8011010:	f02b 0304 	bic.w	r3, fp, #4
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	f04f 0900 	mov.w	r9, #0
 801101a:	9700      	str	r7, [sp, #0]
 801101c:	4633      	mov	r3, r6
 801101e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011020:	4621      	mov	r1, r4
 8011022:	4628      	mov	r0, r5
 8011024:	f000 f9d2 	bl	80113cc <_printf_common>
 8011028:	3001      	adds	r0, #1
 801102a:	f040 808d 	bne.w	8011148 <_printf_float+0x1d0>
 801102e:	f04f 30ff 	mov.w	r0, #4294967295
 8011032:	b00d      	add	sp, #52	@ 0x34
 8011034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011038:	4642      	mov	r2, r8
 801103a:	464b      	mov	r3, r9
 801103c:	4640      	mov	r0, r8
 801103e:	4649      	mov	r1, r9
 8011040:	f7ef fd9c 	bl	8000b7c <__aeabi_dcmpun>
 8011044:	b140      	cbz	r0, 8011058 <_printf_float+0xe0>
 8011046:	464b      	mov	r3, r9
 8011048:	2b00      	cmp	r3, #0
 801104a:	bfbc      	itt	lt
 801104c:	232d      	movlt	r3, #45	@ 0x2d
 801104e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011052:	4a7e      	ldr	r2, [pc, #504]	@ (801124c <_printf_float+0x2d4>)
 8011054:	4b7e      	ldr	r3, [pc, #504]	@ (8011250 <_printf_float+0x2d8>)
 8011056:	e7d4      	b.n	8011002 <_printf_float+0x8a>
 8011058:	6863      	ldr	r3, [r4, #4]
 801105a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801105e:	9206      	str	r2, [sp, #24]
 8011060:	1c5a      	adds	r2, r3, #1
 8011062:	d13b      	bne.n	80110dc <_printf_float+0x164>
 8011064:	2306      	movs	r3, #6
 8011066:	6063      	str	r3, [r4, #4]
 8011068:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801106c:	2300      	movs	r3, #0
 801106e:	6022      	str	r2, [r4, #0]
 8011070:	9303      	str	r3, [sp, #12]
 8011072:	ab0a      	add	r3, sp, #40	@ 0x28
 8011074:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011078:	ab09      	add	r3, sp, #36	@ 0x24
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	6861      	ldr	r1, [r4, #4]
 801107e:	ec49 8b10 	vmov	d0, r8, r9
 8011082:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011086:	4628      	mov	r0, r5
 8011088:	f7ff fed6 	bl	8010e38 <__cvt>
 801108c:	9b06      	ldr	r3, [sp, #24]
 801108e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011090:	2b47      	cmp	r3, #71	@ 0x47
 8011092:	4680      	mov	r8, r0
 8011094:	d129      	bne.n	80110ea <_printf_float+0x172>
 8011096:	1cc8      	adds	r0, r1, #3
 8011098:	db02      	blt.n	80110a0 <_printf_float+0x128>
 801109a:	6863      	ldr	r3, [r4, #4]
 801109c:	4299      	cmp	r1, r3
 801109e:	dd41      	ble.n	8011124 <_printf_float+0x1ac>
 80110a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80110a4:	fa5f fa8a 	uxtb.w	sl, sl
 80110a8:	3901      	subs	r1, #1
 80110aa:	4652      	mov	r2, sl
 80110ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80110b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80110b2:	f7ff ff26 	bl	8010f02 <__exponent>
 80110b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110b8:	1813      	adds	r3, r2, r0
 80110ba:	2a01      	cmp	r2, #1
 80110bc:	4681      	mov	r9, r0
 80110be:	6123      	str	r3, [r4, #16]
 80110c0:	dc02      	bgt.n	80110c8 <_printf_float+0x150>
 80110c2:	6822      	ldr	r2, [r4, #0]
 80110c4:	07d2      	lsls	r2, r2, #31
 80110c6:	d501      	bpl.n	80110cc <_printf_float+0x154>
 80110c8:	3301      	adds	r3, #1
 80110ca:	6123      	str	r3, [r4, #16]
 80110cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d0a2      	beq.n	801101a <_printf_float+0xa2>
 80110d4:	232d      	movs	r3, #45	@ 0x2d
 80110d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110da:	e79e      	b.n	801101a <_printf_float+0xa2>
 80110dc:	9a06      	ldr	r2, [sp, #24]
 80110de:	2a47      	cmp	r2, #71	@ 0x47
 80110e0:	d1c2      	bne.n	8011068 <_printf_float+0xf0>
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1c0      	bne.n	8011068 <_printf_float+0xf0>
 80110e6:	2301      	movs	r3, #1
 80110e8:	e7bd      	b.n	8011066 <_printf_float+0xee>
 80110ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110ee:	d9db      	bls.n	80110a8 <_printf_float+0x130>
 80110f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80110f4:	d118      	bne.n	8011128 <_printf_float+0x1b0>
 80110f6:	2900      	cmp	r1, #0
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	dd0b      	ble.n	8011114 <_printf_float+0x19c>
 80110fc:	6121      	str	r1, [r4, #16]
 80110fe:	b913      	cbnz	r3, 8011106 <_printf_float+0x18e>
 8011100:	6822      	ldr	r2, [r4, #0]
 8011102:	07d0      	lsls	r0, r2, #31
 8011104:	d502      	bpl.n	801110c <_printf_float+0x194>
 8011106:	3301      	adds	r3, #1
 8011108:	440b      	add	r3, r1
 801110a:	6123      	str	r3, [r4, #16]
 801110c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801110e:	f04f 0900 	mov.w	r9, #0
 8011112:	e7db      	b.n	80110cc <_printf_float+0x154>
 8011114:	b913      	cbnz	r3, 801111c <_printf_float+0x1a4>
 8011116:	6822      	ldr	r2, [r4, #0]
 8011118:	07d2      	lsls	r2, r2, #31
 801111a:	d501      	bpl.n	8011120 <_printf_float+0x1a8>
 801111c:	3302      	adds	r3, #2
 801111e:	e7f4      	b.n	801110a <_printf_float+0x192>
 8011120:	2301      	movs	r3, #1
 8011122:	e7f2      	b.n	801110a <_printf_float+0x192>
 8011124:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801112a:	4299      	cmp	r1, r3
 801112c:	db05      	blt.n	801113a <_printf_float+0x1c2>
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	6121      	str	r1, [r4, #16]
 8011132:	07d8      	lsls	r0, r3, #31
 8011134:	d5ea      	bpl.n	801110c <_printf_float+0x194>
 8011136:	1c4b      	adds	r3, r1, #1
 8011138:	e7e7      	b.n	801110a <_printf_float+0x192>
 801113a:	2900      	cmp	r1, #0
 801113c:	bfd4      	ite	le
 801113e:	f1c1 0202 	rsble	r2, r1, #2
 8011142:	2201      	movgt	r2, #1
 8011144:	4413      	add	r3, r2
 8011146:	e7e0      	b.n	801110a <_printf_float+0x192>
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	055a      	lsls	r2, r3, #21
 801114c:	d407      	bmi.n	801115e <_printf_float+0x1e6>
 801114e:	6923      	ldr	r3, [r4, #16]
 8011150:	4642      	mov	r2, r8
 8011152:	4631      	mov	r1, r6
 8011154:	4628      	mov	r0, r5
 8011156:	47b8      	blx	r7
 8011158:	3001      	adds	r0, #1
 801115a:	d12b      	bne.n	80111b4 <_printf_float+0x23c>
 801115c:	e767      	b.n	801102e <_printf_float+0xb6>
 801115e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011162:	f240 80dd 	bls.w	8011320 <_printf_float+0x3a8>
 8011166:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801116a:	2200      	movs	r2, #0
 801116c:	2300      	movs	r3, #0
 801116e:	f7ef fcd3 	bl	8000b18 <__aeabi_dcmpeq>
 8011172:	2800      	cmp	r0, #0
 8011174:	d033      	beq.n	80111de <_printf_float+0x266>
 8011176:	4a37      	ldr	r2, [pc, #220]	@ (8011254 <_printf_float+0x2dc>)
 8011178:	2301      	movs	r3, #1
 801117a:	4631      	mov	r1, r6
 801117c:	4628      	mov	r0, r5
 801117e:	47b8      	blx	r7
 8011180:	3001      	adds	r0, #1
 8011182:	f43f af54 	beq.w	801102e <_printf_float+0xb6>
 8011186:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801118a:	4543      	cmp	r3, r8
 801118c:	db02      	blt.n	8011194 <_printf_float+0x21c>
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	07d8      	lsls	r0, r3, #31
 8011192:	d50f      	bpl.n	80111b4 <_printf_float+0x23c>
 8011194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011198:	4631      	mov	r1, r6
 801119a:	4628      	mov	r0, r5
 801119c:	47b8      	blx	r7
 801119e:	3001      	adds	r0, #1
 80111a0:	f43f af45 	beq.w	801102e <_printf_float+0xb6>
 80111a4:	f04f 0900 	mov.w	r9, #0
 80111a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80111ac:	f104 0a1a 	add.w	sl, r4, #26
 80111b0:	45c8      	cmp	r8, r9
 80111b2:	dc09      	bgt.n	80111c8 <_printf_float+0x250>
 80111b4:	6823      	ldr	r3, [r4, #0]
 80111b6:	079b      	lsls	r3, r3, #30
 80111b8:	f100 8103 	bmi.w	80113c2 <_printf_float+0x44a>
 80111bc:	68e0      	ldr	r0, [r4, #12]
 80111be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111c0:	4298      	cmp	r0, r3
 80111c2:	bfb8      	it	lt
 80111c4:	4618      	movlt	r0, r3
 80111c6:	e734      	b.n	8011032 <_printf_float+0xba>
 80111c8:	2301      	movs	r3, #1
 80111ca:	4652      	mov	r2, sl
 80111cc:	4631      	mov	r1, r6
 80111ce:	4628      	mov	r0, r5
 80111d0:	47b8      	blx	r7
 80111d2:	3001      	adds	r0, #1
 80111d4:	f43f af2b 	beq.w	801102e <_printf_float+0xb6>
 80111d8:	f109 0901 	add.w	r9, r9, #1
 80111dc:	e7e8      	b.n	80111b0 <_printf_float+0x238>
 80111de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dc39      	bgt.n	8011258 <_printf_float+0x2e0>
 80111e4:	4a1b      	ldr	r2, [pc, #108]	@ (8011254 <_printf_float+0x2dc>)
 80111e6:	2301      	movs	r3, #1
 80111e8:	4631      	mov	r1, r6
 80111ea:	4628      	mov	r0, r5
 80111ec:	47b8      	blx	r7
 80111ee:	3001      	adds	r0, #1
 80111f0:	f43f af1d 	beq.w	801102e <_printf_float+0xb6>
 80111f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80111f8:	ea59 0303 	orrs.w	r3, r9, r3
 80111fc:	d102      	bne.n	8011204 <_printf_float+0x28c>
 80111fe:	6823      	ldr	r3, [r4, #0]
 8011200:	07d9      	lsls	r1, r3, #31
 8011202:	d5d7      	bpl.n	80111b4 <_printf_float+0x23c>
 8011204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011208:	4631      	mov	r1, r6
 801120a:	4628      	mov	r0, r5
 801120c:	47b8      	blx	r7
 801120e:	3001      	adds	r0, #1
 8011210:	f43f af0d 	beq.w	801102e <_printf_float+0xb6>
 8011214:	f04f 0a00 	mov.w	sl, #0
 8011218:	f104 0b1a 	add.w	fp, r4, #26
 801121c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801121e:	425b      	negs	r3, r3
 8011220:	4553      	cmp	r3, sl
 8011222:	dc01      	bgt.n	8011228 <_printf_float+0x2b0>
 8011224:	464b      	mov	r3, r9
 8011226:	e793      	b.n	8011150 <_printf_float+0x1d8>
 8011228:	2301      	movs	r3, #1
 801122a:	465a      	mov	r2, fp
 801122c:	4631      	mov	r1, r6
 801122e:	4628      	mov	r0, r5
 8011230:	47b8      	blx	r7
 8011232:	3001      	adds	r0, #1
 8011234:	f43f aefb 	beq.w	801102e <_printf_float+0xb6>
 8011238:	f10a 0a01 	add.w	sl, sl, #1
 801123c:	e7ee      	b.n	801121c <_printf_float+0x2a4>
 801123e:	bf00      	nop
 8011240:	7fefffff 	.word	0x7fefffff
 8011244:	08022c94 	.word	0x08022c94
 8011248:	08022c98 	.word	0x08022c98
 801124c:	08022c9c 	.word	0x08022c9c
 8011250:	08022ca0 	.word	0x08022ca0
 8011254:	08022ca4 	.word	0x08022ca4
 8011258:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801125a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801125e:	4553      	cmp	r3, sl
 8011260:	bfa8      	it	ge
 8011262:	4653      	movge	r3, sl
 8011264:	2b00      	cmp	r3, #0
 8011266:	4699      	mov	r9, r3
 8011268:	dc36      	bgt.n	80112d8 <_printf_float+0x360>
 801126a:	f04f 0b00 	mov.w	fp, #0
 801126e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011272:	f104 021a 	add.w	r2, r4, #26
 8011276:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011278:	9306      	str	r3, [sp, #24]
 801127a:	eba3 0309 	sub.w	r3, r3, r9
 801127e:	455b      	cmp	r3, fp
 8011280:	dc31      	bgt.n	80112e6 <_printf_float+0x36e>
 8011282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011284:	459a      	cmp	sl, r3
 8011286:	dc3a      	bgt.n	80112fe <_printf_float+0x386>
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	07da      	lsls	r2, r3, #31
 801128c:	d437      	bmi.n	80112fe <_printf_float+0x386>
 801128e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011290:	ebaa 0903 	sub.w	r9, sl, r3
 8011294:	9b06      	ldr	r3, [sp, #24]
 8011296:	ebaa 0303 	sub.w	r3, sl, r3
 801129a:	4599      	cmp	r9, r3
 801129c:	bfa8      	it	ge
 801129e:	4699      	movge	r9, r3
 80112a0:	f1b9 0f00 	cmp.w	r9, #0
 80112a4:	dc33      	bgt.n	801130e <_printf_float+0x396>
 80112a6:	f04f 0800 	mov.w	r8, #0
 80112aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112ae:	f104 0b1a 	add.w	fp, r4, #26
 80112b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112b4:	ebaa 0303 	sub.w	r3, sl, r3
 80112b8:	eba3 0309 	sub.w	r3, r3, r9
 80112bc:	4543      	cmp	r3, r8
 80112be:	f77f af79 	ble.w	80111b4 <_printf_float+0x23c>
 80112c2:	2301      	movs	r3, #1
 80112c4:	465a      	mov	r2, fp
 80112c6:	4631      	mov	r1, r6
 80112c8:	4628      	mov	r0, r5
 80112ca:	47b8      	blx	r7
 80112cc:	3001      	adds	r0, #1
 80112ce:	f43f aeae 	beq.w	801102e <_printf_float+0xb6>
 80112d2:	f108 0801 	add.w	r8, r8, #1
 80112d6:	e7ec      	b.n	80112b2 <_printf_float+0x33a>
 80112d8:	4642      	mov	r2, r8
 80112da:	4631      	mov	r1, r6
 80112dc:	4628      	mov	r0, r5
 80112de:	47b8      	blx	r7
 80112e0:	3001      	adds	r0, #1
 80112e2:	d1c2      	bne.n	801126a <_printf_float+0x2f2>
 80112e4:	e6a3      	b.n	801102e <_printf_float+0xb6>
 80112e6:	2301      	movs	r3, #1
 80112e8:	4631      	mov	r1, r6
 80112ea:	4628      	mov	r0, r5
 80112ec:	9206      	str	r2, [sp, #24]
 80112ee:	47b8      	blx	r7
 80112f0:	3001      	adds	r0, #1
 80112f2:	f43f ae9c 	beq.w	801102e <_printf_float+0xb6>
 80112f6:	9a06      	ldr	r2, [sp, #24]
 80112f8:	f10b 0b01 	add.w	fp, fp, #1
 80112fc:	e7bb      	b.n	8011276 <_printf_float+0x2fe>
 80112fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011302:	4631      	mov	r1, r6
 8011304:	4628      	mov	r0, r5
 8011306:	47b8      	blx	r7
 8011308:	3001      	adds	r0, #1
 801130a:	d1c0      	bne.n	801128e <_printf_float+0x316>
 801130c:	e68f      	b.n	801102e <_printf_float+0xb6>
 801130e:	9a06      	ldr	r2, [sp, #24]
 8011310:	464b      	mov	r3, r9
 8011312:	4442      	add	r2, r8
 8011314:	4631      	mov	r1, r6
 8011316:	4628      	mov	r0, r5
 8011318:	47b8      	blx	r7
 801131a:	3001      	adds	r0, #1
 801131c:	d1c3      	bne.n	80112a6 <_printf_float+0x32e>
 801131e:	e686      	b.n	801102e <_printf_float+0xb6>
 8011320:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011324:	f1ba 0f01 	cmp.w	sl, #1
 8011328:	dc01      	bgt.n	801132e <_printf_float+0x3b6>
 801132a:	07db      	lsls	r3, r3, #31
 801132c:	d536      	bpl.n	801139c <_printf_float+0x424>
 801132e:	2301      	movs	r3, #1
 8011330:	4642      	mov	r2, r8
 8011332:	4631      	mov	r1, r6
 8011334:	4628      	mov	r0, r5
 8011336:	47b8      	blx	r7
 8011338:	3001      	adds	r0, #1
 801133a:	f43f ae78 	beq.w	801102e <_printf_float+0xb6>
 801133e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011342:	4631      	mov	r1, r6
 8011344:	4628      	mov	r0, r5
 8011346:	47b8      	blx	r7
 8011348:	3001      	adds	r0, #1
 801134a:	f43f ae70 	beq.w	801102e <_printf_float+0xb6>
 801134e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011352:	2200      	movs	r2, #0
 8011354:	2300      	movs	r3, #0
 8011356:	f10a 3aff 	add.w	sl, sl, #4294967295
 801135a:	f7ef fbdd 	bl	8000b18 <__aeabi_dcmpeq>
 801135e:	b9c0      	cbnz	r0, 8011392 <_printf_float+0x41a>
 8011360:	4653      	mov	r3, sl
 8011362:	f108 0201 	add.w	r2, r8, #1
 8011366:	4631      	mov	r1, r6
 8011368:	4628      	mov	r0, r5
 801136a:	47b8      	blx	r7
 801136c:	3001      	adds	r0, #1
 801136e:	d10c      	bne.n	801138a <_printf_float+0x412>
 8011370:	e65d      	b.n	801102e <_printf_float+0xb6>
 8011372:	2301      	movs	r3, #1
 8011374:	465a      	mov	r2, fp
 8011376:	4631      	mov	r1, r6
 8011378:	4628      	mov	r0, r5
 801137a:	47b8      	blx	r7
 801137c:	3001      	adds	r0, #1
 801137e:	f43f ae56 	beq.w	801102e <_printf_float+0xb6>
 8011382:	f108 0801 	add.w	r8, r8, #1
 8011386:	45d0      	cmp	r8, sl
 8011388:	dbf3      	blt.n	8011372 <_printf_float+0x3fa>
 801138a:	464b      	mov	r3, r9
 801138c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011390:	e6df      	b.n	8011152 <_printf_float+0x1da>
 8011392:	f04f 0800 	mov.w	r8, #0
 8011396:	f104 0b1a 	add.w	fp, r4, #26
 801139a:	e7f4      	b.n	8011386 <_printf_float+0x40e>
 801139c:	2301      	movs	r3, #1
 801139e:	4642      	mov	r2, r8
 80113a0:	e7e1      	b.n	8011366 <_printf_float+0x3ee>
 80113a2:	2301      	movs	r3, #1
 80113a4:	464a      	mov	r2, r9
 80113a6:	4631      	mov	r1, r6
 80113a8:	4628      	mov	r0, r5
 80113aa:	47b8      	blx	r7
 80113ac:	3001      	adds	r0, #1
 80113ae:	f43f ae3e 	beq.w	801102e <_printf_float+0xb6>
 80113b2:	f108 0801 	add.w	r8, r8, #1
 80113b6:	68e3      	ldr	r3, [r4, #12]
 80113b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113ba:	1a5b      	subs	r3, r3, r1
 80113bc:	4543      	cmp	r3, r8
 80113be:	dcf0      	bgt.n	80113a2 <_printf_float+0x42a>
 80113c0:	e6fc      	b.n	80111bc <_printf_float+0x244>
 80113c2:	f04f 0800 	mov.w	r8, #0
 80113c6:	f104 0919 	add.w	r9, r4, #25
 80113ca:	e7f4      	b.n	80113b6 <_printf_float+0x43e>

080113cc <_printf_common>:
 80113cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d0:	4616      	mov	r6, r2
 80113d2:	4698      	mov	r8, r3
 80113d4:	688a      	ldr	r2, [r1, #8]
 80113d6:	690b      	ldr	r3, [r1, #16]
 80113d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113dc:	4293      	cmp	r3, r2
 80113de:	bfb8      	it	lt
 80113e0:	4613      	movlt	r3, r2
 80113e2:	6033      	str	r3, [r6, #0]
 80113e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80113e8:	4607      	mov	r7, r0
 80113ea:	460c      	mov	r4, r1
 80113ec:	b10a      	cbz	r2, 80113f2 <_printf_common+0x26>
 80113ee:	3301      	adds	r3, #1
 80113f0:	6033      	str	r3, [r6, #0]
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	0699      	lsls	r1, r3, #26
 80113f6:	bf42      	ittt	mi
 80113f8:	6833      	ldrmi	r3, [r6, #0]
 80113fa:	3302      	addmi	r3, #2
 80113fc:	6033      	strmi	r3, [r6, #0]
 80113fe:	6825      	ldr	r5, [r4, #0]
 8011400:	f015 0506 	ands.w	r5, r5, #6
 8011404:	d106      	bne.n	8011414 <_printf_common+0x48>
 8011406:	f104 0a19 	add.w	sl, r4, #25
 801140a:	68e3      	ldr	r3, [r4, #12]
 801140c:	6832      	ldr	r2, [r6, #0]
 801140e:	1a9b      	subs	r3, r3, r2
 8011410:	42ab      	cmp	r3, r5
 8011412:	dc26      	bgt.n	8011462 <_printf_common+0x96>
 8011414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011418:	6822      	ldr	r2, [r4, #0]
 801141a:	3b00      	subs	r3, #0
 801141c:	bf18      	it	ne
 801141e:	2301      	movne	r3, #1
 8011420:	0692      	lsls	r2, r2, #26
 8011422:	d42b      	bmi.n	801147c <_printf_common+0xb0>
 8011424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011428:	4641      	mov	r1, r8
 801142a:	4638      	mov	r0, r7
 801142c:	47c8      	blx	r9
 801142e:	3001      	adds	r0, #1
 8011430:	d01e      	beq.n	8011470 <_printf_common+0xa4>
 8011432:	6823      	ldr	r3, [r4, #0]
 8011434:	6922      	ldr	r2, [r4, #16]
 8011436:	f003 0306 	and.w	r3, r3, #6
 801143a:	2b04      	cmp	r3, #4
 801143c:	bf02      	ittt	eq
 801143e:	68e5      	ldreq	r5, [r4, #12]
 8011440:	6833      	ldreq	r3, [r6, #0]
 8011442:	1aed      	subeq	r5, r5, r3
 8011444:	68a3      	ldr	r3, [r4, #8]
 8011446:	bf0c      	ite	eq
 8011448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801144c:	2500      	movne	r5, #0
 801144e:	4293      	cmp	r3, r2
 8011450:	bfc4      	itt	gt
 8011452:	1a9b      	subgt	r3, r3, r2
 8011454:	18ed      	addgt	r5, r5, r3
 8011456:	2600      	movs	r6, #0
 8011458:	341a      	adds	r4, #26
 801145a:	42b5      	cmp	r5, r6
 801145c:	d11a      	bne.n	8011494 <_printf_common+0xc8>
 801145e:	2000      	movs	r0, #0
 8011460:	e008      	b.n	8011474 <_printf_common+0xa8>
 8011462:	2301      	movs	r3, #1
 8011464:	4652      	mov	r2, sl
 8011466:	4641      	mov	r1, r8
 8011468:	4638      	mov	r0, r7
 801146a:	47c8      	blx	r9
 801146c:	3001      	adds	r0, #1
 801146e:	d103      	bne.n	8011478 <_printf_common+0xac>
 8011470:	f04f 30ff 	mov.w	r0, #4294967295
 8011474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011478:	3501      	adds	r5, #1
 801147a:	e7c6      	b.n	801140a <_printf_common+0x3e>
 801147c:	18e1      	adds	r1, r4, r3
 801147e:	1c5a      	adds	r2, r3, #1
 8011480:	2030      	movs	r0, #48	@ 0x30
 8011482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011486:	4422      	add	r2, r4
 8011488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801148c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011490:	3302      	adds	r3, #2
 8011492:	e7c7      	b.n	8011424 <_printf_common+0x58>
 8011494:	2301      	movs	r3, #1
 8011496:	4622      	mov	r2, r4
 8011498:	4641      	mov	r1, r8
 801149a:	4638      	mov	r0, r7
 801149c:	47c8      	blx	r9
 801149e:	3001      	adds	r0, #1
 80114a0:	d0e6      	beq.n	8011470 <_printf_common+0xa4>
 80114a2:	3601      	adds	r6, #1
 80114a4:	e7d9      	b.n	801145a <_printf_common+0x8e>
	...

080114a8 <_printf_i>:
 80114a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114ac:	7e0f      	ldrb	r7, [r1, #24]
 80114ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114b0:	2f78      	cmp	r7, #120	@ 0x78
 80114b2:	4691      	mov	r9, r2
 80114b4:	4680      	mov	r8, r0
 80114b6:	460c      	mov	r4, r1
 80114b8:	469a      	mov	sl, r3
 80114ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114be:	d807      	bhi.n	80114d0 <_printf_i+0x28>
 80114c0:	2f62      	cmp	r7, #98	@ 0x62
 80114c2:	d80a      	bhi.n	80114da <_printf_i+0x32>
 80114c4:	2f00      	cmp	r7, #0
 80114c6:	f000 80d2 	beq.w	801166e <_printf_i+0x1c6>
 80114ca:	2f58      	cmp	r7, #88	@ 0x58
 80114cc:	f000 80b9 	beq.w	8011642 <_printf_i+0x19a>
 80114d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114d8:	e03a      	b.n	8011550 <_printf_i+0xa8>
 80114da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114de:	2b15      	cmp	r3, #21
 80114e0:	d8f6      	bhi.n	80114d0 <_printf_i+0x28>
 80114e2:	a101      	add	r1, pc, #4	@ (adr r1, 80114e8 <_printf_i+0x40>)
 80114e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114e8:	08011541 	.word	0x08011541
 80114ec:	08011555 	.word	0x08011555
 80114f0:	080114d1 	.word	0x080114d1
 80114f4:	080114d1 	.word	0x080114d1
 80114f8:	080114d1 	.word	0x080114d1
 80114fc:	080114d1 	.word	0x080114d1
 8011500:	08011555 	.word	0x08011555
 8011504:	080114d1 	.word	0x080114d1
 8011508:	080114d1 	.word	0x080114d1
 801150c:	080114d1 	.word	0x080114d1
 8011510:	080114d1 	.word	0x080114d1
 8011514:	08011655 	.word	0x08011655
 8011518:	0801157f 	.word	0x0801157f
 801151c:	0801160f 	.word	0x0801160f
 8011520:	080114d1 	.word	0x080114d1
 8011524:	080114d1 	.word	0x080114d1
 8011528:	08011677 	.word	0x08011677
 801152c:	080114d1 	.word	0x080114d1
 8011530:	0801157f 	.word	0x0801157f
 8011534:	080114d1 	.word	0x080114d1
 8011538:	080114d1 	.word	0x080114d1
 801153c:	08011617 	.word	0x08011617
 8011540:	6833      	ldr	r3, [r6, #0]
 8011542:	1d1a      	adds	r2, r3, #4
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	6032      	str	r2, [r6, #0]
 8011548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801154c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011550:	2301      	movs	r3, #1
 8011552:	e09d      	b.n	8011690 <_printf_i+0x1e8>
 8011554:	6833      	ldr	r3, [r6, #0]
 8011556:	6820      	ldr	r0, [r4, #0]
 8011558:	1d19      	adds	r1, r3, #4
 801155a:	6031      	str	r1, [r6, #0]
 801155c:	0606      	lsls	r6, r0, #24
 801155e:	d501      	bpl.n	8011564 <_printf_i+0xbc>
 8011560:	681d      	ldr	r5, [r3, #0]
 8011562:	e003      	b.n	801156c <_printf_i+0xc4>
 8011564:	0645      	lsls	r5, r0, #25
 8011566:	d5fb      	bpl.n	8011560 <_printf_i+0xb8>
 8011568:	f9b3 5000 	ldrsh.w	r5, [r3]
 801156c:	2d00      	cmp	r5, #0
 801156e:	da03      	bge.n	8011578 <_printf_i+0xd0>
 8011570:	232d      	movs	r3, #45	@ 0x2d
 8011572:	426d      	negs	r5, r5
 8011574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011578:	4859      	ldr	r0, [pc, #356]	@ (80116e0 <_printf_i+0x238>)
 801157a:	230a      	movs	r3, #10
 801157c:	e011      	b.n	80115a2 <_printf_i+0xfa>
 801157e:	6821      	ldr	r1, [r4, #0]
 8011580:	6833      	ldr	r3, [r6, #0]
 8011582:	0608      	lsls	r0, r1, #24
 8011584:	f853 5b04 	ldr.w	r5, [r3], #4
 8011588:	d402      	bmi.n	8011590 <_printf_i+0xe8>
 801158a:	0649      	lsls	r1, r1, #25
 801158c:	bf48      	it	mi
 801158e:	b2ad      	uxthmi	r5, r5
 8011590:	2f6f      	cmp	r7, #111	@ 0x6f
 8011592:	4853      	ldr	r0, [pc, #332]	@ (80116e0 <_printf_i+0x238>)
 8011594:	6033      	str	r3, [r6, #0]
 8011596:	bf14      	ite	ne
 8011598:	230a      	movne	r3, #10
 801159a:	2308      	moveq	r3, #8
 801159c:	2100      	movs	r1, #0
 801159e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80115a2:	6866      	ldr	r6, [r4, #4]
 80115a4:	60a6      	str	r6, [r4, #8]
 80115a6:	2e00      	cmp	r6, #0
 80115a8:	bfa2      	ittt	ge
 80115aa:	6821      	ldrge	r1, [r4, #0]
 80115ac:	f021 0104 	bicge.w	r1, r1, #4
 80115b0:	6021      	strge	r1, [r4, #0]
 80115b2:	b90d      	cbnz	r5, 80115b8 <_printf_i+0x110>
 80115b4:	2e00      	cmp	r6, #0
 80115b6:	d04b      	beq.n	8011650 <_printf_i+0x1a8>
 80115b8:	4616      	mov	r6, r2
 80115ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80115be:	fb03 5711 	mls	r7, r3, r1, r5
 80115c2:	5dc7      	ldrb	r7, [r0, r7]
 80115c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115c8:	462f      	mov	r7, r5
 80115ca:	42bb      	cmp	r3, r7
 80115cc:	460d      	mov	r5, r1
 80115ce:	d9f4      	bls.n	80115ba <_printf_i+0x112>
 80115d0:	2b08      	cmp	r3, #8
 80115d2:	d10b      	bne.n	80115ec <_printf_i+0x144>
 80115d4:	6823      	ldr	r3, [r4, #0]
 80115d6:	07df      	lsls	r7, r3, #31
 80115d8:	d508      	bpl.n	80115ec <_printf_i+0x144>
 80115da:	6923      	ldr	r3, [r4, #16]
 80115dc:	6861      	ldr	r1, [r4, #4]
 80115de:	4299      	cmp	r1, r3
 80115e0:	bfde      	ittt	le
 80115e2:	2330      	movle	r3, #48	@ 0x30
 80115e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80115ec:	1b92      	subs	r2, r2, r6
 80115ee:	6122      	str	r2, [r4, #16]
 80115f0:	f8cd a000 	str.w	sl, [sp]
 80115f4:	464b      	mov	r3, r9
 80115f6:	aa03      	add	r2, sp, #12
 80115f8:	4621      	mov	r1, r4
 80115fa:	4640      	mov	r0, r8
 80115fc:	f7ff fee6 	bl	80113cc <_printf_common>
 8011600:	3001      	adds	r0, #1
 8011602:	d14a      	bne.n	801169a <_printf_i+0x1f2>
 8011604:	f04f 30ff 	mov.w	r0, #4294967295
 8011608:	b004      	add	sp, #16
 801160a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801160e:	6823      	ldr	r3, [r4, #0]
 8011610:	f043 0320 	orr.w	r3, r3, #32
 8011614:	6023      	str	r3, [r4, #0]
 8011616:	4833      	ldr	r0, [pc, #204]	@ (80116e4 <_printf_i+0x23c>)
 8011618:	2778      	movs	r7, #120	@ 0x78
 801161a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801161e:	6823      	ldr	r3, [r4, #0]
 8011620:	6831      	ldr	r1, [r6, #0]
 8011622:	061f      	lsls	r7, r3, #24
 8011624:	f851 5b04 	ldr.w	r5, [r1], #4
 8011628:	d402      	bmi.n	8011630 <_printf_i+0x188>
 801162a:	065f      	lsls	r7, r3, #25
 801162c:	bf48      	it	mi
 801162e:	b2ad      	uxthmi	r5, r5
 8011630:	6031      	str	r1, [r6, #0]
 8011632:	07d9      	lsls	r1, r3, #31
 8011634:	bf44      	itt	mi
 8011636:	f043 0320 	orrmi.w	r3, r3, #32
 801163a:	6023      	strmi	r3, [r4, #0]
 801163c:	b11d      	cbz	r5, 8011646 <_printf_i+0x19e>
 801163e:	2310      	movs	r3, #16
 8011640:	e7ac      	b.n	801159c <_printf_i+0xf4>
 8011642:	4827      	ldr	r0, [pc, #156]	@ (80116e0 <_printf_i+0x238>)
 8011644:	e7e9      	b.n	801161a <_printf_i+0x172>
 8011646:	6823      	ldr	r3, [r4, #0]
 8011648:	f023 0320 	bic.w	r3, r3, #32
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	e7f6      	b.n	801163e <_printf_i+0x196>
 8011650:	4616      	mov	r6, r2
 8011652:	e7bd      	b.n	80115d0 <_printf_i+0x128>
 8011654:	6833      	ldr	r3, [r6, #0]
 8011656:	6825      	ldr	r5, [r4, #0]
 8011658:	6961      	ldr	r1, [r4, #20]
 801165a:	1d18      	adds	r0, r3, #4
 801165c:	6030      	str	r0, [r6, #0]
 801165e:	062e      	lsls	r6, r5, #24
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	d501      	bpl.n	8011668 <_printf_i+0x1c0>
 8011664:	6019      	str	r1, [r3, #0]
 8011666:	e002      	b.n	801166e <_printf_i+0x1c6>
 8011668:	0668      	lsls	r0, r5, #25
 801166a:	d5fb      	bpl.n	8011664 <_printf_i+0x1bc>
 801166c:	8019      	strh	r1, [r3, #0]
 801166e:	2300      	movs	r3, #0
 8011670:	6123      	str	r3, [r4, #16]
 8011672:	4616      	mov	r6, r2
 8011674:	e7bc      	b.n	80115f0 <_printf_i+0x148>
 8011676:	6833      	ldr	r3, [r6, #0]
 8011678:	1d1a      	adds	r2, r3, #4
 801167a:	6032      	str	r2, [r6, #0]
 801167c:	681e      	ldr	r6, [r3, #0]
 801167e:	6862      	ldr	r2, [r4, #4]
 8011680:	2100      	movs	r1, #0
 8011682:	4630      	mov	r0, r6
 8011684:	f7ee fdcc 	bl	8000220 <memchr>
 8011688:	b108      	cbz	r0, 801168e <_printf_i+0x1e6>
 801168a:	1b80      	subs	r0, r0, r6
 801168c:	6060      	str	r0, [r4, #4]
 801168e:	6863      	ldr	r3, [r4, #4]
 8011690:	6123      	str	r3, [r4, #16]
 8011692:	2300      	movs	r3, #0
 8011694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011698:	e7aa      	b.n	80115f0 <_printf_i+0x148>
 801169a:	6923      	ldr	r3, [r4, #16]
 801169c:	4632      	mov	r2, r6
 801169e:	4649      	mov	r1, r9
 80116a0:	4640      	mov	r0, r8
 80116a2:	47d0      	blx	sl
 80116a4:	3001      	adds	r0, #1
 80116a6:	d0ad      	beq.n	8011604 <_printf_i+0x15c>
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	079b      	lsls	r3, r3, #30
 80116ac:	d413      	bmi.n	80116d6 <_printf_i+0x22e>
 80116ae:	68e0      	ldr	r0, [r4, #12]
 80116b0:	9b03      	ldr	r3, [sp, #12]
 80116b2:	4298      	cmp	r0, r3
 80116b4:	bfb8      	it	lt
 80116b6:	4618      	movlt	r0, r3
 80116b8:	e7a6      	b.n	8011608 <_printf_i+0x160>
 80116ba:	2301      	movs	r3, #1
 80116bc:	4632      	mov	r2, r6
 80116be:	4649      	mov	r1, r9
 80116c0:	4640      	mov	r0, r8
 80116c2:	47d0      	blx	sl
 80116c4:	3001      	adds	r0, #1
 80116c6:	d09d      	beq.n	8011604 <_printf_i+0x15c>
 80116c8:	3501      	adds	r5, #1
 80116ca:	68e3      	ldr	r3, [r4, #12]
 80116cc:	9903      	ldr	r1, [sp, #12]
 80116ce:	1a5b      	subs	r3, r3, r1
 80116d0:	42ab      	cmp	r3, r5
 80116d2:	dcf2      	bgt.n	80116ba <_printf_i+0x212>
 80116d4:	e7eb      	b.n	80116ae <_printf_i+0x206>
 80116d6:	2500      	movs	r5, #0
 80116d8:	f104 0619 	add.w	r6, r4, #25
 80116dc:	e7f5      	b.n	80116ca <_printf_i+0x222>
 80116de:	bf00      	nop
 80116e0:	08022ca6 	.word	0x08022ca6
 80116e4:	08022cb7 	.word	0x08022cb7

080116e8 <_scanf_float>:
 80116e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ec:	b087      	sub	sp, #28
 80116ee:	4617      	mov	r7, r2
 80116f0:	9303      	str	r3, [sp, #12]
 80116f2:	688b      	ldr	r3, [r1, #8]
 80116f4:	1e5a      	subs	r2, r3, #1
 80116f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80116fa:	bf81      	itttt	hi
 80116fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011700:	eb03 0b05 	addhi.w	fp, r3, r5
 8011704:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011708:	608b      	strhi	r3, [r1, #8]
 801170a:	680b      	ldr	r3, [r1, #0]
 801170c:	460a      	mov	r2, r1
 801170e:	f04f 0500 	mov.w	r5, #0
 8011712:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011716:	f842 3b1c 	str.w	r3, [r2], #28
 801171a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801171e:	4680      	mov	r8, r0
 8011720:	460c      	mov	r4, r1
 8011722:	bf98      	it	ls
 8011724:	f04f 0b00 	movls.w	fp, #0
 8011728:	9201      	str	r2, [sp, #4]
 801172a:	4616      	mov	r6, r2
 801172c:	46aa      	mov	sl, r5
 801172e:	46a9      	mov	r9, r5
 8011730:	9502      	str	r5, [sp, #8]
 8011732:	68a2      	ldr	r2, [r4, #8]
 8011734:	b152      	cbz	r2, 801174c <_scanf_float+0x64>
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	2b4e      	cmp	r3, #78	@ 0x4e
 801173c:	d864      	bhi.n	8011808 <_scanf_float+0x120>
 801173e:	2b40      	cmp	r3, #64	@ 0x40
 8011740:	d83c      	bhi.n	80117bc <_scanf_float+0xd4>
 8011742:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011746:	b2c8      	uxtb	r0, r1
 8011748:	280e      	cmp	r0, #14
 801174a:	d93a      	bls.n	80117c2 <_scanf_float+0xda>
 801174c:	f1b9 0f00 	cmp.w	r9, #0
 8011750:	d003      	beq.n	801175a <_scanf_float+0x72>
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011758:	6023      	str	r3, [r4, #0]
 801175a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801175e:	f1ba 0f01 	cmp.w	sl, #1
 8011762:	f200 8117 	bhi.w	8011994 <_scanf_float+0x2ac>
 8011766:	9b01      	ldr	r3, [sp, #4]
 8011768:	429e      	cmp	r6, r3
 801176a:	f200 8108 	bhi.w	801197e <_scanf_float+0x296>
 801176e:	2001      	movs	r0, #1
 8011770:	b007      	add	sp, #28
 8011772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011776:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801177a:	2a0d      	cmp	r2, #13
 801177c:	d8e6      	bhi.n	801174c <_scanf_float+0x64>
 801177e:	a101      	add	r1, pc, #4	@ (adr r1, 8011784 <_scanf_float+0x9c>)
 8011780:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011784:	080118cb 	.word	0x080118cb
 8011788:	0801174d 	.word	0x0801174d
 801178c:	0801174d 	.word	0x0801174d
 8011790:	0801174d 	.word	0x0801174d
 8011794:	0801192b 	.word	0x0801192b
 8011798:	08011903 	.word	0x08011903
 801179c:	0801174d 	.word	0x0801174d
 80117a0:	0801174d 	.word	0x0801174d
 80117a4:	080118d9 	.word	0x080118d9
 80117a8:	0801174d 	.word	0x0801174d
 80117ac:	0801174d 	.word	0x0801174d
 80117b0:	0801174d 	.word	0x0801174d
 80117b4:	0801174d 	.word	0x0801174d
 80117b8:	08011891 	.word	0x08011891
 80117bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80117c0:	e7db      	b.n	801177a <_scanf_float+0x92>
 80117c2:	290e      	cmp	r1, #14
 80117c4:	d8c2      	bhi.n	801174c <_scanf_float+0x64>
 80117c6:	a001      	add	r0, pc, #4	@ (adr r0, 80117cc <_scanf_float+0xe4>)
 80117c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80117cc:	08011881 	.word	0x08011881
 80117d0:	0801174d 	.word	0x0801174d
 80117d4:	08011881 	.word	0x08011881
 80117d8:	08011917 	.word	0x08011917
 80117dc:	0801174d 	.word	0x0801174d
 80117e0:	08011829 	.word	0x08011829
 80117e4:	08011867 	.word	0x08011867
 80117e8:	08011867 	.word	0x08011867
 80117ec:	08011867 	.word	0x08011867
 80117f0:	08011867 	.word	0x08011867
 80117f4:	08011867 	.word	0x08011867
 80117f8:	08011867 	.word	0x08011867
 80117fc:	08011867 	.word	0x08011867
 8011800:	08011867 	.word	0x08011867
 8011804:	08011867 	.word	0x08011867
 8011808:	2b6e      	cmp	r3, #110	@ 0x6e
 801180a:	d809      	bhi.n	8011820 <_scanf_float+0x138>
 801180c:	2b60      	cmp	r3, #96	@ 0x60
 801180e:	d8b2      	bhi.n	8011776 <_scanf_float+0x8e>
 8011810:	2b54      	cmp	r3, #84	@ 0x54
 8011812:	d07b      	beq.n	801190c <_scanf_float+0x224>
 8011814:	2b59      	cmp	r3, #89	@ 0x59
 8011816:	d199      	bne.n	801174c <_scanf_float+0x64>
 8011818:	2d07      	cmp	r5, #7
 801181a:	d197      	bne.n	801174c <_scanf_float+0x64>
 801181c:	2508      	movs	r5, #8
 801181e:	e02c      	b.n	801187a <_scanf_float+0x192>
 8011820:	2b74      	cmp	r3, #116	@ 0x74
 8011822:	d073      	beq.n	801190c <_scanf_float+0x224>
 8011824:	2b79      	cmp	r3, #121	@ 0x79
 8011826:	e7f6      	b.n	8011816 <_scanf_float+0x12e>
 8011828:	6821      	ldr	r1, [r4, #0]
 801182a:	05c8      	lsls	r0, r1, #23
 801182c:	d51b      	bpl.n	8011866 <_scanf_float+0x17e>
 801182e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011832:	6021      	str	r1, [r4, #0]
 8011834:	f109 0901 	add.w	r9, r9, #1
 8011838:	f1bb 0f00 	cmp.w	fp, #0
 801183c:	d003      	beq.n	8011846 <_scanf_float+0x15e>
 801183e:	3201      	adds	r2, #1
 8011840:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011844:	60a2      	str	r2, [r4, #8]
 8011846:	68a3      	ldr	r3, [r4, #8]
 8011848:	3b01      	subs	r3, #1
 801184a:	60a3      	str	r3, [r4, #8]
 801184c:	6923      	ldr	r3, [r4, #16]
 801184e:	3301      	adds	r3, #1
 8011850:	6123      	str	r3, [r4, #16]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	3b01      	subs	r3, #1
 8011856:	2b00      	cmp	r3, #0
 8011858:	607b      	str	r3, [r7, #4]
 801185a:	f340 8087 	ble.w	801196c <_scanf_float+0x284>
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	3301      	adds	r3, #1
 8011862:	603b      	str	r3, [r7, #0]
 8011864:	e765      	b.n	8011732 <_scanf_float+0x4a>
 8011866:	eb1a 0105 	adds.w	r1, sl, r5
 801186a:	f47f af6f 	bne.w	801174c <_scanf_float+0x64>
 801186e:	6822      	ldr	r2, [r4, #0]
 8011870:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011874:	6022      	str	r2, [r4, #0]
 8011876:	460d      	mov	r5, r1
 8011878:	468a      	mov	sl, r1
 801187a:	f806 3b01 	strb.w	r3, [r6], #1
 801187e:	e7e2      	b.n	8011846 <_scanf_float+0x15e>
 8011880:	6822      	ldr	r2, [r4, #0]
 8011882:	0610      	lsls	r0, r2, #24
 8011884:	f57f af62 	bpl.w	801174c <_scanf_float+0x64>
 8011888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801188c:	6022      	str	r2, [r4, #0]
 801188e:	e7f4      	b.n	801187a <_scanf_float+0x192>
 8011890:	f1ba 0f00 	cmp.w	sl, #0
 8011894:	d10e      	bne.n	80118b4 <_scanf_float+0x1cc>
 8011896:	f1b9 0f00 	cmp.w	r9, #0
 801189a:	d10e      	bne.n	80118ba <_scanf_float+0x1d2>
 801189c:	6822      	ldr	r2, [r4, #0]
 801189e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80118a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80118a6:	d108      	bne.n	80118ba <_scanf_float+0x1d2>
 80118a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118ac:	6022      	str	r2, [r4, #0]
 80118ae:	f04f 0a01 	mov.w	sl, #1
 80118b2:	e7e2      	b.n	801187a <_scanf_float+0x192>
 80118b4:	f1ba 0f02 	cmp.w	sl, #2
 80118b8:	d055      	beq.n	8011966 <_scanf_float+0x27e>
 80118ba:	2d01      	cmp	r5, #1
 80118bc:	d002      	beq.n	80118c4 <_scanf_float+0x1dc>
 80118be:	2d04      	cmp	r5, #4
 80118c0:	f47f af44 	bne.w	801174c <_scanf_float+0x64>
 80118c4:	3501      	adds	r5, #1
 80118c6:	b2ed      	uxtb	r5, r5
 80118c8:	e7d7      	b.n	801187a <_scanf_float+0x192>
 80118ca:	f1ba 0f01 	cmp.w	sl, #1
 80118ce:	f47f af3d 	bne.w	801174c <_scanf_float+0x64>
 80118d2:	f04f 0a02 	mov.w	sl, #2
 80118d6:	e7d0      	b.n	801187a <_scanf_float+0x192>
 80118d8:	b97d      	cbnz	r5, 80118fa <_scanf_float+0x212>
 80118da:	f1b9 0f00 	cmp.w	r9, #0
 80118de:	f47f af38 	bne.w	8011752 <_scanf_float+0x6a>
 80118e2:	6822      	ldr	r2, [r4, #0]
 80118e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80118e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80118ec:	f040 8108 	bne.w	8011b00 <_scanf_float+0x418>
 80118f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118f4:	6022      	str	r2, [r4, #0]
 80118f6:	2501      	movs	r5, #1
 80118f8:	e7bf      	b.n	801187a <_scanf_float+0x192>
 80118fa:	2d03      	cmp	r5, #3
 80118fc:	d0e2      	beq.n	80118c4 <_scanf_float+0x1dc>
 80118fe:	2d05      	cmp	r5, #5
 8011900:	e7de      	b.n	80118c0 <_scanf_float+0x1d8>
 8011902:	2d02      	cmp	r5, #2
 8011904:	f47f af22 	bne.w	801174c <_scanf_float+0x64>
 8011908:	2503      	movs	r5, #3
 801190a:	e7b6      	b.n	801187a <_scanf_float+0x192>
 801190c:	2d06      	cmp	r5, #6
 801190e:	f47f af1d 	bne.w	801174c <_scanf_float+0x64>
 8011912:	2507      	movs	r5, #7
 8011914:	e7b1      	b.n	801187a <_scanf_float+0x192>
 8011916:	6822      	ldr	r2, [r4, #0]
 8011918:	0591      	lsls	r1, r2, #22
 801191a:	f57f af17 	bpl.w	801174c <_scanf_float+0x64>
 801191e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011922:	6022      	str	r2, [r4, #0]
 8011924:	f8cd 9008 	str.w	r9, [sp, #8]
 8011928:	e7a7      	b.n	801187a <_scanf_float+0x192>
 801192a:	6822      	ldr	r2, [r4, #0]
 801192c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011930:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011934:	d006      	beq.n	8011944 <_scanf_float+0x25c>
 8011936:	0550      	lsls	r0, r2, #21
 8011938:	f57f af08 	bpl.w	801174c <_scanf_float+0x64>
 801193c:	f1b9 0f00 	cmp.w	r9, #0
 8011940:	f000 80de 	beq.w	8011b00 <_scanf_float+0x418>
 8011944:	0591      	lsls	r1, r2, #22
 8011946:	bf58      	it	pl
 8011948:	9902      	ldrpl	r1, [sp, #8]
 801194a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801194e:	bf58      	it	pl
 8011950:	eba9 0101 	subpl.w	r1, r9, r1
 8011954:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011958:	bf58      	it	pl
 801195a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801195e:	6022      	str	r2, [r4, #0]
 8011960:	f04f 0900 	mov.w	r9, #0
 8011964:	e789      	b.n	801187a <_scanf_float+0x192>
 8011966:	f04f 0a03 	mov.w	sl, #3
 801196a:	e786      	b.n	801187a <_scanf_float+0x192>
 801196c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011970:	4639      	mov	r1, r7
 8011972:	4640      	mov	r0, r8
 8011974:	4798      	blx	r3
 8011976:	2800      	cmp	r0, #0
 8011978:	f43f aedb 	beq.w	8011732 <_scanf_float+0x4a>
 801197c:	e6e6      	b.n	801174c <_scanf_float+0x64>
 801197e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011986:	463a      	mov	r2, r7
 8011988:	4640      	mov	r0, r8
 801198a:	4798      	blx	r3
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	3b01      	subs	r3, #1
 8011990:	6123      	str	r3, [r4, #16]
 8011992:	e6e8      	b.n	8011766 <_scanf_float+0x7e>
 8011994:	1e6b      	subs	r3, r5, #1
 8011996:	2b06      	cmp	r3, #6
 8011998:	d824      	bhi.n	80119e4 <_scanf_float+0x2fc>
 801199a:	2d02      	cmp	r5, #2
 801199c:	d836      	bhi.n	8011a0c <_scanf_float+0x324>
 801199e:	9b01      	ldr	r3, [sp, #4]
 80119a0:	429e      	cmp	r6, r3
 80119a2:	f67f aee4 	bls.w	801176e <_scanf_float+0x86>
 80119a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119ae:	463a      	mov	r2, r7
 80119b0:	4640      	mov	r0, r8
 80119b2:	4798      	blx	r3
 80119b4:	6923      	ldr	r3, [r4, #16]
 80119b6:	3b01      	subs	r3, #1
 80119b8:	6123      	str	r3, [r4, #16]
 80119ba:	e7f0      	b.n	801199e <_scanf_float+0x2b6>
 80119bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80119c4:	463a      	mov	r2, r7
 80119c6:	4640      	mov	r0, r8
 80119c8:	4798      	blx	r3
 80119ca:	6923      	ldr	r3, [r4, #16]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	6123      	str	r3, [r4, #16]
 80119d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119d4:	fa5f fa8a 	uxtb.w	sl, sl
 80119d8:	f1ba 0f02 	cmp.w	sl, #2
 80119dc:	d1ee      	bne.n	80119bc <_scanf_float+0x2d4>
 80119de:	3d03      	subs	r5, #3
 80119e0:	b2ed      	uxtb	r5, r5
 80119e2:	1b76      	subs	r6, r6, r5
 80119e4:	6823      	ldr	r3, [r4, #0]
 80119e6:	05da      	lsls	r2, r3, #23
 80119e8:	d530      	bpl.n	8011a4c <_scanf_float+0x364>
 80119ea:	055b      	lsls	r3, r3, #21
 80119ec:	d511      	bpl.n	8011a12 <_scanf_float+0x32a>
 80119ee:	9b01      	ldr	r3, [sp, #4]
 80119f0:	429e      	cmp	r6, r3
 80119f2:	f67f aebc 	bls.w	801176e <_scanf_float+0x86>
 80119f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119fe:	463a      	mov	r2, r7
 8011a00:	4640      	mov	r0, r8
 8011a02:	4798      	blx	r3
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	6123      	str	r3, [r4, #16]
 8011a0a:	e7f0      	b.n	80119ee <_scanf_float+0x306>
 8011a0c:	46aa      	mov	sl, r5
 8011a0e:	46b3      	mov	fp, r6
 8011a10:	e7de      	b.n	80119d0 <_scanf_float+0x2e8>
 8011a12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a16:	6923      	ldr	r3, [r4, #16]
 8011a18:	2965      	cmp	r1, #101	@ 0x65
 8011a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a22:	6123      	str	r3, [r4, #16]
 8011a24:	d00c      	beq.n	8011a40 <_scanf_float+0x358>
 8011a26:	2945      	cmp	r1, #69	@ 0x45
 8011a28:	d00a      	beq.n	8011a40 <_scanf_float+0x358>
 8011a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a2e:	463a      	mov	r2, r7
 8011a30:	4640      	mov	r0, r8
 8011a32:	4798      	blx	r3
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	1eb5      	subs	r5, r6, #2
 8011a3e:	6123      	str	r3, [r4, #16]
 8011a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a44:	463a      	mov	r2, r7
 8011a46:	4640      	mov	r0, r8
 8011a48:	4798      	blx	r3
 8011a4a:	462e      	mov	r6, r5
 8011a4c:	6822      	ldr	r2, [r4, #0]
 8011a4e:	f012 0210 	ands.w	r2, r2, #16
 8011a52:	d001      	beq.n	8011a58 <_scanf_float+0x370>
 8011a54:	2000      	movs	r0, #0
 8011a56:	e68b      	b.n	8011770 <_scanf_float+0x88>
 8011a58:	7032      	strb	r2, [r6, #0]
 8011a5a:	6823      	ldr	r3, [r4, #0]
 8011a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011a64:	d11c      	bne.n	8011aa0 <_scanf_float+0x3b8>
 8011a66:	9b02      	ldr	r3, [sp, #8]
 8011a68:	454b      	cmp	r3, r9
 8011a6a:	eba3 0209 	sub.w	r2, r3, r9
 8011a6e:	d123      	bne.n	8011ab8 <_scanf_float+0x3d0>
 8011a70:	9901      	ldr	r1, [sp, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	4640      	mov	r0, r8
 8011a76:	f002 fceb 	bl	8014450 <_strtod_r>
 8011a7a:	9b03      	ldr	r3, [sp, #12]
 8011a7c:	6821      	ldr	r1, [r4, #0]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f011 0f02 	tst.w	r1, #2
 8011a84:	ec57 6b10 	vmov	r6, r7, d0
 8011a88:	f103 0204 	add.w	r2, r3, #4
 8011a8c:	d01f      	beq.n	8011ace <_scanf_float+0x3e6>
 8011a8e:	9903      	ldr	r1, [sp, #12]
 8011a90:	600a      	str	r2, [r1, #0]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	e9c3 6700 	strd	r6, r7, [r3]
 8011a98:	68e3      	ldr	r3, [r4, #12]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	60e3      	str	r3, [r4, #12]
 8011a9e:	e7d9      	b.n	8011a54 <_scanf_float+0x36c>
 8011aa0:	9b04      	ldr	r3, [sp, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d0e4      	beq.n	8011a70 <_scanf_float+0x388>
 8011aa6:	9905      	ldr	r1, [sp, #20]
 8011aa8:	230a      	movs	r3, #10
 8011aaa:	3101      	adds	r1, #1
 8011aac:	4640      	mov	r0, r8
 8011aae:	f002 fd4f 	bl	8014550 <_strtol_r>
 8011ab2:	9b04      	ldr	r3, [sp, #16]
 8011ab4:	9e05      	ldr	r6, [sp, #20]
 8011ab6:	1ac2      	subs	r2, r0, r3
 8011ab8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011abc:	429e      	cmp	r6, r3
 8011abe:	bf28      	it	cs
 8011ac0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011ac4:	4910      	ldr	r1, [pc, #64]	@ (8011b08 <_scanf_float+0x420>)
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f000 f942 	bl	8011d50 <siprintf>
 8011acc:	e7d0      	b.n	8011a70 <_scanf_float+0x388>
 8011ace:	f011 0f04 	tst.w	r1, #4
 8011ad2:	9903      	ldr	r1, [sp, #12]
 8011ad4:	600a      	str	r2, [r1, #0]
 8011ad6:	d1dc      	bne.n	8011a92 <_scanf_float+0x3aa>
 8011ad8:	681d      	ldr	r5, [r3, #0]
 8011ada:	4632      	mov	r2, r6
 8011adc:	463b      	mov	r3, r7
 8011ade:	4630      	mov	r0, r6
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	f7ef f84b 	bl	8000b7c <__aeabi_dcmpun>
 8011ae6:	b128      	cbz	r0, 8011af4 <_scanf_float+0x40c>
 8011ae8:	4808      	ldr	r0, [pc, #32]	@ (8011b0c <_scanf_float+0x424>)
 8011aea:	f000 faa9 	bl	8012040 <nanf>
 8011aee:	ed85 0a00 	vstr	s0, [r5]
 8011af2:	e7d1      	b.n	8011a98 <_scanf_float+0x3b0>
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ef f89e 	bl	8000c38 <__aeabi_d2f>
 8011afc:	6028      	str	r0, [r5, #0]
 8011afe:	e7cb      	b.n	8011a98 <_scanf_float+0x3b0>
 8011b00:	f04f 0900 	mov.w	r9, #0
 8011b04:	e629      	b.n	801175a <_scanf_float+0x72>
 8011b06:	bf00      	nop
 8011b08:	08022cc8 	.word	0x08022cc8
 8011b0c:	0802305d 	.word	0x0802305d

08011b10 <std>:
 8011b10:	2300      	movs	r3, #0
 8011b12:	b510      	push	{r4, lr}
 8011b14:	4604      	mov	r4, r0
 8011b16:	e9c0 3300 	strd	r3, r3, [r0]
 8011b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b1e:	6083      	str	r3, [r0, #8]
 8011b20:	8181      	strh	r1, [r0, #12]
 8011b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b24:	81c2      	strh	r2, [r0, #14]
 8011b26:	6183      	str	r3, [r0, #24]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	2208      	movs	r2, #8
 8011b2c:	305c      	adds	r0, #92	@ 0x5c
 8011b2e:	f000 fa07 	bl	8011f40 <memset>
 8011b32:	4b0d      	ldr	r3, [pc, #52]	@ (8011b68 <std+0x58>)
 8011b34:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b36:	4b0d      	ldr	r3, [pc, #52]	@ (8011b6c <std+0x5c>)
 8011b38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b70 <std+0x60>)
 8011b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b74 <std+0x64>)
 8011b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b42:	4b0d      	ldr	r3, [pc, #52]	@ (8011b78 <std+0x68>)
 8011b44:	6224      	str	r4, [r4, #32]
 8011b46:	429c      	cmp	r4, r3
 8011b48:	d006      	beq.n	8011b58 <std+0x48>
 8011b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011b4e:	4294      	cmp	r4, r2
 8011b50:	d002      	beq.n	8011b58 <std+0x48>
 8011b52:	33d0      	adds	r3, #208	@ 0xd0
 8011b54:	429c      	cmp	r4, r3
 8011b56:	d105      	bne.n	8011b64 <std+0x54>
 8011b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b60:	f000 ba6a 	b.w	8012038 <__retarget_lock_init_recursive>
 8011b64:	bd10      	pop	{r4, pc}
 8011b66:	bf00      	nop
 8011b68:	08011d91 	.word	0x08011d91
 8011b6c:	08011db3 	.word	0x08011db3
 8011b70:	08011deb 	.word	0x08011deb
 8011b74:	08011e0f 	.word	0x08011e0f
 8011b78:	20002c78 	.word	0x20002c78

08011b7c <stdio_exit_handler>:
 8011b7c:	4a02      	ldr	r2, [pc, #8]	@ (8011b88 <stdio_exit_handler+0xc>)
 8011b7e:	4903      	ldr	r1, [pc, #12]	@ (8011b8c <stdio_exit_handler+0x10>)
 8011b80:	4803      	ldr	r0, [pc, #12]	@ (8011b90 <stdio_exit_handler+0x14>)
 8011b82:	f000 b869 	b.w	8011c58 <_fwalk_sglue>
 8011b86:	bf00      	nop
 8011b88:	20000388 	.word	0x20000388
 8011b8c:	0801490d 	.word	0x0801490d
 8011b90:	20000398 	.word	0x20000398

08011b94 <cleanup_stdio>:
 8011b94:	6841      	ldr	r1, [r0, #4]
 8011b96:	4b0c      	ldr	r3, [pc, #48]	@ (8011bc8 <cleanup_stdio+0x34>)
 8011b98:	4299      	cmp	r1, r3
 8011b9a:	b510      	push	{r4, lr}
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	d001      	beq.n	8011ba4 <cleanup_stdio+0x10>
 8011ba0:	f002 feb4 	bl	801490c <_fflush_r>
 8011ba4:	68a1      	ldr	r1, [r4, #8]
 8011ba6:	4b09      	ldr	r3, [pc, #36]	@ (8011bcc <cleanup_stdio+0x38>)
 8011ba8:	4299      	cmp	r1, r3
 8011baa:	d002      	beq.n	8011bb2 <cleanup_stdio+0x1e>
 8011bac:	4620      	mov	r0, r4
 8011bae:	f002 fead 	bl	801490c <_fflush_r>
 8011bb2:	68e1      	ldr	r1, [r4, #12]
 8011bb4:	4b06      	ldr	r3, [pc, #24]	@ (8011bd0 <cleanup_stdio+0x3c>)
 8011bb6:	4299      	cmp	r1, r3
 8011bb8:	d004      	beq.n	8011bc4 <cleanup_stdio+0x30>
 8011bba:	4620      	mov	r0, r4
 8011bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bc0:	f002 bea4 	b.w	801490c <_fflush_r>
 8011bc4:	bd10      	pop	{r4, pc}
 8011bc6:	bf00      	nop
 8011bc8:	20002c78 	.word	0x20002c78
 8011bcc:	20002ce0 	.word	0x20002ce0
 8011bd0:	20002d48 	.word	0x20002d48

08011bd4 <global_stdio_init.part.0>:
 8011bd4:	b510      	push	{r4, lr}
 8011bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8011c04 <global_stdio_init.part.0+0x30>)
 8011bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8011c08 <global_stdio_init.part.0+0x34>)
 8011bda:	4a0c      	ldr	r2, [pc, #48]	@ (8011c0c <global_stdio_init.part.0+0x38>)
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	4620      	mov	r0, r4
 8011be0:	2200      	movs	r2, #0
 8011be2:	2104      	movs	r1, #4
 8011be4:	f7ff ff94 	bl	8011b10 <std>
 8011be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011bec:	2201      	movs	r2, #1
 8011bee:	2109      	movs	r1, #9
 8011bf0:	f7ff ff8e 	bl	8011b10 <std>
 8011bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bfe:	2112      	movs	r1, #18
 8011c00:	f7ff bf86 	b.w	8011b10 <std>
 8011c04:	20002db0 	.word	0x20002db0
 8011c08:	20002c78 	.word	0x20002c78
 8011c0c:	08011b7d 	.word	0x08011b7d

08011c10 <__sfp_lock_acquire>:
 8011c10:	4801      	ldr	r0, [pc, #4]	@ (8011c18 <__sfp_lock_acquire+0x8>)
 8011c12:	f000 ba12 	b.w	801203a <__retarget_lock_acquire_recursive>
 8011c16:	bf00      	nop
 8011c18:	20002db9 	.word	0x20002db9

08011c1c <__sfp_lock_release>:
 8011c1c:	4801      	ldr	r0, [pc, #4]	@ (8011c24 <__sfp_lock_release+0x8>)
 8011c1e:	f000 ba0d 	b.w	801203c <__retarget_lock_release_recursive>
 8011c22:	bf00      	nop
 8011c24:	20002db9 	.word	0x20002db9

08011c28 <__sinit>:
 8011c28:	b510      	push	{r4, lr}
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	f7ff fff0 	bl	8011c10 <__sfp_lock_acquire>
 8011c30:	6a23      	ldr	r3, [r4, #32]
 8011c32:	b11b      	cbz	r3, 8011c3c <__sinit+0x14>
 8011c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c38:	f7ff bff0 	b.w	8011c1c <__sfp_lock_release>
 8011c3c:	4b04      	ldr	r3, [pc, #16]	@ (8011c50 <__sinit+0x28>)
 8011c3e:	6223      	str	r3, [r4, #32]
 8011c40:	4b04      	ldr	r3, [pc, #16]	@ (8011c54 <__sinit+0x2c>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d1f5      	bne.n	8011c34 <__sinit+0xc>
 8011c48:	f7ff ffc4 	bl	8011bd4 <global_stdio_init.part.0>
 8011c4c:	e7f2      	b.n	8011c34 <__sinit+0xc>
 8011c4e:	bf00      	nop
 8011c50:	08011b95 	.word	0x08011b95
 8011c54:	20002db0 	.word	0x20002db0

08011c58 <_fwalk_sglue>:
 8011c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	4688      	mov	r8, r1
 8011c60:	4614      	mov	r4, r2
 8011c62:	2600      	movs	r6, #0
 8011c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c68:	f1b9 0901 	subs.w	r9, r9, #1
 8011c6c:	d505      	bpl.n	8011c7a <_fwalk_sglue+0x22>
 8011c6e:	6824      	ldr	r4, [r4, #0]
 8011c70:	2c00      	cmp	r4, #0
 8011c72:	d1f7      	bne.n	8011c64 <_fwalk_sglue+0xc>
 8011c74:	4630      	mov	r0, r6
 8011c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c7a:	89ab      	ldrh	r3, [r5, #12]
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d907      	bls.n	8011c90 <_fwalk_sglue+0x38>
 8011c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c84:	3301      	adds	r3, #1
 8011c86:	d003      	beq.n	8011c90 <_fwalk_sglue+0x38>
 8011c88:	4629      	mov	r1, r5
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	47c0      	blx	r8
 8011c8e:	4306      	orrs	r6, r0
 8011c90:	3568      	adds	r5, #104	@ 0x68
 8011c92:	e7e9      	b.n	8011c68 <_fwalk_sglue+0x10>

08011c94 <_puts_r>:
 8011c94:	6a03      	ldr	r3, [r0, #32]
 8011c96:	b570      	push	{r4, r5, r6, lr}
 8011c98:	6884      	ldr	r4, [r0, #8]
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	460e      	mov	r6, r1
 8011c9e:	b90b      	cbnz	r3, 8011ca4 <_puts_r+0x10>
 8011ca0:	f7ff ffc2 	bl	8011c28 <__sinit>
 8011ca4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ca6:	07db      	lsls	r3, r3, #31
 8011ca8:	d405      	bmi.n	8011cb6 <_puts_r+0x22>
 8011caa:	89a3      	ldrh	r3, [r4, #12]
 8011cac:	0598      	lsls	r0, r3, #22
 8011cae:	d402      	bmi.n	8011cb6 <_puts_r+0x22>
 8011cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cb2:	f000 f9c2 	bl	801203a <__retarget_lock_acquire_recursive>
 8011cb6:	89a3      	ldrh	r3, [r4, #12]
 8011cb8:	0719      	lsls	r1, r3, #28
 8011cba:	d502      	bpl.n	8011cc2 <_puts_r+0x2e>
 8011cbc:	6923      	ldr	r3, [r4, #16]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d135      	bne.n	8011d2e <_puts_r+0x9a>
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f000 f8e5 	bl	8011e94 <__swsetup_r>
 8011cca:	b380      	cbz	r0, 8011d2e <_puts_r+0x9a>
 8011ccc:	f04f 35ff 	mov.w	r5, #4294967295
 8011cd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cd2:	07da      	lsls	r2, r3, #31
 8011cd4:	d405      	bmi.n	8011ce2 <_puts_r+0x4e>
 8011cd6:	89a3      	ldrh	r3, [r4, #12]
 8011cd8:	059b      	lsls	r3, r3, #22
 8011cda:	d402      	bmi.n	8011ce2 <_puts_r+0x4e>
 8011cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cde:	f000 f9ad 	bl	801203c <__retarget_lock_release_recursive>
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	bd70      	pop	{r4, r5, r6, pc}
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	da04      	bge.n	8011cf4 <_puts_r+0x60>
 8011cea:	69a2      	ldr	r2, [r4, #24]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	dc17      	bgt.n	8011d20 <_puts_r+0x8c>
 8011cf0:	290a      	cmp	r1, #10
 8011cf2:	d015      	beq.n	8011d20 <_puts_r+0x8c>
 8011cf4:	6823      	ldr	r3, [r4, #0]
 8011cf6:	1c5a      	adds	r2, r3, #1
 8011cf8:	6022      	str	r2, [r4, #0]
 8011cfa:	7019      	strb	r1, [r3, #0]
 8011cfc:	68a3      	ldr	r3, [r4, #8]
 8011cfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011d02:	3b01      	subs	r3, #1
 8011d04:	60a3      	str	r3, [r4, #8]
 8011d06:	2900      	cmp	r1, #0
 8011d08:	d1ed      	bne.n	8011ce6 <_puts_r+0x52>
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	da11      	bge.n	8011d32 <_puts_r+0x9e>
 8011d0e:	4622      	mov	r2, r4
 8011d10:	210a      	movs	r1, #10
 8011d12:	4628      	mov	r0, r5
 8011d14:	f000 f87f 	bl	8011e16 <__swbuf_r>
 8011d18:	3001      	adds	r0, #1
 8011d1a:	d0d7      	beq.n	8011ccc <_puts_r+0x38>
 8011d1c:	250a      	movs	r5, #10
 8011d1e:	e7d7      	b.n	8011cd0 <_puts_r+0x3c>
 8011d20:	4622      	mov	r2, r4
 8011d22:	4628      	mov	r0, r5
 8011d24:	f000 f877 	bl	8011e16 <__swbuf_r>
 8011d28:	3001      	adds	r0, #1
 8011d2a:	d1e7      	bne.n	8011cfc <_puts_r+0x68>
 8011d2c:	e7ce      	b.n	8011ccc <_puts_r+0x38>
 8011d2e:	3e01      	subs	r6, #1
 8011d30:	e7e4      	b.n	8011cfc <_puts_r+0x68>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	1c5a      	adds	r2, r3, #1
 8011d36:	6022      	str	r2, [r4, #0]
 8011d38:	220a      	movs	r2, #10
 8011d3a:	701a      	strb	r2, [r3, #0]
 8011d3c:	e7ee      	b.n	8011d1c <_puts_r+0x88>
	...

08011d40 <puts>:
 8011d40:	4b02      	ldr	r3, [pc, #8]	@ (8011d4c <puts+0xc>)
 8011d42:	4601      	mov	r1, r0
 8011d44:	6818      	ldr	r0, [r3, #0]
 8011d46:	f7ff bfa5 	b.w	8011c94 <_puts_r>
 8011d4a:	bf00      	nop
 8011d4c:	20000394 	.word	0x20000394

08011d50 <siprintf>:
 8011d50:	b40e      	push	{r1, r2, r3}
 8011d52:	b500      	push	{lr}
 8011d54:	b09c      	sub	sp, #112	@ 0x70
 8011d56:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d58:	9002      	str	r0, [sp, #8]
 8011d5a:	9006      	str	r0, [sp, #24]
 8011d5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d60:	4809      	ldr	r0, [pc, #36]	@ (8011d88 <siprintf+0x38>)
 8011d62:	9107      	str	r1, [sp, #28]
 8011d64:	9104      	str	r1, [sp, #16]
 8011d66:	4909      	ldr	r1, [pc, #36]	@ (8011d8c <siprintf+0x3c>)
 8011d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d6c:	9105      	str	r1, [sp, #20]
 8011d6e:	6800      	ldr	r0, [r0, #0]
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	a902      	add	r1, sp, #8
 8011d74:	f002 fc4a 	bl	801460c <_svfiprintf_r>
 8011d78:	9b02      	ldr	r3, [sp, #8]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	701a      	strb	r2, [r3, #0]
 8011d7e:	b01c      	add	sp, #112	@ 0x70
 8011d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d84:	b003      	add	sp, #12
 8011d86:	4770      	bx	lr
 8011d88:	20000394 	.word	0x20000394
 8011d8c:	ffff0208 	.word	0xffff0208

08011d90 <__sread>:
 8011d90:	b510      	push	{r4, lr}
 8011d92:	460c      	mov	r4, r1
 8011d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d98:	f000 f900 	bl	8011f9c <_read_r>
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	bfab      	itete	ge
 8011da0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011da2:	89a3      	ldrhlt	r3, [r4, #12]
 8011da4:	181b      	addge	r3, r3, r0
 8011da6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011daa:	bfac      	ite	ge
 8011dac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011dae:	81a3      	strhlt	r3, [r4, #12]
 8011db0:	bd10      	pop	{r4, pc}

08011db2 <__swrite>:
 8011db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db6:	461f      	mov	r7, r3
 8011db8:	898b      	ldrh	r3, [r1, #12]
 8011dba:	05db      	lsls	r3, r3, #23
 8011dbc:	4605      	mov	r5, r0
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	4616      	mov	r6, r2
 8011dc2:	d505      	bpl.n	8011dd0 <__swrite+0x1e>
 8011dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dc8:	2302      	movs	r3, #2
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f000 f8d4 	bl	8011f78 <_lseek_r>
 8011dd0:	89a3      	ldrh	r3, [r4, #12]
 8011dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011dda:	81a3      	strh	r3, [r4, #12]
 8011ddc:	4632      	mov	r2, r6
 8011dde:	463b      	mov	r3, r7
 8011de0:	4628      	mov	r0, r5
 8011de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011de6:	f000 b8eb 	b.w	8011fc0 <_write_r>

08011dea <__sseek>:
 8011dea:	b510      	push	{r4, lr}
 8011dec:	460c      	mov	r4, r1
 8011dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df2:	f000 f8c1 	bl	8011f78 <_lseek_r>
 8011df6:	1c43      	adds	r3, r0, #1
 8011df8:	89a3      	ldrh	r3, [r4, #12]
 8011dfa:	bf15      	itete	ne
 8011dfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011dfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e06:	81a3      	strheq	r3, [r4, #12]
 8011e08:	bf18      	it	ne
 8011e0a:	81a3      	strhne	r3, [r4, #12]
 8011e0c:	bd10      	pop	{r4, pc}

08011e0e <__sclose>:
 8011e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e12:	f000 b8a1 	b.w	8011f58 <_close_r>

08011e16 <__swbuf_r>:
 8011e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e18:	460e      	mov	r6, r1
 8011e1a:	4614      	mov	r4, r2
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	b118      	cbz	r0, 8011e28 <__swbuf_r+0x12>
 8011e20:	6a03      	ldr	r3, [r0, #32]
 8011e22:	b90b      	cbnz	r3, 8011e28 <__swbuf_r+0x12>
 8011e24:	f7ff ff00 	bl	8011c28 <__sinit>
 8011e28:	69a3      	ldr	r3, [r4, #24]
 8011e2a:	60a3      	str	r3, [r4, #8]
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	071a      	lsls	r2, r3, #28
 8011e30:	d501      	bpl.n	8011e36 <__swbuf_r+0x20>
 8011e32:	6923      	ldr	r3, [r4, #16]
 8011e34:	b943      	cbnz	r3, 8011e48 <__swbuf_r+0x32>
 8011e36:	4621      	mov	r1, r4
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f000 f82b 	bl	8011e94 <__swsetup_r>
 8011e3e:	b118      	cbz	r0, 8011e48 <__swbuf_r+0x32>
 8011e40:	f04f 37ff 	mov.w	r7, #4294967295
 8011e44:	4638      	mov	r0, r7
 8011e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	6922      	ldr	r2, [r4, #16]
 8011e4c:	1a98      	subs	r0, r3, r2
 8011e4e:	6963      	ldr	r3, [r4, #20]
 8011e50:	b2f6      	uxtb	r6, r6
 8011e52:	4283      	cmp	r3, r0
 8011e54:	4637      	mov	r7, r6
 8011e56:	dc05      	bgt.n	8011e64 <__swbuf_r+0x4e>
 8011e58:	4621      	mov	r1, r4
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	f002 fd56 	bl	801490c <_fflush_r>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d1ed      	bne.n	8011e40 <__swbuf_r+0x2a>
 8011e64:	68a3      	ldr	r3, [r4, #8]
 8011e66:	3b01      	subs	r3, #1
 8011e68:	60a3      	str	r3, [r4, #8]
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	1c5a      	adds	r2, r3, #1
 8011e6e:	6022      	str	r2, [r4, #0]
 8011e70:	701e      	strb	r6, [r3, #0]
 8011e72:	6962      	ldr	r2, [r4, #20]
 8011e74:	1c43      	adds	r3, r0, #1
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d004      	beq.n	8011e84 <__swbuf_r+0x6e>
 8011e7a:	89a3      	ldrh	r3, [r4, #12]
 8011e7c:	07db      	lsls	r3, r3, #31
 8011e7e:	d5e1      	bpl.n	8011e44 <__swbuf_r+0x2e>
 8011e80:	2e0a      	cmp	r6, #10
 8011e82:	d1df      	bne.n	8011e44 <__swbuf_r+0x2e>
 8011e84:	4621      	mov	r1, r4
 8011e86:	4628      	mov	r0, r5
 8011e88:	f002 fd40 	bl	801490c <_fflush_r>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d0d9      	beq.n	8011e44 <__swbuf_r+0x2e>
 8011e90:	e7d6      	b.n	8011e40 <__swbuf_r+0x2a>
	...

08011e94 <__swsetup_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	4b29      	ldr	r3, [pc, #164]	@ (8011f3c <__swsetup_r+0xa8>)
 8011e98:	4605      	mov	r5, r0
 8011e9a:	6818      	ldr	r0, [r3, #0]
 8011e9c:	460c      	mov	r4, r1
 8011e9e:	b118      	cbz	r0, 8011ea8 <__swsetup_r+0x14>
 8011ea0:	6a03      	ldr	r3, [r0, #32]
 8011ea2:	b90b      	cbnz	r3, 8011ea8 <__swsetup_r+0x14>
 8011ea4:	f7ff fec0 	bl	8011c28 <__sinit>
 8011ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eac:	0719      	lsls	r1, r3, #28
 8011eae:	d422      	bmi.n	8011ef6 <__swsetup_r+0x62>
 8011eb0:	06da      	lsls	r2, r3, #27
 8011eb2:	d407      	bmi.n	8011ec4 <__swsetup_r+0x30>
 8011eb4:	2209      	movs	r2, #9
 8011eb6:	602a      	str	r2, [r5, #0]
 8011eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ebc:	81a3      	strh	r3, [r4, #12]
 8011ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec2:	e033      	b.n	8011f2c <__swsetup_r+0x98>
 8011ec4:	0758      	lsls	r0, r3, #29
 8011ec6:	d512      	bpl.n	8011eee <__swsetup_r+0x5a>
 8011ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011eca:	b141      	cbz	r1, 8011ede <__swsetup_r+0x4a>
 8011ecc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ed0:	4299      	cmp	r1, r3
 8011ed2:	d002      	beq.n	8011eda <__swsetup_r+0x46>
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	f000 ff07 	bl	8012ce8 <_free_r>
 8011eda:	2300      	movs	r3, #0
 8011edc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ede:	89a3      	ldrh	r3, [r4, #12]
 8011ee0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ee4:	81a3      	strh	r3, [r4, #12]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	6063      	str	r3, [r4, #4]
 8011eea:	6923      	ldr	r3, [r4, #16]
 8011eec:	6023      	str	r3, [r4, #0]
 8011eee:	89a3      	ldrh	r3, [r4, #12]
 8011ef0:	f043 0308 	orr.w	r3, r3, #8
 8011ef4:	81a3      	strh	r3, [r4, #12]
 8011ef6:	6923      	ldr	r3, [r4, #16]
 8011ef8:	b94b      	cbnz	r3, 8011f0e <__swsetup_r+0x7a>
 8011efa:	89a3      	ldrh	r3, [r4, #12]
 8011efc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f04:	d003      	beq.n	8011f0e <__swsetup_r+0x7a>
 8011f06:	4621      	mov	r1, r4
 8011f08:	4628      	mov	r0, r5
 8011f0a:	f002 fd4d 	bl	80149a8 <__smakebuf_r>
 8011f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f12:	f013 0201 	ands.w	r2, r3, #1
 8011f16:	d00a      	beq.n	8011f2e <__swsetup_r+0x9a>
 8011f18:	2200      	movs	r2, #0
 8011f1a:	60a2      	str	r2, [r4, #8]
 8011f1c:	6962      	ldr	r2, [r4, #20]
 8011f1e:	4252      	negs	r2, r2
 8011f20:	61a2      	str	r2, [r4, #24]
 8011f22:	6922      	ldr	r2, [r4, #16]
 8011f24:	b942      	cbnz	r2, 8011f38 <__swsetup_r+0xa4>
 8011f26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f2a:	d1c5      	bne.n	8011eb8 <__swsetup_r+0x24>
 8011f2c:	bd38      	pop	{r3, r4, r5, pc}
 8011f2e:	0799      	lsls	r1, r3, #30
 8011f30:	bf58      	it	pl
 8011f32:	6962      	ldrpl	r2, [r4, #20]
 8011f34:	60a2      	str	r2, [r4, #8]
 8011f36:	e7f4      	b.n	8011f22 <__swsetup_r+0x8e>
 8011f38:	2000      	movs	r0, #0
 8011f3a:	e7f7      	b.n	8011f2c <__swsetup_r+0x98>
 8011f3c:	20000394 	.word	0x20000394

08011f40 <memset>:
 8011f40:	4402      	add	r2, r0
 8011f42:	4603      	mov	r3, r0
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d100      	bne.n	8011f4a <memset+0xa>
 8011f48:	4770      	bx	lr
 8011f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8011f4e:	e7f9      	b.n	8011f44 <memset+0x4>

08011f50 <_localeconv_r>:
 8011f50:	4800      	ldr	r0, [pc, #0]	@ (8011f54 <_localeconv_r+0x4>)
 8011f52:	4770      	bx	lr
 8011f54:	200004d4 	.word	0x200004d4

08011f58 <_close_r>:
 8011f58:	b538      	push	{r3, r4, r5, lr}
 8011f5a:	4d06      	ldr	r5, [pc, #24]	@ (8011f74 <_close_r+0x1c>)
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	4604      	mov	r4, r0
 8011f60:	4608      	mov	r0, r1
 8011f62:	602b      	str	r3, [r5, #0]
 8011f64:	f7f1 fe80 	bl	8003c68 <_close>
 8011f68:	1c43      	adds	r3, r0, #1
 8011f6a:	d102      	bne.n	8011f72 <_close_r+0x1a>
 8011f6c:	682b      	ldr	r3, [r5, #0]
 8011f6e:	b103      	cbz	r3, 8011f72 <_close_r+0x1a>
 8011f70:	6023      	str	r3, [r4, #0]
 8011f72:	bd38      	pop	{r3, r4, r5, pc}
 8011f74:	20002db4 	.word	0x20002db4

08011f78 <_lseek_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4d07      	ldr	r5, [pc, #28]	@ (8011f98 <_lseek_r+0x20>)
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	4608      	mov	r0, r1
 8011f80:	4611      	mov	r1, r2
 8011f82:	2200      	movs	r2, #0
 8011f84:	602a      	str	r2, [r5, #0]
 8011f86:	461a      	mov	r2, r3
 8011f88:	f7f1 fe95 	bl	8003cb6 <_lseek>
 8011f8c:	1c43      	adds	r3, r0, #1
 8011f8e:	d102      	bne.n	8011f96 <_lseek_r+0x1e>
 8011f90:	682b      	ldr	r3, [r5, #0]
 8011f92:	b103      	cbz	r3, 8011f96 <_lseek_r+0x1e>
 8011f94:	6023      	str	r3, [r4, #0]
 8011f96:	bd38      	pop	{r3, r4, r5, pc}
 8011f98:	20002db4 	.word	0x20002db4

08011f9c <_read_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4d07      	ldr	r5, [pc, #28]	@ (8011fbc <_read_r+0x20>)
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	4608      	mov	r0, r1
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	602a      	str	r2, [r5, #0]
 8011faa:	461a      	mov	r2, r3
 8011fac:	f7f1 fe23 	bl	8003bf6 <_read>
 8011fb0:	1c43      	adds	r3, r0, #1
 8011fb2:	d102      	bne.n	8011fba <_read_r+0x1e>
 8011fb4:	682b      	ldr	r3, [r5, #0]
 8011fb6:	b103      	cbz	r3, 8011fba <_read_r+0x1e>
 8011fb8:	6023      	str	r3, [r4, #0]
 8011fba:	bd38      	pop	{r3, r4, r5, pc}
 8011fbc:	20002db4 	.word	0x20002db4

08011fc0 <_write_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4d07      	ldr	r5, [pc, #28]	@ (8011fe0 <_write_r+0x20>)
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	4611      	mov	r1, r2
 8011fca:	2200      	movs	r2, #0
 8011fcc:	602a      	str	r2, [r5, #0]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	f7f1 fe2e 	bl	8003c30 <_write>
 8011fd4:	1c43      	adds	r3, r0, #1
 8011fd6:	d102      	bne.n	8011fde <_write_r+0x1e>
 8011fd8:	682b      	ldr	r3, [r5, #0]
 8011fda:	b103      	cbz	r3, 8011fde <_write_r+0x1e>
 8011fdc:	6023      	str	r3, [r4, #0]
 8011fde:	bd38      	pop	{r3, r4, r5, pc}
 8011fe0:	20002db4 	.word	0x20002db4

08011fe4 <__errno>:
 8011fe4:	4b01      	ldr	r3, [pc, #4]	@ (8011fec <__errno+0x8>)
 8011fe6:	6818      	ldr	r0, [r3, #0]
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	20000394 	.word	0x20000394

08011ff0 <__libc_init_array>:
 8011ff0:	b570      	push	{r4, r5, r6, lr}
 8011ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8012028 <__libc_init_array+0x38>)
 8011ff4:	4c0d      	ldr	r4, [pc, #52]	@ (801202c <__libc_init_array+0x3c>)
 8011ff6:	1b64      	subs	r4, r4, r5
 8011ff8:	10a4      	asrs	r4, r4, #2
 8011ffa:	2600      	movs	r6, #0
 8011ffc:	42a6      	cmp	r6, r4
 8011ffe:	d109      	bne.n	8012014 <__libc_init_array+0x24>
 8012000:	4d0b      	ldr	r5, [pc, #44]	@ (8012030 <__libc_init_array+0x40>)
 8012002:	4c0c      	ldr	r4, [pc, #48]	@ (8012034 <__libc_init_array+0x44>)
 8012004:	f003 fade 	bl	80155c4 <_init>
 8012008:	1b64      	subs	r4, r4, r5
 801200a:	10a4      	asrs	r4, r4, #2
 801200c:	2600      	movs	r6, #0
 801200e:	42a6      	cmp	r6, r4
 8012010:	d105      	bne.n	801201e <__libc_init_array+0x2e>
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	f855 3b04 	ldr.w	r3, [r5], #4
 8012018:	4798      	blx	r3
 801201a:	3601      	adds	r6, #1
 801201c:	e7ee      	b.n	8011ffc <__libc_init_array+0xc>
 801201e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012022:	4798      	blx	r3
 8012024:	3601      	adds	r6, #1
 8012026:	e7f2      	b.n	801200e <__libc_init_array+0x1e>
 8012028:	080230c8 	.word	0x080230c8
 801202c:	080230c8 	.word	0x080230c8
 8012030:	080230c8 	.word	0x080230c8
 8012034:	080230cc 	.word	0x080230cc

08012038 <__retarget_lock_init_recursive>:
 8012038:	4770      	bx	lr

0801203a <__retarget_lock_acquire_recursive>:
 801203a:	4770      	bx	lr

0801203c <__retarget_lock_release_recursive>:
 801203c:	4770      	bx	lr
	...

08012040 <nanf>:
 8012040:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012048 <nanf+0x8>
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop
 8012048:	7fc00000 	.word	0x7fc00000

0801204c <quorem>:
 801204c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012050:	6903      	ldr	r3, [r0, #16]
 8012052:	690c      	ldr	r4, [r1, #16]
 8012054:	42a3      	cmp	r3, r4
 8012056:	4607      	mov	r7, r0
 8012058:	db7e      	blt.n	8012158 <quorem+0x10c>
 801205a:	3c01      	subs	r4, #1
 801205c:	f101 0814 	add.w	r8, r1, #20
 8012060:	00a3      	lsls	r3, r4, #2
 8012062:	f100 0514 	add.w	r5, r0, #20
 8012066:	9300      	str	r3, [sp, #0]
 8012068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801206c:	9301      	str	r3, [sp, #4]
 801206e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012076:	3301      	adds	r3, #1
 8012078:	429a      	cmp	r2, r3
 801207a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801207e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012082:	d32e      	bcc.n	80120e2 <quorem+0x96>
 8012084:	f04f 0a00 	mov.w	sl, #0
 8012088:	46c4      	mov	ip, r8
 801208a:	46ae      	mov	lr, r5
 801208c:	46d3      	mov	fp, sl
 801208e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012092:	b298      	uxth	r0, r3
 8012094:	fb06 a000 	mla	r0, r6, r0, sl
 8012098:	0c02      	lsrs	r2, r0, #16
 801209a:	0c1b      	lsrs	r3, r3, #16
 801209c:	fb06 2303 	mla	r3, r6, r3, r2
 80120a0:	f8de 2000 	ldr.w	r2, [lr]
 80120a4:	b280      	uxth	r0, r0
 80120a6:	b292      	uxth	r2, r2
 80120a8:	1a12      	subs	r2, r2, r0
 80120aa:	445a      	add	r2, fp
 80120ac:	f8de 0000 	ldr.w	r0, [lr]
 80120b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80120ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80120be:	b292      	uxth	r2, r2
 80120c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80120c4:	45e1      	cmp	r9, ip
 80120c6:	f84e 2b04 	str.w	r2, [lr], #4
 80120ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80120ce:	d2de      	bcs.n	801208e <quorem+0x42>
 80120d0:	9b00      	ldr	r3, [sp, #0]
 80120d2:	58eb      	ldr	r3, [r5, r3]
 80120d4:	b92b      	cbnz	r3, 80120e2 <quorem+0x96>
 80120d6:	9b01      	ldr	r3, [sp, #4]
 80120d8:	3b04      	subs	r3, #4
 80120da:	429d      	cmp	r5, r3
 80120dc:	461a      	mov	r2, r3
 80120de:	d32f      	bcc.n	8012140 <quorem+0xf4>
 80120e0:	613c      	str	r4, [r7, #16]
 80120e2:	4638      	mov	r0, r7
 80120e4:	f001 f9c4 	bl	8013470 <__mcmp>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	db25      	blt.n	8012138 <quorem+0xec>
 80120ec:	4629      	mov	r1, r5
 80120ee:	2000      	movs	r0, #0
 80120f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80120f4:	f8d1 c000 	ldr.w	ip, [r1]
 80120f8:	fa1f fe82 	uxth.w	lr, r2
 80120fc:	fa1f f38c 	uxth.w	r3, ip
 8012100:	eba3 030e 	sub.w	r3, r3, lr
 8012104:	4403      	add	r3, r0
 8012106:	0c12      	lsrs	r2, r2, #16
 8012108:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801210c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012110:	b29b      	uxth	r3, r3
 8012112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012116:	45c1      	cmp	r9, r8
 8012118:	f841 3b04 	str.w	r3, [r1], #4
 801211c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012120:	d2e6      	bcs.n	80120f0 <quorem+0xa4>
 8012122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801212a:	b922      	cbnz	r2, 8012136 <quorem+0xea>
 801212c:	3b04      	subs	r3, #4
 801212e:	429d      	cmp	r5, r3
 8012130:	461a      	mov	r2, r3
 8012132:	d30b      	bcc.n	801214c <quorem+0x100>
 8012134:	613c      	str	r4, [r7, #16]
 8012136:	3601      	adds	r6, #1
 8012138:	4630      	mov	r0, r6
 801213a:	b003      	add	sp, #12
 801213c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012140:	6812      	ldr	r2, [r2, #0]
 8012142:	3b04      	subs	r3, #4
 8012144:	2a00      	cmp	r2, #0
 8012146:	d1cb      	bne.n	80120e0 <quorem+0x94>
 8012148:	3c01      	subs	r4, #1
 801214a:	e7c6      	b.n	80120da <quorem+0x8e>
 801214c:	6812      	ldr	r2, [r2, #0]
 801214e:	3b04      	subs	r3, #4
 8012150:	2a00      	cmp	r2, #0
 8012152:	d1ef      	bne.n	8012134 <quorem+0xe8>
 8012154:	3c01      	subs	r4, #1
 8012156:	e7ea      	b.n	801212e <quorem+0xe2>
 8012158:	2000      	movs	r0, #0
 801215a:	e7ee      	b.n	801213a <quorem+0xee>
 801215c:	0000      	movs	r0, r0
	...

08012160 <_dtoa_r>:
 8012160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012164:	69c7      	ldr	r7, [r0, #28]
 8012166:	b099      	sub	sp, #100	@ 0x64
 8012168:	ed8d 0b02 	vstr	d0, [sp, #8]
 801216c:	ec55 4b10 	vmov	r4, r5, d0
 8012170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012172:	9109      	str	r1, [sp, #36]	@ 0x24
 8012174:	4683      	mov	fp, r0
 8012176:	920e      	str	r2, [sp, #56]	@ 0x38
 8012178:	9313      	str	r3, [sp, #76]	@ 0x4c
 801217a:	b97f      	cbnz	r7, 801219c <_dtoa_r+0x3c>
 801217c:	2010      	movs	r0, #16
 801217e:	f000 fdfd 	bl	8012d7c <malloc>
 8012182:	4602      	mov	r2, r0
 8012184:	f8cb 001c 	str.w	r0, [fp, #28]
 8012188:	b920      	cbnz	r0, 8012194 <_dtoa_r+0x34>
 801218a:	4ba7      	ldr	r3, [pc, #668]	@ (8012428 <_dtoa_r+0x2c8>)
 801218c:	21ef      	movs	r1, #239	@ 0xef
 801218e:	48a7      	ldr	r0, [pc, #668]	@ (801242c <_dtoa_r+0x2cc>)
 8012190:	f002 fcba 	bl	8014b08 <__assert_func>
 8012194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012198:	6007      	str	r7, [r0, #0]
 801219a:	60c7      	str	r7, [r0, #12]
 801219c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80121a0:	6819      	ldr	r1, [r3, #0]
 80121a2:	b159      	cbz	r1, 80121bc <_dtoa_r+0x5c>
 80121a4:	685a      	ldr	r2, [r3, #4]
 80121a6:	604a      	str	r2, [r1, #4]
 80121a8:	2301      	movs	r3, #1
 80121aa:	4093      	lsls	r3, r2
 80121ac:	608b      	str	r3, [r1, #8]
 80121ae:	4658      	mov	r0, fp
 80121b0:	f000 feda 	bl	8012f68 <_Bfree>
 80121b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80121b8:	2200      	movs	r2, #0
 80121ba:	601a      	str	r2, [r3, #0]
 80121bc:	1e2b      	subs	r3, r5, #0
 80121be:	bfb9      	ittee	lt
 80121c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80121c4:	9303      	strlt	r3, [sp, #12]
 80121c6:	2300      	movge	r3, #0
 80121c8:	6033      	strge	r3, [r6, #0]
 80121ca:	9f03      	ldr	r7, [sp, #12]
 80121cc:	4b98      	ldr	r3, [pc, #608]	@ (8012430 <_dtoa_r+0x2d0>)
 80121ce:	bfbc      	itt	lt
 80121d0:	2201      	movlt	r2, #1
 80121d2:	6032      	strlt	r2, [r6, #0]
 80121d4:	43bb      	bics	r3, r7
 80121d6:	d112      	bne.n	80121fe <_dtoa_r+0x9e>
 80121d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80121da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80121de:	6013      	str	r3, [r2, #0]
 80121e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80121e4:	4323      	orrs	r3, r4
 80121e6:	f000 854d 	beq.w	8012c84 <_dtoa_r+0xb24>
 80121ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80121ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012444 <_dtoa_r+0x2e4>
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f000 854f 	beq.w	8012c94 <_dtoa_r+0xb34>
 80121f6:	f10a 0303 	add.w	r3, sl, #3
 80121fa:	f000 bd49 	b.w	8012c90 <_dtoa_r+0xb30>
 80121fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012202:	2200      	movs	r2, #0
 8012204:	ec51 0b17 	vmov	r0, r1, d7
 8012208:	2300      	movs	r3, #0
 801220a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801220e:	f7ee fc83 	bl	8000b18 <__aeabi_dcmpeq>
 8012212:	4680      	mov	r8, r0
 8012214:	b158      	cbz	r0, 801222e <_dtoa_r+0xce>
 8012216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012218:	2301      	movs	r3, #1
 801221a:	6013      	str	r3, [r2, #0]
 801221c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801221e:	b113      	cbz	r3, 8012226 <_dtoa_r+0xc6>
 8012220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012222:	4b84      	ldr	r3, [pc, #528]	@ (8012434 <_dtoa_r+0x2d4>)
 8012224:	6013      	str	r3, [r2, #0]
 8012226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012448 <_dtoa_r+0x2e8>
 801222a:	f000 bd33 	b.w	8012c94 <_dtoa_r+0xb34>
 801222e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012232:	aa16      	add	r2, sp, #88	@ 0x58
 8012234:	a917      	add	r1, sp, #92	@ 0x5c
 8012236:	4658      	mov	r0, fp
 8012238:	f001 fa3a 	bl	80136b0 <__d2b>
 801223c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012240:	4681      	mov	r9, r0
 8012242:	2e00      	cmp	r6, #0
 8012244:	d077      	beq.n	8012336 <_dtoa_r+0x1d6>
 8012246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801224c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801225c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012260:	4619      	mov	r1, r3
 8012262:	2200      	movs	r2, #0
 8012264:	4b74      	ldr	r3, [pc, #464]	@ (8012438 <_dtoa_r+0x2d8>)
 8012266:	f7ee f837 	bl	80002d8 <__aeabi_dsub>
 801226a:	a369      	add	r3, pc, #420	@ (adr r3, 8012410 <_dtoa_r+0x2b0>)
 801226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012270:	f7ee f9ea 	bl	8000648 <__aeabi_dmul>
 8012274:	a368      	add	r3, pc, #416	@ (adr r3, 8012418 <_dtoa_r+0x2b8>)
 8012276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227a:	f7ee f82f 	bl	80002dc <__adddf3>
 801227e:	4604      	mov	r4, r0
 8012280:	4630      	mov	r0, r6
 8012282:	460d      	mov	r5, r1
 8012284:	f7ee f976 	bl	8000574 <__aeabi_i2d>
 8012288:	a365      	add	r3, pc, #404	@ (adr r3, 8012420 <_dtoa_r+0x2c0>)
 801228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228e:	f7ee f9db 	bl	8000648 <__aeabi_dmul>
 8012292:	4602      	mov	r2, r0
 8012294:	460b      	mov	r3, r1
 8012296:	4620      	mov	r0, r4
 8012298:	4629      	mov	r1, r5
 801229a:	f7ee f81f 	bl	80002dc <__adddf3>
 801229e:	4604      	mov	r4, r0
 80122a0:	460d      	mov	r5, r1
 80122a2:	f7ee fc81 	bl	8000ba8 <__aeabi_d2iz>
 80122a6:	2200      	movs	r2, #0
 80122a8:	4607      	mov	r7, r0
 80122aa:	2300      	movs	r3, #0
 80122ac:	4620      	mov	r0, r4
 80122ae:	4629      	mov	r1, r5
 80122b0:	f7ee fc3c 	bl	8000b2c <__aeabi_dcmplt>
 80122b4:	b140      	cbz	r0, 80122c8 <_dtoa_r+0x168>
 80122b6:	4638      	mov	r0, r7
 80122b8:	f7ee f95c 	bl	8000574 <__aeabi_i2d>
 80122bc:	4622      	mov	r2, r4
 80122be:	462b      	mov	r3, r5
 80122c0:	f7ee fc2a 	bl	8000b18 <__aeabi_dcmpeq>
 80122c4:	b900      	cbnz	r0, 80122c8 <_dtoa_r+0x168>
 80122c6:	3f01      	subs	r7, #1
 80122c8:	2f16      	cmp	r7, #22
 80122ca:	d851      	bhi.n	8012370 <_dtoa_r+0x210>
 80122cc:	4b5b      	ldr	r3, [pc, #364]	@ (801243c <_dtoa_r+0x2dc>)
 80122ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122da:	f7ee fc27 	bl	8000b2c <__aeabi_dcmplt>
 80122de:	2800      	cmp	r0, #0
 80122e0:	d048      	beq.n	8012374 <_dtoa_r+0x214>
 80122e2:	3f01      	subs	r7, #1
 80122e4:	2300      	movs	r3, #0
 80122e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80122e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122ea:	1b9b      	subs	r3, r3, r6
 80122ec:	1e5a      	subs	r2, r3, #1
 80122ee:	bf44      	itt	mi
 80122f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80122f4:	2300      	movmi	r3, #0
 80122f6:	9208      	str	r2, [sp, #32]
 80122f8:	bf54      	ite	pl
 80122fa:	f04f 0800 	movpl.w	r8, #0
 80122fe:	9308      	strmi	r3, [sp, #32]
 8012300:	2f00      	cmp	r7, #0
 8012302:	db39      	blt.n	8012378 <_dtoa_r+0x218>
 8012304:	9b08      	ldr	r3, [sp, #32]
 8012306:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012308:	443b      	add	r3, r7
 801230a:	9308      	str	r3, [sp, #32]
 801230c:	2300      	movs	r3, #0
 801230e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012312:	2b09      	cmp	r3, #9
 8012314:	d864      	bhi.n	80123e0 <_dtoa_r+0x280>
 8012316:	2b05      	cmp	r3, #5
 8012318:	bfc4      	itt	gt
 801231a:	3b04      	subgt	r3, #4
 801231c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801231e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012320:	f1a3 0302 	sub.w	r3, r3, #2
 8012324:	bfcc      	ite	gt
 8012326:	2400      	movgt	r4, #0
 8012328:	2401      	movle	r4, #1
 801232a:	2b03      	cmp	r3, #3
 801232c:	d863      	bhi.n	80123f6 <_dtoa_r+0x296>
 801232e:	e8df f003 	tbb	[pc, r3]
 8012332:	372a      	.short	0x372a
 8012334:	5535      	.short	0x5535
 8012336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801233a:	441e      	add	r6, r3
 801233c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012340:	2b20      	cmp	r3, #32
 8012342:	bfc1      	itttt	gt
 8012344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012348:	409f      	lslgt	r7, r3
 801234a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801234e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012352:	bfd6      	itet	le
 8012354:	f1c3 0320 	rsble	r3, r3, #32
 8012358:	ea47 0003 	orrgt.w	r0, r7, r3
 801235c:	fa04 f003 	lslle.w	r0, r4, r3
 8012360:	f7ee f8f8 	bl	8000554 <__aeabi_ui2d>
 8012364:	2201      	movs	r2, #1
 8012366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801236a:	3e01      	subs	r6, #1
 801236c:	9214      	str	r2, [sp, #80]	@ 0x50
 801236e:	e777      	b.n	8012260 <_dtoa_r+0x100>
 8012370:	2301      	movs	r3, #1
 8012372:	e7b8      	b.n	80122e6 <_dtoa_r+0x186>
 8012374:	9012      	str	r0, [sp, #72]	@ 0x48
 8012376:	e7b7      	b.n	80122e8 <_dtoa_r+0x188>
 8012378:	427b      	negs	r3, r7
 801237a:	930a      	str	r3, [sp, #40]	@ 0x28
 801237c:	2300      	movs	r3, #0
 801237e:	eba8 0807 	sub.w	r8, r8, r7
 8012382:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012384:	e7c4      	b.n	8012310 <_dtoa_r+0x1b0>
 8012386:	2300      	movs	r3, #0
 8012388:	930b      	str	r3, [sp, #44]	@ 0x2c
 801238a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801238c:	2b00      	cmp	r3, #0
 801238e:	dc35      	bgt.n	80123fc <_dtoa_r+0x29c>
 8012390:	2301      	movs	r3, #1
 8012392:	9300      	str	r3, [sp, #0]
 8012394:	9307      	str	r3, [sp, #28]
 8012396:	461a      	mov	r2, r3
 8012398:	920e      	str	r2, [sp, #56]	@ 0x38
 801239a:	e00b      	b.n	80123b4 <_dtoa_r+0x254>
 801239c:	2301      	movs	r3, #1
 801239e:	e7f3      	b.n	8012388 <_dtoa_r+0x228>
 80123a0:	2300      	movs	r3, #0
 80123a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123a6:	18fb      	adds	r3, r7, r3
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	3301      	adds	r3, #1
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	9307      	str	r3, [sp, #28]
 80123b0:	bfb8      	it	lt
 80123b2:	2301      	movlt	r3, #1
 80123b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80123b8:	2100      	movs	r1, #0
 80123ba:	2204      	movs	r2, #4
 80123bc:	f102 0514 	add.w	r5, r2, #20
 80123c0:	429d      	cmp	r5, r3
 80123c2:	d91f      	bls.n	8012404 <_dtoa_r+0x2a4>
 80123c4:	6041      	str	r1, [r0, #4]
 80123c6:	4658      	mov	r0, fp
 80123c8:	f000 fd8e 	bl	8012ee8 <_Balloc>
 80123cc:	4682      	mov	sl, r0
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d13c      	bne.n	801244c <_dtoa_r+0x2ec>
 80123d2:	4b1b      	ldr	r3, [pc, #108]	@ (8012440 <_dtoa_r+0x2e0>)
 80123d4:	4602      	mov	r2, r0
 80123d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80123da:	e6d8      	b.n	801218e <_dtoa_r+0x2e>
 80123dc:	2301      	movs	r3, #1
 80123de:	e7e0      	b.n	80123a2 <_dtoa_r+0x242>
 80123e0:	2401      	movs	r4, #1
 80123e2:	2300      	movs	r3, #0
 80123e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80123e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123e8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	9307      	str	r3, [sp, #28]
 80123f0:	2200      	movs	r2, #0
 80123f2:	2312      	movs	r3, #18
 80123f4:	e7d0      	b.n	8012398 <_dtoa_r+0x238>
 80123f6:	2301      	movs	r3, #1
 80123f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123fa:	e7f5      	b.n	80123e8 <_dtoa_r+0x288>
 80123fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	9307      	str	r3, [sp, #28]
 8012402:	e7d7      	b.n	80123b4 <_dtoa_r+0x254>
 8012404:	3101      	adds	r1, #1
 8012406:	0052      	lsls	r2, r2, #1
 8012408:	e7d8      	b.n	80123bc <_dtoa_r+0x25c>
 801240a:	bf00      	nop
 801240c:	f3af 8000 	nop.w
 8012410:	636f4361 	.word	0x636f4361
 8012414:	3fd287a7 	.word	0x3fd287a7
 8012418:	8b60c8b3 	.word	0x8b60c8b3
 801241c:	3fc68a28 	.word	0x3fc68a28
 8012420:	509f79fb 	.word	0x509f79fb
 8012424:	3fd34413 	.word	0x3fd34413
 8012428:	08022cda 	.word	0x08022cda
 801242c:	08022cf1 	.word	0x08022cf1
 8012430:	7ff00000 	.word	0x7ff00000
 8012434:	08022ca5 	.word	0x08022ca5
 8012438:	3ff80000 	.word	0x3ff80000
 801243c:	08022de8 	.word	0x08022de8
 8012440:	08022d49 	.word	0x08022d49
 8012444:	08022cd6 	.word	0x08022cd6
 8012448:	08022ca4 	.word	0x08022ca4
 801244c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012450:	6018      	str	r0, [r3, #0]
 8012452:	9b07      	ldr	r3, [sp, #28]
 8012454:	2b0e      	cmp	r3, #14
 8012456:	f200 80a4 	bhi.w	80125a2 <_dtoa_r+0x442>
 801245a:	2c00      	cmp	r4, #0
 801245c:	f000 80a1 	beq.w	80125a2 <_dtoa_r+0x442>
 8012460:	2f00      	cmp	r7, #0
 8012462:	dd33      	ble.n	80124cc <_dtoa_r+0x36c>
 8012464:	4bad      	ldr	r3, [pc, #692]	@ (801271c <_dtoa_r+0x5bc>)
 8012466:	f007 020f 	and.w	r2, r7, #15
 801246a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801246e:	ed93 7b00 	vldr	d7, [r3]
 8012472:	05f8      	lsls	r0, r7, #23
 8012474:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012478:	ea4f 1427 	mov.w	r4, r7, asr #4
 801247c:	d516      	bpl.n	80124ac <_dtoa_r+0x34c>
 801247e:	4ba8      	ldr	r3, [pc, #672]	@ (8012720 <_dtoa_r+0x5c0>)
 8012480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012488:	f7ee fa08 	bl	800089c <__aeabi_ddiv>
 801248c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012490:	f004 040f 	and.w	r4, r4, #15
 8012494:	2603      	movs	r6, #3
 8012496:	4da2      	ldr	r5, [pc, #648]	@ (8012720 <_dtoa_r+0x5c0>)
 8012498:	b954      	cbnz	r4, 80124b0 <_dtoa_r+0x350>
 801249a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801249e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124a2:	f7ee f9fb 	bl	800089c <__aeabi_ddiv>
 80124a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124aa:	e028      	b.n	80124fe <_dtoa_r+0x39e>
 80124ac:	2602      	movs	r6, #2
 80124ae:	e7f2      	b.n	8012496 <_dtoa_r+0x336>
 80124b0:	07e1      	lsls	r1, r4, #31
 80124b2:	d508      	bpl.n	80124c6 <_dtoa_r+0x366>
 80124b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124bc:	f7ee f8c4 	bl	8000648 <__aeabi_dmul>
 80124c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124c4:	3601      	adds	r6, #1
 80124c6:	1064      	asrs	r4, r4, #1
 80124c8:	3508      	adds	r5, #8
 80124ca:	e7e5      	b.n	8012498 <_dtoa_r+0x338>
 80124cc:	f000 80d2 	beq.w	8012674 <_dtoa_r+0x514>
 80124d0:	427c      	negs	r4, r7
 80124d2:	4b92      	ldr	r3, [pc, #584]	@ (801271c <_dtoa_r+0x5bc>)
 80124d4:	4d92      	ldr	r5, [pc, #584]	@ (8012720 <_dtoa_r+0x5c0>)
 80124d6:	f004 020f 	and.w	r2, r4, #15
 80124da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124e6:	f7ee f8af 	bl	8000648 <__aeabi_dmul>
 80124ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124ee:	1124      	asrs	r4, r4, #4
 80124f0:	2300      	movs	r3, #0
 80124f2:	2602      	movs	r6, #2
 80124f4:	2c00      	cmp	r4, #0
 80124f6:	f040 80b2 	bne.w	801265e <_dtoa_r+0x4fe>
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1d3      	bne.n	80124a6 <_dtoa_r+0x346>
 80124fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 80b7 	beq.w	8012678 <_dtoa_r+0x518>
 801250a:	4b86      	ldr	r3, [pc, #536]	@ (8012724 <_dtoa_r+0x5c4>)
 801250c:	2200      	movs	r2, #0
 801250e:	4620      	mov	r0, r4
 8012510:	4629      	mov	r1, r5
 8012512:	f7ee fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8012516:	2800      	cmp	r0, #0
 8012518:	f000 80ae 	beq.w	8012678 <_dtoa_r+0x518>
 801251c:	9b07      	ldr	r3, [sp, #28]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f000 80aa 	beq.w	8012678 <_dtoa_r+0x518>
 8012524:	9b00      	ldr	r3, [sp, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	dd37      	ble.n	801259a <_dtoa_r+0x43a>
 801252a:	1e7b      	subs	r3, r7, #1
 801252c:	9304      	str	r3, [sp, #16]
 801252e:	4620      	mov	r0, r4
 8012530:	4b7d      	ldr	r3, [pc, #500]	@ (8012728 <_dtoa_r+0x5c8>)
 8012532:	2200      	movs	r2, #0
 8012534:	4629      	mov	r1, r5
 8012536:	f7ee f887 	bl	8000648 <__aeabi_dmul>
 801253a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801253e:	9c00      	ldr	r4, [sp, #0]
 8012540:	3601      	adds	r6, #1
 8012542:	4630      	mov	r0, r6
 8012544:	f7ee f816 	bl	8000574 <__aeabi_i2d>
 8012548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801254c:	f7ee f87c 	bl	8000648 <__aeabi_dmul>
 8012550:	4b76      	ldr	r3, [pc, #472]	@ (801272c <_dtoa_r+0x5cc>)
 8012552:	2200      	movs	r2, #0
 8012554:	f7ed fec2 	bl	80002dc <__adddf3>
 8012558:	4605      	mov	r5, r0
 801255a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801255e:	2c00      	cmp	r4, #0
 8012560:	f040 808d 	bne.w	801267e <_dtoa_r+0x51e>
 8012564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012568:	4b71      	ldr	r3, [pc, #452]	@ (8012730 <_dtoa_r+0x5d0>)
 801256a:	2200      	movs	r2, #0
 801256c:	f7ed feb4 	bl	80002d8 <__aeabi_dsub>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012578:	462a      	mov	r2, r5
 801257a:	4633      	mov	r3, r6
 801257c:	f7ee faf4 	bl	8000b68 <__aeabi_dcmpgt>
 8012580:	2800      	cmp	r0, #0
 8012582:	f040 828b 	bne.w	8012a9c <_dtoa_r+0x93c>
 8012586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801258a:	462a      	mov	r2, r5
 801258c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012590:	f7ee facc 	bl	8000b2c <__aeabi_dcmplt>
 8012594:	2800      	cmp	r0, #0
 8012596:	f040 8128 	bne.w	80127ea <_dtoa_r+0x68a>
 801259a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801259e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80125a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f2c0 815a 	blt.w	801285e <_dtoa_r+0x6fe>
 80125aa:	2f0e      	cmp	r7, #14
 80125ac:	f300 8157 	bgt.w	801285e <_dtoa_r+0x6fe>
 80125b0:	4b5a      	ldr	r3, [pc, #360]	@ (801271c <_dtoa_r+0x5bc>)
 80125b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80125b6:	ed93 7b00 	vldr	d7, [r3]
 80125ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125bc:	2b00      	cmp	r3, #0
 80125be:	ed8d 7b00 	vstr	d7, [sp]
 80125c2:	da03      	bge.n	80125cc <_dtoa_r+0x46c>
 80125c4:	9b07      	ldr	r3, [sp, #28]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f340 8101 	ble.w	80127ce <_dtoa_r+0x66e>
 80125cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80125d0:	4656      	mov	r6, sl
 80125d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125d6:	4620      	mov	r0, r4
 80125d8:	4629      	mov	r1, r5
 80125da:	f7ee f95f 	bl	800089c <__aeabi_ddiv>
 80125de:	f7ee fae3 	bl	8000ba8 <__aeabi_d2iz>
 80125e2:	4680      	mov	r8, r0
 80125e4:	f7ed ffc6 	bl	8000574 <__aeabi_i2d>
 80125e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125ec:	f7ee f82c 	bl	8000648 <__aeabi_dmul>
 80125f0:	4602      	mov	r2, r0
 80125f2:	460b      	mov	r3, r1
 80125f4:	4620      	mov	r0, r4
 80125f6:	4629      	mov	r1, r5
 80125f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80125fc:	f7ed fe6c 	bl	80002d8 <__aeabi_dsub>
 8012600:	f806 4b01 	strb.w	r4, [r6], #1
 8012604:	9d07      	ldr	r5, [sp, #28]
 8012606:	eba6 040a 	sub.w	r4, r6, sl
 801260a:	42a5      	cmp	r5, r4
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	f040 8117 	bne.w	8012842 <_dtoa_r+0x6e2>
 8012614:	f7ed fe62 	bl	80002dc <__adddf3>
 8012618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801261c:	4604      	mov	r4, r0
 801261e:	460d      	mov	r5, r1
 8012620:	f7ee faa2 	bl	8000b68 <__aeabi_dcmpgt>
 8012624:	2800      	cmp	r0, #0
 8012626:	f040 80f9 	bne.w	801281c <_dtoa_r+0x6bc>
 801262a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801262e:	4620      	mov	r0, r4
 8012630:	4629      	mov	r1, r5
 8012632:	f7ee fa71 	bl	8000b18 <__aeabi_dcmpeq>
 8012636:	b118      	cbz	r0, 8012640 <_dtoa_r+0x4e0>
 8012638:	f018 0f01 	tst.w	r8, #1
 801263c:	f040 80ee 	bne.w	801281c <_dtoa_r+0x6bc>
 8012640:	4649      	mov	r1, r9
 8012642:	4658      	mov	r0, fp
 8012644:	f000 fc90 	bl	8012f68 <_Bfree>
 8012648:	2300      	movs	r3, #0
 801264a:	7033      	strb	r3, [r6, #0]
 801264c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801264e:	3701      	adds	r7, #1
 8012650:	601f      	str	r7, [r3, #0]
 8012652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012654:	2b00      	cmp	r3, #0
 8012656:	f000 831d 	beq.w	8012c94 <_dtoa_r+0xb34>
 801265a:	601e      	str	r6, [r3, #0]
 801265c:	e31a      	b.n	8012c94 <_dtoa_r+0xb34>
 801265e:	07e2      	lsls	r2, r4, #31
 8012660:	d505      	bpl.n	801266e <_dtoa_r+0x50e>
 8012662:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012666:	f7ed ffef 	bl	8000648 <__aeabi_dmul>
 801266a:	3601      	adds	r6, #1
 801266c:	2301      	movs	r3, #1
 801266e:	1064      	asrs	r4, r4, #1
 8012670:	3508      	adds	r5, #8
 8012672:	e73f      	b.n	80124f4 <_dtoa_r+0x394>
 8012674:	2602      	movs	r6, #2
 8012676:	e742      	b.n	80124fe <_dtoa_r+0x39e>
 8012678:	9c07      	ldr	r4, [sp, #28]
 801267a:	9704      	str	r7, [sp, #16]
 801267c:	e761      	b.n	8012542 <_dtoa_r+0x3e2>
 801267e:	4b27      	ldr	r3, [pc, #156]	@ (801271c <_dtoa_r+0x5bc>)
 8012680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801268a:	4454      	add	r4, sl
 801268c:	2900      	cmp	r1, #0
 801268e:	d053      	beq.n	8012738 <_dtoa_r+0x5d8>
 8012690:	4928      	ldr	r1, [pc, #160]	@ (8012734 <_dtoa_r+0x5d4>)
 8012692:	2000      	movs	r0, #0
 8012694:	f7ee f902 	bl	800089c <__aeabi_ddiv>
 8012698:	4633      	mov	r3, r6
 801269a:	462a      	mov	r2, r5
 801269c:	f7ed fe1c 	bl	80002d8 <__aeabi_dsub>
 80126a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126a4:	4656      	mov	r6, sl
 80126a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126aa:	f7ee fa7d 	bl	8000ba8 <__aeabi_d2iz>
 80126ae:	4605      	mov	r5, r0
 80126b0:	f7ed ff60 	bl	8000574 <__aeabi_i2d>
 80126b4:	4602      	mov	r2, r0
 80126b6:	460b      	mov	r3, r1
 80126b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126bc:	f7ed fe0c 	bl	80002d8 <__aeabi_dsub>
 80126c0:	3530      	adds	r5, #48	@ 0x30
 80126c2:	4602      	mov	r2, r0
 80126c4:	460b      	mov	r3, r1
 80126c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126ca:	f806 5b01 	strb.w	r5, [r6], #1
 80126ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126d2:	f7ee fa2b 	bl	8000b2c <__aeabi_dcmplt>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d171      	bne.n	80127be <_dtoa_r+0x65e>
 80126da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126de:	4911      	ldr	r1, [pc, #68]	@ (8012724 <_dtoa_r+0x5c4>)
 80126e0:	2000      	movs	r0, #0
 80126e2:	f7ed fdf9 	bl	80002d8 <__aeabi_dsub>
 80126e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126ea:	f7ee fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f040 8095 	bne.w	801281e <_dtoa_r+0x6be>
 80126f4:	42a6      	cmp	r6, r4
 80126f6:	f43f af50 	beq.w	801259a <_dtoa_r+0x43a>
 80126fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80126fe:	4b0a      	ldr	r3, [pc, #40]	@ (8012728 <_dtoa_r+0x5c8>)
 8012700:	2200      	movs	r2, #0
 8012702:	f7ed ffa1 	bl	8000648 <__aeabi_dmul>
 8012706:	4b08      	ldr	r3, [pc, #32]	@ (8012728 <_dtoa_r+0x5c8>)
 8012708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801270c:	2200      	movs	r2, #0
 801270e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012712:	f7ed ff99 	bl	8000648 <__aeabi_dmul>
 8012716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801271a:	e7c4      	b.n	80126a6 <_dtoa_r+0x546>
 801271c:	08022de8 	.word	0x08022de8
 8012720:	08022dc0 	.word	0x08022dc0
 8012724:	3ff00000 	.word	0x3ff00000
 8012728:	40240000 	.word	0x40240000
 801272c:	401c0000 	.word	0x401c0000
 8012730:	40140000 	.word	0x40140000
 8012734:	3fe00000 	.word	0x3fe00000
 8012738:	4631      	mov	r1, r6
 801273a:	4628      	mov	r0, r5
 801273c:	f7ed ff84 	bl	8000648 <__aeabi_dmul>
 8012740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012744:	9415      	str	r4, [sp, #84]	@ 0x54
 8012746:	4656      	mov	r6, sl
 8012748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801274c:	f7ee fa2c 	bl	8000ba8 <__aeabi_d2iz>
 8012750:	4605      	mov	r5, r0
 8012752:	f7ed ff0f 	bl	8000574 <__aeabi_i2d>
 8012756:	4602      	mov	r2, r0
 8012758:	460b      	mov	r3, r1
 801275a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801275e:	f7ed fdbb 	bl	80002d8 <__aeabi_dsub>
 8012762:	3530      	adds	r5, #48	@ 0x30
 8012764:	f806 5b01 	strb.w	r5, [r6], #1
 8012768:	4602      	mov	r2, r0
 801276a:	460b      	mov	r3, r1
 801276c:	42a6      	cmp	r6, r4
 801276e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012772:	f04f 0200 	mov.w	r2, #0
 8012776:	d124      	bne.n	80127c2 <_dtoa_r+0x662>
 8012778:	4bac      	ldr	r3, [pc, #688]	@ (8012a2c <_dtoa_r+0x8cc>)
 801277a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801277e:	f7ed fdad 	bl	80002dc <__adddf3>
 8012782:	4602      	mov	r2, r0
 8012784:	460b      	mov	r3, r1
 8012786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801278a:	f7ee f9ed 	bl	8000b68 <__aeabi_dcmpgt>
 801278e:	2800      	cmp	r0, #0
 8012790:	d145      	bne.n	801281e <_dtoa_r+0x6be>
 8012792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012796:	49a5      	ldr	r1, [pc, #660]	@ (8012a2c <_dtoa_r+0x8cc>)
 8012798:	2000      	movs	r0, #0
 801279a:	f7ed fd9d 	bl	80002d8 <__aeabi_dsub>
 801279e:	4602      	mov	r2, r0
 80127a0:	460b      	mov	r3, r1
 80127a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127a6:	f7ee f9c1 	bl	8000b2c <__aeabi_dcmplt>
 80127aa:	2800      	cmp	r0, #0
 80127ac:	f43f aef5 	beq.w	801259a <_dtoa_r+0x43a>
 80127b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80127b2:	1e73      	subs	r3, r6, #1
 80127b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80127b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127ba:	2b30      	cmp	r3, #48	@ 0x30
 80127bc:	d0f8      	beq.n	80127b0 <_dtoa_r+0x650>
 80127be:	9f04      	ldr	r7, [sp, #16]
 80127c0:	e73e      	b.n	8012640 <_dtoa_r+0x4e0>
 80127c2:	4b9b      	ldr	r3, [pc, #620]	@ (8012a30 <_dtoa_r+0x8d0>)
 80127c4:	f7ed ff40 	bl	8000648 <__aeabi_dmul>
 80127c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127cc:	e7bc      	b.n	8012748 <_dtoa_r+0x5e8>
 80127ce:	d10c      	bne.n	80127ea <_dtoa_r+0x68a>
 80127d0:	4b98      	ldr	r3, [pc, #608]	@ (8012a34 <_dtoa_r+0x8d4>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127d8:	f7ed ff36 	bl	8000648 <__aeabi_dmul>
 80127dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80127e0:	f7ee f9b8 	bl	8000b54 <__aeabi_dcmpge>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	f000 8157 	beq.w	8012a98 <_dtoa_r+0x938>
 80127ea:	2400      	movs	r4, #0
 80127ec:	4625      	mov	r5, r4
 80127ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127f0:	43db      	mvns	r3, r3
 80127f2:	9304      	str	r3, [sp, #16]
 80127f4:	4656      	mov	r6, sl
 80127f6:	2700      	movs	r7, #0
 80127f8:	4621      	mov	r1, r4
 80127fa:	4658      	mov	r0, fp
 80127fc:	f000 fbb4 	bl	8012f68 <_Bfree>
 8012800:	2d00      	cmp	r5, #0
 8012802:	d0dc      	beq.n	80127be <_dtoa_r+0x65e>
 8012804:	b12f      	cbz	r7, 8012812 <_dtoa_r+0x6b2>
 8012806:	42af      	cmp	r7, r5
 8012808:	d003      	beq.n	8012812 <_dtoa_r+0x6b2>
 801280a:	4639      	mov	r1, r7
 801280c:	4658      	mov	r0, fp
 801280e:	f000 fbab 	bl	8012f68 <_Bfree>
 8012812:	4629      	mov	r1, r5
 8012814:	4658      	mov	r0, fp
 8012816:	f000 fba7 	bl	8012f68 <_Bfree>
 801281a:	e7d0      	b.n	80127be <_dtoa_r+0x65e>
 801281c:	9704      	str	r7, [sp, #16]
 801281e:	4633      	mov	r3, r6
 8012820:	461e      	mov	r6, r3
 8012822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012826:	2a39      	cmp	r2, #57	@ 0x39
 8012828:	d107      	bne.n	801283a <_dtoa_r+0x6da>
 801282a:	459a      	cmp	sl, r3
 801282c:	d1f8      	bne.n	8012820 <_dtoa_r+0x6c0>
 801282e:	9a04      	ldr	r2, [sp, #16]
 8012830:	3201      	adds	r2, #1
 8012832:	9204      	str	r2, [sp, #16]
 8012834:	2230      	movs	r2, #48	@ 0x30
 8012836:	f88a 2000 	strb.w	r2, [sl]
 801283a:	781a      	ldrb	r2, [r3, #0]
 801283c:	3201      	adds	r2, #1
 801283e:	701a      	strb	r2, [r3, #0]
 8012840:	e7bd      	b.n	80127be <_dtoa_r+0x65e>
 8012842:	4b7b      	ldr	r3, [pc, #492]	@ (8012a30 <_dtoa_r+0x8d0>)
 8012844:	2200      	movs	r2, #0
 8012846:	f7ed feff 	bl	8000648 <__aeabi_dmul>
 801284a:	2200      	movs	r2, #0
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	460d      	mov	r5, r1
 8012852:	f7ee f961 	bl	8000b18 <__aeabi_dcmpeq>
 8012856:	2800      	cmp	r0, #0
 8012858:	f43f aebb 	beq.w	80125d2 <_dtoa_r+0x472>
 801285c:	e6f0      	b.n	8012640 <_dtoa_r+0x4e0>
 801285e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012860:	2a00      	cmp	r2, #0
 8012862:	f000 80db 	beq.w	8012a1c <_dtoa_r+0x8bc>
 8012866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012868:	2a01      	cmp	r2, #1
 801286a:	f300 80bf 	bgt.w	80129ec <_dtoa_r+0x88c>
 801286e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012870:	2a00      	cmp	r2, #0
 8012872:	f000 80b7 	beq.w	80129e4 <_dtoa_r+0x884>
 8012876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801287a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801287c:	4646      	mov	r6, r8
 801287e:	9a08      	ldr	r2, [sp, #32]
 8012880:	2101      	movs	r1, #1
 8012882:	441a      	add	r2, r3
 8012884:	4658      	mov	r0, fp
 8012886:	4498      	add	r8, r3
 8012888:	9208      	str	r2, [sp, #32]
 801288a:	f000 fc6b 	bl	8013164 <__i2b>
 801288e:	4605      	mov	r5, r0
 8012890:	b15e      	cbz	r6, 80128aa <_dtoa_r+0x74a>
 8012892:	9b08      	ldr	r3, [sp, #32]
 8012894:	2b00      	cmp	r3, #0
 8012896:	dd08      	ble.n	80128aa <_dtoa_r+0x74a>
 8012898:	42b3      	cmp	r3, r6
 801289a:	9a08      	ldr	r2, [sp, #32]
 801289c:	bfa8      	it	ge
 801289e:	4633      	movge	r3, r6
 80128a0:	eba8 0803 	sub.w	r8, r8, r3
 80128a4:	1af6      	subs	r6, r6, r3
 80128a6:	1ad3      	subs	r3, r2, r3
 80128a8:	9308      	str	r3, [sp, #32]
 80128aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ac:	b1f3      	cbz	r3, 80128ec <_dtoa_r+0x78c>
 80128ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f000 80b7 	beq.w	8012a24 <_dtoa_r+0x8c4>
 80128b6:	b18c      	cbz	r4, 80128dc <_dtoa_r+0x77c>
 80128b8:	4629      	mov	r1, r5
 80128ba:	4622      	mov	r2, r4
 80128bc:	4658      	mov	r0, fp
 80128be:	f000 fd11 	bl	80132e4 <__pow5mult>
 80128c2:	464a      	mov	r2, r9
 80128c4:	4601      	mov	r1, r0
 80128c6:	4605      	mov	r5, r0
 80128c8:	4658      	mov	r0, fp
 80128ca:	f000 fc61 	bl	8013190 <__multiply>
 80128ce:	4649      	mov	r1, r9
 80128d0:	9004      	str	r0, [sp, #16]
 80128d2:	4658      	mov	r0, fp
 80128d4:	f000 fb48 	bl	8012f68 <_Bfree>
 80128d8:	9b04      	ldr	r3, [sp, #16]
 80128da:	4699      	mov	r9, r3
 80128dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128de:	1b1a      	subs	r2, r3, r4
 80128e0:	d004      	beq.n	80128ec <_dtoa_r+0x78c>
 80128e2:	4649      	mov	r1, r9
 80128e4:	4658      	mov	r0, fp
 80128e6:	f000 fcfd 	bl	80132e4 <__pow5mult>
 80128ea:	4681      	mov	r9, r0
 80128ec:	2101      	movs	r1, #1
 80128ee:	4658      	mov	r0, fp
 80128f0:	f000 fc38 	bl	8013164 <__i2b>
 80128f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128f6:	4604      	mov	r4, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 81cf 	beq.w	8012c9c <_dtoa_r+0xb3c>
 80128fe:	461a      	mov	r2, r3
 8012900:	4601      	mov	r1, r0
 8012902:	4658      	mov	r0, fp
 8012904:	f000 fcee 	bl	80132e4 <__pow5mult>
 8012908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801290a:	2b01      	cmp	r3, #1
 801290c:	4604      	mov	r4, r0
 801290e:	f300 8095 	bgt.w	8012a3c <_dtoa_r+0x8dc>
 8012912:	9b02      	ldr	r3, [sp, #8]
 8012914:	2b00      	cmp	r3, #0
 8012916:	f040 8087 	bne.w	8012a28 <_dtoa_r+0x8c8>
 801291a:	9b03      	ldr	r3, [sp, #12]
 801291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012920:	2b00      	cmp	r3, #0
 8012922:	f040 8089 	bne.w	8012a38 <_dtoa_r+0x8d8>
 8012926:	9b03      	ldr	r3, [sp, #12]
 8012928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801292c:	0d1b      	lsrs	r3, r3, #20
 801292e:	051b      	lsls	r3, r3, #20
 8012930:	b12b      	cbz	r3, 801293e <_dtoa_r+0x7de>
 8012932:	9b08      	ldr	r3, [sp, #32]
 8012934:	3301      	adds	r3, #1
 8012936:	9308      	str	r3, [sp, #32]
 8012938:	f108 0801 	add.w	r8, r8, #1
 801293c:	2301      	movs	r3, #1
 801293e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012942:	2b00      	cmp	r3, #0
 8012944:	f000 81b0 	beq.w	8012ca8 <_dtoa_r+0xb48>
 8012948:	6923      	ldr	r3, [r4, #16]
 801294a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801294e:	6918      	ldr	r0, [r3, #16]
 8012950:	f000 fbbc 	bl	80130cc <__hi0bits>
 8012954:	f1c0 0020 	rsb	r0, r0, #32
 8012958:	9b08      	ldr	r3, [sp, #32]
 801295a:	4418      	add	r0, r3
 801295c:	f010 001f 	ands.w	r0, r0, #31
 8012960:	d077      	beq.n	8012a52 <_dtoa_r+0x8f2>
 8012962:	f1c0 0320 	rsb	r3, r0, #32
 8012966:	2b04      	cmp	r3, #4
 8012968:	dd6b      	ble.n	8012a42 <_dtoa_r+0x8e2>
 801296a:	9b08      	ldr	r3, [sp, #32]
 801296c:	f1c0 001c 	rsb	r0, r0, #28
 8012970:	4403      	add	r3, r0
 8012972:	4480      	add	r8, r0
 8012974:	4406      	add	r6, r0
 8012976:	9308      	str	r3, [sp, #32]
 8012978:	f1b8 0f00 	cmp.w	r8, #0
 801297c:	dd05      	ble.n	801298a <_dtoa_r+0x82a>
 801297e:	4649      	mov	r1, r9
 8012980:	4642      	mov	r2, r8
 8012982:	4658      	mov	r0, fp
 8012984:	f000 fd08 	bl	8013398 <__lshift>
 8012988:	4681      	mov	r9, r0
 801298a:	9b08      	ldr	r3, [sp, #32]
 801298c:	2b00      	cmp	r3, #0
 801298e:	dd05      	ble.n	801299c <_dtoa_r+0x83c>
 8012990:	4621      	mov	r1, r4
 8012992:	461a      	mov	r2, r3
 8012994:	4658      	mov	r0, fp
 8012996:	f000 fcff 	bl	8013398 <__lshift>
 801299a:	4604      	mov	r4, r0
 801299c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d059      	beq.n	8012a56 <_dtoa_r+0x8f6>
 80129a2:	4621      	mov	r1, r4
 80129a4:	4648      	mov	r0, r9
 80129a6:	f000 fd63 	bl	8013470 <__mcmp>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	da53      	bge.n	8012a56 <_dtoa_r+0x8f6>
 80129ae:	1e7b      	subs	r3, r7, #1
 80129b0:	9304      	str	r3, [sp, #16]
 80129b2:	4649      	mov	r1, r9
 80129b4:	2300      	movs	r3, #0
 80129b6:	220a      	movs	r2, #10
 80129b8:	4658      	mov	r0, fp
 80129ba:	f000 faf7 	bl	8012fac <__multadd>
 80129be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129c0:	4681      	mov	r9, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f000 8172 	beq.w	8012cac <_dtoa_r+0xb4c>
 80129c8:	2300      	movs	r3, #0
 80129ca:	4629      	mov	r1, r5
 80129cc:	220a      	movs	r2, #10
 80129ce:	4658      	mov	r0, fp
 80129d0:	f000 faec 	bl	8012fac <__multadd>
 80129d4:	9b00      	ldr	r3, [sp, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	4605      	mov	r5, r0
 80129da:	dc67      	bgt.n	8012aac <_dtoa_r+0x94c>
 80129dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129de:	2b02      	cmp	r3, #2
 80129e0:	dc41      	bgt.n	8012a66 <_dtoa_r+0x906>
 80129e2:	e063      	b.n	8012aac <_dtoa_r+0x94c>
 80129e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80129e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80129ea:	e746      	b.n	801287a <_dtoa_r+0x71a>
 80129ec:	9b07      	ldr	r3, [sp, #28]
 80129ee:	1e5c      	subs	r4, r3, #1
 80129f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129f2:	42a3      	cmp	r3, r4
 80129f4:	bfbf      	itttt	lt
 80129f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80129f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80129fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80129fc:	1ae3      	sublt	r3, r4, r3
 80129fe:	bfb4      	ite	lt
 8012a00:	18d2      	addlt	r2, r2, r3
 8012a02:	1b1c      	subge	r4, r3, r4
 8012a04:	9b07      	ldr	r3, [sp, #28]
 8012a06:	bfbc      	itt	lt
 8012a08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012a0a:	2400      	movlt	r4, #0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	bfb5      	itete	lt
 8012a10:	eba8 0603 	sublt.w	r6, r8, r3
 8012a14:	9b07      	ldrge	r3, [sp, #28]
 8012a16:	2300      	movlt	r3, #0
 8012a18:	4646      	movge	r6, r8
 8012a1a:	e730      	b.n	801287e <_dtoa_r+0x71e>
 8012a1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012a20:	4646      	mov	r6, r8
 8012a22:	e735      	b.n	8012890 <_dtoa_r+0x730>
 8012a24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a26:	e75c      	b.n	80128e2 <_dtoa_r+0x782>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e788      	b.n	801293e <_dtoa_r+0x7de>
 8012a2c:	3fe00000 	.word	0x3fe00000
 8012a30:	40240000 	.word	0x40240000
 8012a34:	40140000 	.word	0x40140000
 8012a38:	9b02      	ldr	r3, [sp, #8]
 8012a3a:	e780      	b.n	801293e <_dtoa_r+0x7de>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a40:	e782      	b.n	8012948 <_dtoa_r+0x7e8>
 8012a42:	d099      	beq.n	8012978 <_dtoa_r+0x818>
 8012a44:	9a08      	ldr	r2, [sp, #32]
 8012a46:	331c      	adds	r3, #28
 8012a48:	441a      	add	r2, r3
 8012a4a:	4498      	add	r8, r3
 8012a4c:	441e      	add	r6, r3
 8012a4e:	9208      	str	r2, [sp, #32]
 8012a50:	e792      	b.n	8012978 <_dtoa_r+0x818>
 8012a52:	4603      	mov	r3, r0
 8012a54:	e7f6      	b.n	8012a44 <_dtoa_r+0x8e4>
 8012a56:	9b07      	ldr	r3, [sp, #28]
 8012a58:	9704      	str	r7, [sp, #16]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	dc20      	bgt.n	8012aa0 <_dtoa_r+0x940>
 8012a5e:	9300      	str	r3, [sp, #0]
 8012a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a62:	2b02      	cmp	r3, #2
 8012a64:	dd1e      	ble.n	8012aa4 <_dtoa_r+0x944>
 8012a66:	9b00      	ldr	r3, [sp, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f47f aec0 	bne.w	80127ee <_dtoa_r+0x68e>
 8012a6e:	4621      	mov	r1, r4
 8012a70:	2205      	movs	r2, #5
 8012a72:	4658      	mov	r0, fp
 8012a74:	f000 fa9a 	bl	8012fac <__multadd>
 8012a78:	4601      	mov	r1, r0
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	4648      	mov	r0, r9
 8012a7e:	f000 fcf7 	bl	8013470 <__mcmp>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	f77f aeb3 	ble.w	80127ee <_dtoa_r+0x68e>
 8012a88:	4656      	mov	r6, sl
 8012a8a:	2331      	movs	r3, #49	@ 0x31
 8012a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8012a90:	9b04      	ldr	r3, [sp, #16]
 8012a92:	3301      	adds	r3, #1
 8012a94:	9304      	str	r3, [sp, #16]
 8012a96:	e6ae      	b.n	80127f6 <_dtoa_r+0x696>
 8012a98:	9c07      	ldr	r4, [sp, #28]
 8012a9a:	9704      	str	r7, [sp, #16]
 8012a9c:	4625      	mov	r5, r4
 8012a9e:	e7f3      	b.n	8012a88 <_dtoa_r+0x928>
 8012aa0:	9b07      	ldr	r3, [sp, #28]
 8012aa2:	9300      	str	r3, [sp, #0]
 8012aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	f000 8104 	beq.w	8012cb4 <_dtoa_r+0xb54>
 8012aac:	2e00      	cmp	r6, #0
 8012aae:	dd05      	ble.n	8012abc <_dtoa_r+0x95c>
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	4632      	mov	r2, r6
 8012ab4:	4658      	mov	r0, fp
 8012ab6:	f000 fc6f 	bl	8013398 <__lshift>
 8012aba:	4605      	mov	r5, r0
 8012abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d05a      	beq.n	8012b78 <_dtoa_r+0xa18>
 8012ac2:	6869      	ldr	r1, [r5, #4]
 8012ac4:	4658      	mov	r0, fp
 8012ac6:	f000 fa0f 	bl	8012ee8 <_Balloc>
 8012aca:	4606      	mov	r6, r0
 8012acc:	b928      	cbnz	r0, 8012ada <_dtoa_r+0x97a>
 8012ace:	4b84      	ldr	r3, [pc, #528]	@ (8012ce0 <_dtoa_r+0xb80>)
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012ad6:	f7ff bb5a 	b.w	801218e <_dtoa_r+0x2e>
 8012ada:	692a      	ldr	r2, [r5, #16]
 8012adc:	3202      	adds	r2, #2
 8012ade:	0092      	lsls	r2, r2, #2
 8012ae0:	f105 010c 	add.w	r1, r5, #12
 8012ae4:	300c      	adds	r0, #12
 8012ae6:	f001 fff9 	bl	8014adc <memcpy>
 8012aea:	2201      	movs	r2, #1
 8012aec:	4631      	mov	r1, r6
 8012aee:	4658      	mov	r0, fp
 8012af0:	f000 fc52 	bl	8013398 <__lshift>
 8012af4:	f10a 0301 	add.w	r3, sl, #1
 8012af8:	9307      	str	r3, [sp, #28]
 8012afa:	9b00      	ldr	r3, [sp, #0]
 8012afc:	4453      	add	r3, sl
 8012afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b00:	9b02      	ldr	r3, [sp, #8]
 8012b02:	f003 0301 	and.w	r3, r3, #1
 8012b06:	462f      	mov	r7, r5
 8012b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b0a:	4605      	mov	r5, r0
 8012b0c:	9b07      	ldr	r3, [sp, #28]
 8012b0e:	4621      	mov	r1, r4
 8012b10:	3b01      	subs	r3, #1
 8012b12:	4648      	mov	r0, r9
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	f7ff fa99 	bl	801204c <quorem>
 8012b1a:	4639      	mov	r1, r7
 8012b1c:	9002      	str	r0, [sp, #8]
 8012b1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b22:	4648      	mov	r0, r9
 8012b24:	f000 fca4 	bl	8013470 <__mcmp>
 8012b28:	462a      	mov	r2, r5
 8012b2a:	9008      	str	r0, [sp, #32]
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	4658      	mov	r0, fp
 8012b30:	f000 fcba 	bl	80134a8 <__mdiff>
 8012b34:	68c2      	ldr	r2, [r0, #12]
 8012b36:	4606      	mov	r6, r0
 8012b38:	bb02      	cbnz	r2, 8012b7c <_dtoa_r+0xa1c>
 8012b3a:	4601      	mov	r1, r0
 8012b3c:	4648      	mov	r0, r9
 8012b3e:	f000 fc97 	bl	8013470 <__mcmp>
 8012b42:	4602      	mov	r2, r0
 8012b44:	4631      	mov	r1, r6
 8012b46:	4658      	mov	r0, fp
 8012b48:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b4a:	f000 fa0d 	bl	8012f68 <_Bfree>
 8012b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b52:	9e07      	ldr	r6, [sp, #28]
 8012b54:	ea43 0102 	orr.w	r1, r3, r2
 8012b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b5a:	4319      	orrs	r1, r3
 8012b5c:	d110      	bne.n	8012b80 <_dtoa_r+0xa20>
 8012b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b62:	d029      	beq.n	8012bb8 <_dtoa_r+0xa58>
 8012b64:	9b08      	ldr	r3, [sp, #32]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	dd02      	ble.n	8012b70 <_dtoa_r+0xa10>
 8012b6a:	9b02      	ldr	r3, [sp, #8]
 8012b6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012b70:	9b00      	ldr	r3, [sp, #0]
 8012b72:	f883 8000 	strb.w	r8, [r3]
 8012b76:	e63f      	b.n	80127f8 <_dtoa_r+0x698>
 8012b78:	4628      	mov	r0, r5
 8012b7a:	e7bb      	b.n	8012af4 <_dtoa_r+0x994>
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	e7e1      	b.n	8012b44 <_dtoa_r+0x9e4>
 8012b80:	9b08      	ldr	r3, [sp, #32]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	db04      	blt.n	8012b90 <_dtoa_r+0xa30>
 8012b86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b88:	430b      	orrs	r3, r1
 8012b8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b8c:	430b      	orrs	r3, r1
 8012b8e:	d120      	bne.n	8012bd2 <_dtoa_r+0xa72>
 8012b90:	2a00      	cmp	r2, #0
 8012b92:	dded      	ble.n	8012b70 <_dtoa_r+0xa10>
 8012b94:	4649      	mov	r1, r9
 8012b96:	2201      	movs	r2, #1
 8012b98:	4658      	mov	r0, fp
 8012b9a:	f000 fbfd 	bl	8013398 <__lshift>
 8012b9e:	4621      	mov	r1, r4
 8012ba0:	4681      	mov	r9, r0
 8012ba2:	f000 fc65 	bl	8013470 <__mcmp>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	dc03      	bgt.n	8012bb2 <_dtoa_r+0xa52>
 8012baa:	d1e1      	bne.n	8012b70 <_dtoa_r+0xa10>
 8012bac:	f018 0f01 	tst.w	r8, #1
 8012bb0:	d0de      	beq.n	8012b70 <_dtoa_r+0xa10>
 8012bb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012bb6:	d1d8      	bne.n	8012b6a <_dtoa_r+0xa0a>
 8012bb8:	9a00      	ldr	r2, [sp, #0]
 8012bba:	2339      	movs	r3, #57	@ 0x39
 8012bbc:	7013      	strb	r3, [r2, #0]
 8012bbe:	4633      	mov	r3, r6
 8012bc0:	461e      	mov	r6, r3
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012bc8:	2a39      	cmp	r2, #57	@ 0x39
 8012bca:	d052      	beq.n	8012c72 <_dtoa_r+0xb12>
 8012bcc:	3201      	adds	r2, #1
 8012bce:	701a      	strb	r2, [r3, #0]
 8012bd0:	e612      	b.n	80127f8 <_dtoa_r+0x698>
 8012bd2:	2a00      	cmp	r2, #0
 8012bd4:	dd07      	ble.n	8012be6 <_dtoa_r+0xa86>
 8012bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012bda:	d0ed      	beq.n	8012bb8 <_dtoa_r+0xa58>
 8012bdc:	9a00      	ldr	r2, [sp, #0]
 8012bde:	f108 0301 	add.w	r3, r8, #1
 8012be2:	7013      	strb	r3, [r2, #0]
 8012be4:	e608      	b.n	80127f8 <_dtoa_r+0x698>
 8012be6:	9b07      	ldr	r3, [sp, #28]
 8012be8:	9a07      	ldr	r2, [sp, #28]
 8012bea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d028      	beq.n	8012c46 <_dtoa_r+0xae6>
 8012bf4:	4649      	mov	r1, r9
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	220a      	movs	r2, #10
 8012bfa:	4658      	mov	r0, fp
 8012bfc:	f000 f9d6 	bl	8012fac <__multadd>
 8012c00:	42af      	cmp	r7, r5
 8012c02:	4681      	mov	r9, r0
 8012c04:	f04f 0300 	mov.w	r3, #0
 8012c08:	f04f 020a 	mov.w	r2, #10
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	4658      	mov	r0, fp
 8012c10:	d107      	bne.n	8012c22 <_dtoa_r+0xac2>
 8012c12:	f000 f9cb 	bl	8012fac <__multadd>
 8012c16:	4607      	mov	r7, r0
 8012c18:	4605      	mov	r5, r0
 8012c1a:	9b07      	ldr	r3, [sp, #28]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	9307      	str	r3, [sp, #28]
 8012c20:	e774      	b.n	8012b0c <_dtoa_r+0x9ac>
 8012c22:	f000 f9c3 	bl	8012fac <__multadd>
 8012c26:	4629      	mov	r1, r5
 8012c28:	4607      	mov	r7, r0
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	220a      	movs	r2, #10
 8012c2e:	4658      	mov	r0, fp
 8012c30:	f000 f9bc 	bl	8012fac <__multadd>
 8012c34:	4605      	mov	r5, r0
 8012c36:	e7f0      	b.n	8012c1a <_dtoa_r+0xaba>
 8012c38:	9b00      	ldr	r3, [sp, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	bfcc      	ite	gt
 8012c3e:	461e      	movgt	r6, r3
 8012c40:	2601      	movle	r6, #1
 8012c42:	4456      	add	r6, sl
 8012c44:	2700      	movs	r7, #0
 8012c46:	4649      	mov	r1, r9
 8012c48:	2201      	movs	r2, #1
 8012c4a:	4658      	mov	r0, fp
 8012c4c:	f000 fba4 	bl	8013398 <__lshift>
 8012c50:	4621      	mov	r1, r4
 8012c52:	4681      	mov	r9, r0
 8012c54:	f000 fc0c 	bl	8013470 <__mcmp>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	dcb0      	bgt.n	8012bbe <_dtoa_r+0xa5e>
 8012c5c:	d102      	bne.n	8012c64 <_dtoa_r+0xb04>
 8012c5e:	f018 0f01 	tst.w	r8, #1
 8012c62:	d1ac      	bne.n	8012bbe <_dtoa_r+0xa5e>
 8012c64:	4633      	mov	r3, r6
 8012c66:	461e      	mov	r6, r3
 8012c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c6c:	2a30      	cmp	r2, #48	@ 0x30
 8012c6e:	d0fa      	beq.n	8012c66 <_dtoa_r+0xb06>
 8012c70:	e5c2      	b.n	80127f8 <_dtoa_r+0x698>
 8012c72:	459a      	cmp	sl, r3
 8012c74:	d1a4      	bne.n	8012bc0 <_dtoa_r+0xa60>
 8012c76:	9b04      	ldr	r3, [sp, #16]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	9304      	str	r3, [sp, #16]
 8012c7c:	2331      	movs	r3, #49	@ 0x31
 8012c7e:	f88a 3000 	strb.w	r3, [sl]
 8012c82:	e5b9      	b.n	80127f8 <_dtoa_r+0x698>
 8012c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012ce4 <_dtoa_r+0xb84>
 8012c8a:	b11b      	cbz	r3, 8012c94 <_dtoa_r+0xb34>
 8012c8c:	f10a 0308 	add.w	r3, sl, #8
 8012c90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012c92:	6013      	str	r3, [r2, #0]
 8012c94:	4650      	mov	r0, sl
 8012c96:	b019      	add	sp, #100	@ 0x64
 8012c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	f77f ae37 	ble.w	8012912 <_dtoa_r+0x7b2>
 8012ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ca8:	2001      	movs	r0, #1
 8012caa:	e655      	b.n	8012958 <_dtoa_r+0x7f8>
 8012cac:	9b00      	ldr	r3, [sp, #0]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f77f aed6 	ble.w	8012a60 <_dtoa_r+0x900>
 8012cb4:	4656      	mov	r6, sl
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	4648      	mov	r0, r9
 8012cba:	f7ff f9c7 	bl	801204c <quorem>
 8012cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8012cc6:	9b00      	ldr	r3, [sp, #0]
 8012cc8:	eba6 020a 	sub.w	r2, r6, sl
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	ddb3      	ble.n	8012c38 <_dtoa_r+0xad8>
 8012cd0:	4649      	mov	r1, r9
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	220a      	movs	r2, #10
 8012cd6:	4658      	mov	r0, fp
 8012cd8:	f000 f968 	bl	8012fac <__multadd>
 8012cdc:	4681      	mov	r9, r0
 8012cde:	e7ea      	b.n	8012cb6 <_dtoa_r+0xb56>
 8012ce0:	08022d49 	.word	0x08022d49
 8012ce4:	08022ccd 	.word	0x08022ccd

08012ce8 <_free_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4605      	mov	r5, r0
 8012cec:	2900      	cmp	r1, #0
 8012cee:	d041      	beq.n	8012d74 <_free_r+0x8c>
 8012cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cf4:	1f0c      	subs	r4, r1, #4
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	bfb8      	it	lt
 8012cfa:	18e4      	addlt	r4, r4, r3
 8012cfc:	f000 f8e8 	bl	8012ed0 <__malloc_lock>
 8012d00:	4a1d      	ldr	r2, [pc, #116]	@ (8012d78 <_free_r+0x90>)
 8012d02:	6813      	ldr	r3, [r2, #0]
 8012d04:	b933      	cbnz	r3, 8012d14 <_free_r+0x2c>
 8012d06:	6063      	str	r3, [r4, #4]
 8012d08:	6014      	str	r4, [r2, #0]
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d10:	f000 b8e4 	b.w	8012edc <__malloc_unlock>
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	d908      	bls.n	8012d2a <_free_r+0x42>
 8012d18:	6820      	ldr	r0, [r4, #0]
 8012d1a:	1821      	adds	r1, r4, r0
 8012d1c:	428b      	cmp	r3, r1
 8012d1e:	bf01      	itttt	eq
 8012d20:	6819      	ldreq	r1, [r3, #0]
 8012d22:	685b      	ldreq	r3, [r3, #4]
 8012d24:	1809      	addeq	r1, r1, r0
 8012d26:	6021      	streq	r1, [r4, #0]
 8012d28:	e7ed      	b.n	8012d06 <_free_r+0x1e>
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	b10b      	cbz	r3, 8012d34 <_free_r+0x4c>
 8012d30:	42a3      	cmp	r3, r4
 8012d32:	d9fa      	bls.n	8012d2a <_free_r+0x42>
 8012d34:	6811      	ldr	r1, [r2, #0]
 8012d36:	1850      	adds	r0, r2, r1
 8012d38:	42a0      	cmp	r0, r4
 8012d3a:	d10b      	bne.n	8012d54 <_free_r+0x6c>
 8012d3c:	6820      	ldr	r0, [r4, #0]
 8012d3e:	4401      	add	r1, r0
 8012d40:	1850      	adds	r0, r2, r1
 8012d42:	4283      	cmp	r3, r0
 8012d44:	6011      	str	r1, [r2, #0]
 8012d46:	d1e0      	bne.n	8012d0a <_free_r+0x22>
 8012d48:	6818      	ldr	r0, [r3, #0]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	6053      	str	r3, [r2, #4]
 8012d4e:	4408      	add	r0, r1
 8012d50:	6010      	str	r0, [r2, #0]
 8012d52:	e7da      	b.n	8012d0a <_free_r+0x22>
 8012d54:	d902      	bls.n	8012d5c <_free_r+0x74>
 8012d56:	230c      	movs	r3, #12
 8012d58:	602b      	str	r3, [r5, #0]
 8012d5a:	e7d6      	b.n	8012d0a <_free_r+0x22>
 8012d5c:	6820      	ldr	r0, [r4, #0]
 8012d5e:	1821      	adds	r1, r4, r0
 8012d60:	428b      	cmp	r3, r1
 8012d62:	bf04      	itt	eq
 8012d64:	6819      	ldreq	r1, [r3, #0]
 8012d66:	685b      	ldreq	r3, [r3, #4]
 8012d68:	6063      	str	r3, [r4, #4]
 8012d6a:	bf04      	itt	eq
 8012d6c:	1809      	addeq	r1, r1, r0
 8012d6e:	6021      	streq	r1, [r4, #0]
 8012d70:	6054      	str	r4, [r2, #4]
 8012d72:	e7ca      	b.n	8012d0a <_free_r+0x22>
 8012d74:	bd38      	pop	{r3, r4, r5, pc}
 8012d76:	bf00      	nop
 8012d78:	20002dc0 	.word	0x20002dc0

08012d7c <malloc>:
 8012d7c:	4b02      	ldr	r3, [pc, #8]	@ (8012d88 <malloc+0xc>)
 8012d7e:	4601      	mov	r1, r0
 8012d80:	6818      	ldr	r0, [r3, #0]
 8012d82:	f000 b825 	b.w	8012dd0 <_malloc_r>
 8012d86:	bf00      	nop
 8012d88:	20000394 	.word	0x20000394

08012d8c <sbrk_aligned>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8012dcc <sbrk_aligned+0x40>)
 8012d90:	460c      	mov	r4, r1
 8012d92:	6831      	ldr	r1, [r6, #0]
 8012d94:	4605      	mov	r5, r0
 8012d96:	b911      	cbnz	r1, 8012d9e <sbrk_aligned+0x12>
 8012d98:	f001 fe90 	bl	8014abc <_sbrk_r>
 8012d9c:	6030      	str	r0, [r6, #0]
 8012d9e:	4621      	mov	r1, r4
 8012da0:	4628      	mov	r0, r5
 8012da2:	f001 fe8b 	bl	8014abc <_sbrk_r>
 8012da6:	1c43      	adds	r3, r0, #1
 8012da8:	d103      	bne.n	8012db2 <sbrk_aligned+0x26>
 8012daa:	f04f 34ff 	mov.w	r4, #4294967295
 8012dae:	4620      	mov	r0, r4
 8012db0:	bd70      	pop	{r4, r5, r6, pc}
 8012db2:	1cc4      	adds	r4, r0, #3
 8012db4:	f024 0403 	bic.w	r4, r4, #3
 8012db8:	42a0      	cmp	r0, r4
 8012dba:	d0f8      	beq.n	8012dae <sbrk_aligned+0x22>
 8012dbc:	1a21      	subs	r1, r4, r0
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f001 fe7c 	bl	8014abc <_sbrk_r>
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	d1f2      	bne.n	8012dae <sbrk_aligned+0x22>
 8012dc8:	e7ef      	b.n	8012daa <sbrk_aligned+0x1e>
 8012dca:	bf00      	nop
 8012dcc:	20002dbc 	.word	0x20002dbc

08012dd0 <_malloc_r>:
 8012dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dd4:	1ccd      	adds	r5, r1, #3
 8012dd6:	f025 0503 	bic.w	r5, r5, #3
 8012dda:	3508      	adds	r5, #8
 8012ddc:	2d0c      	cmp	r5, #12
 8012dde:	bf38      	it	cc
 8012de0:	250c      	movcc	r5, #12
 8012de2:	2d00      	cmp	r5, #0
 8012de4:	4606      	mov	r6, r0
 8012de6:	db01      	blt.n	8012dec <_malloc_r+0x1c>
 8012de8:	42a9      	cmp	r1, r5
 8012dea:	d904      	bls.n	8012df6 <_malloc_r+0x26>
 8012dec:	230c      	movs	r3, #12
 8012dee:	6033      	str	r3, [r6, #0]
 8012df0:	2000      	movs	r0, #0
 8012df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ecc <_malloc_r+0xfc>
 8012dfa:	f000 f869 	bl	8012ed0 <__malloc_lock>
 8012dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8012e02:	461c      	mov	r4, r3
 8012e04:	bb44      	cbnz	r4, 8012e58 <_malloc_r+0x88>
 8012e06:	4629      	mov	r1, r5
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f7ff ffbf 	bl	8012d8c <sbrk_aligned>
 8012e0e:	1c43      	adds	r3, r0, #1
 8012e10:	4604      	mov	r4, r0
 8012e12:	d158      	bne.n	8012ec6 <_malloc_r+0xf6>
 8012e14:	f8d8 4000 	ldr.w	r4, [r8]
 8012e18:	4627      	mov	r7, r4
 8012e1a:	2f00      	cmp	r7, #0
 8012e1c:	d143      	bne.n	8012ea6 <_malloc_r+0xd6>
 8012e1e:	2c00      	cmp	r4, #0
 8012e20:	d04b      	beq.n	8012eba <_malloc_r+0xea>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	4639      	mov	r1, r7
 8012e26:	4630      	mov	r0, r6
 8012e28:	eb04 0903 	add.w	r9, r4, r3
 8012e2c:	f001 fe46 	bl	8014abc <_sbrk_r>
 8012e30:	4581      	cmp	r9, r0
 8012e32:	d142      	bne.n	8012eba <_malloc_r+0xea>
 8012e34:	6821      	ldr	r1, [r4, #0]
 8012e36:	1a6d      	subs	r5, r5, r1
 8012e38:	4629      	mov	r1, r5
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f7ff ffa6 	bl	8012d8c <sbrk_aligned>
 8012e40:	3001      	adds	r0, #1
 8012e42:	d03a      	beq.n	8012eba <_malloc_r+0xea>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	442b      	add	r3, r5
 8012e48:	6023      	str	r3, [r4, #0]
 8012e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8012e4e:	685a      	ldr	r2, [r3, #4]
 8012e50:	bb62      	cbnz	r2, 8012eac <_malloc_r+0xdc>
 8012e52:	f8c8 7000 	str.w	r7, [r8]
 8012e56:	e00f      	b.n	8012e78 <_malloc_r+0xa8>
 8012e58:	6822      	ldr	r2, [r4, #0]
 8012e5a:	1b52      	subs	r2, r2, r5
 8012e5c:	d420      	bmi.n	8012ea0 <_malloc_r+0xd0>
 8012e5e:	2a0b      	cmp	r2, #11
 8012e60:	d917      	bls.n	8012e92 <_malloc_r+0xc2>
 8012e62:	1961      	adds	r1, r4, r5
 8012e64:	42a3      	cmp	r3, r4
 8012e66:	6025      	str	r5, [r4, #0]
 8012e68:	bf18      	it	ne
 8012e6a:	6059      	strne	r1, [r3, #4]
 8012e6c:	6863      	ldr	r3, [r4, #4]
 8012e6e:	bf08      	it	eq
 8012e70:	f8c8 1000 	streq.w	r1, [r8]
 8012e74:	5162      	str	r2, [r4, r5]
 8012e76:	604b      	str	r3, [r1, #4]
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f000 f82f 	bl	8012edc <__malloc_unlock>
 8012e7e:	f104 000b 	add.w	r0, r4, #11
 8012e82:	1d23      	adds	r3, r4, #4
 8012e84:	f020 0007 	bic.w	r0, r0, #7
 8012e88:	1ac2      	subs	r2, r0, r3
 8012e8a:	bf1c      	itt	ne
 8012e8c:	1a1b      	subne	r3, r3, r0
 8012e8e:	50a3      	strne	r3, [r4, r2]
 8012e90:	e7af      	b.n	8012df2 <_malloc_r+0x22>
 8012e92:	6862      	ldr	r2, [r4, #4]
 8012e94:	42a3      	cmp	r3, r4
 8012e96:	bf0c      	ite	eq
 8012e98:	f8c8 2000 	streq.w	r2, [r8]
 8012e9c:	605a      	strne	r2, [r3, #4]
 8012e9e:	e7eb      	b.n	8012e78 <_malloc_r+0xa8>
 8012ea0:	4623      	mov	r3, r4
 8012ea2:	6864      	ldr	r4, [r4, #4]
 8012ea4:	e7ae      	b.n	8012e04 <_malloc_r+0x34>
 8012ea6:	463c      	mov	r4, r7
 8012ea8:	687f      	ldr	r7, [r7, #4]
 8012eaa:	e7b6      	b.n	8012e1a <_malloc_r+0x4a>
 8012eac:	461a      	mov	r2, r3
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	42a3      	cmp	r3, r4
 8012eb2:	d1fb      	bne.n	8012eac <_malloc_r+0xdc>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	6053      	str	r3, [r2, #4]
 8012eb8:	e7de      	b.n	8012e78 <_malloc_r+0xa8>
 8012eba:	230c      	movs	r3, #12
 8012ebc:	6033      	str	r3, [r6, #0]
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	f000 f80c 	bl	8012edc <__malloc_unlock>
 8012ec4:	e794      	b.n	8012df0 <_malloc_r+0x20>
 8012ec6:	6005      	str	r5, [r0, #0]
 8012ec8:	e7d6      	b.n	8012e78 <_malloc_r+0xa8>
 8012eca:	bf00      	nop
 8012ecc:	20002dc0 	.word	0x20002dc0

08012ed0 <__malloc_lock>:
 8012ed0:	4801      	ldr	r0, [pc, #4]	@ (8012ed8 <__malloc_lock+0x8>)
 8012ed2:	f7ff b8b2 	b.w	801203a <__retarget_lock_acquire_recursive>
 8012ed6:	bf00      	nop
 8012ed8:	20002db8 	.word	0x20002db8

08012edc <__malloc_unlock>:
 8012edc:	4801      	ldr	r0, [pc, #4]	@ (8012ee4 <__malloc_unlock+0x8>)
 8012ede:	f7ff b8ad 	b.w	801203c <__retarget_lock_release_recursive>
 8012ee2:	bf00      	nop
 8012ee4:	20002db8 	.word	0x20002db8

08012ee8 <_Balloc>:
 8012ee8:	b570      	push	{r4, r5, r6, lr}
 8012eea:	69c6      	ldr	r6, [r0, #28]
 8012eec:	4604      	mov	r4, r0
 8012eee:	460d      	mov	r5, r1
 8012ef0:	b976      	cbnz	r6, 8012f10 <_Balloc+0x28>
 8012ef2:	2010      	movs	r0, #16
 8012ef4:	f7ff ff42 	bl	8012d7c <malloc>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	61e0      	str	r0, [r4, #28]
 8012efc:	b920      	cbnz	r0, 8012f08 <_Balloc+0x20>
 8012efe:	4b18      	ldr	r3, [pc, #96]	@ (8012f60 <_Balloc+0x78>)
 8012f00:	4818      	ldr	r0, [pc, #96]	@ (8012f64 <_Balloc+0x7c>)
 8012f02:	216b      	movs	r1, #107	@ 0x6b
 8012f04:	f001 fe00 	bl	8014b08 <__assert_func>
 8012f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f0c:	6006      	str	r6, [r0, #0]
 8012f0e:	60c6      	str	r6, [r0, #12]
 8012f10:	69e6      	ldr	r6, [r4, #28]
 8012f12:	68f3      	ldr	r3, [r6, #12]
 8012f14:	b183      	cbz	r3, 8012f38 <_Balloc+0x50>
 8012f16:	69e3      	ldr	r3, [r4, #28]
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f1e:	b9b8      	cbnz	r0, 8012f50 <_Balloc+0x68>
 8012f20:	2101      	movs	r1, #1
 8012f22:	fa01 f605 	lsl.w	r6, r1, r5
 8012f26:	1d72      	adds	r2, r6, #5
 8012f28:	0092      	lsls	r2, r2, #2
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f001 fe0a 	bl	8014b44 <_calloc_r>
 8012f30:	b160      	cbz	r0, 8012f4c <_Balloc+0x64>
 8012f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012f36:	e00e      	b.n	8012f56 <_Balloc+0x6e>
 8012f38:	2221      	movs	r2, #33	@ 0x21
 8012f3a:	2104      	movs	r1, #4
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f001 fe01 	bl	8014b44 <_calloc_r>
 8012f42:	69e3      	ldr	r3, [r4, #28]
 8012f44:	60f0      	str	r0, [r6, #12]
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1e4      	bne.n	8012f16 <_Balloc+0x2e>
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	bd70      	pop	{r4, r5, r6, pc}
 8012f50:	6802      	ldr	r2, [r0, #0]
 8012f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f56:	2300      	movs	r3, #0
 8012f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f5c:	e7f7      	b.n	8012f4e <_Balloc+0x66>
 8012f5e:	bf00      	nop
 8012f60:	08022cda 	.word	0x08022cda
 8012f64:	08022d5a 	.word	0x08022d5a

08012f68 <_Bfree>:
 8012f68:	b570      	push	{r4, r5, r6, lr}
 8012f6a:	69c6      	ldr	r6, [r0, #28]
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	460c      	mov	r4, r1
 8012f70:	b976      	cbnz	r6, 8012f90 <_Bfree+0x28>
 8012f72:	2010      	movs	r0, #16
 8012f74:	f7ff ff02 	bl	8012d7c <malloc>
 8012f78:	4602      	mov	r2, r0
 8012f7a:	61e8      	str	r0, [r5, #28]
 8012f7c:	b920      	cbnz	r0, 8012f88 <_Bfree+0x20>
 8012f7e:	4b09      	ldr	r3, [pc, #36]	@ (8012fa4 <_Bfree+0x3c>)
 8012f80:	4809      	ldr	r0, [pc, #36]	@ (8012fa8 <_Bfree+0x40>)
 8012f82:	218f      	movs	r1, #143	@ 0x8f
 8012f84:	f001 fdc0 	bl	8014b08 <__assert_func>
 8012f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f8c:	6006      	str	r6, [r0, #0]
 8012f8e:	60c6      	str	r6, [r0, #12]
 8012f90:	b13c      	cbz	r4, 8012fa2 <_Bfree+0x3a>
 8012f92:	69eb      	ldr	r3, [r5, #28]
 8012f94:	6862      	ldr	r2, [r4, #4]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f9c:	6021      	str	r1, [r4, #0]
 8012f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012fa2:	bd70      	pop	{r4, r5, r6, pc}
 8012fa4:	08022cda 	.word	0x08022cda
 8012fa8:	08022d5a 	.word	0x08022d5a

08012fac <__multadd>:
 8012fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb0:	690d      	ldr	r5, [r1, #16]
 8012fb2:	4607      	mov	r7, r0
 8012fb4:	460c      	mov	r4, r1
 8012fb6:	461e      	mov	r6, r3
 8012fb8:	f101 0c14 	add.w	ip, r1, #20
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8012fc2:	b299      	uxth	r1, r3
 8012fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8012fc8:	0c1e      	lsrs	r6, r3, #16
 8012fca:	0c0b      	lsrs	r3, r1, #16
 8012fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8012fd0:	b289      	uxth	r1, r1
 8012fd2:	3001      	adds	r0, #1
 8012fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012fd8:	4285      	cmp	r5, r0
 8012fda:	f84c 1b04 	str.w	r1, [ip], #4
 8012fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012fe2:	dcec      	bgt.n	8012fbe <__multadd+0x12>
 8012fe4:	b30e      	cbz	r6, 801302a <__multadd+0x7e>
 8012fe6:	68a3      	ldr	r3, [r4, #8]
 8012fe8:	42ab      	cmp	r3, r5
 8012fea:	dc19      	bgt.n	8013020 <__multadd+0x74>
 8012fec:	6861      	ldr	r1, [r4, #4]
 8012fee:	4638      	mov	r0, r7
 8012ff0:	3101      	adds	r1, #1
 8012ff2:	f7ff ff79 	bl	8012ee8 <_Balloc>
 8012ff6:	4680      	mov	r8, r0
 8012ff8:	b928      	cbnz	r0, 8013006 <__multadd+0x5a>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8013030 <__multadd+0x84>)
 8012ffe:	480d      	ldr	r0, [pc, #52]	@ (8013034 <__multadd+0x88>)
 8013000:	21ba      	movs	r1, #186	@ 0xba
 8013002:	f001 fd81 	bl	8014b08 <__assert_func>
 8013006:	6922      	ldr	r2, [r4, #16]
 8013008:	3202      	adds	r2, #2
 801300a:	f104 010c 	add.w	r1, r4, #12
 801300e:	0092      	lsls	r2, r2, #2
 8013010:	300c      	adds	r0, #12
 8013012:	f001 fd63 	bl	8014adc <memcpy>
 8013016:	4621      	mov	r1, r4
 8013018:	4638      	mov	r0, r7
 801301a:	f7ff ffa5 	bl	8012f68 <_Bfree>
 801301e:	4644      	mov	r4, r8
 8013020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013024:	3501      	adds	r5, #1
 8013026:	615e      	str	r6, [r3, #20]
 8013028:	6125      	str	r5, [r4, #16]
 801302a:	4620      	mov	r0, r4
 801302c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013030:	08022d49 	.word	0x08022d49
 8013034:	08022d5a 	.word	0x08022d5a

08013038 <__s2b>:
 8013038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801303c:	460c      	mov	r4, r1
 801303e:	4615      	mov	r5, r2
 8013040:	461f      	mov	r7, r3
 8013042:	2209      	movs	r2, #9
 8013044:	3308      	adds	r3, #8
 8013046:	4606      	mov	r6, r0
 8013048:	fb93 f3f2 	sdiv	r3, r3, r2
 801304c:	2100      	movs	r1, #0
 801304e:	2201      	movs	r2, #1
 8013050:	429a      	cmp	r2, r3
 8013052:	db09      	blt.n	8013068 <__s2b+0x30>
 8013054:	4630      	mov	r0, r6
 8013056:	f7ff ff47 	bl	8012ee8 <_Balloc>
 801305a:	b940      	cbnz	r0, 801306e <__s2b+0x36>
 801305c:	4602      	mov	r2, r0
 801305e:	4b19      	ldr	r3, [pc, #100]	@ (80130c4 <__s2b+0x8c>)
 8013060:	4819      	ldr	r0, [pc, #100]	@ (80130c8 <__s2b+0x90>)
 8013062:	21d3      	movs	r1, #211	@ 0xd3
 8013064:	f001 fd50 	bl	8014b08 <__assert_func>
 8013068:	0052      	lsls	r2, r2, #1
 801306a:	3101      	adds	r1, #1
 801306c:	e7f0      	b.n	8013050 <__s2b+0x18>
 801306e:	9b08      	ldr	r3, [sp, #32]
 8013070:	6143      	str	r3, [r0, #20]
 8013072:	2d09      	cmp	r5, #9
 8013074:	f04f 0301 	mov.w	r3, #1
 8013078:	6103      	str	r3, [r0, #16]
 801307a:	dd16      	ble.n	80130aa <__s2b+0x72>
 801307c:	f104 0909 	add.w	r9, r4, #9
 8013080:	46c8      	mov	r8, r9
 8013082:	442c      	add	r4, r5
 8013084:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013088:	4601      	mov	r1, r0
 801308a:	3b30      	subs	r3, #48	@ 0x30
 801308c:	220a      	movs	r2, #10
 801308e:	4630      	mov	r0, r6
 8013090:	f7ff ff8c 	bl	8012fac <__multadd>
 8013094:	45a0      	cmp	r8, r4
 8013096:	d1f5      	bne.n	8013084 <__s2b+0x4c>
 8013098:	f1a5 0408 	sub.w	r4, r5, #8
 801309c:	444c      	add	r4, r9
 801309e:	1b2d      	subs	r5, r5, r4
 80130a0:	1963      	adds	r3, r4, r5
 80130a2:	42bb      	cmp	r3, r7
 80130a4:	db04      	blt.n	80130b0 <__s2b+0x78>
 80130a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130aa:	340a      	adds	r4, #10
 80130ac:	2509      	movs	r5, #9
 80130ae:	e7f6      	b.n	801309e <__s2b+0x66>
 80130b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130b4:	4601      	mov	r1, r0
 80130b6:	3b30      	subs	r3, #48	@ 0x30
 80130b8:	220a      	movs	r2, #10
 80130ba:	4630      	mov	r0, r6
 80130bc:	f7ff ff76 	bl	8012fac <__multadd>
 80130c0:	e7ee      	b.n	80130a0 <__s2b+0x68>
 80130c2:	bf00      	nop
 80130c4:	08022d49 	.word	0x08022d49
 80130c8:	08022d5a 	.word	0x08022d5a

080130cc <__hi0bits>:
 80130cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80130d0:	4603      	mov	r3, r0
 80130d2:	bf36      	itet	cc
 80130d4:	0403      	lslcc	r3, r0, #16
 80130d6:	2000      	movcs	r0, #0
 80130d8:	2010      	movcc	r0, #16
 80130da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80130de:	bf3c      	itt	cc
 80130e0:	021b      	lslcc	r3, r3, #8
 80130e2:	3008      	addcc	r0, #8
 80130e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80130e8:	bf3c      	itt	cc
 80130ea:	011b      	lslcc	r3, r3, #4
 80130ec:	3004      	addcc	r0, #4
 80130ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80130f2:	bf3c      	itt	cc
 80130f4:	009b      	lslcc	r3, r3, #2
 80130f6:	3002      	addcc	r0, #2
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	db05      	blt.n	8013108 <__hi0bits+0x3c>
 80130fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013100:	f100 0001 	add.w	r0, r0, #1
 8013104:	bf08      	it	eq
 8013106:	2020      	moveq	r0, #32
 8013108:	4770      	bx	lr

0801310a <__lo0bits>:
 801310a:	6803      	ldr	r3, [r0, #0]
 801310c:	4602      	mov	r2, r0
 801310e:	f013 0007 	ands.w	r0, r3, #7
 8013112:	d00b      	beq.n	801312c <__lo0bits+0x22>
 8013114:	07d9      	lsls	r1, r3, #31
 8013116:	d421      	bmi.n	801315c <__lo0bits+0x52>
 8013118:	0798      	lsls	r0, r3, #30
 801311a:	bf49      	itett	mi
 801311c:	085b      	lsrmi	r3, r3, #1
 801311e:	089b      	lsrpl	r3, r3, #2
 8013120:	2001      	movmi	r0, #1
 8013122:	6013      	strmi	r3, [r2, #0]
 8013124:	bf5c      	itt	pl
 8013126:	6013      	strpl	r3, [r2, #0]
 8013128:	2002      	movpl	r0, #2
 801312a:	4770      	bx	lr
 801312c:	b299      	uxth	r1, r3
 801312e:	b909      	cbnz	r1, 8013134 <__lo0bits+0x2a>
 8013130:	0c1b      	lsrs	r3, r3, #16
 8013132:	2010      	movs	r0, #16
 8013134:	b2d9      	uxtb	r1, r3
 8013136:	b909      	cbnz	r1, 801313c <__lo0bits+0x32>
 8013138:	3008      	adds	r0, #8
 801313a:	0a1b      	lsrs	r3, r3, #8
 801313c:	0719      	lsls	r1, r3, #28
 801313e:	bf04      	itt	eq
 8013140:	091b      	lsreq	r3, r3, #4
 8013142:	3004      	addeq	r0, #4
 8013144:	0799      	lsls	r1, r3, #30
 8013146:	bf04      	itt	eq
 8013148:	089b      	lsreq	r3, r3, #2
 801314a:	3002      	addeq	r0, #2
 801314c:	07d9      	lsls	r1, r3, #31
 801314e:	d403      	bmi.n	8013158 <__lo0bits+0x4e>
 8013150:	085b      	lsrs	r3, r3, #1
 8013152:	f100 0001 	add.w	r0, r0, #1
 8013156:	d003      	beq.n	8013160 <__lo0bits+0x56>
 8013158:	6013      	str	r3, [r2, #0]
 801315a:	4770      	bx	lr
 801315c:	2000      	movs	r0, #0
 801315e:	4770      	bx	lr
 8013160:	2020      	movs	r0, #32
 8013162:	4770      	bx	lr

08013164 <__i2b>:
 8013164:	b510      	push	{r4, lr}
 8013166:	460c      	mov	r4, r1
 8013168:	2101      	movs	r1, #1
 801316a:	f7ff febd 	bl	8012ee8 <_Balloc>
 801316e:	4602      	mov	r2, r0
 8013170:	b928      	cbnz	r0, 801317e <__i2b+0x1a>
 8013172:	4b05      	ldr	r3, [pc, #20]	@ (8013188 <__i2b+0x24>)
 8013174:	4805      	ldr	r0, [pc, #20]	@ (801318c <__i2b+0x28>)
 8013176:	f240 1145 	movw	r1, #325	@ 0x145
 801317a:	f001 fcc5 	bl	8014b08 <__assert_func>
 801317e:	2301      	movs	r3, #1
 8013180:	6144      	str	r4, [r0, #20]
 8013182:	6103      	str	r3, [r0, #16]
 8013184:	bd10      	pop	{r4, pc}
 8013186:	bf00      	nop
 8013188:	08022d49 	.word	0x08022d49
 801318c:	08022d5a 	.word	0x08022d5a

08013190 <__multiply>:
 8013190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013194:	4614      	mov	r4, r2
 8013196:	690a      	ldr	r2, [r1, #16]
 8013198:	6923      	ldr	r3, [r4, #16]
 801319a:	429a      	cmp	r2, r3
 801319c:	bfa8      	it	ge
 801319e:	4623      	movge	r3, r4
 80131a0:	460f      	mov	r7, r1
 80131a2:	bfa4      	itt	ge
 80131a4:	460c      	movge	r4, r1
 80131a6:	461f      	movge	r7, r3
 80131a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80131ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80131b0:	68a3      	ldr	r3, [r4, #8]
 80131b2:	6861      	ldr	r1, [r4, #4]
 80131b4:	eb0a 0609 	add.w	r6, sl, r9
 80131b8:	42b3      	cmp	r3, r6
 80131ba:	b085      	sub	sp, #20
 80131bc:	bfb8      	it	lt
 80131be:	3101      	addlt	r1, #1
 80131c0:	f7ff fe92 	bl	8012ee8 <_Balloc>
 80131c4:	b930      	cbnz	r0, 80131d4 <__multiply+0x44>
 80131c6:	4602      	mov	r2, r0
 80131c8:	4b44      	ldr	r3, [pc, #272]	@ (80132dc <__multiply+0x14c>)
 80131ca:	4845      	ldr	r0, [pc, #276]	@ (80132e0 <__multiply+0x150>)
 80131cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80131d0:	f001 fc9a 	bl	8014b08 <__assert_func>
 80131d4:	f100 0514 	add.w	r5, r0, #20
 80131d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80131dc:	462b      	mov	r3, r5
 80131de:	2200      	movs	r2, #0
 80131e0:	4543      	cmp	r3, r8
 80131e2:	d321      	bcc.n	8013228 <__multiply+0x98>
 80131e4:	f107 0114 	add.w	r1, r7, #20
 80131e8:	f104 0214 	add.w	r2, r4, #20
 80131ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80131f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80131f4:	9302      	str	r3, [sp, #8]
 80131f6:	1b13      	subs	r3, r2, r4
 80131f8:	3b15      	subs	r3, #21
 80131fa:	f023 0303 	bic.w	r3, r3, #3
 80131fe:	3304      	adds	r3, #4
 8013200:	f104 0715 	add.w	r7, r4, #21
 8013204:	42ba      	cmp	r2, r7
 8013206:	bf38      	it	cc
 8013208:	2304      	movcc	r3, #4
 801320a:	9301      	str	r3, [sp, #4]
 801320c:	9b02      	ldr	r3, [sp, #8]
 801320e:	9103      	str	r1, [sp, #12]
 8013210:	428b      	cmp	r3, r1
 8013212:	d80c      	bhi.n	801322e <__multiply+0x9e>
 8013214:	2e00      	cmp	r6, #0
 8013216:	dd03      	ble.n	8013220 <__multiply+0x90>
 8013218:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801321c:	2b00      	cmp	r3, #0
 801321e:	d05b      	beq.n	80132d8 <__multiply+0x148>
 8013220:	6106      	str	r6, [r0, #16]
 8013222:	b005      	add	sp, #20
 8013224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013228:	f843 2b04 	str.w	r2, [r3], #4
 801322c:	e7d8      	b.n	80131e0 <__multiply+0x50>
 801322e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013232:	f1ba 0f00 	cmp.w	sl, #0
 8013236:	d024      	beq.n	8013282 <__multiply+0xf2>
 8013238:	f104 0e14 	add.w	lr, r4, #20
 801323c:	46a9      	mov	r9, r5
 801323e:	f04f 0c00 	mov.w	ip, #0
 8013242:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013246:	f8d9 3000 	ldr.w	r3, [r9]
 801324a:	fa1f fb87 	uxth.w	fp, r7
 801324e:	b29b      	uxth	r3, r3
 8013250:	fb0a 330b 	mla	r3, sl, fp, r3
 8013254:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013258:	f8d9 7000 	ldr.w	r7, [r9]
 801325c:	4463      	add	r3, ip
 801325e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013262:	fb0a c70b 	mla	r7, sl, fp, ip
 8013266:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801326a:	b29b      	uxth	r3, r3
 801326c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013270:	4572      	cmp	r2, lr
 8013272:	f849 3b04 	str.w	r3, [r9], #4
 8013276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801327a:	d8e2      	bhi.n	8013242 <__multiply+0xb2>
 801327c:	9b01      	ldr	r3, [sp, #4]
 801327e:	f845 c003 	str.w	ip, [r5, r3]
 8013282:	9b03      	ldr	r3, [sp, #12]
 8013284:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013288:	3104      	adds	r1, #4
 801328a:	f1b9 0f00 	cmp.w	r9, #0
 801328e:	d021      	beq.n	80132d4 <__multiply+0x144>
 8013290:	682b      	ldr	r3, [r5, #0]
 8013292:	f104 0c14 	add.w	ip, r4, #20
 8013296:	46ae      	mov	lr, r5
 8013298:	f04f 0a00 	mov.w	sl, #0
 801329c:	f8bc b000 	ldrh.w	fp, [ip]
 80132a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80132a4:	fb09 770b 	mla	r7, r9, fp, r7
 80132a8:	4457      	add	r7, sl
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132b0:	f84e 3b04 	str.w	r3, [lr], #4
 80132b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80132b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132bc:	f8be 3000 	ldrh.w	r3, [lr]
 80132c0:	fb09 330a 	mla	r3, r9, sl, r3
 80132c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80132c8:	4562      	cmp	r2, ip
 80132ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132ce:	d8e5      	bhi.n	801329c <__multiply+0x10c>
 80132d0:	9f01      	ldr	r7, [sp, #4]
 80132d2:	51eb      	str	r3, [r5, r7]
 80132d4:	3504      	adds	r5, #4
 80132d6:	e799      	b.n	801320c <__multiply+0x7c>
 80132d8:	3e01      	subs	r6, #1
 80132da:	e79b      	b.n	8013214 <__multiply+0x84>
 80132dc:	08022d49 	.word	0x08022d49
 80132e0:	08022d5a 	.word	0x08022d5a

080132e4 <__pow5mult>:
 80132e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132e8:	4615      	mov	r5, r2
 80132ea:	f012 0203 	ands.w	r2, r2, #3
 80132ee:	4607      	mov	r7, r0
 80132f0:	460e      	mov	r6, r1
 80132f2:	d007      	beq.n	8013304 <__pow5mult+0x20>
 80132f4:	4c25      	ldr	r4, [pc, #148]	@ (801338c <__pow5mult+0xa8>)
 80132f6:	3a01      	subs	r2, #1
 80132f8:	2300      	movs	r3, #0
 80132fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80132fe:	f7ff fe55 	bl	8012fac <__multadd>
 8013302:	4606      	mov	r6, r0
 8013304:	10ad      	asrs	r5, r5, #2
 8013306:	d03d      	beq.n	8013384 <__pow5mult+0xa0>
 8013308:	69fc      	ldr	r4, [r7, #28]
 801330a:	b97c      	cbnz	r4, 801332c <__pow5mult+0x48>
 801330c:	2010      	movs	r0, #16
 801330e:	f7ff fd35 	bl	8012d7c <malloc>
 8013312:	4602      	mov	r2, r0
 8013314:	61f8      	str	r0, [r7, #28]
 8013316:	b928      	cbnz	r0, 8013324 <__pow5mult+0x40>
 8013318:	4b1d      	ldr	r3, [pc, #116]	@ (8013390 <__pow5mult+0xac>)
 801331a:	481e      	ldr	r0, [pc, #120]	@ (8013394 <__pow5mult+0xb0>)
 801331c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013320:	f001 fbf2 	bl	8014b08 <__assert_func>
 8013324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013328:	6004      	str	r4, [r0, #0]
 801332a:	60c4      	str	r4, [r0, #12]
 801332c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013334:	b94c      	cbnz	r4, 801334a <__pow5mult+0x66>
 8013336:	f240 2171 	movw	r1, #625	@ 0x271
 801333a:	4638      	mov	r0, r7
 801333c:	f7ff ff12 	bl	8013164 <__i2b>
 8013340:	2300      	movs	r3, #0
 8013342:	f8c8 0008 	str.w	r0, [r8, #8]
 8013346:	4604      	mov	r4, r0
 8013348:	6003      	str	r3, [r0, #0]
 801334a:	f04f 0900 	mov.w	r9, #0
 801334e:	07eb      	lsls	r3, r5, #31
 8013350:	d50a      	bpl.n	8013368 <__pow5mult+0x84>
 8013352:	4631      	mov	r1, r6
 8013354:	4622      	mov	r2, r4
 8013356:	4638      	mov	r0, r7
 8013358:	f7ff ff1a 	bl	8013190 <__multiply>
 801335c:	4631      	mov	r1, r6
 801335e:	4680      	mov	r8, r0
 8013360:	4638      	mov	r0, r7
 8013362:	f7ff fe01 	bl	8012f68 <_Bfree>
 8013366:	4646      	mov	r6, r8
 8013368:	106d      	asrs	r5, r5, #1
 801336a:	d00b      	beq.n	8013384 <__pow5mult+0xa0>
 801336c:	6820      	ldr	r0, [r4, #0]
 801336e:	b938      	cbnz	r0, 8013380 <__pow5mult+0x9c>
 8013370:	4622      	mov	r2, r4
 8013372:	4621      	mov	r1, r4
 8013374:	4638      	mov	r0, r7
 8013376:	f7ff ff0b 	bl	8013190 <__multiply>
 801337a:	6020      	str	r0, [r4, #0]
 801337c:	f8c0 9000 	str.w	r9, [r0]
 8013380:	4604      	mov	r4, r0
 8013382:	e7e4      	b.n	801334e <__pow5mult+0x6a>
 8013384:	4630      	mov	r0, r6
 8013386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801338a:	bf00      	nop
 801338c:	08022db4 	.word	0x08022db4
 8013390:	08022cda 	.word	0x08022cda
 8013394:	08022d5a 	.word	0x08022d5a

08013398 <__lshift>:
 8013398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801339c:	460c      	mov	r4, r1
 801339e:	6849      	ldr	r1, [r1, #4]
 80133a0:	6923      	ldr	r3, [r4, #16]
 80133a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133a6:	68a3      	ldr	r3, [r4, #8]
 80133a8:	4607      	mov	r7, r0
 80133aa:	4691      	mov	r9, r2
 80133ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133b0:	f108 0601 	add.w	r6, r8, #1
 80133b4:	42b3      	cmp	r3, r6
 80133b6:	db0b      	blt.n	80133d0 <__lshift+0x38>
 80133b8:	4638      	mov	r0, r7
 80133ba:	f7ff fd95 	bl	8012ee8 <_Balloc>
 80133be:	4605      	mov	r5, r0
 80133c0:	b948      	cbnz	r0, 80133d6 <__lshift+0x3e>
 80133c2:	4602      	mov	r2, r0
 80133c4:	4b28      	ldr	r3, [pc, #160]	@ (8013468 <__lshift+0xd0>)
 80133c6:	4829      	ldr	r0, [pc, #164]	@ (801346c <__lshift+0xd4>)
 80133c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80133cc:	f001 fb9c 	bl	8014b08 <__assert_func>
 80133d0:	3101      	adds	r1, #1
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	e7ee      	b.n	80133b4 <__lshift+0x1c>
 80133d6:	2300      	movs	r3, #0
 80133d8:	f100 0114 	add.w	r1, r0, #20
 80133dc:	f100 0210 	add.w	r2, r0, #16
 80133e0:	4618      	mov	r0, r3
 80133e2:	4553      	cmp	r3, sl
 80133e4:	db33      	blt.n	801344e <__lshift+0xb6>
 80133e6:	6920      	ldr	r0, [r4, #16]
 80133e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80133ec:	f104 0314 	add.w	r3, r4, #20
 80133f0:	f019 091f 	ands.w	r9, r9, #31
 80133f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80133f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80133fc:	d02b      	beq.n	8013456 <__lshift+0xbe>
 80133fe:	f1c9 0e20 	rsb	lr, r9, #32
 8013402:	468a      	mov	sl, r1
 8013404:	2200      	movs	r2, #0
 8013406:	6818      	ldr	r0, [r3, #0]
 8013408:	fa00 f009 	lsl.w	r0, r0, r9
 801340c:	4310      	orrs	r0, r2
 801340e:	f84a 0b04 	str.w	r0, [sl], #4
 8013412:	f853 2b04 	ldr.w	r2, [r3], #4
 8013416:	459c      	cmp	ip, r3
 8013418:	fa22 f20e 	lsr.w	r2, r2, lr
 801341c:	d8f3      	bhi.n	8013406 <__lshift+0x6e>
 801341e:	ebac 0304 	sub.w	r3, ip, r4
 8013422:	3b15      	subs	r3, #21
 8013424:	f023 0303 	bic.w	r3, r3, #3
 8013428:	3304      	adds	r3, #4
 801342a:	f104 0015 	add.w	r0, r4, #21
 801342e:	4584      	cmp	ip, r0
 8013430:	bf38      	it	cc
 8013432:	2304      	movcc	r3, #4
 8013434:	50ca      	str	r2, [r1, r3]
 8013436:	b10a      	cbz	r2, 801343c <__lshift+0xa4>
 8013438:	f108 0602 	add.w	r6, r8, #2
 801343c:	3e01      	subs	r6, #1
 801343e:	4638      	mov	r0, r7
 8013440:	612e      	str	r6, [r5, #16]
 8013442:	4621      	mov	r1, r4
 8013444:	f7ff fd90 	bl	8012f68 <_Bfree>
 8013448:	4628      	mov	r0, r5
 801344a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801344e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013452:	3301      	adds	r3, #1
 8013454:	e7c5      	b.n	80133e2 <__lshift+0x4a>
 8013456:	3904      	subs	r1, #4
 8013458:	f853 2b04 	ldr.w	r2, [r3], #4
 801345c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013460:	459c      	cmp	ip, r3
 8013462:	d8f9      	bhi.n	8013458 <__lshift+0xc0>
 8013464:	e7ea      	b.n	801343c <__lshift+0xa4>
 8013466:	bf00      	nop
 8013468:	08022d49 	.word	0x08022d49
 801346c:	08022d5a 	.word	0x08022d5a

08013470 <__mcmp>:
 8013470:	690a      	ldr	r2, [r1, #16]
 8013472:	4603      	mov	r3, r0
 8013474:	6900      	ldr	r0, [r0, #16]
 8013476:	1a80      	subs	r0, r0, r2
 8013478:	b530      	push	{r4, r5, lr}
 801347a:	d10e      	bne.n	801349a <__mcmp+0x2a>
 801347c:	3314      	adds	r3, #20
 801347e:	3114      	adds	r1, #20
 8013480:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013484:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801348c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013490:	4295      	cmp	r5, r2
 8013492:	d003      	beq.n	801349c <__mcmp+0x2c>
 8013494:	d205      	bcs.n	80134a2 <__mcmp+0x32>
 8013496:	f04f 30ff 	mov.w	r0, #4294967295
 801349a:	bd30      	pop	{r4, r5, pc}
 801349c:	42a3      	cmp	r3, r4
 801349e:	d3f3      	bcc.n	8013488 <__mcmp+0x18>
 80134a0:	e7fb      	b.n	801349a <__mcmp+0x2a>
 80134a2:	2001      	movs	r0, #1
 80134a4:	e7f9      	b.n	801349a <__mcmp+0x2a>
	...

080134a8 <__mdiff>:
 80134a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ac:	4689      	mov	r9, r1
 80134ae:	4606      	mov	r6, r0
 80134b0:	4611      	mov	r1, r2
 80134b2:	4648      	mov	r0, r9
 80134b4:	4614      	mov	r4, r2
 80134b6:	f7ff ffdb 	bl	8013470 <__mcmp>
 80134ba:	1e05      	subs	r5, r0, #0
 80134bc:	d112      	bne.n	80134e4 <__mdiff+0x3c>
 80134be:	4629      	mov	r1, r5
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7ff fd11 	bl	8012ee8 <_Balloc>
 80134c6:	4602      	mov	r2, r0
 80134c8:	b928      	cbnz	r0, 80134d6 <__mdiff+0x2e>
 80134ca:	4b3f      	ldr	r3, [pc, #252]	@ (80135c8 <__mdiff+0x120>)
 80134cc:	f240 2137 	movw	r1, #567	@ 0x237
 80134d0:	483e      	ldr	r0, [pc, #248]	@ (80135cc <__mdiff+0x124>)
 80134d2:	f001 fb19 	bl	8014b08 <__assert_func>
 80134d6:	2301      	movs	r3, #1
 80134d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80134dc:	4610      	mov	r0, r2
 80134de:	b003      	add	sp, #12
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e4:	bfbc      	itt	lt
 80134e6:	464b      	movlt	r3, r9
 80134e8:	46a1      	movlt	r9, r4
 80134ea:	4630      	mov	r0, r6
 80134ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80134f0:	bfba      	itte	lt
 80134f2:	461c      	movlt	r4, r3
 80134f4:	2501      	movlt	r5, #1
 80134f6:	2500      	movge	r5, #0
 80134f8:	f7ff fcf6 	bl	8012ee8 <_Balloc>
 80134fc:	4602      	mov	r2, r0
 80134fe:	b918      	cbnz	r0, 8013508 <__mdiff+0x60>
 8013500:	4b31      	ldr	r3, [pc, #196]	@ (80135c8 <__mdiff+0x120>)
 8013502:	f240 2145 	movw	r1, #581	@ 0x245
 8013506:	e7e3      	b.n	80134d0 <__mdiff+0x28>
 8013508:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801350c:	6926      	ldr	r6, [r4, #16]
 801350e:	60c5      	str	r5, [r0, #12]
 8013510:	f109 0310 	add.w	r3, r9, #16
 8013514:	f109 0514 	add.w	r5, r9, #20
 8013518:	f104 0e14 	add.w	lr, r4, #20
 801351c:	f100 0b14 	add.w	fp, r0, #20
 8013520:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013524:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013528:	9301      	str	r3, [sp, #4]
 801352a:	46d9      	mov	r9, fp
 801352c:	f04f 0c00 	mov.w	ip, #0
 8013530:	9b01      	ldr	r3, [sp, #4]
 8013532:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013536:	f853 af04 	ldr.w	sl, [r3, #4]!
 801353a:	9301      	str	r3, [sp, #4]
 801353c:	fa1f f38a 	uxth.w	r3, sl
 8013540:	4619      	mov	r1, r3
 8013542:	b283      	uxth	r3, r0
 8013544:	1acb      	subs	r3, r1, r3
 8013546:	0c00      	lsrs	r0, r0, #16
 8013548:	4463      	add	r3, ip
 801354a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801354e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013552:	b29b      	uxth	r3, r3
 8013554:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013558:	4576      	cmp	r6, lr
 801355a:	f849 3b04 	str.w	r3, [r9], #4
 801355e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013562:	d8e5      	bhi.n	8013530 <__mdiff+0x88>
 8013564:	1b33      	subs	r3, r6, r4
 8013566:	3b15      	subs	r3, #21
 8013568:	f023 0303 	bic.w	r3, r3, #3
 801356c:	3415      	adds	r4, #21
 801356e:	3304      	adds	r3, #4
 8013570:	42a6      	cmp	r6, r4
 8013572:	bf38      	it	cc
 8013574:	2304      	movcc	r3, #4
 8013576:	441d      	add	r5, r3
 8013578:	445b      	add	r3, fp
 801357a:	461e      	mov	r6, r3
 801357c:	462c      	mov	r4, r5
 801357e:	4544      	cmp	r4, r8
 8013580:	d30e      	bcc.n	80135a0 <__mdiff+0xf8>
 8013582:	f108 0103 	add.w	r1, r8, #3
 8013586:	1b49      	subs	r1, r1, r5
 8013588:	f021 0103 	bic.w	r1, r1, #3
 801358c:	3d03      	subs	r5, #3
 801358e:	45a8      	cmp	r8, r5
 8013590:	bf38      	it	cc
 8013592:	2100      	movcc	r1, #0
 8013594:	440b      	add	r3, r1
 8013596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801359a:	b191      	cbz	r1, 80135c2 <__mdiff+0x11a>
 801359c:	6117      	str	r7, [r2, #16]
 801359e:	e79d      	b.n	80134dc <__mdiff+0x34>
 80135a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80135a4:	46e6      	mov	lr, ip
 80135a6:	0c08      	lsrs	r0, r1, #16
 80135a8:	fa1c fc81 	uxtah	ip, ip, r1
 80135ac:	4471      	add	r1, lr
 80135ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80135b2:	b289      	uxth	r1, r1
 80135b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80135b8:	f846 1b04 	str.w	r1, [r6], #4
 80135bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135c0:	e7dd      	b.n	801357e <__mdiff+0xd6>
 80135c2:	3f01      	subs	r7, #1
 80135c4:	e7e7      	b.n	8013596 <__mdiff+0xee>
 80135c6:	bf00      	nop
 80135c8:	08022d49 	.word	0x08022d49
 80135cc:	08022d5a 	.word	0x08022d5a

080135d0 <__ulp>:
 80135d0:	b082      	sub	sp, #8
 80135d2:	ed8d 0b00 	vstr	d0, [sp]
 80135d6:	9a01      	ldr	r2, [sp, #4]
 80135d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013618 <__ulp+0x48>)
 80135da:	4013      	ands	r3, r2
 80135dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	dc08      	bgt.n	80135f6 <__ulp+0x26>
 80135e4:	425b      	negs	r3, r3
 80135e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80135ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80135ee:	da04      	bge.n	80135fa <__ulp+0x2a>
 80135f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80135f4:	4113      	asrs	r3, r2
 80135f6:	2200      	movs	r2, #0
 80135f8:	e008      	b.n	801360c <__ulp+0x3c>
 80135fa:	f1a2 0314 	sub.w	r3, r2, #20
 80135fe:	2b1e      	cmp	r3, #30
 8013600:	bfda      	itte	le
 8013602:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013606:	40da      	lsrle	r2, r3
 8013608:	2201      	movgt	r2, #1
 801360a:	2300      	movs	r3, #0
 801360c:	4619      	mov	r1, r3
 801360e:	4610      	mov	r0, r2
 8013610:	ec41 0b10 	vmov	d0, r0, r1
 8013614:	b002      	add	sp, #8
 8013616:	4770      	bx	lr
 8013618:	7ff00000 	.word	0x7ff00000

0801361c <__b2d>:
 801361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013620:	6906      	ldr	r6, [r0, #16]
 8013622:	f100 0814 	add.w	r8, r0, #20
 8013626:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801362a:	1f37      	subs	r7, r6, #4
 801362c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013630:	4610      	mov	r0, r2
 8013632:	f7ff fd4b 	bl	80130cc <__hi0bits>
 8013636:	f1c0 0320 	rsb	r3, r0, #32
 801363a:	280a      	cmp	r0, #10
 801363c:	600b      	str	r3, [r1, #0]
 801363e:	491b      	ldr	r1, [pc, #108]	@ (80136ac <__b2d+0x90>)
 8013640:	dc15      	bgt.n	801366e <__b2d+0x52>
 8013642:	f1c0 0c0b 	rsb	ip, r0, #11
 8013646:	fa22 f30c 	lsr.w	r3, r2, ip
 801364a:	45b8      	cmp	r8, r7
 801364c:	ea43 0501 	orr.w	r5, r3, r1
 8013650:	bf34      	ite	cc
 8013652:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013656:	2300      	movcs	r3, #0
 8013658:	3015      	adds	r0, #21
 801365a:	fa02 f000 	lsl.w	r0, r2, r0
 801365e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013662:	4303      	orrs	r3, r0
 8013664:	461c      	mov	r4, r3
 8013666:	ec45 4b10 	vmov	d0, r4, r5
 801366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801366e:	45b8      	cmp	r8, r7
 8013670:	bf3a      	itte	cc
 8013672:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013676:	f1a6 0708 	subcc.w	r7, r6, #8
 801367a:	2300      	movcs	r3, #0
 801367c:	380b      	subs	r0, #11
 801367e:	d012      	beq.n	80136a6 <__b2d+0x8a>
 8013680:	f1c0 0120 	rsb	r1, r0, #32
 8013684:	fa23 f401 	lsr.w	r4, r3, r1
 8013688:	4082      	lsls	r2, r0
 801368a:	4322      	orrs	r2, r4
 801368c:	4547      	cmp	r7, r8
 801368e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013692:	bf8c      	ite	hi
 8013694:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013698:	2200      	movls	r2, #0
 801369a:	4083      	lsls	r3, r0
 801369c:	40ca      	lsrs	r2, r1
 801369e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80136a2:	4313      	orrs	r3, r2
 80136a4:	e7de      	b.n	8013664 <__b2d+0x48>
 80136a6:	ea42 0501 	orr.w	r5, r2, r1
 80136aa:	e7db      	b.n	8013664 <__b2d+0x48>
 80136ac:	3ff00000 	.word	0x3ff00000

080136b0 <__d2b>:
 80136b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136b4:	460f      	mov	r7, r1
 80136b6:	2101      	movs	r1, #1
 80136b8:	ec59 8b10 	vmov	r8, r9, d0
 80136bc:	4616      	mov	r6, r2
 80136be:	f7ff fc13 	bl	8012ee8 <_Balloc>
 80136c2:	4604      	mov	r4, r0
 80136c4:	b930      	cbnz	r0, 80136d4 <__d2b+0x24>
 80136c6:	4602      	mov	r2, r0
 80136c8:	4b23      	ldr	r3, [pc, #140]	@ (8013758 <__d2b+0xa8>)
 80136ca:	4824      	ldr	r0, [pc, #144]	@ (801375c <__d2b+0xac>)
 80136cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80136d0:	f001 fa1a 	bl	8014b08 <__assert_func>
 80136d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80136d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80136dc:	b10d      	cbz	r5, 80136e2 <__d2b+0x32>
 80136de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80136e2:	9301      	str	r3, [sp, #4]
 80136e4:	f1b8 0300 	subs.w	r3, r8, #0
 80136e8:	d023      	beq.n	8013732 <__d2b+0x82>
 80136ea:	4668      	mov	r0, sp
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	f7ff fd0c 	bl	801310a <__lo0bits>
 80136f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80136f6:	b1d0      	cbz	r0, 801372e <__d2b+0x7e>
 80136f8:	f1c0 0320 	rsb	r3, r0, #32
 80136fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013700:	430b      	orrs	r3, r1
 8013702:	40c2      	lsrs	r2, r0
 8013704:	6163      	str	r3, [r4, #20]
 8013706:	9201      	str	r2, [sp, #4]
 8013708:	9b01      	ldr	r3, [sp, #4]
 801370a:	61a3      	str	r3, [r4, #24]
 801370c:	2b00      	cmp	r3, #0
 801370e:	bf0c      	ite	eq
 8013710:	2201      	moveq	r2, #1
 8013712:	2202      	movne	r2, #2
 8013714:	6122      	str	r2, [r4, #16]
 8013716:	b1a5      	cbz	r5, 8013742 <__d2b+0x92>
 8013718:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801371c:	4405      	add	r5, r0
 801371e:	603d      	str	r5, [r7, #0]
 8013720:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013724:	6030      	str	r0, [r6, #0]
 8013726:	4620      	mov	r0, r4
 8013728:	b003      	add	sp, #12
 801372a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801372e:	6161      	str	r1, [r4, #20]
 8013730:	e7ea      	b.n	8013708 <__d2b+0x58>
 8013732:	a801      	add	r0, sp, #4
 8013734:	f7ff fce9 	bl	801310a <__lo0bits>
 8013738:	9b01      	ldr	r3, [sp, #4]
 801373a:	6163      	str	r3, [r4, #20]
 801373c:	3020      	adds	r0, #32
 801373e:	2201      	movs	r2, #1
 8013740:	e7e8      	b.n	8013714 <__d2b+0x64>
 8013742:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013746:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801374a:	6038      	str	r0, [r7, #0]
 801374c:	6918      	ldr	r0, [r3, #16]
 801374e:	f7ff fcbd 	bl	80130cc <__hi0bits>
 8013752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013756:	e7e5      	b.n	8013724 <__d2b+0x74>
 8013758:	08022d49 	.word	0x08022d49
 801375c:	08022d5a 	.word	0x08022d5a

08013760 <__ratio>:
 8013760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013764:	b085      	sub	sp, #20
 8013766:	e9cd 1000 	strd	r1, r0, [sp]
 801376a:	a902      	add	r1, sp, #8
 801376c:	f7ff ff56 	bl	801361c <__b2d>
 8013770:	9800      	ldr	r0, [sp, #0]
 8013772:	a903      	add	r1, sp, #12
 8013774:	ec55 4b10 	vmov	r4, r5, d0
 8013778:	f7ff ff50 	bl	801361c <__b2d>
 801377c:	9b01      	ldr	r3, [sp, #4]
 801377e:	6919      	ldr	r1, [r3, #16]
 8013780:	9b00      	ldr	r3, [sp, #0]
 8013782:	691b      	ldr	r3, [r3, #16]
 8013784:	1ac9      	subs	r1, r1, r3
 8013786:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801378a:	1a9b      	subs	r3, r3, r2
 801378c:	ec5b ab10 	vmov	sl, fp, d0
 8013790:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013794:	2b00      	cmp	r3, #0
 8013796:	bfce      	itee	gt
 8013798:	462a      	movgt	r2, r5
 801379a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801379e:	465a      	movle	r2, fp
 80137a0:	462f      	mov	r7, r5
 80137a2:	46d9      	mov	r9, fp
 80137a4:	bfcc      	ite	gt
 80137a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80137aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80137ae:	464b      	mov	r3, r9
 80137b0:	4652      	mov	r2, sl
 80137b2:	4620      	mov	r0, r4
 80137b4:	4639      	mov	r1, r7
 80137b6:	f7ed f871 	bl	800089c <__aeabi_ddiv>
 80137ba:	ec41 0b10 	vmov	d0, r0, r1
 80137be:	b005      	add	sp, #20
 80137c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137c4 <__copybits>:
 80137c4:	3901      	subs	r1, #1
 80137c6:	b570      	push	{r4, r5, r6, lr}
 80137c8:	1149      	asrs	r1, r1, #5
 80137ca:	6914      	ldr	r4, [r2, #16]
 80137cc:	3101      	adds	r1, #1
 80137ce:	f102 0314 	add.w	r3, r2, #20
 80137d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80137d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80137da:	1f05      	subs	r5, r0, #4
 80137dc:	42a3      	cmp	r3, r4
 80137de:	d30c      	bcc.n	80137fa <__copybits+0x36>
 80137e0:	1aa3      	subs	r3, r4, r2
 80137e2:	3b11      	subs	r3, #17
 80137e4:	f023 0303 	bic.w	r3, r3, #3
 80137e8:	3211      	adds	r2, #17
 80137ea:	42a2      	cmp	r2, r4
 80137ec:	bf88      	it	hi
 80137ee:	2300      	movhi	r3, #0
 80137f0:	4418      	add	r0, r3
 80137f2:	2300      	movs	r3, #0
 80137f4:	4288      	cmp	r0, r1
 80137f6:	d305      	bcc.n	8013804 <__copybits+0x40>
 80137f8:	bd70      	pop	{r4, r5, r6, pc}
 80137fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80137fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8013802:	e7eb      	b.n	80137dc <__copybits+0x18>
 8013804:	f840 3b04 	str.w	r3, [r0], #4
 8013808:	e7f4      	b.n	80137f4 <__copybits+0x30>

0801380a <__any_on>:
 801380a:	f100 0214 	add.w	r2, r0, #20
 801380e:	6900      	ldr	r0, [r0, #16]
 8013810:	114b      	asrs	r3, r1, #5
 8013812:	4298      	cmp	r0, r3
 8013814:	b510      	push	{r4, lr}
 8013816:	db11      	blt.n	801383c <__any_on+0x32>
 8013818:	dd0a      	ble.n	8013830 <__any_on+0x26>
 801381a:	f011 011f 	ands.w	r1, r1, #31
 801381e:	d007      	beq.n	8013830 <__any_on+0x26>
 8013820:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013824:	fa24 f001 	lsr.w	r0, r4, r1
 8013828:	fa00 f101 	lsl.w	r1, r0, r1
 801382c:	428c      	cmp	r4, r1
 801382e:	d10b      	bne.n	8013848 <__any_on+0x3e>
 8013830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013834:	4293      	cmp	r3, r2
 8013836:	d803      	bhi.n	8013840 <__any_on+0x36>
 8013838:	2000      	movs	r0, #0
 801383a:	bd10      	pop	{r4, pc}
 801383c:	4603      	mov	r3, r0
 801383e:	e7f7      	b.n	8013830 <__any_on+0x26>
 8013840:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013844:	2900      	cmp	r1, #0
 8013846:	d0f5      	beq.n	8013834 <__any_on+0x2a>
 8013848:	2001      	movs	r0, #1
 801384a:	e7f6      	b.n	801383a <__any_on+0x30>

0801384c <sulp>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	4604      	mov	r4, r0
 8013850:	460d      	mov	r5, r1
 8013852:	ec45 4b10 	vmov	d0, r4, r5
 8013856:	4616      	mov	r6, r2
 8013858:	f7ff feba 	bl	80135d0 <__ulp>
 801385c:	ec51 0b10 	vmov	r0, r1, d0
 8013860:	b17e      	cbz	r6, 8013882 <sulp+0x36>
 8013862:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013866:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801386a:	2b00      	cmp	r3, #0
 801386c:	dd09      	ble.n	8013882 <sulp+0x36>
 801386e:	051b      	lsls	r3, r3, #20
 8013870:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013874:	2400      	movs	r4, #0
 8013876:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801387a:	4622      	mov	r2, r4
 801387c:	462b      	mov	r3, r5
 801387e:	f7ec fee3 	bl	8000648 <__aeabi_dmul>
 8013882:	ec41 0b10 	vmov	d0, r0, r1
 8013886:	bd70      	pop	{r4, r5, r6, pc}

08013888 <_strtod_l>:
 8013888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388c:	b09f      	sub	sp, #124	@ 0x7c
 801388e:	460c      	mov	r4, r1
 8013890:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013892:	2200      	movs	r2, #0
 8013894:	921a      	str	r2, [sp, #104]	@ 0x68
 8013896:	9005      	str	r0, [sp, #20]
 8013898:	f04f 0a00 	mov.w	sl, #0
 801389c:	f04f 0b00 	mov.w	fp, #0
 80138a0:	460a      	mov	r2, r1
 80138a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80138a4:	7811      	ldrb	r1, [r2, #0]
 80138a6:	292b      	cmp	r1, #43	@ 0x2b
 80138a8:	d04a      	beq.n	8013940 <_strtod_l+0xb8>
 80138aa:	d838      	bhi.n	801391e <_strtod_l+0x96>
 80138ac:	290d      	cmp	r1, #13
 80138ae:	d832      	bhi.n	8013916 <_strtod_l+0x8e>
 80138b0:	2908      	cmp	r1, #8
 80138b2:	d832      	bhi.n	801391a <_strtod_l+0x92>
 80138b4:	2900      	cmp	r1, #0
 80138b6:	d03b      	beq.n	8013930 <_strtod_l+0xa8>
 80138b8:	2200      	movs	r2, #0
 80138ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80138be:	782a      	ldrb	r2, [r5, #0]
 80138c0:	2a30      	cmp	r2, #48	@ 0x30
 80138c2:	f040 80b3 	bne.w	8013a2c <_strtod_l+0x1a4>
 80138c6:	786a      	ldrb	r2, [r5, #1]
 80138c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80138cc:	2a58      	cmp	r2, #88	@ 0x58
 80138ce:	d16e      	bne.n	80139ae <_strtod_l+0x126>
 80138d0:	9302      	str	r3, [sp, #8]
 80138d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80138d8:	9300      	str	r3, [sp, #0]
 80138da:	4a8e      	ldr	r2, [pc, #568]	@ (8013b14 <_strtod_l+0x28c>)
 80138dc:	9805      	ldr	r0, [sp, #20]
 80138de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80138e0:	a919      	add	r1, sp, #100	@ 0x64
 80138e2:	f001 f9ab 	bl	8014c3c <__gethex>
 80138e6:	f010 060f 	ands.w	r6, r0, #15
 80138ea:	4604      	mov	r4, r0
 80138ec:	d005      	beq.n	80138fa <_strtod_l+0x72>
 80138ee:	2e06      	cmp	r6, #6
 80138f0:	d128      	bne.n	8013944 <_strtod_l+0xbc>
 80138f2:	3501      	adds	r5, #1
 80138f4:	2300      	movs	r3, #0
 80138f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80138f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f040 858e 	bne.w	801441e <_strtod_l+0xb96>
 8013902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013904:	b1cb      	cbz	r3, 801393a <_strtod_l+0xb2>
 8013906:	4652      	mov	r2, sl
 8013908:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801390c:	ec43 2b10 	vmov	d0, r2, r3
 8013910:	b01f      	add	sp, #124	@ 0x7c
 8013912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013916:	2920      	cmp	r1, #32
 8013918:	d1ce      	bne.n	80138b8 <_strtod_l+0x30>
 801391a:	3201      	adds	r2, #1
 801391c:	e7c1      	b.n	80138a2 <_strtod_l+0x1a>
 801391e:	292d      	cmp	r1, #45	@ 0x2d
 8013920:	d1ca      	bne.n	80138b8 <_strtod_l+0x30>
 8013922:	2101      	movs	r1, #1
 8013924:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013926:	1c51      	adds	r1, r2, #1
 8013928:	9119      	str	r1, [sp, #100]	@ 0x64
 801392a:	7852      	ldrb	r2, [r2, #1]
 801392c:	2a00      	cmp	r2, #0
 801392e:	d1c5      	bne.n	80138bc <_strtod_l+0x34>
 8013930:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013932:	9419      	str	r4, [sp, #100]	@ 0x64
 8013934:	2b00      	cmp	r3, #0
 8013936:	f040 8570 	bne.w	801441a <_strtod_l+0xb92>
 801393a:	4652      	mov	r2, sl
 801393c:	465b      	mov	r3, fp
 801393e:	e7e5      	b.n	801390c <_strtod_l+0x84>
 8013940:	2100      	movs	r1, #0
 8013942:	e7ef      	b.n	8013924 <_strtod_l+0x9c>
 8013944:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013946:	b13a      	cbz	r2, 8013958 <_strtod_l+0xd0>
 8013948:	2135      	movs	r1, #53	@ 0x35
 801394a:	a81c      	add	r0, sp, #112	@ 0x70
 801394c:	f7ff ff3a 	bl	80137c4 <__copybits>
 8013950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013952:	9805      	ldr	r0, [sp, #20]
 8013954:	f7ff fb08 	bl	8012f68 <_Bfree>
 8013958:	3e01      	subs	r6, #1
 801395a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801395c:	2e04      	cmp	r6, #4
 801395e:	d806      	bhi.n	801396e <_strtod_l+0xe6>
 8013960:	e8df f006 	tbb	[pc, r6]
 8013964:	201d0314 	.word	0x201d0314
 8013968:	14          	.byte	0x14
 8013969:	00          	.byte	0x00
 801396a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801396e:	05e1      	lsls	r1, r4, #23
 8013970:	bf48      	it	mi
 8013972:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013976:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801397a:	0d1b      	lsrs	r3, r3, #20
 801397c:	051b      	lsls	r3, r3, #20
 801397e:	2b00      	cmp	r3, #0
 8013980:	d1bb      	bne.n	80138fa <_strtod_l+0x72>
 8013982:	f7fe fb2f 	bl	8011fe4 <__errno>
 8013986:	2322      	movs	r3, #34	@ 0x22
 8013988:	6003      	str	r3, [r0, #0]
 801398a:	e7b6      	b.n	80138fa <_strtod_l+0x72>
 801398c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013990:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013994:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013998:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801399c:	e7e7      	b.n	801396e <_strtod_l+0xe6>
 801399e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013b1c <_strtod_l+0x294>
 80139a2:	e7e4      	b.n	801396e <_strtod_l+0xe6>
 80139a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80139a8:	f04f 3aff 	mov.w	sl, #4294967295
 80139ac:	e7df      	b.n	801396e <_strtod_l+0xe6>
 80139ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139b0:	1c5a      	adds	r2, r3, #1
 80139b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	2b30      	cmp	r3, #48	@ 0x30
 80139b8:	d0f9      	beq.n	80139ae <_strtod_l+0x126>
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d09d      	beq.n	80138fa <_strtod_l+0x72>
 80139be:	2301      	movs	r3, #1
 80139c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80139c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80139c6:	2300      	movs	r3, #0
 80139c8:	9308      	str	r3, [sp, #32]
 80139ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80139cc:	461f      	mov	r7, r3
 80139ce:	220a      	movs	r2, #10
 80139d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80139d2:	7805      	ldrb	r5, [r0, #0]
 80139d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80139d8:	b2d9      	uxtb	r1, r3
 80139da:	2909      	cmp	r1, #9
 80139dc:	d928      	bls.n	8013a30 <_strtod_l+0x1a8>
 80139de:	494e      	ldr	r1, [pc, #312]	@ (8013b18 <_strtod_l+0x290>)
 80139e0:	2201      	movs	r2, #1
 80139e2:	f001 f837 	bl	8014a54 <strncmp>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	d032      	beq.n	8013a50 <_strtod_l+0x1c8>
 80139ea:	2000      	movs	r0, #0
 80139ec:	462a      	mov	r2, r5
 80139ee:	4681      	mov	r9, r0
 80139f0:	463d      	mov	r5, r7
 80139f2:	4603      	mov	r3, r0
 80139f4:	2a65      	cmp	r2, #101	@ 0x65
 80139f6:	d001      	beq.n	80139fc <_strtod_l+0x174>
 80139f8:	2a45      	cmp	r2, #69	@ 0x45
 80139fa:	d114      	bne.n	8013a26 <_strtod_l+0x19e>
 80139fc:	b91d      	cbnz	r5, 8013a06 <_strtod_l+0x17e>
 80139fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a00:	4302      	orrs	r2, r0
 8013a02:	d095      	beq.n	8013930 <_strtod_l+0xa8>
 8013a04:	2500      	movs	r5, #0
 8013a06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013a08:	1c62      	adds	r2, r4, #1
 8013a0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a0c:	7862      	ldrb	r2, [r4, #1]
 8013a0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8013a10:	d077      	beq.n	8013b02 <_strtod_l+0x27a>
 8013a12:	2a2d      	cmp	r2, #45	@ 0x2d
 8013a14:	d07b      	beq.n	8013b0e <_strtod_l+0x286>
 8013a16:	f04f 0c00 	mov.w	ip, #0
 8013a1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013a1e:	2909      	cmp	r1, #9
 8013a20:	f240 8082 	bls.w	8013b28 <_strtod_l+0x2a0>
 8013a24:	9419      	str	r4, [sp, #100]	@ 0x64
 8013a26:	f04f 0800 	mov.w	r8, #0
 8013a2a:	e0a2      	b.n	8013b72 <_strtod_l+0x2ea>
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	e7c7      	b.n	80139c0 <_strtod_l+0x138>
 8013a30:	2f08      	cmp	r7, #8
 8013a32:	bfd5      	itete	le
 8013a34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8013a36:	9908      	ldrgt	r1, [sp, #32]
 8013a38:	fb02 3301 	mlale	r3, r2, r1, r3
 8013a3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013a40:	f100 0001 	add.w	r0, r0, #1
 8013a44:	bfd4      	ite	le
 8013a46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013a48:	9308      	strgt	r3, [sp, #32]
 8013a4a:	3701      	adds	r7, #1
 8013a4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8013a4e:	e7bf      	b.n	80139d0 <_strtod_l+0x148>
 8013a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a52:	1c5a      	adds	r2, r3, #1
 8013a54:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a56:	785a      	ldrb	r2, [r3, #1]
 8013a58:	b37f      	cbz	r7, 8013aba <_strtod_l+0x232>
 8013a5a:	4681      	mov	r9, r0
 8013a5c:	463d      	mov	r5, r7
 8013a5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013a62:	2b09      	cmp	r3, #9
 8013a64:	d912      	bls.n	8013a8c <_strtod_l+0x204>
 8013a66:	2301      	movs	r3, #1
 8013a68:	e7c4      	b.n	80139f4 <_strtod_l+0x16c>
 8013a6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a70:	785a      	ldrb	r2, [r3, #1]
 8013a72:	3001      	adds	r0, #1
 8013a74:	2a30      	cmp	r2, #48	@ 0x30
 8013a76:	d0f8      	beq.n	8013a6a <_strtod_l+0x1e2>
 8013a78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013a7c:	2b08      	cmp	r3, #8
 8013a7e:	f200 84d3 	bhi.w	8014428 <_strtod_l+0xba0>
 8013a82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a84:	930c      	str	r3, [sp, #48]	@ 0x30
 8013a86:	4681      	mov	r9, r0
 8013a88:	2000      	movs	r0, #0
 8013a8a:	4605      	mov	r5, r0
 8013a8c:	3a30      	subs	r2, #48	@ 0x30
 8013a8e:	f100 0301 	add.w	r3, r0, #1
 8013a92:	d02a      	beq.n	8013aea <_strtod_l+0x262>
 8013a94:	4499      	add	r9, r3
 8013a96:	eb00 0c05 	add.w	ip, r0, r5
 8013a9a:	462b      	mov	r3, r5
 8013a9c:	210a      	movs	r1, #10
 8013a9e:	4563      	cmp	r3, ip
 8013aa0:	d10d      	bne.n	8013abe <_strtod_l+0x236>
 8013aa2:	1c69      	adds	r1, r5, #1
 8013aa4:	4401      	add	r1, r0
 8013aa6:	4428      	add	r0, r5
 8013aa8:	2808      	cmp	r0, #8
 8013aaa:	dc16      	bgt.n	8013ada <_strtod_l+0x252>
 8013aac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013aae:	230a      	movs	r3, #10
 8013ab0:	fb03 2300 	mla	r3, r3, r0, r2
 8013ab4:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	e018      	b.n	8013aec <_strtod_l+0x264>
 8013aba:	4638      	mov	r0, r7
 8013abc:	e7da      	b.n	8013a74 <_strtod_l+0x1ec>
 8013abe:	2b08      	cmp	r3, #8
 8013ac0:	f103 0301 	add.w	r3, r3, #1
 8013ac4:	dc03      	bgt.n	8013ace <_strtod_l+0x246>
 8013ac6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013ac8:	434e      	muls	r6, r1
 8013aca:	960a      	str	r6, [sp, #40]	@ 0x28
 8013acc:	e7e7      	b.n	8013a9e <_strtod_l+0x216>
 8013ace:	2b10      	cmp	r3, #16
 8013ad0:	bfde      	ittt	le
 8013ad2:	9e08      	ldrle	r6, [sp, #32]
 8013ad4:	434e      	mulle	r6, r1
 8013ad6:	9608      	strle	r6, [sp, #32]
 8013ad8:	e7e1      	b.n	8013a9e <_strtod_l+0x216>
 8013ada:	280f      	cmp	r0, #15
 8013adc:	dceb      	bgt.n	8013ab6 <_strtod_l+0x22e>
 8013ade:	9808      	ldr	r0, [sp, #32]
 8013ae0:	230a      	movs	r3, #10
 8013ae2:	fb03 2300 	mla	r3, r3, r0, r2
 8013ae6:	9308      	str	r3, [sp, #32]
 8013ae8:	e7e5      	b.n	8013ab6 <_strtod_l+0x22e>
 8013aea:	4629      	mov	r1, r5
 8013aec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013aee:	1c50      	adds	r0, r2, #1
 8013af0:	9019      	str	r0, [sp, #100]	@ 0x64
 8013af2:	7852      	ldrb	r2, [r2, #1]
 8013af4:	4618      	mov	r0, r3
 8013af6:	460d      	mov	r5, r1
 8013af8:	e7b1      	b.n	8013a5e <_strtod_l+0x1d6>
 8013afa:	f04f 0900 	mov.w	r9, #0
 8013afe:	2301      	movs	r3, #1
 8013b00:	e77d      	b.n	80139fe <_strtod_l+0x176>
 8013b02:	f04f 0c00 	mov.w	ip, #0
 8013b06:	1ca2      	adds	r2, r4, #2
 8013b08:	9219      	str	r2, [sp, #100]	@ 0x64
 8013b0a:	78a2      	ldrb	r2, [r4, #2]
 8013b0c:	e785      	b.n	8013a1a <_strtod_l+0x192>
 8013b0e:	f04f 0c01 	mov.w	ip, #1
 8013b12:	e7f8      	b.n	8013b06 <_strtod_l+0x27e>
 8013b14:	08022ec8 	.word	0x08022ec8
 8013b18:	08022eb0 	.word	0x08022eb0
 8013b1c:	7ff00000 	.word	0x7ff00000
 8013b20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b22:	1c51      	adds	r1, r2, #1
 8013b24:	9119      	str	r1, [sp, #100]	@ 0x64
 8013b26:	7852      	ldrb	r2, [r2, #1]
 8013b28:	2a30      	cmp	r2, #48	@ 0x30
 8013b2a:	d0f9      	beq.n	8013b20 <_strtod_l+0x298>
 8013b2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013b30:	2908      	cmp	r1, #8
 8013b32:	f63f af78 	bhi.w	8013a26 <_strtod_l+0x19e>
 8013b36:	3a30      	subs	r2, #48	@ 0x30
 8013b38:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013b3e:	f04f 080a 	mov.w	r8, #10
 8013b42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b44:	1c56      	adds	r6, r2, #1
 8013b46:	9619      	str	r6, [sp, #100]	@ 0x64
 8013b48:	7852      	ldrb	r2, [r2, #1]
 8013b4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013b4e:	f1be 0f09 	cmp.w	lr, #9
 8013b52:	d939      	bls.n	8013bc8 <_strtod_l+0x340>
 8013b54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b56:	1a76      	subs	r6, r6, r1
 8013b58:	2e08      	cmp	r6, #8
 8013b5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013b5e:	dc03      	bgt.n	8013b68 <_strtod_l+0x2e0>
 8013b60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b62:	4588      	cmp	r8, r1
 8013b64:	bfa8      	it	ge
 8013b66:	4688      	movge	r8, r1
 8013b68:	f1bc 0f00 	cmp.w	ip, #0
 8013b6c:	d001      	beq.n	8013b72 <_strtod_l+0x2ea>
 8013b6e:	f1c8 0800 	rsb	r8, r8, #0
 8013b72:	2d00      	cmp	r5, #0
 8013b74:	d14e      	bne.n	8013c14 <_strtod_l+0x38c>
 8013b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013b78:	4308      	orrs	r0, r1
 8013b7a:	f47f aebe 	bne.w	80138fa <_strtod_l+0x72>
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	f47f aed6 	bne.w	8013930 <_strtod_l+0xa8>
 8013b84:	2a69      	cmp	r2, #105	@ 0x69
 8013b86:	d028      	beq.n	8013bda <_strtod_l+0x352>
 8013b88:	dc25      	bgt.n	8013bd6 <_strtod_l+0x34e>
 8013b8a:	2a49      	cmp	r2, #73	@ 0x49
 8013b8c:	d025      	beq.n	8013bda <_strtod_l+0x352>
 8013b8e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013b90:	f47f aece 	bne.w	8013930 <_strtod_l+0xa8>
 8013b94:	499b      	ldr	r1, [pc, #620]	@ (8013e04 <_strtod_l+0x57c>)
 8013b96:	a819      	add	r0, sp, #100	@ 0x64
 8013b98:	f001 fa72 	bl	8015080 <__match>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	f43f aec7 	beq.w	8013930 <_strtod_l+0xa8>
 8013ba2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	2b28      	cmp	r3, #40	@ 0x28
 8013ba8:	d12e      	bne.n	8013c08 <_strtod_l+0x380>
 8013baa:	4997      	ldr	r1, [pc, #604]	@ (8013e08 <_strtod_l+0x580>)
 8013bac:	aa1c      	add	r2, sp, #112	@ 0x70
 8013bae:	a819      	add	r0, sp, #100	@ 0x64
 8013bb0:	f001 fa7a 	bl	80150a8 <__hexnan>
 8013bb4:	2805      	cmp	r0, #5
 8013bb6:	d127      	bne.n	8013c08 <_strtod_l+0x380>
 8013bb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013bba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013bbe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013bc2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013bc6:	e698      	b.n	80138fa <_strtod_l+0x72>
 8013bc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013bca:	fb08 2101 	mla	r1, r8, r1, r2
 8013bce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013bd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8013bd4:	e7b5      	b.n	8013b42 <_strtod_l+0x2ba>
 8013bd6:	2a6e      	cmp	r2, #110	@ 0x6e
 8013bd8:	e7da      	b.n	8013b90 <_strtod_l+0x308>
 8013bda:	498c      	ldr	r1, [pc, #560]	@ (8013e0c <_strtod_l+0x584>)
 8013bdc:	a819      	add	r0, sp, #100	@ 0x64
 8013bde:	f001 fa4f 	bl	8015080 <__match>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	f43f aea4 	beq.w	8013930 <_strtod_l+0xa8>
 8013be8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bea:	4989      	ldr	r1, [pc, #548]	@ (8013e10 <_strtod_l+0x588>)
 8013bec:	3b01      	subs	r3, #1
 8013bee:	a819      	add	r0, sp, #100	@ 0x64
 8013bf0:	9319      	str	r3, [sp, #100]	@ 0x64
 8013bf2:	f001 fa45 	bl	8015080 <__match>
 8013bf6:	b910      	cbnz	r0, 8013bfe <_strtod_l+0x376>
 8013bf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	9319      	str	r3, [sp, #100]	@ 0x64
 8013bfe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013e20 <_strtod_l+0x598>
 8013c02:	f04f 0a00 	mov.w	sl, #0
 8013c06:	e678      	b.n	80138fa <_strtod_l+0x72>
 8013c08:	4882      	ldr	r0, [pc, #520]	@ (8013e14 <_strtod_l+0x58c>)
 8013c0a:	f000 ff75 	bl	8014af8 <nan>
 8013c0e:	ec5b ab10 	vmov	sl, fp, d0
 8013c12:	e672      	b.n	80138fa <_strtod_l+0x72>
 8013c14:	eba8 0309 	sub.w	r3, r8, r9
 8013c18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c1c:	2f00      	cmp	r7, #0
 8013c1e:	bf08      	it	eq
 8013c20:	462f      	moveq	r7, r5
 8013c22:	2d10      	cmp	r5, #16
 8013c24:	462c      	mov	r4, r5
 8013c26:	bfa8      	it	ge
 8013c28:	2410      	movge	r4, #16
 8013c2a:	f7ec fc93 	bl	8000554 <__aeabi_ui2d>
 8013c2e:	2d09      	cmp	r5, #9
 8013c30:	4682      	mov	sl, r0
 8013c32:	468b      	mov	fp, r1
 8013c34:	dc13      	bgt.n	8013c5e <_strtod_l+0x3d6>
 8013c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f43f ae5e 	beq.w	80138fa <_strtod_l+0x72>
 8013c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c40:	dd78      	ble.n	8013d34 <_strtod_l+0x4ac>
 8013c42:	2b16      	cmp	r3, #22
 8013c44:	dc5f      	bgt.n	8013d06 <_strtod_l+0x47e>
 8013c46:	4974      	ldr	r1, [pc, #464]	@ (8013e18 <_strtod_l+0x590>)
 8013c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c50:	4652      	mov	r2, sl
 8013c52:	465b      	mov	r3, fp
 8013c54:	f7ec fcf8 	bl	8000648 <__aeabi_dmul>
 8013c58:	4682      	mov	sl, r0
 8013c5a:	468b      	mov	fp, r1
 8013c5c:	e64d      	b.n	80138fa <_strtod_l+0x72>
 8013c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8013e18 <_strtod_l+0x590>)
 8013c60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013c64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013c68:	f7ec fcee 	bl	8000648 <__aeabi_dmul>
 8013c6c:	4682      	mov	sl, r0
 8013c6e:	9808      	ldr	r0, [sp, #32]
 8013c70:	468b      	mov	fp, r1
 8013c72:	f7ec fc6f 	bl	8000554 <__aeabi_ui2d>
 8013c76:	4602      	mov	r2, r0
 8013c78:	460b      	mov	r3, r1
 8013c7a:	4650      	mov	r0, sl
 8013c7c:	4659      	mov	r1, fp
 8013c7e:	f7ec fb2d 	bl	80002dc <__adddf3>
 8013c82:	2d0f      	cmp	r5, #15
 8013c84:	4682      	mov	sl, r0
 8013c86:	468b      	mov	fp, r1
 8013c88:	ddd5      	ble.n	8013c36 <_strtod_l+0x3ae>
 8013c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c8c:	1b2c      	subs	r4, r5, r4
 8013c8e:	441c      	add	r4, r3
 8013c90:	2c00      	cmp	r4, #0
 8013c92:	f340 8096 	ble.w	8013dc2 <_strtod_l+0x53a>
 8013c96:	f014 030f 	ands.w	r3, r4, #15
 8013c9a:	d00a      	beq.n	8013cb2 <_strtod_l+0x42a>
 8013c9c:	495e      	ldr	r1, [pc, #376]	@ (8013e18 <_strtod_l+0x590>)
 8013c9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ca2:	4652      	mov	r2, sl
 8013ca4:	465b      	mov	r3, fp
 8013ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013caa:	f7ec fccd 	bl	8000648 <__aeabi_dmul>
 8013cae:	4682      	mov	sl, r0
 8013cb0:	468b      	mov	fp, r1
 8013cb2:	f034 040f 	bics.w	r4, r4, #15
 8013cb6:	d073      	beq.n	8013da0 <_strtod_l+0x518>
 8013cb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013cbc:	dd48      	ble.n	8013d50 <_strtod_l+0x4c8>
 8013cbe:	2400      	movs	r4, #0
 8013cc0:	46a0      	mov	r8, r4
 8013cc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8013cc4:	46a1      	mov	r9, r4
 8013cc6:	9a05      	ldr	r2, [sp, #20]
 8013cc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013e20 <_strtod_l+0x598>
 8013ccc:	2322      	movs	r3, #34	@ 0x22
 8013cce:	6013      	str	r3, [r2, #0]
 8013cd0:	f04f 0a00 	mov.w	sl, #0
 8013cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	f43f ae0f 	beq.w	80138fa <_strtod_l+0x72>
 8013cdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013cde:	9805      	ldr	r0, [sp, #20]
 8013ce0:	f7ff f942 	bl	8012f68 <_Bfree>
 8013ce4:	9805      	ldr	r0, [sp, #20]
 8013ce6:	4649      	mov	r1, r9
 8013ce8:	f7ff f93e 	bl	8012f68 <_Bfree>
 8013cec:	9805      	ldr	r0, [sp, #20]
 8013cee:	4641      	mov	r1, r8
 8013cf0:	f7ff f93a 	bl	8012f68 <_Bfree>
 8013cf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013cf6:	9805      	ldr	r0, [sp, #20]
 8013cf8:	f7ff f936 	bl	8012f68 <_Bfree>
 8013cfc:	9805      	ldr	r0, [sp, #20]
 8013cfe:	4621      	mov	r1, r4
 8013d00:	f7ff f932 	bl	8012f68 <_Bfree>
 8013d04:	e5f9      	b.n	80138fa <_strtod_l+0x72>
 8013d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	dbbc      	blt.n	8013c8a <_strtod_l+0x402>
 8013d10:	4c41      	ldr	r4, [pc, #260]	@ (8013e18 <_strtod_l+0x590>)
 8013d12:	f1c5 050f 	rsb	r5, r5, #15
 8013d16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013d1a:	4652      	mov	r2, sl
 8013d1c:	465b      	mov	r3, fp
 8013d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d22:	f7ec fc91 	bl	8000648 <__aeabi_dmul>
 8013d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d28:	1b5d      	subs	r5, r3, r5
 8013d2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013d32:	e78f      	b.n	8013c54 <_strtod_l+0x3cc>
 8013d34:	3316      	adds	r3, #22
 8013d36:	dba8      	blt.n	8013c8a <_strtod_l+0x402>
 8013d38:	4b37      	ldr	r3, [pc, #220]	@ (8013e18 <_strtod_l+0x590>)
 8013d3a:	eba9 0808 	sub.w	r8, r9, r8
 8013d3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013d42:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013d46:	4650      	mov	r0, sl
 8013d48:	4659      	mov	r1, fp
 8013d4a:	f7ec fda7 	bl	800089c <__aeabi_ddiv>
 8013d4e:	e783      	b.n	8013c58 <_strtod_l+0x3d0>
 8013d50:	4b32      	ldr	r3, [pc, #200]	@ (8013e1c <_strtod_l+0x594>)
 8013d52:	9308      	str	r3, [sp, #32]
 8013d54:	2300      	movs	r3, #0
 8013d56:	1124      	asrs	r4, r4, #4
 8013d58:	4650      	mov	r0, sl
 8013d5a:	4659      	mov	r1, fp
 8013d5c:	461e      	mov	r6, r3
 8013d5e:	2c01      	cmp	r4, #1
 8013d60:	dc21      	bgt.n	8013da6 <_strtod_l+0x51e>
 8013d62:	b10b      	cbz	r3, 8013d68 <_strtod_l+0x4e0>
 8013d64:	4682      	mov	sl, r0
 8013d66:	468b      	mov	fp, r1
 8013d68:	492c      	ldr	r1, [pc, #176]	@ (8013e1c <_strtod_l+0x594>)
 8013d6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013d6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013d72:	4652      	mov	r2, sl
 8013d74:	465b      	mov	r3, fp
 8013d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d7a:	f7ec fc65 	bl	8000648 <__aeabi_dmul>
 8013d7e:	4b28      	ldr	r3, [pc, #160]	@ (8013e20 <_strtod_l+0x598>)
 8013d80:	460a      	mov	r2, r1
 8013d82:	400b      	ands	r3, r1
 8013d84:	4927      	ldr	r1, [pc, #156]	@ (8013e24 <_strtod_l+0x59c>)
 8013d86:	428b      	cmp	r3, r1
 8013d88:	4682      	mov	sl, r0
 8013d8a:	d898      	bhi.n	8013cbe <_strtod_l+0x436>
 8013d8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013d90:	428b      	cmp	r3, r1
 8013d92:	bf86      	itte	hi
 8013d94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013e28 <_strtod_l+0x5a0>
 8013d98:	f04f 3aff 	movhi.w	sl, #4294967295
 8013d9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013da0:	2300      	movs	r3, #0
 8013da2:	9308      	str	r3, [sp, #32]
 8013da4:	e07a      	b.n	8013e9c <_strtod_l+0x614>
 8013da6:	07e2      	lsls	r2, r4, #31
 8013da8:	d505      	bpl.n	8013db6 <_strtod_l+0x52e>
 8013daa:	9b08      	ldr	r3, [sp, #32]
 8013dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db0:	f7ec fc4a 	bl	8000648 <__aeabi_dmul>
 8013db4:	2301      	movs	r3, #1
 8013db6:	9a08      	ldr	r2, [sp, #32]
 8013db8:	3208      	adds	r2, #8
 8013dba:	3601      	adds	r6, #1
 8013dbc:	1064      	asrs	r4, r4, #1
 8013dbe:	9208      	str	r2, [sp, #32]
 8013dc0:	e7cd      	b.n	8013d5e <_strtod_l+0x4d6>
 8013dc2:	d0ed      	beq.n	8013da0 <_strtod_l+0x518>
 8013dc4:	4264      	negs	r4, r4
 8013dc6:	f014 020f 	ands.w	r2, r4, #15
 8013dca:	d00a      	beq.n	8013de2 <_strtod_l+0x55a>
 8013dcc:	4b12      	ldr	r3, [pc, #72]	@ (8013e18 <_strtod_l+0x590>)
 8013dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013dd2:	4650      	mov	r0, sl
 8013dd4:	4659      	mov	r1, fp
 8013dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dda:	f7ec fd5f 	bl	800089c <__aeabi_ddiv>
 8013dde:	4682      	mov	sl, r0
 8013de0:	468b      	mov	fp, r1
 8013de2:	1124      	asrs	r4, r4, #4
 8013de4:	d0dc      	beq.n	8013da0 <_strtod_l+0x518>
 8013de6:	2c1f      	cmp	r4, #31
 8013de8:	dd20      	ble.n	8013e2c <_strtod_l+0x5a4>
 8013dea:	2400      	movs	r4, #0
 8013dec:	46a0      	mov	r8, r4
 8013dee:	940a      	str	r4, [sp, #40]	@ 0x28
 8013df0:	46a1      	mov	r9, r4
 8013df2:	9a05      	ldr	r2, [sp, #20]
 8013df4:	2322      	movs	r3, #34	@ 0x22
 8013df6:	f04f 0a00 	mov.w	sl, #0
 8013dfa:	f04f 0b00 	mov.w	fp, #0
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	e768      	b.n	8013cd4 <_strtod_l+0x44c>
 8013e02:	bf00      	nop
 8013e04:	08022ca1 	.word	0x08022ca1
 8013e08:	08022eb4 	.word	0x08022eb4
 8013e0c:	08022c99 	.word	0x08022c99
 8013e10:	08022cd0 	.word	0x08022cd0
 8013e14:	0802305d 	.word	0x0802305d
 8013e18:	08022de8 	.word	0x08022de8
 8013e1c:	08022dc0 	.word	0x08022dc0
 8013e20:	7ff00000 	.word	0x7ff00000
 8013e24:	7ca00000 	.word	0x7ca00000
 8013e28:	7fefffff 	.word	0x7fefffff
 8013e2c:	f014 0310 	ands.w	r3, r4, #16
 8013e30:	bf18      	it	ne
 8013e32:	236a      	movne	r3, #106	@ 0x6a
 8013e34:	4ea9      	ldr	r6, [pc, #676]	@ (80140dc <_strtod_l+0x854>)
 8013e36:	9308      	str	r3, [sp, #32]
 8013e38:	4650      	mov	r0, sl
 8013e3a:	4659      	mov	r1, fp
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	07e2      	lsls	r2, r4, #31
 8013e40:	d504      	bpl.n	8013e4c <_strtod_l+0x5c4>
 8013e42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013e46:	f7ec fbff 	bl	8000648 <__aeabi_dmul>
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	1064      	asrs	r4, r4, #1
 8013e4e:	f106 0608 	add.w	r6, r6, #8
 8013e52:	d1f4      	bne.n	8013e3e <_strtod_l+0x5b6>
 8013e54:	b10b      	cbz	r3, 8013e5a <_strtod_l+0x5d2>
 8013e56:	4682      	mov	sl, r0
 8013e58:	468b      	mov	fp, r1
 8013e5a:	9b08      	ldr	r3, [sp, #32]
 8013e5c:	b1b3      	cbz	r3, 8013e8c <_strtod_l+0x604>
 8013e5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013e62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	4659      	mov	r1, fp
 8013e6a:	dd0f      	ble.n	8013e8c <_strtod_l+0x604>
 8013e6c:	2b1f      	cmp	r3, #31
 8013e6e:	dd55      	ble.n	8013f1c <_strtod_l+0x694>
 8013e70:	2b34      	cmp	r3, #52	@ 0x34
 8013e72:	bfde      	ittt	le
 8013e74:	f04f 33ff 	movle.w	r3, #4294967295
 8013e78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013e7c:	4093      	lslle	r3, r2
 8013e7e:	f04f 0a00 	mov.w	sl, #0
 8013e82:	bfcc      	ite	gt
 8013e84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013e88:	ea03 0b01 	andle.w	fp, r3, r1
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4650      	mov	r0, sl
 8013e92:	4659      	mov	r1, fp
 8013e94:	f7ec fe40 	bl	8000b18 <__aeabi_dcmpeq>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d1a6      	bne.n	8013dea <_strtod_l+0x562>
 8013e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e9e:	9300      	str	r3, [sp, #0]
 8013ea0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ea2:	9805      	ldr	r0, [sp, #20]
 8013ea4:	462b      	mov	r3, r5
 8013ea6:	463a      	mov	r2, r7
 8013ea8:	f7ff f8c6 	bl	8013038 <__s2b>
 8013eac:	900a      	str	r0, [sp, #40]	@ 0x28
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	f43f af05 	beq.w	8013cbe <_strtod_l+0x436>
 8013eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013eb6:	2a00      	cmp	r2, #0
 8013eb8:	eba9 0308 	sub.w	r3, r9, r8
 8013ebc:	bfa8      	it	ge
 8013ebe:	2300      	movge	r3, #0
 8013ec0:	9312      	str	r3, [sp, #72]	@ 0x48
 8013ec2:	2400      	movs	r4, #0
 8013ec4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013ec8:	9316      	str	r3, [sp, #88]	@ 0x58
 8013eca:	46a0      	mov	r8, r4
 8013ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ece:	9805      	ldr	r0, [sp, #20]
 8013ed0:	6859      	ldr	r1, [r3, #4]
 8013ed2:	f7ff f809 	bl	8012ee8 <_Balloc>
 8013ed6:	4681      	mov	r9, r0
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	f43f aef4 	beq.w	8013cc6 <_strtod_l+0x43e>
 8013ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ee0:	691a      	ldr	r2, [r3, #16]
 8013ee2:	3202      	adds	r2, #2
 8013ee4:	f103 010c 	add.w	r1, r3, #12
 8013ee8:	0092      	lsls	r2, r2, #2
 8013eea:	300c      	adds	r0, #12
 8013eec:	f000 fdf6 	bl	8014adc <memcpy>
 8013ef0:	ec4b ab10 	vmov	d0, sl, fp
 8013ef4:	9805      	ldr	r0, [sp, #20]
 8013ef6:	aa1c      	add	r2, sp, #112	@ 0x70
 8013ef8:	a91b      	add	r1, sp, #108	@ 0x6c
 8013efa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013efe:	f7ff fbd7 	bl	80136b0 <__d2b>
 8013f02:	901a      	str	r0, [sp, #104]	@ 0x68
 8013f04:	2800      	cmp	r0, #0
 8013f06:	f43f aede 	beq.w	8013cc6 <_strtod_l+0x43e>
 8013f0a:	9805      	ldr	r0, [sp, #20]
 8013f0c:	2101      	movs	r1, #1
 8013f0e:	f7ff f929 	bl	8013164 <__i2b>
 8013f12:	4680      	mov	r8, r0
 8013f14:	b948      	cbnz	r0, 8013f2a <_strtod_l+0x6a2>
 8013f16:	f04f 0800 	mov.w	r8, #0
 8013f1a:	e6d4      	b.n	8013cc6 <_strtod_l+0x43e>
 8013f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f20:	fa02 f303 	lsl.w	r3, r2, r3
 8013f24:	ea03 0a0a 	and.w	sl, r3, sl
 8013f28:	e7b0      	b.n	8013e8c <_strtod_l+0x604>
 8013f2a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013f2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013f2e:	2d00      	cmp	r5, #0
 8013f30:	bfab      	itete	ge
 8013f32:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013f34:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013f36:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013f38:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013f3a:	bfac      	ite	ge
 8013f3c:	18ef      	addge	r7, r5, r3
 8013f3e:	1b5e      	sublt	r6, r3, r5
 8013f40:	9b08      	ldr	r3, [sp, #32]
 8013f42:	1aed      	subs	r5, r5, r3
 8013f44:	4415      	add	r5, r2
 8013f46:	4b66      	ldr	r3, [pc, #408]	@ (80140e0 <_strtod_l+0x858>)
 8013f48:	3d01      	subs	r5, #1
 8013f4a:	429d      	cmp	r5, r3
 8013f4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013f50:	da50      	bge.n	8013ff4 <_strtod_l+0x76c>
 8013f52:	1b5b      	subs	r3, r3, r5
 8013f54:	2b1f      	cmp	r3, #31
 8013f56:	eba2 0203 	sub.w	r2, r2, r3
 8013f5a:	f04f 0101 	mov.w	r1, #1
 8013f5e:	dc3d      	bgt.n	8013fdc <_strtod_l+0x754>
 8013f60:	fa01 f303 	lsl.w	r3, r1, r3
 8013f64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013f66:	2300      	movs	r3, #0
 8013f68:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f6a:	18bd      	adds	r5, r7, r2
 8013f6c:	9b08      	ldr	r3, [sp, #32]
 8013f6e:	42af      	cmp	r7, r5
 8013f70:	4416      	add	r6, r2
 8013f72:	441e      	add	r6, r3
 8013f74:	463b      	mov	r3, r7
 8013f76:	bfa8      	it	ge
 8013f78:	462b      	movge	r3, r5
 8013f7a:	42b3      	cmp	r3, r6
 8013f7c:	bfa8      	it	ge
 8013f7e:	4633      	movge	r3, r6
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	bfc2      	ittt	gt
 8013f84:	1aed      	subgt	r5, r5, r3
 8013f86:	1af6      	subgt	r6, r6, r3
 8013f88:	1aff      	subgt	r7, r7, r3
 8013f8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	dd16      	ble.n	8013fbe <_strtod_l+0x736>
 8013f90:	4641      	mov	r1, r8
 8013f92:	9805      	ldr	r0, [sp, #20]
 8013f94:	461a      	mov	r2, r3
 8013f96:	f7ff f9a5 	bl	80132e4 <__pow5mult>
 8013f9a:	4680      	mov	r8, r0
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d0ba      	beq.n	8013f16 <_strtod_l+0x68e>
 8013fa0:	4601      	mov	r1, r0
 8013fa2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013fa4:	9805      	ldr	r0, [sp, #20]
 8013fa6:	f7ff f8f3 	bl	8013190 <__multiply>
 8013faa:	900e      	str	r0, [sp, #56]	@ 0x38
 8013fac:	2800      	cmp	r0, #0
 8013fae:	f43f ae8a 	beq.w	8013cc6 <_strtod_l+0x43e>
 8013fb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013fb4:	9805      	ldr	r0, [sp, #20]
 8013fb6:	f7fe ffd7 	bl	8012f68 <_Bfree>
 8013fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fbe:	2d00      	cmp	r5, #0
 8013fc0:	dc1d      	bgt.n	8013ffe <_strtod_l+0x776>
 8013fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	dd23      	ble.n	8014010 <_strtod_l+0x788>
 8013fc8:	4649      	mov	r1, r9
 8013fca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013fcc:	9805      	ldr	r0, [sp, #20]
 8013fce:	f7ff f989 	bl	80132e4 <__pow5mult>
 8013fd2:	4681      	mov	r9, r0
 8013fd4:	b9e0      	cbnz	r0, 8014010 <_strtod_l+0x788>
 8013fd6:	f04f 0900 	mov.w	r9, #0
 8013fda:	e674      	b.n	8013cc6 <_strtod_l+0x43e>
 8013fdc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013fe0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013fe4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013fe8:	35e2      	adds	r5, #226	@ 0xe2
 8013fea:	fa01 f305 	lsl.w	r3, r1, r5
 8013fee:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ff0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013ff2:	e7ba      	b.n	8013f6a <_strtod_l+0x6e2>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013ffc:	e7b5      	b.n	8013f6a <_strtod_l+0x6e2>
 8013ffe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014000:	9805      	ldr	r0, [sp, #20]
 8014002:	462a      	mov	r2, r5
 8014004:	f7ff f9c8 	bl	8013398 <__lshift>
 8014008:	901a      	str	r0, [sp, #104]	@ 0x68
 801400a:	2800      	cmp	r0, #0
 801400c:	d1d9      	bne.n	8013fc2 <_strtod_l+0x73a>
 801400e:	e65a      	b.n	8013cc6 <_strtod_l+0x43e>
 8014010:	2e00      	cmp	r6, #0
 8014012:	dd07      	ble.n	8014024 <_strtod_l+0x79c>
 8014014:	4649      	mov	r1, r9
 8014016:	9805      	ldr	r0, [sp, #20]
 8014018:	4632      	mov	r2, r6
 801401a:	f7ff f9bd 	bl	8013398 <__lshift>
 801401e:	4681      	mov	r9, r0
 8014020:	2800      	cmp	r0, #0
 8014022:	d0d8      	beq.n	8013fd6 <_strtod_l+0x74e>
 8014024:	2f00      	cmp	r7, #0
 8014026:	dd08      	ble.n	801403a <_strtod_l+0x7b2>
 8014028:	4641      	mov	r1, r8
 801402a:	9805      	ldr	r0, [sp, #20]
 801402c:	463a      	mov	r2, r7
 801402e:	f7ff f9b3 	bl	8013398 <__lshift>
 8014032:	4680      	mov	r8, r0
 8014034:	2800      	cmp	r0, #0
 8014036:	f43f ae46 	beq.w	8013cc6 <_strtod_l+0x43e>
 801403a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801403c:	9805      	ldr	r0, [sp, #20]
 801403e:	464a      	mov	r2, r9
 8014040:	f7ff fa32 	bl	80134a8 <__mdiff>
 8014044:	4604      	mov	r4, r0
 8014046:	2800      	cmp	r0, #0
 8014048:	f43f ae3d 	beq.w	8013cc6 <_strtod_l+0x43e>
 801404c:	68c3      	ldr	r3, [r0, #12]
 801404e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014050:	2300      	movs	r3, #0
 8014052:	60c3      	str	r3, [r0, #12]
 8014054:	4641      	mov	r1, r8
 8014056:	f7ff fa0b 	bl	8013470 <__mcmp>
 801405a:	2800      	cmp	r0, #0
 801405c:	da46      	bge.n	80140ec <_strtod_l+0x864>
 801405e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014060:	ea53 030a 	orrs.w	r3, r3, sl
 8014064:	d16c      	bne.n	8014140 <_strtod_l+0x8b8>
 8014066:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801406a:	2b00      	cmp	r3, #0
 801406c:	d168      	bne.n	8014140 <_strtod_l+0x8b8>
 801406e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014072:	0d1b      	lsrs	r3, r3, #20
 8014074:	051b      	lsls	r3, r3, #20
 8014076:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801407a:	d961      	bls.n	8014140 <_strtod_l+0x8b8>
 801407c:	6963      	ldr	r3, [r4, #20]
 801407e:	b913      	cbnz	r3, 8014086 <_strtod_l+0x7fe>
 8014080:	6923      	ldr	r3, [r4, #16]
 8014082:	2b01      	cmp	r3, #1
 8014084:	dd5c      	ble.n	8014140 <_strtod_l+0x8b8>
 8014086:	4621      	mov	r1, r4
 8014088:	2201      	movs	r2, #1
 801408a:	9805      	ldr	r0, [sp, #20]
 801408c:	f7ff f984 	bl	8013398 <__lshift>
 8014090:	4641      	mov	r1, r8
 8014092:	4604      	mov	r4, r0
 8014094:	f7ff f9ec 	bl	8013470 <__mcmp>
 8014098:	2800      	cmp	r0, #0
 801409a:	dd51      	ble.n	8014140 <_strtod_l+0x8b8>
 801409c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80140a0:	9a08      	ldr	r2, [sp, #32]
 80140a2:	0d1b      	lsrs	r3, r3, #20
 80140a4:	051b      	lsls	r3, r3, #20
 80140a6:	2a00      	cmp	r2, #0
 80140a8:	d06b      	beq.n	8014182 <_strtod_l+0x8fa>
 80140aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80140ae:	d868      	bhi.n	8014182 <_strtod_l+0x8fa>
 80140b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80140b4:	f67f ae9d 	bls.w	8013df2 <_strtod_l+0x56a>
 80140b8:	4b0a      	ldr	r3, [pc, #40]	@ (80140e4 <_strtod_l+0x85c>)
 80140ba:	4650      	mov	r0, sl
 80140bc:	4659      	mov	r1, fp
 80140be:	2200      	movs	r2, #0
 80140c0:	f7ec fac2 	bl	8000648 <__aeabi_dmul>
 80140c4:	4b08      	ldr	r3, [pc, #32]	@ (80140e8 <_strtod_l+0x860>)
 80140c6:	400b      	ands	r3, r1
 80140c8:	4682      	mov	sl, r0
 80140ca:	468b      	mov	fp, r1
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f47f ae05 	bne.w	8013cdc <_strtod_l+0x454>
 80140d2:	9a05      	ldr	r2, [sp, #20]
 80140d4:	2322      	movs	r3, #34	@ 0x22
 80140d6:	6013      	str	r3, [r2, #0]
 80140d8:	e600      	b.n	8013cdc <_strtod_l+0x454>
 80140da:	bf00      	nop
 80140dc:	08022ee0 	.word	0x08022ee0
 80140e0:	fffffc02 	.word	0xfffffc02
 80140e4:	39500000 	.word	0x39500000
 80140e8:	7ff00000 	.word	0x7ff00000
 80140ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80140f0:	d165      	bne.n	80141be <_strtod_l+0x936>
 80140f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80140f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140f8:	b35a      	cbz	r2, 8014152 <_strtod_l+0x8ca>
 80140fa:	4a9f      	ldr	r2, [pc, #636]	@ (8014378 <_strtod_l+0xaf0>)
 80140fc:	4293      	cmp	r3, r2
 80140fe:	d12b      	bne.n	8014158 <_strtod_l+0x8d0>
 8014100:	9b08      	ldr	r3, [sp, #32]
 8014102:	4651      	mov	r1, sl
 8014104:	b303      	cbz	r3, 8014148 <_strtod_l+0x8c0>
 8014106:	4b9d      	ldr	r3, [pc, #628]	@ (801437c <_strtod_l+0xaf4>)
 8014108:	465a      	mov	r2, fp
 801410a:	4013      	ands	r3, r2
 801410c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014110:	f04f 32ff 	mov.w	r2, #4294967295
 8014114:	d81b      	bhi.n	801414e <_strtod_l+0x8c6>
 8014116:	0d1b      	lsrs	r3, r3, #20
 8014118:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801411c:	fa02 f303 	lsl.w	r3, r2, r3
 8014120:	4299      	cmp	r1, r3
 8014122:	d119      	bne.n	8014158 <_strtod_l+0x8d0>
 8014124:	4b96      	ldr	r3, [pc, #600]	@ (8014380 <_strtod_l+0xaf8>)
 8014126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014128:	429a      	cmp	r2, r3
 801412a:	d102      	bne.n	8014132 <_strtod_l+0x8aa>
 801412c:	3101      	adds	r1, #1
 801412e:	f43f adca 	beq.w	8013cc6 <_strtod_l+0x43e>
 8014132:	4b92      	ldr	r3, [pc, #584]	@ (801437c <_strtod_l+0xaf4>)
 8014134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014136:	401a      	ands	r2, r3
 8014138:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801413c:	f04f 0a00 	mov.w	sl, #0
 8014140:	9b08      	ldr	r3, [sp, #32]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d1b8      	bne.n	80140b8 <_strtod_l+0x830>
 8014146:	e5c9      	b.n	8013cdc <_strtod_l+0x454>
 8014148:	f04f 33ff 	mov.w	r3, #4294967295
 801414c:	e7e8      	b.n	8014120 <_strtod_l+0x898>
 801414e:	4613      	mov	r3, r2
 8014150:	e7e6      	b.n	8014120 <_strtod_l+0x898>
 8014152:	ea53 030a 	orrs.w	r3, r3, sl
 8014156:	d0a1      	beq.n	801409c <_strtod_l+0x814>
 8014158:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801415a:	b1db      	cbz	r3, 8014194 <_strtod_l+0x90c>
 801415c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801415e:	4213      	tst	r3, r2
 8014160:	d0ee      	beq.n	8014140 <_strtod_l+0x8b8>
 8014162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014164:	9a08      	ldr	r2, [sp, #32]
 8014166:	4650      	mov	r0, sl
 8014168:	4659      	mov	r1, fp
 801416a:	b1bb      	cbz	r3, 801419c <_strtod_l+0x914>
 801416c:	f7ff fb6e 	bl	801384c <sulp>
 8014170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014174:	ec53 2b10 	vmov	r2, r3, d0
 8014178:	f7ec f8b0 	bl	80002dc <__adddf3>
 801417c:	4682      	mov	sl, r0
 801417e:	468b      	mov	fp, r1
 8014180:	e7de      	b.n	8014140 <_strtod_l+0x8b8>
 8014182:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014186:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801418a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801418e:	f04f 3aff 	mov.w	sl, #4294967295
 8014192:	e7d5      	b.n	8014140 <_strtod_l+0x8b8>
 8014194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014196:	ea13 0f0a 	tst.w	r3, sl
 801419a:	e7e1      	b.n	8014160 <_strtod_l+0x8d8>
 801419c:	f7ff fb56 	bl	801384c <sulp>
 80141a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141a4:	ec53 2b10 	vmov	r2, r3, d0
 80141a8:	f7ec f896 	bl	80002d8 <__aeabi_dsub>
 80141ac:	2200      	movs	r2, #0
 80141ae:	2300      	movs	r3, #0
 80141b0:	4682      	mov	sl, r0
 80141b2:	468b      	mov	fp, r1
 80141b4:	f7ec fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d0c1      	beq.n	8014140 <_strtod_l+0x8b8>
 80141bc:	e619      	b.n	8013df2 <_strtod_l+0x56a>
 80141be:	4641      	mov	r1, r8
 80141c0:	4620      	mov	r0, r4
 80141c2:	f7ff facd 	bl	8013760 <__ratio>
 80141c6:	ec57 6b10 	vmov	r6, r7, d0
 80141ca:	2200      	movs	r2, #0
 80141cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80141d0:	4630      	mov	r0, r6
 80141d2:	4639      	mov	r1, r7
 80141d4:	f7ec fcb4 	bl	8000b40 <__aeabi_dcmple>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d06f      	beq.n	80142bc <_strtod_l+0xa34>
 80141dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d17a      	bne.n	80142d8 <_strtod_l+0xa50>
 80141e2:	f1ba 0f00 	cmp.w	sl, #0
 80141e6:	d158      	bne.n	801429a <_strtod_l+0xa12>
 80141e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d15a      	bne.n	80142a8 <_strtod_l+0xa20>
 80141f2:	4b64      	ldr	r3, [pc, #400]	@ (8014384 <_strtod_l+0xafc>)
 80141f4:	2200      	movs	r2, #0
 80141f6:	4630      	mov	r0, r6
 80141f8:	4639      	mov	r1, r7
 80141fa:	f7ec fc97 	bl	8000b2c <__aeabi_dcmplt>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d159      	bne.n	80142b6 <_strtod_l+0xa2e>
 8014202:	4630      	mov	r0, r6
 8014204:	4639      	mov	r1, r7
 8014206:	4b60      	ldr	r3, [pc, #384]	@ (8014388 <_strtod_l+0xb00>)
 8014208:	2200      	movs	r2, #0
 801420a:	f7ec fa1d 	bl	8000648 <__aeabi_dmul>
 801420e:	4606      	mov	r6, r0
 8014210:	460f      	mov	r7, r1
 8014212:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014216:	9606      	str	r6, [sp, #24]
 8014218:	9307      	str	r3, [sp, #28]
 801421a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801421e:	4d57      	ldr	r5, [pc, #348]	@ (801437c <_strtod_l+0xaf4>)
 8014220:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014226:	401d      	ands	r5, r3
 8014228:	4b58      	ldr	r3, [pc, #352]	@ (801438c <_strtod_l+0xb04>)
 801422a:	429d      	cmp	r5, r3
 801422c:	f040 80b2 	bne.w	8014394 <_strtod_l+0xb0c>
 8014230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014232:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014236:	ec4b ab10 	vmov	d0, sl, fp
 801423a:	f7ff f9c9 	bl	80135d0 <__ulp>
 801423e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014242:	ec51 0b10 	vmov	r0, r1, d0
 8014246:	f7ec f9ff 	bl	8000648 <__aeabi_dmul>
 801424a:	4652      	mov	r2, sl
 801424c:	465b      	mov	r3, fp
 801424e:	f7ec f845 	bl	80002dc <__adddf3>
 8014252:	460b      	mov	r3, r1
 8014254:	4949      	ldr	r1, [pc, #292]	@ (801437c <_strtod_l+0xaf4>)
 8014256:	4a4e      	ldr	r2, [pc, #312]	@ (8014390 <_strtod_l+0xb08>)
 8014258:	4019      	ands	r1, r3
 801425a:	4291      	cmp	r1, r2
 801425c:	4682      	mov	sl, r0
 801425e:	d942      	bls.n	80142e6 <_strtod_l+0xa5e>
 8014260:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014262:	4b47      	ldr	r3, [pc, #284]	@ (8014380 <_strtod_l+0xaf8>)
 8014264:	429a      	cmp	r2, r3
 8014266:	d103      	bne.n	8014270 <_strtod_l+0x9e8>
 8014268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801426a:	3301      	adds	r3, #1
 801426c:	f43f ad2b 	beq.w	8013cc6 <_strtod_l+0x43e>
 8014270:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014380 <_strtod_l+0xaf8>
 8014274:	f04f 3aff 	mov.w	sl, #4294967295
 8014278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801427a:	9805      	ldr	r0, [sp, #20]
 801427c:	f7fe fe74 	bl	8012f68 <_Bfree>
 8014280:	9805      	ldr	r0, [sp, #20]
 8014282:	4649      	mov	r1, r9
 8014284:	f7fe fe70 	bl	8012f68 <_Bfree>
 8014288:	9805      	ldr	r0, [sp, #20]
 801428a:	4641      	mov	r1, r8
 801428c:	f7fe fe6c 	bl	8012f68 <_Bfree>
 8014290:	9805      	ldr	r0, [sp, #20]
 8014292:	4621      	mov	r1, r4
 8014294:	f7fe fe68 	bl	8012f68 <_Bfree>
 8014298:	e618      	b.n	8013ecc <_strtod_l+0x644>
 801429a:	f1ba 0f01 	cmp.w	sl, #1
 801429e:	d103      	bne.n	80142a8 <_strtod_l+0xa20>
 80142a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f43f ada5 	beq.w	8013df2 <_strtod_l+0x56a>
 80142a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014358 <_strtod_l+0xad0>
 80142ac:	4f35      	ldr	r7, [pc, #212]	@ (8014384 <_strtod_l+0xafc>)
 80142ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142b2:	2600      	movs	r6, #0
 80142b4:	e7b1      	b.n	801421a <_strtod_l+0x992>
 80142b6:	4f34      	ldr	r7, [pc, #208]	@ (8014388 <_strtod_l+0xb00>)
 80142b8:	2600      	movs	r6, #0
 80142ba:	e7aa      	b.n	8014212 <_strtod_l+0x98a>
 80142bc:	4b32      	ldr	r3, [pc, #200]	@ (8014388 <_strtod_l+0xb00>)
 80142be:	4630      	mov	r0, r6
 80142c0:	4639      	mov	r1, r7
 80142c2:	2200      	movs	r2, #0
 80142c4:	f7ec f9c0 	bl	8000648 <__aeabi_dmul>
 80142c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142ca:	4606      	mov	r6, r0
 80142cc:	460f      	mov	r7, r1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d09f      	beq.n	8014212 <_strtod_l+0x98a>
 80142d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80142d6:	e7a0      	b.n	801421a <_strtod_l+0x992>
 80142d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014360 <_strtod_l+0xad8>
 80142dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142e0:	ec57 6b17 	vmov	r6, r7, d7
 80142e4:	e799      	b.n	801421a <_strtod_l+0x992>
 80142e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80142ea:	9b08      	ldr	r3, [sp, #32]
 80142ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d1c1      	bne.n	8014278 <_strtod_l+0x9f0>
 80142f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80142f8:	0d1b      	lsrs	r3, r3, #20
 80142fa:	051b      	lsls	r3, r3, #20
 80142fc:	429d      	cmp	r5, r3
 80142fe:	d1bb      	bne.n	8014278 <_strtod_l+0x9f0>
 8014300:	4630      	mov	r0, r6
 8014302:	4639      	mov	r1, r7
 8014304:	f7ec fd00 	bl	8000d08 <__aeabi_d2lz>
 8014308:	f7ec f970 	bl	80005ec <__aeabi_l2d>
 801430c:	4602      	mov	r2, r0
 801430e:	460b      	mov	r3, r1
 8014310:	4630      	mov	r0, r6
 8014312:	4639      	mov	r1, r7
 8014314:	f7eb ffe0 	bl	80002d8 <__aeabi_dsub>
 8014318:	460b      	mov	r3, r1
 801431a:	4602      	mov	r2, r0
 801431c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014320:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014326:	ea46 060a 	orr.w	r6, r6, sl
 801432a:	431e      	orrs	r6, r3
 801432c:	d06f      	beq.n	801440e <_strtod_l+0xb86>
 801432e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014368 <_strtod_l+0xae0>)
 8014330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014334:	f7ec fbfa 	bl	8000b2c <__aeabi_dcmplt>
 8014338:	2800      	cmp	r0, #0
 801433a:	f47f accf 	bne.w	8013cdc <_strtod_l+0x454>
 801433e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014370 <_strtod_l+0xae8>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014348:	f7ec fc0e 	bl	8000b68 <__aeabi_dcmpgt>
 801434c:	2800      	cmp	r0, #0
 801434e:	d093      	beq.n	8014278 <_strtod_l+0x9f0>
 8014350:	e4c4      	b.n	8013cdc <_strtod_l+0x454>
 8014352:	bf00      	nop
 8014354:	f3af 8000 	nop.w
 8014358:	00000000 	.word	0x00000000
 801435c:	bff00000 	.word	0xbff00000
 8014360:	00000000 	.word	0x00000000
 8014364:	3ff00000 	.word	0x3ff00000
 8014368:	94a03595 	.word	0x94a03595
 801436c:	3fdfffff 	.word	0x3fdfffff
 8014370:	35afe535 	.word	0x35afe535
 8014374:	3fe00000 	.word	0x3fe00000
 8014378:	000fffff 	.word	0x000fffff
 801437c:	7ff00000 	.word	0x7ff00000
 8014380:	7fefffff 	.word	0x7fefffff
 8014384:	3ff00000 	.word	0x3ff00000
 8014388:	3fe00000 	.word	0x3fe00000
 801438c:	7fe00000 	.word	0x7fe00000
 8014390:	7c9fffff 	.word	0x7c9fffff
 8014394:	9b08      	ldr	r3, [sp, #32]
 8014396:	b323      	cbz	r3, 80143e2 <_strtod_l+0xb5a>
 8014398:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801439c:	d821      	bhi.n	80143e2 <_strtod_l+0xb5a>
 801439e:	a328      	add	r3, pc, #160	@ (adr r3, 8014440 <_strtod_l+0xbb8>)
 80143a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a4:	4630      	mov	r0, r6
 80143a6:	4639      	mov	r1, r7
 80143a8:	f7ec fbca 	bl	8000b40 <__aeabi_dcmple>
 80143ac:	b1a0      	cbz	r0, 80143d8 <_strtod_l+0xb50>
 80143ae:	4639      	mov	r1, r7
 80143b0:	4630      	mov	r0, r6
 80143b2:	f7ec fc21 	bl	8000bf8 <__aeabi_d2uiz>
 80143b6:	2801      	cmp	r0, #1
 80143b8:	bf38      	it	cc
 80143ba:	2001      	movcc	r0, #1
 80143bc:	f7ec f8ca 	bl	8000554 <__aeabi_ui2d>
 80143c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143c2:	4606      	mov	r6, r0
 80143c4:	460f      	mov	r7, r1
 80143c6:	b9fb      	cbnz	r3, 8014408 <_strtod_l+0xb80>
 80143c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80143ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80143d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80143d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80143d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80143da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80143de:	1b5b      	subs	r3, r3, r5
 80143e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80143e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80143e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80143ea:	f7ff f8f1 	bl	80135d0 <__ulp>
 80143ee:	4650      	mov	r0, sl
 80143f0:	ec53 2b10 	vmov	r2, r3, d0
 80143f4:	4659      	mov	r1, fp
 80143f6:	f7ec f927 	bl	8000648 <__aeabi_dmul>
 80143fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80143fe:	f7eb ff6d 	bl	80002dc <__adddf3>
 8014402:	4682      	mov	sl, r0
 8014404:	468b      	mov	fp, r1
 8014406:	e770      	b.n	80142ea <_strtod_l+0xa62>
 8014408:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801440c:	e7e0      	b.n	80143d0 <_strtod_l+0xb48>
 801440e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014448 <_strtod_l+0xbc0>)
 8014410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014414:	f7ec fb8a 	bl	8000b2c <__aeabi_dcmplt>
 8014418:	e798      	b.n	801434c <_strtod_l+0xac4>
 801441a:	2300      	movs	r3, #0
 801441c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801441e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014422:	6013      	str	r3, [r2, #0]
 8014424:	f7ff ba6d 	b.w	8013902 <_strtod_l+0x7a>
 8014428:	2a65      	cmp	r2, #101	@ 0x65
 801442a:	f43f ab66 	beq.w	8013afa <_strtod_l+0x272>
 801442e:	2a45      	cmp	r2, #69	@ 0x45
 8014430:	f43f ab63 	beq.w	8013afa <_strtod_l+0x272>
 8014434:	2301      	movs	r3, #1
 8014436:	f7ff bb9e 	b.w	8013b76 <_strtod_l+0x2ee>
 801443a:	bf00      	nop
 801443c:	f3af 8000 	nop.w
 8014440:	ffc00000 	.word	0xffc00000
 8014444:	41dfffff 	.word	0x41dfffff
 8014448:	94a03595 	.word	0x94a03595
 801444c:	3fcfffff 	.word	0x3fcfffff

08014450 <_strtod_r>:
 8014450:	4b01      	ldr	r3, [pc, #4]	@ (8014458 <_strtod_r+0x8>)
 8014452:	f7ff ba19 	b.w	8013888 <_strtod_l>
 8014456:	bf00      	nop
 8014458:	200003e4 	.word	0x200003e4

0801445c <_strtol_l.constprop.0>:
 801445c:	2b24      	cmp	r3, #36	@ 0x24
 801445e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014462:	4686      	mov	lr, r0
 8014464:	4690      	mov	r8, r2
 8014466:	d801      	bhi.n	801446c <_strtol_l.constprop.0+0x10>
 8014468:	2b01      	cmp	r3, #1
 801446a:	d106      	bne.n	801447a <_strtol_l.constprop.0+0x1e>
 801446c:	f7fd fdba 	bl	8011fe4 <__errno>
 8014470:	2316      	movs	r3, #22
 8014472:	6003      	str	r3, [r0, #0]
 8014474:	2000      	movs	r0, #0
 8014476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801447a:	4834      	ldr	r0, [pc, #208]	@ (801454c <_strtol_l.constprop.0+0xf0>)
 801447c:	460d      	mov	r5, r1
 801447e:	462a      	mov	r2, r5
 8014480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014484:	5d06      	ldrb	r6, [r0, r4]
 8014486:	f016 0608 	ands.w	r6, r6, #8
 801448a:	d1f8      	bne.n	801447e <_strtol_l.constprop.0+0x22>
 801448c:	2c2d      	cmp	r4, #45	@ 0x2d
 801448e:	d12d      	bne.n	80144ec <_strtol_l.constprop.0+0x90>
 8014490:	782c      	ldrb	r4, [r5, #0]
 8014492:	2601      	movs	r6, #1
 8014494:	1c95      	adds	r5, r2, #2
 8014496:	f033 0210 	bics.w	r2, r3, #16
 801449a:	d109      	bne.n	80144b0 <_strtol_l.constprop.0+0x54>
 801449c:	2c30      	cmp	r4, #48	@ 0x30
 801449e:	d12a      	bne.n	80144f6 <_strtol_l.constprop.0+0x9a>
 80144a0:	782a      	ldrb	r2, [r5, #0]
 80144a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80144a6:	2a58      	cmp	r2, #88	@ 0x58
 80144a8:	d125      	bne.n	80144f6 <_strtol_l.constprop.0+0x9a>
 80144aa:	786c      	ldrb	r4, [r5, #1]
 80144ac:	2310      	movs	r3, #16
 80144ae:	3502      	adds	r5, #2
 80144b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80144b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80144b8:	2200      	movs	r2, #0
 80144ba:	fbbc f9f3 	udiv	r9, ip, r3
 80144be:	4610      	mov	r0, r2
 80144c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80144c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80144c8:	2f09      	cmp	r7, #9
 80144ca:	d81b      	bhi.n	8014504 <_strtol_l.constprop.0+0xa8>
 80144cc:	463c      	mov	r4, r7
 80144ce:	42a3      	cmp	r3, r4
 80144d0:	dd27      	ble.n	8014522 <_strtol_l.constprop.0+0xc6>
 80144d2:	1c57      	adds	r7, r2, #1
 80144d4:	d007      	beq.n	80144e6 <_strtol_l.constprop.0+0x8a>
 80144d6:	4581      	cmp	r9, r0
 80144d8:	d320      	bcc.n	801451c <_strtol_l.constprop.0+0xc0>
 80144da:	d101      	bne.n	80144e0 <_strtol_l.constprop.0+0x84>
 80144dc:	45a2      	cmp	sl, r4
 80144de:	db1d      	blt.n	801451c <_strtol_l.constprop.0+0xc0>
 80144e0:	fb00 4003 	mla	r0, r0, r3, r4
 80144e4:	2201      	movs	r2, #1
 80144e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144ea:	e7eb      	b.n	80144c4 <_strtol_l.constprop.0+0x68>
 80144ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80144ee:	bf04      	itt	eq
 80144f0:	782c      	ldrbeq	r4, [r5, #0]
 80144f2:	1c95      	addeq	r5, r2, #2
 80144f4:	e7cf      	b.n	8014496 <_strtol_l.constprop.0+0x3a>
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d1da      	bne.n	80144b0 <_strtol_l.constprop.0+0x54>
 80144fa:	2c30      	cmp	r4, #48	@ 0x30
 80144fc:	bf0c      	ite	eq
 80144fe:	2308      	moveq	r3, #8
 8014500:	230a      	movne	r3, #10
 8014502:	e7d5      	b.n	80144b0 <_strtol_l.constprop.0+0x54>
 8014504:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014508:	2f19      	cmp	r7, #25
 801450a:	d801      	bhi.n	8014510 <_strtol_l.constprop.0+0xb4>
 801450c:	3c37      	subs	r4, #55	@ 0x37
 801450e:	e7de      	b.n	80144ce <_strtol_l.constprop.0+0x72>
 8014510:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014514:	2f19      	cmp	r7, #25
 8014516:	d804      	bhi.n	8014522 <_strtol_l.constprop.0+0xc6>
 8014518:	3c57      	subs	r4, #87	@ 0x57
 801451a:	e7d8      	b.n	80144ce <_strtol_l.constprop.0+0x72>
 801451c:	f04f 32ff 	mov.w	r2, #4294967295
 8014520:	e7e1      	b.n	80144e6 <_strtol_l.constprop.0+0x8a>
 8014522:	1c53      	adds	r3, r2, #1
 8014524:	d108      	bne.n	8014538 <_strtol_l.constprop.0+0xdc>
 8014526:	2322      	movs	r3, #34	@ 0x22
 8014528:	f8ce 3000 	str.w	r3, [lr]
 801452c:	4660      	mov	r0, ip
 801452e:	f1b8 0f00 	cmp.w	r8, #0
 8014532:	d0a0      	beq.n	8014476 <_strtol_l.constprop.0+0x1a>
 8014534:	1e69      	subs	r1, r5, #1
 8014536:	e006      	b.n	8014546 <_strtol_l.constprop.0+0xea>
 8014538:	b106      	cbz	r6, 801453c <_strtol_l.constprop.0+0xe0>
 801453a:	4240      	negs	r0, r0
 801453c:	f1b8 0f00 	cmp.w	r8, #0
 8014540:	d099      	beq.n	8014476 <_strtol_l.constprop.0+0x1a>
 8014542:	2a00      	cmp	r2, #0
 8014544:	d1f6      	bne.n	8014534 <_strtol_l.constprop.0+0xd8>
 8014546:	f8c8 1000 	str.w	r1, [r8]
 801454a:	e794      	b.n	8014476 <_strtol_l.constprop.0+0x1a>
 801454c:	08022f09 	.word	0x08022f09

08014550 <_strtol_r>:
 8014550:	f7ff bf84 	b.w	801445c <_strtol_l.constprop.0>

08014554 <__ssputs_r>:
 8014554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014558:	688e      	ldr	r6, [r1, #8]
 801455a:	461f      	mov	r7, r3
 801455c:	42be      	cmp	r6, r7
 801455e:	680b      	ldr	r3, [r1, #0]
 8014560:	4682      	mov	sl, r0
 8014562:	460c      	mov	r4, r1
 8014564:	4690      	mov	r8, r2
 8014566:	d82d      	bhi.n	80145c4 <__ssputs_r+0x70>
 8014568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801456c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014570:	d026      	beq.n	80145c0 <__ssputs_r+0x6c>
 8014572:	6965      	ldr	r5, [r4, #20]
 8014574:	6909      	ldr	r1, [r1, #16]
 8014576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801457a:	eba3 0901 	sub.w	r9, r3, r1
 801457e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014582:	1c7b      	adds	r3, r7, #1
 8014584:	444b      	add	r3, r9
 8014586:	106d      	asrs	r5, r5, #1
 8014588:	429d      	cmp	r5, r3
 801458a:	bf38      	it	cc
 801458c:	461d      	movcc	r5, r3
 801458e:	0553      	lsls	r3, r2, #21
 8014590:	d527      	bpl.n	80145e2 <__ssputs_r+0x8e>
 8014592:	4629      	mov	r1, r5
 8014594:	f7fe fc1c 	bl	8012dd0 <_malloc_r>
 8014598:	4606      	mov	r6, r0
 801459a:	b360      	cbz	r0, 80145f6 <__ssputs_r+0xa2>
 801459c:	6921      	ldr	r1, [r4, #16]
 801459e:	464a      	mov	r2, r9
 80145a0:	f000 fa9c 	bl	8014adc <memcpy>
 80145a4:	89a3      	ldrh	r3, [r4, #12]
 80145a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80145aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145ae:	81a3      	strh	r3, [r4, #12]
 80145b0:	6126      	str	r6, [r4, #16]
 80145b2:	6165      	str	r5, [r4, #20]
 80145b4:	444e      	add	r6, r9
 80145b6:	eba5 0509 	sub.w	r5, r5, r9
 80145ba:	6026      	str	r6, [r4, #0]
 80145bc:	60a5      	str	r5, [r4, #8]
 80145be:	463e      	mov	r6, r7
 80145c0:	42be      	cmp	r6, r7
 80145c2:	d900      	bls.n	80145c6 <__ssputs_r+0x72>
 80145c4:	463e      	mov	r6, r7
 80145c6:	6820      	ldr	r0, [r4, #0]
 80145c8:	4632      	mov	r2, r6
 80145ca:	4641      	mov	r1, r8
 80145cc:	f000 fa28 	bl	8014a20 <memmove>
 80145d0:	68a3      	ldr	r3, [r4, #8]
 80145d2:	1b9b      	subs	r3, r3, r6
 80145d4:	60a3      	str	r3, [r4, #8]
 80145d6:	6823      	ldr	r3, [r4, #0]
 80145d8:	4433      	add	r3, r6
 80145da:	6023      	str	r3, [r4, #0]
 80145dc:	2000      	movs	r0, #0
 80145de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e2:	462a      	mov	r2, r5
 80145e4:	f000 fe0d 	bl	8015202 <_realloc_r>
 80145e8:	4606      	mov	r6, r0
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d1e0      	bne.n	80145b0 <__ssputs_r+0x5c>
 80145ee:	6921      	ldr	r1, [r4, #16]
 80145f0:	4650      	mov	r0, sl
 80145f2:	f7fe fb79 	bl	8012ce8 <_free_r>
 80145f6:	230c      	movs	r3, #12
 80145f8:	f8ca 3000 	str.w	r3, [sl]
 80145fc:	89a3      	ldrh	r3, [r4, #12]
 80145fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	f04f 30ff 	mov.w	r0, #4294967295
 8014608:	e7e9      	b.n	80145de <__ssputs_r+0x8a>
	...

0801460c <_svfiprintf_r>:
 801460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014610:	4698      	mov	r8, r3
 8014612:	898b      	ldrh	r3, [r1, #12]
 8014614:	061b      	lsls	r3, r3, #24
 8014616:	b09d      	sub	sp, #116	@ 0x74
 8014618:	4607      	mov	r7, r0
 801461a:	460d      	mov	r5, r1
 801461c:	4614      	mov	r4, r2
 801461e:	d510      	bpl.n	8014642 <_svfiprintf_r+0x36>
 8014620:	690b      	ldr	r3, [r1, #16]
 8014622:	b973      	cbnz	r3, 8014642 <_svfiprintf_r+0x36>
 8014624:	2140      	movs	r1, #64	@ 0x40
 8014626:	f7fe fbd3 	bl	8012dd0 <_malloc_r>
 801462a:	6028      	str	r0, [r5, #0]
 801462c:	6128      	str	r0, [r5, #16]
 801462e:	b930      	cbnz	r0, 801463e <_svfiprintf_r+0x32>
 8014630:	230c      	movs	r3, #12
 8014632:	603b      	str	r3, [r7, #0]
 8014634:	f04f 30ff 	mov.w	r0, #4294967295
 8014638:	b01d      	add	sp, #116	@ 0x74
 801463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463e:	2340      	movs	r3, #64	@ 0x40
 8014640:	616b      	str	r3, [r5, #20]
 8014642:	2300      	movs	r3, #0
 8014644:	9309      	str	r3, [sp, #36]	@ 0x24
 8014646:	2320      	movs	r3, #32
 8014648:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801464c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014650:	2330      	movs	r3, #48	@ 0x30
 8014652:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80147f0 <_svfiprintf_r+0x1e4>
 8014656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801465a:	f04f 0901 	mov.w	r9, #1
 801465e:	4623      	mov	r3, r4
 8014660:	469a      	mov	sl, r3
 8014662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014666:	b10a      	cbz	r2, 801466c <_svfiprintf_r+0x60>
 8014668:	2a25      	cmp	r2, #37	@ 0x25
 801466a:	d1f9      	bne.n	8014660 <_svfiprintf_r+0x54>
 801466c:	ebba 0b04 	subs.w	fp, sl, r4
 8014670:	d00b      	beq.n	801468a <_svfiprintf_r+0x7e>
 8014672:	465b      	mov	r3, fp
 8014674:	4622      	mov	r2, r4
 8014676:	4629      	mov	r1, r5
 8014678:	4638      	mov	r0, r7
 801467a:	f7ff ff6b 	bl	8014554 <__ssputs_r>
 801467e:	3001      	adds	r0, #1
 8014680:	f000 80a7 	beq.w	80147d2 <_svfiprintf_r+0x1c6>
 8014684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014686:	445a      	add	r2, fp
 8014688:	9209      	str	r2, [sp, #36]	@ 0x24
 801468a:	f89a 3000 	ldrb.w	r3, [sl]
 801468e:	2b00      	cmp	r3, #0
 8014690:	f000 809f 	beq.w	80147d2 <_svfiprintf_r+0x1c6>
 8014694:	2300      	movs	r3, #0
 8014696:	f04f 32ff 	mov.w	r2, #4294967295
 801469a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801469e:	f10a 0a01 	add.w	sl, sl, #1
 80146a2:	9304      	str	r3, [sp, #16]
 80146a4:	9307      	str	r3, [sp, #28]
 80146a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80146ac:	4654      	mov	r4, sl
 80146ae:	2205      	movs	r2, #5
 80146b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146b4:	484e      	ldr	r0, [pc, #312]	@ (80147f0 <_svfiprintf_r+0x1e4>)
 80146b6:	f7eb fdb3 	bl	8000220 <memchr>
 80146ba:	9a04      	ldr	r2, [sp, #16]
 80146bc:	b9d8      	cbnz	r0, 80146f6 <_svfiprintf_r+0xea>
 80146be:	06d0      	lsls	r0, r2, #27
 80146c0:	bf44      	itt	mi
 80146c2:	2320      	movmi	r3, #32
 80146c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146c8:	0711      	lsls	r1, r2, #28
 80146ca:	bf44      	itt	mi
 80146cc:	232b      	movmi	r3, #43	@ 0x2b
 80146ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146d2:	f89a 3000 	ldrb.w	r3, [sl]
 80146d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80146d8:	d015      	beq.n	8014706 <_svfiprintf_r+0xfa>
 80146da:	9a07      	ldr	r2, [sp, #28]
 80146dc:	4654      	mov	r4, sl
 80146de:	2000      	movs	r0, #0
 80146e0:	f04f 0c0a 	mov.w	ip, #10
 80146e4:	4621      	mov	r1, r4
 80146e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146ea:	3b30      	subs	r3, #48	@ 0x30
 80146ec:	2b09      	cmp	r3, #9
 80146ee:	d94b      	bls.n	8014788 <_svfiprintf_r+0x17c>
 80146f0:	b1b0      	cbz	r0, 8014720 <_svfiprintf_r+0x114>
 80146f2:	9207      	str	r2, [sp, #28]
 80146f4:	e014      	b.n	8014720 <_svfiprintf_r+0x114>
 80146f6:	eba0 0308 	sub.w	r3, r0, r8
 80146fa:	fa09 f303 	lsl.w	r3, r9, r3
 80146fe:	4313      	orrs	r3, r2
 8014700:	9304      	str	r3, [sp, #16]
 8014702:	46a2      	mov	sl, r4
 8014704:	e7d2      	b.n	80146ac <_svfiprintf_r+0xa0>
 8014706:	9b03      	ldr	r3, [sp, #12]
 8014708:	1d19      	adds	r1, r3, #4
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	9103      	str	r1, [sp, #12]
 801470e:	2b00      	cmp	r3, #0
 8014710:	bfbb      	ittet	lt
 8014712:	425b      	neglt	r3, r3
 8014714:	f042 0202 	orrlt.w	r2, r2, #2
 8014718:	9307      	strge	r3, [sp, #28]
 801471a:	9307      	strlt	r3, [sp, #28]
 801471c:	bfb8      	it	lt
 801471e:	9204      	strlt	r2, [sp, #16]
 8014720:	7823      	ldrb	r3, [r4, #0]
 8014722:	2b2e      	cmp	r3, #46	@ 0x2e
 8014724:	d10a      	bne.n	801473c <_svfiprintf_r+0x130>
 8014726:	7863      	ldrb	r3, [r4, #1]
 8014728:	2b2a      	cmp	r3, #42	@ 0x2a
 801472a:	d132      	bne.n	8014792 <_svfiprintf_r+0x186>
 801472c:	9b03      	ldr	r3, [sp, #12]
 801472e:	1d1a      	adds	r2, r3, #4
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	9203      	str	r2, [sp, #12]
 8014734:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014738:	3402      	adds	r4, #2
 801473a:	9305      	str	r3, [sp, #20]
 801473c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014800 <_svfiprintf_r+0x1f4>
 8014740:	7821      	ldrb	r1, [r4, #0]
 8014742:	2203      	movs	r2, #3
 8014744:	4650      	mov	r0, sl
 8014746:	f7eb fd6b 	bl	8000220 <memchr>
 801474a:	b138      	cbz	r0, 801475c <_svfiprintf_r+0x150>
 801474c:	9b04      	ldr	r3, [sp, #16]
 801474e:	eba0 000a 	sub.w	r0, r0, sl
 8014752:	2240      	movs	r2, #64	@ 0x40
 8014754:	4082      	lsls	r2, r0
 8014756:	4313      	orrs	r3, r2
 8014758:	3401      	adds	r4, #1
 801475a:	9304      	str	r3, [sp, #16]
 801475c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014760:	4824      	ldr	r0, [pc, #144]	@ (80147f4 <_svfiprintf_r+0x1e8>)
 8014762:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014766:	2206      	movs	r2, #6
 8014768:	f7eb fd5a 	bl	8000220 <memchr>
 801476c:	2800      	cmp	r0, #0
 801476e:	d036      	beq.n	80147de <_svfiprintf_r+0x1d2>
 8014770:	4b21      	ldr	r3, [pc, #132]	@ (80147f8 <_svfiprintf_r+0x1ec>)
 8014772:	bb1b      	cbnz	r3, 80147bc <_svfiprintf_r+0x1b0>
 8014774:	9b03      	ldr	r3, [sp, #12]
 8014776:	3307      	adds	r3, #7
 8014778:	f023 0307 	bic.w	r3, r3, #7
 801477c:	3308      	adds	r3, #8
 801477e:	9303      	str	r3, [sp, #12]
 8014780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014782:	4433      	add	r3, r6
 8014784:	9309      	str	r3, [sp, #36]	@ 0x24
 8014786:	e76a      	b.n	801465e <_svfiprintf_r+0x52>
 8014788:	fb0c 3202 	mla	r2, ip, r2, r3
 801478c:	460c      	mov	r4, r1
 801478e:	2001      	movs	r0, #1
 8014790:	e7a8      	b.n	80146e4 <_svfiprintf_r+0xd8>
 8014792:	2300      	movs	r3, #0
 8014794:	3401      	adds	r4, #1
 8014796:	9305      	str	r3, [sp, #20]
 8014798:	4619      	mov	r1, r3
 801479a:	f04f 0c0a 	mov.w	ip, #10
 801479e:	4620      	mov	r0, r4
 80147a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147a4:	3a30      	subs	r2, #48	@ 0x30
 80147a6:	2a09      	cmp	r2, #9
 80147a8:	d903      	bls.n	80147b2 <_svfiprintf_r+0x1a6>
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d0c6      	beq.n	801473c <_svfiprintf_r+0x130>
 80147ae:	9105      	str	r1, [sp, #20]
 80147b0:	e7c4      	b.n	801473c <_svfiprintf_r+0x130>
 80147b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80147b6:	4604      	mov	r4, r0
 80147b8:	2301      	movs	r3, #1
 80147ba:	e7f0      	b.n	801479e <_svfiprintf_r+0x192>
 80147bc:	ab03      	add	r3, sp, #12
 80147be:	9300      	str	r3, [sp, #0]
 80147c0:	462a      	mov	r2, r5
 80147c2:	4b0e      	ldr	r3, [pc, #56]	@ (80147fc <_svfiprintf_r+0x1f0>)
 80147c4:	a904      	add	r1, sp, #16
 80147c6:	4638      	mov	r0, r7
 80147c8:	f7fc fbd6 	bl	8010f78 <_printf_float>
 80147cc:	1c42      	adds	r2, r0, #1
 80147ce:	4606      	mov	r6, r0
 80147d0:	d1d6      	bne.n	8014780 <_svfiprintf_r+0x174>
 80147d2:	89ab      	ldrh	r3, [r5, #12]
 80147d4:	065b      	lsls	r3, r3, #25
 80147d6:	f53f af2d 	bmi.w	8014634 <_svfiprintf_r+0x28>
 80147da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80147dc:	e72c      	b.n	8014638 <_svfiprintf_r+0x2c>
 80147de:	ab03      	add	r3, sp, #12
 80147e0:	9300      	str	r3, [sp, #0]
 80147e2:	462a      	mov	r2, r5
 80147e4:	4b05      	ldr	r3, [pc, #20]	@ (80147fc <_svfiprintf_r+0x1f0>)
 80147e6:	a904      	add	r1, sp, #16
 80147e8:	4638      	mov	r0, r7
 80147ea:	f7fc fe5d 	bl	80114a8 <_printf_i>
 80147ee:	e7ed      	b.n	80147cc <_svfiprintf_r+0x1c0>
 80147f0:	08023009 	.word	0x08023009
 80147f4:	08023013 	.word	0x08023013
 80147f8:	08010f79 	.word	0x08010f79
 80147fc:	08014555 	.word	0x08014555
 8014800:	0802300f 	.word	0x0802300f

08014804 <__sflush_r>:
 8014804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801480c:	0716      	lsls	r6, r2, #28
 801480e:	4605      	mov	r5, r0
 8014810:	460c      	mov	r4, r1
 8014812:	d454      	bmi.n	80148be <__sflush_r+0xba>
 8014814:	684b      	ldr	r3, [r1, #4]
 8014816:	2b00      	cmp	r3, #0
 8014818:	dc02      	bgt.n	8014820 <__sflush_r+0x1c>
 801481a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801481c:	2b00      	cmp	r3, #0
 801481e:	dd48      	ble.n	80148b2 <__sflush_r+0xae>
 8014820:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014822:	2e00      	cmp	r6, #0
 8014824:	d045      	beq.n	80148b2 <__sflush_r+0xae>
 8014826:	2300      	movs	r3, #0
 8014828:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801482c:	682f      	ldr	r7, [r5, #0]
 801482e:	6a21      	ldr	r1, [r4, #32]
 8014830:	602b      	str	r3, [r5, #0]
 8014832:	d030      	beq.n	8014896 <__sflush_r+0x92>
 8014834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014836:	89a3      	ldrh	r3, [r4, #12]
 8014838:	0759      	lsls	r1, r3, #29
 801483a:	d505      	bpl.n	8014848 <__sflush_r+0x44>
 801483c:	6863      	ldr	r3, [r4, #4]
 801483e:	1ad2      	subs	r2, r2, r3
 8014840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014842:	b10b      	cbz	r3, 8014848 <__sflush_r+0x44>
 8014844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014846:	1ad2      	subs	r2, r2, r3
 8014848:	2300      	movs	r3, #0
 801484a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801484c:	6a21      	ldr	r1, [r4, #32]
 801484e:	4628      	mov	r0, r5
 8014850:	47b0      	blx	r6
 8014852:	1c43      	adds	r3, r0, #1
 8014854:	89a3      	ldrh	r3, [r4, #12]
 8014856:	d106      	bne.n	8014866 <__sflush_r+0x62>
 8014858:	6829      	ldr	r1, [r5, #0]
 801485a:	291d      	cmp	r1, #29
 801485c:	d82b      	bhi.n	80148b6 <__sflush_r+0xb2>
 801485e:	4a2a      	ldr	r2, [pc, #168]	@ (8014908 <__sflush_r+0x104>)
 8014860:	410a      	asrs	r2, r1
 8014862:	07d6      	lsls	r6, r2, #31
 8014864:	d427      	bmi.n	80148b6 <__sflush_r+0xb2>
 8014866:	2200      	movs	r2, #0
 8014868:	6062      	str	r2, [r4, #4]
 801486a:	04d9      	lsls	r1, r3, #19
 801486c:	6922      	ldr	r2, [r4, #16]
 801486e:	6022      	str	r2, [r4, #0]
 8014870:	d504      	bpl.n	801487c <__sflush_r+0x78>
 8014872:	1c42      	adds	r2, r0, #1
 8014874:	d101      	bne.n	801487a <__sflush_r+0x76>
 8014876:	682b      	ldr	r3, [r5, #0]
 8014878:	b903      	cbnz	r3, 801487c <__sflush_r+0x78>
 801487a:	6560      	str	r0, [r4, #84]	@ 0x54
 801487c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801487e:	602f      	str	r7, [r5, #0]
 8014880:	b1b9      	cbz	r1, 80148b2 <__sflush_r+0xae>
 8014882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014886:	4299      	cmp	r1, r3
 8014888:	d002      	beq.n	8014890 <__sflush_r+0x8c>
 801488a:	4628      	mov	r0, r5
 801488c:	f7fe fa2c 	bl	8012ce8 <_free_r>
 8014890:	2300      	movs	r3, #0
 8014892:	6363      	str	r3, [r4, #52]	@ 0x34
 8014894:	e00d      	b.n	80148b2 <__sflush_r+0xae>
 8014896:	2301      	movs	r3, #1
 8014898:	4628      	mov	r0, r5
 801489a:	47b0      	blx	r6
 801489c:	4602      	mov	r2, r0
 801489e:	1c50      	adds	r0, r2, #1
 80148a0:	d1c9      	bne.n	8014836 <__sflush_r+0x32>
 80148a2:	682b      	ldr	r3, [r5, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d0c6      	beq.n	8014836 <__sflush_r+0x32>
 80148a8:	2b1d      	cmp	r3, #29
 80148aa:	d001      	beq.n	80148b0 <__sflush_r+0xac>
 80148ac:	2b16      	cmp	r3, #22
 80148ae:	d11e      	bne.n	80148ee <__sflush_r+0xea>
 80148b0:	602f      	str	r7, [r5, #0]
 80148b2:	2000      	movs	r0, #0
 80148b4:	e022      	b.n	80148fc <__sflush_r+0xf8>
 80148b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148ba:	b21b      	sxth	r3, r3
 80148bc:	e01b      	b.n	80148f6 <__sflush_r+0xf2>
 80148be:	690f      	ldr	r7, [r1, #16]
 80148c0:	2f00      	cmp	r7, #0
 80148c2:	d0f6      	beq.n	80148b2 <__sflush_r+0xae>
 80148c4:	0793      	lsls	r3, r2, #30
 80148c6:	680e      	ldr	r6, [r1, #0]
 80148c8:	bf08      	it	eq
 80148ca:	694b      	ldreq	r3, [r1, #20]
 80148cc:	600f      	str	r7, [r1, #0]
 80148ce:	bf18      	it	ne
 80148d0:	2300      	movne	r3, #0
 80148d2:	eba6 0807 	sub.w	r8, r6, r7
 80148d6:	608b      	str	r3, [r1, #8]
 80148d8:	f1b8 0f00 	cmp.w	r8, #0
 80148dc:	dde9      	ble.n	80148b2 <__sflush_r+0xae>
 80148de:	6a21      	ldr	r1, [r4, #32]
 80148e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80148e2:	4643      	mov	r3, r8
 80148e4:	463a      	mov	r2, r7
 80148e6:	4628      	mov	r0, r5
 80148e8:	47b0      	blx	r6
 80148ea:	2800      	cmp	r0, #0
 80148ec:	dc08      	bgt.n	8014900 <__sflush_r+0xfc>
 80148ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148f6:	81a3      	strh	r3, [r4, #12]
 80148f8:	f04f 30ff 	mov.w	r0, #4294967295
 80148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014900:	4407      	add	r7, r0
 8014902:	eba8 0800 	sub.w	r8, r8, r0
 8014906:	e7e7      	b.n	80148d8 <__sflush_r+0xd4>
 8014908:	dfbffffe 	.word	0xdfbffffe

0801490c <_fflush_r>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	690b      	ldr	r3, [r1, #16]
 8014910:	4605      	mov	r5, r0
 8014912:	460c      	mov	r4, r1
 8014914:	b913      	cbnz	r3, 801491c <_fflush_r+0x10>
 8014916:	2500      	movs	r5, #0
 8014918:	4628      	mov	r0, r5
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	b118      	cbz	r0, 8014926 <_fflush_r+0x1a>
 801491e:	6a03      	ldr	r3, [r0, #32]
 8014920:	b90b      	cbnz	r3, 8014926 <_fflush_r+0x1a>
 8014922:	f7fd f981 	bl	8011c28 <__sinit>
 8014926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d0f3      	beq.n	8014916 <_fflush_r+0xa>
 801492e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014930:	07d0      	lsls	r0, r2, #31
 8014932:	d404      	bmi.n	801493e <_fflush_r+0x32>
 8014934:	0599      	lsls	r1, r3, #22
 8014936:	d402      	bmi.n	801493e <_fflush_r+0x32>
 8014938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801493a:	f7fd fb7e 	bl	801203a <__retarget_lock_acquire_recursive>
 801493e:	4628      	mov	r0, r5
 8014940:	4621      	mov	r1, r4
 8014942:	f7ff ff5f 	bl	8014804 <__sflush_r>
 8014946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014948:	07da      	lsls	r2, r3, #31
 801494a:	4605      	mov	r5, r0
 801494c:	d4e4      	bmi.n	8014918 <_fflush_r+0xc>
 801494e:	89a3      	ldrh	r3, [r4, #12]
 8014950:	059b      	lsls	r3, r3, #22
 8014952:	d4e1      	bmi.n	8014918 <_fflush_r+0xc>
 8014954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014956:	f7fd fb71 	bl	801203c <__retarget_lock_release_recursive>
 801495a:	e7dd      	b.n	8014918 <_fflush_r+0xc>

0801495c <__swhatbuf_r>:
 801495c:	b570      	push	{r4, r5, r6, lr}
 801495e:	460c      	mov	r4, r1
 8014960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014964:	2900      	cmp	r1, #0
 8014966:	b096      	sub	sp, #88	@ 0x58
 8014968:	4615      	mov	r5, r2
 801496a:	461e      	mov	r6, r3
 801496c:	da0d      	bge.n	801498a <__swhatbuf_r+0x2e>
 801496e:	89a3      	ldrh	r3, [r4, #12]
 8014970:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014974:	f04f 0100 	mov.w	r1, #0
 8014978:	bf14      	ite	ne
 801497a:	2340      	movne	r3, #64	@ 0x40
 801497c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014980:	2000      	movs	r0, #0
 8014982:	6031      	str	r1, [r6, #0]
 8014984:	602b      	str	r3, [r5, #0]
 8014986:	b016      	add	sp, #88	@ 0x58
 8014988:	bd70      	pop	{r4, r5, r6, pc}
 801498a:	466a      	mov	r2, sp
 801498c:	f000 f874 	bl	8014a78 <_fstat_r>
 8014990:	2800      	cmp	r0, #0
 8014992:	dbec      	blt.n	801496e <__swhatbuf_r+0x12>
 8014994:	9901      	ldr	r1, [sp, #4]
 8014996:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801499a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801499e:	4259      	negs	r1, r3
 80149a0:	4159      	adcs	r1, r3
 80149a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80149a6:	e7eb      	b.n	8014980 <__swhatbuf_r+0x24>

080149a8 <__smakebuf_r>:
 80149a8:	898b      	ldrh	r3, [r1, #12]
 80149aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149ac:	079d      	lsls	r5, r3, #30
 80149ae:	4606      	mov	r6, r0
 80149b0:	460c      	mov	r4, r1
 80149b2:	d507      	bpl.n	80149c4 <__smakebuf_r+0x1c>
 80149b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80149b8:	6023      	str	r3, [r4, #0]
 80149ba:	6123      	str	r3, [r4, #16]
 80149bc:	2301      	movs	r3, #1
 80149be:	6163      	str	r3, [r4, #20]
 80149c0:	b003      	add	sp, #12
 80149c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c4:	ab01      	add	r3, sp, #4
 80149c6:	466a      	mov	r2, sp
 80149c8:	f7ff ffc8 	bl	801495c <__swhatbuf_r>
 80149cc:	9f00      	ldr	r7, [sp, #0]
 80149ce:	4605      	mov	r5, r0
 80149d0:	4639      	mov	r1, r7
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7fe f9fc 	bl	8012dd0 <_malloc_r>
 80149d8:	b948      	cbnz	r0, 80149ee <__smakebuf_r+0x46>
 80149da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149de:	059a      	lsls	r2, r3, #22
 80149e0:	d4ee      	bmi.n	80149c0 <__smakebuf_r+0x18>
 80149e2:	f023 0303 	bic.w	r3, r3, #3
 80149e6:	f043 0302 	orr.w	r3, r3, #2
 80149ea:	81a3      	strh	r3, [r4, #12]
 80149ec:	e7e2      	b.n	80149b4 <__smakebuf_r+0xc>
 80149ee:	89a3      	ldrh	r3, [r4, #12]
 80149f0:	6020      	str	r0, [r4, #0]
 80149f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80149f6:	81a3      	strh	r3, [r4, #12]
 80149f8:	9b01      	ldr	r3, [sp, #4]
 80149fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80149fe:	b15b      	cbz	r3, 8014a18 <__smakebuf_r+0x70>
 8014a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a04:	4630      	mov	r0, r6
 8014a06:	f000 f849 	bl	8014a9c <_isatty_r>
 8014a0a:	b128      	cbz	r0, 8014a18 <__smakebuf_r+0x70>
 8014a0c:	89a3      	ldrh	r3, [r4, #12]
 8014a0e:	f023 0303 	bic.w	r3, r3, #3
 8014a12:	f043 0301 	orr.w	r3, r3, #1
 8014a16:	81a3      	strh	r3, [r4, #12]
 8014a18:	89a3      	ldrh	r3, [r4, #12]
 8014a1a:	431d      	orrs	r5, r3
 8014a1c:	81a5      	strh	r5, [r4, #12]
 8014a1e:	e7cf      	b.n	80149c0 <__smakebuf_r+0x18>

08014a20 <memmove>:
 8014a20:	4288      	cmp	r0, r1
 8014a22:	b510      	push	{r4, lr}
 8014a24:	eb01 0402 	add.w	r4, r1, r2
 8014a28:	d902      	bls.n	8014a30 <memmove+0x10>
 8014a2a:	4284      	cmp	r4, r0
 8014a2c:	4623      	mov	r3, r4
 8014a2e:	d807      	bhi.n	8014a40 <memmove+0x20>
 8014a30:	1e43      	subs	r3, r0, #1
 8014a32:	42a1      	cmp	r1, r4
 8014a34:	d008      	beq.n	8014a48 <memmove+0x28>
 8014a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a3e:	e7f8      	b.n	8014a32 <memmove+0x12>
 8014a40:	4402      	add	r2, r0
 8014a42:	4601      	mov	r1, r0
 8014a44:	428a      	cmp	r2, r1
 8014a46:	d100      	bne.n	8014a4a <memmove+0x2a>
 8014a48:	bd10      	pop	{r4, pc}
 8014a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a52:	e7f7      	b.n	8014a44 <memmove+0x24>

08014a54 <strncmp>:
 8014a54:	b510      	push	{r4, lr}
 8014a56:	b16a      	cbz	r2, 8014a74 <strncmp+0x20>
 8014a58:	3901      	subs	r1, #1
 8014a5a:	1884      	adds	r4, r0, r2
 8014a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d103      	bne.n	8014a70 <strncmp+0x1c>
 8014a68:	42a0      	cmp	r0, r4
 8014a6a:	d001      	beq.n	8014a70 <strncmp+0x1c>
 8014a6c:	2a00      	cmp	r2, #0
 8014a6e:	d1f5      	bne.n	8014a5c <strncmp+0x8>
 8014a70:	1ad0      	subs	r0, r2, r3
 8014a72:	bd10      	pop	{r4, pc}
 8014a74:	4610      	mov	r0, r2
 8014a76:	e7fc      	b.n	8014a72 <strncmp+0x1e>

08014a78 <_fstat_r>:
 8014a78:	b538      	push	{r3, r4, r5, lr}
 8014a7a:	4d07      	ldr	r5, [pc, #28]	@ (8014a98 <_fstat_r+0x20>)
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	4604      	mov	r4, r0
 8014a80:	4608      	mov	r0, r1
 8014a82:	4611      	mov	r1, r2
 8014a84:	602b      	str	r3, [r5, #0]
 8014a86:	f7ef f8fb 	bl	8003c80 <_fstat>
 8014a8a:	1c43      	adds	r3, r0, #1
 8014a8c:	d102      	bne.n	8014a94 <_fstat_r+0x1c>
 8014a8e:	682b      	ldr	r3, [r5, #0]
 8014a90:	b103      	cbz	r3, 8014a94 <_fstat_r+0x1c>
 8014a92:	6023      	str	r3, [r4, #0]
 8014a94:	bd38      	pop	{r3, r4, r5, pc}
 8014a96:	bf00      	nop
 8014a98:	20002db4 	.word	0x20002db4

08014a9c <_isatty_r>:
 8014a9c:	b538      	push	{r3, r4, r5, lr}
 8014a9e:	4d06      	ldr	r5, [pc, #24]	@ (8014ab8 <_isatty_r+0x1c>)
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	4608      	mov	r0, r1
 8014aa6:	602b      	str	r3, [r5, #0]
 8014aa8:	f7ef f8fa 	bl	8003ca0 <_isatty>
 8014aac:	1c43      	adds	r3, r0, #1
 8014aae:	d102      	bne.n	8014ab6 <_isatty_r+0x1a>
 8014ab0:	682b      	ldr	r3, [r5, #0]
 8014ab2:	b103      	cbz	r3, 8014ab6 <_isatty_r+0x1a>
 8014ab4:	6023      	str	r3, [r4, #0]
 8014ab6:	bd38      	pop	{r3, r4, r5, pc}
 8014ab8:	20002db4 	.word	0x20002db4

08014abc <_sbrk_r>:
 8014abc:	b538      	push	{r3, r4, r5, lr}
 8014abe:	4d06      	ldr	r5, [pc, #24]	@ (8014ad8 <_sbrk_r+0x1c>)
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	4608      	mov	r0, r1
 8014ac6:	602b      	str	r3, [r5, #0]
 8014ac8:	f7ef f902 	bl	8003cd0 <_sbrk>
 8014acc:	1c43      	adds	r3, r0, #1
 8014ace:	d102      	bne.n	8014ad6 <_sbrk_r+0x1a>
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	b103      	cbz	r3, 8014ad6 <_sbrk_r+0x1a>
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	20002db4 	.word	0x20002db4

08014adc <memcpy>:
 8014adc:	440a      	add	r2, r1
 8014ade:	4291      	cmp	r1, r2
 8014ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ae4:	d100      	bne.n	8014ae8 <memcpy+0xc>
 8014ae6:	4770      	bx	lr
 8014ae8:	b510      	push	{r4, lr}
 8014aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014af2:	4291      	cmp	r1, r2
 8014af4:	d1f9      	bne.n	8014aea <memcpy+0xe>
 8014af6:	bd10      	pop	{r4, pc}

08014af8 <nan>:
 8014af8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014b00 <nan+0x8>
 8014afc:	4770      	bx	lr
 8014afe:	bf00      	nop
 8014b00:	00000000 	.word	0x00000000
 8014b04:	7ff80000 	.word	0x7ff80000

08014b08 <__assert_func>:
 8014b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b0a:	4614      	mov	r4, r2
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4b09      	ldr	r3, [pc, #36]	@ (8014b34 <__assert_func+0x2c>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4605      	mov	r5, r0
 8014b14:	68d8      	ldr	r0, [r3, #12]
 8014b16:	b954      	cbnz	r4, 8014b2e <__assert_func+0x26>
 8014b18:	4b07      	ldr	r3, [pc, #28]	@ (8014b38 <__assert_func+0x30>)
 8014b1a:	461c      	mov	r4, r3
 8014b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b20:	9100      	str	r1, [sp, #0]
 8014b22:	462b      	mov	r3, r5
 8014b24:	4905      	ldr	r1, [pc, #20]	@ (8014b3c <__assert_func+0x34>)
 8014b26:	f000 fba7 	bl	8015278 <fiprintf>
 8014b2a:	f000 fbb7 	bl	801529c <abort>
 8014b2e:	4b04      	ldr	r3, [pc, #16]	@ (8014b40 <__assert_func+0x38>)
 8014b30:	e7f4      	b.n	8014b1c <__assert_func+0x14>
 8014b32:	bf00      	nop
 8014b34:	20000394 	.word	0x20000394
 8014b38:	0802305d 	.word	0x0802305d
 8014b3c:	0802302f 	.word	0x0802302f
 8014b40:	08023022 	.word	0x08023022

08014b44 <_calloc_r>:
 8014b44:	b570      	push	{r4, r5, r6, lr}
 8014b46:	fba1 5402 	umull	r5, r4, r1, r2
 8014b4a:	b93c      	cbnz	r4, 8014b5c <_calloc_r+0x18>
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	f7fe f93f 	bl	8012dd0 <_malloc_r>
 8014b52:	4606      	mov	r6, r0
 8014b54:	b928      	cbnz	r0, 8014b62 <_calloc_r+0x1e>
 8014b56:	2600      	movs	r6, #0
 8014b58:	4630      	mov	r0, r6
 8014b5a:	bd70      	pop	{r4, r5, r6, pc}
 8014b5c:	220c      	movs	r2, #12
 8014b5e:	6002      	str	r2, [r0, #0]
 8014b60:	e7f9      	b.n	8014b56 <_calloc_r+0x12>
 8014b62:	462a      	mov	r2, r5
 8014b64:	4621      	mov	r1, r4
 8014b66:	f7fd f9eb 	bl	8011f40 <memset>
 8014b6a:	e7f5      	b.n	8014b58 <_calloc_r+0x14>

08014b6c <rshift>:
 8014b6c:	6903      	ldr	r3, [r0, #16]
 8014b6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014b72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014b7a:	f100 0414 	add.w	r4, r0, #20
 8014b7e:	dd45      	ble.n	8014c0c <rshift+0xa0>
 8014b80:	f011 011f 	ands.w	r1, r1, #31
 8014b84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014b88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014b8c:	d10c      	bne.n	8014ba8 <rshift+0x3c>
 8014b8e:	f100 0710 	add.w	r7, r0, #16
 8014b92:	4629      	mov	r1, r5
 8014b94:	42b1      	cmp	r1, r6
 8014b96:	d334      	bcc.n	8014c02 <rshift+0x96>
 8014b98:	1a9b      	subs	r3, r3, r2
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	1eea      	subs	r2, r5, #3
 8014b9e:	4296      	cmp	r6, r2
 8014ba0:	bf38      	it	cc
 8014ba2:	2300      	movcc	r3, #0
 8014ba4:	4423      	add	r3, r4
 8014ba6:	e015      	b.n	8014bd4 <rshift+0x68>
 8014ba8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014bac:	f1c1 0820 	rsb	r8, r1, #32
 8014bb0:	40cf      	lsrs	r7, r1
 8014bb2:	f105 0e04 	add.w	lr, r5, #4
 8014bb6:	46a1      	mov	r9, r4
 8014bb8:	4576      	cmp	r6, lr
 8014bba:	46f4      	mov	ip, lr
 8014bbc:	d815      	bhi.n	8014bea <rshift+0x7e>
 8014bbe:	1a9a      	subs	r2, r3, r2
 8014bc0:	0092      	lsls	r2, r2, #2
 8014bc2:	3a04      	subs	r2, #4
 8014bc4:	3501      	adds	r5, #1
 8014bc6:	42ae      	cmp	r6, r5
 8014bc8:	bf38      	it	cc
 8014bca:	2200      	movcc	r2, #0
 8014bcc:	18a3      	adds	r3, r4, r2
 8014bce:	50a7      	str	r7, [r4, r2]
 8014bd0:	b107      	cbz	r7, 8014bd4 <rshift+0x68>
 8014bd2:	3304      	adds	r3, #4
 8014bd4:	1b1a      	subs	r2, r3, r4
 8014bd6:	42a3      	cmp	r3, r4
 8014bd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014bdc:	bf08      	it	eq
 8014bde:	2300      	moveq	r3, #0
 8014be0:	6102      	str	r2, [r0, #16]
 8014be2:	bf08      	it	eq
 8014be4:	6143      	streq	r3, [r0, #20]
 8014be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bea:	f8dc c000 	ldr.w	ip, [ip]
 8014bee:	fa0c fc08 	lsl.w	ip, ip, r8
 8014bf2:	ea4c 0707 	orr.w	r7, ip, r7
 8014bf6:	f849 7b04 	str.w	r7, [r9], #4
 8014bfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014bfe:	40cf      	lsrs	r7, r1
 8014c00:	e7da      	b.n	8014bb8 <rshift+0x4c>
 8014c02:	f851 cb04 	ldr.w	ip, [r1], #4
 8014c06:	f847 cf04 	str.w	ip, [r7, #4]!
 8014c0a:	e7c3      	b.n	8014b94 <rshift+0x28>
 8014c0c:	4623      	mov	r3, r4
 8014c0e:	e7e1      	b.n	8014bd4 <rshift+0x68>

08014c10 <__hexdig_fun>:
 8014c10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014c14:	2b09      	cmp	r3, #9
 8014c16:	d802      	bhi.n	8014c1e <__hexdig_fun+0xe>
 8014c18:	3820      	subs	r0, #32
 8014c1a:	b2c0      	uxtb	r0, r0
 8014c1c:	4770      	bx	lr
 8014c1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014c22:	2b05      	cmp	r3, #5
 8014c24:	d801      	bhi.n	8014c2a <__hexdig_fun+0x1a>
 8014c26:	3847      	subs	r0, #71	@ 0x47
 8014c28:	e7f7      	b.n	8014c1a <__hexdig_fun+0xa>
 8014c2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014c2e:	2b05      	cmp	r3, #5
 8014c30:	d801      	bhi.n	8014c36 <__hexdig_fun+0x26>
 8014c32:	3827      	subs	r0, #39	@ 0x27
 8014c34:	e7f1      	b.n	8014c1a <__hexdig_fun+0xa>
 8014c36:	2000      	movs	r0, #0
 8014c38:	4770      	bx	lr
	...

08014c3c <__gethex>:
 8014c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c40:	b085      	sub	sp, #20
 8014c42:	468a      	mov	sl, r1
 8014c44:	9302      	str	r3, [sp, #8]
 8014c46:	680b      	ldr	r3, [r1, #0]
 8014c48:	9001      	str	r0, [sp, #4]
 8014c4a:	4690      	mov	r8, r2
 8014c4c:	1c9c      	adds	r4, r3, #2
 8014c4e:	46a1      	mov	r9, r4
 8014c50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014c54:	2830      	cmp	r0, #48	@ 0x30
 8014c56:	d0fa      	beq.n	8014c4e <__gethex+0x12>
 8014c58:	eba9 0303 	sub.w	r3, r9, r3
 8014c5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014c60:	f7ff ffd6 	bl	8014c10 <__hexdig_fun>
 8014c64:	4605      	mov	r5, r0
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d168      	bne.n	8014d3c <__gethex+0x100>
 8014c6a:	49a0      	ldr	r1, [pc, #640]	@ (8014eec <__gethex+0x2b0>)
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	4648      	mov	r0, r9
 8014c70:	f7ff fef0 	bl	8014a54 <strncmp>
 8014c74:	4607      	mov	r7, r0
 8014c76:	2800      	cmp	r0, #0
 8014c78:	d167      	bne.n	8014d4a <__gethex+0x10e>
 8014c7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014c7e:	4626      	mov	r6, r4
 8014c80:	f7ff ffc6 	bl	8014c10 <__hexdig_fun>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d062      	beq.n	8014d4e <__gethex+0x112>
 8014c88:	4623      	mov	r3, r4
 8014c8a:	7818      	ldrb	r0, [r3, #0]
 8014c8c:	2830      	cmp	r0, #48	@ 0x30
 8014c8e:	4699      	mov	r9, r3
 8014c90:	f103 0301 	add.w	r3, r3, #1
 8014c94:	d0f9      	beq.n	8014c8a <__gethex+0x4e>
 8014c96:	f7ff ffbb 	bl	8014c10 <__hexdig_fun>
 8014c9a:	fab0 f580 	clz	r5, r0
 8014c9e:	096d      	lsrs	r5, r5, #5
 8014ca0:	f04f 0b01 	mov.w	fp, #1
 8014ca4:	464a      	mov	r2, r9
 8014ca6:	4616      	mov	r6, r2
 8014ca8:	3201      	adds	r2, #1
 8014caa:	7830      	ldrb	r0, [r6, #0]
 8014cac:	f7ff ffb0 	bl	8014c10 <__hexdig_fun>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	d1f8      	bne.n	8014ca6 <__gethex+0x6a>
 8014cb4:	498d      	ldr	r1, [pc, #564]	@ (8014eec <__gethex+0x2b0>)
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	4630      	mov	r0, r6
 8014cba:	f7ff fecb 	bl	8014a54 <strncmp>
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	d13f      	bne.n	8014d42 <__gethex+0x106>
 8014cc2:	b944      	cbnz	r4, 8014cd6 <__gethex+0x9a>
 8014cc4:	1c74      	adds	r4, r6, #1
 8014cc6:	4622      	mov	r2, r4
 8014cc8:	4616      	mov	r6, r2
 8014cca:	3201      	adds	r2, #1
 8014ccc:	7830      	ldrb	r0, [r6, #0]
 8014cce:	f7ff ff9f 	bl	8014c10 <__hexdig_fun>
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	d1f8      	bne.n	8014cc8 <__gethex+0x8c>
 8014cd6:	1ba4      	subs	r4, r4, r6
 8014cd8:	00a7      	lsls	r7, r4, #2
 8014cda:	7833      	ldrb	r3, [r6, #0]
 8014cdc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014ce0:	2b50      	cmp	r3, #80	@ 0x50
 8014ce2:	d13e      	bne.n	8014d62 <__gethex+0x126>
 8014ce4:	7873      	ldrb	r3, [r6, #1]
 8014ce6:	2b2b      	cmp	r3, #43	@ 0x2b
 8014ce8:	d033      	beq.n	8014d52 <__gethex+0x116>
 8014cea:	2b2d      	cmp	r3, #45	@ 0x2d
 8014cec:	d034      	beq.n	8014d58 <__gethex+0x11c>
 8014cee:	1c71      	adds	r1, r6, #1
 8014cf0:	2400      	movs	r4, #0
 8014cf2:	7808      	ldrb	r0, [r1, #0]
 8014cf4:	f7ff ff8c 	bl	8014c10 <__hexdig_fun>
 8014cf8:	1e43      	subs	r3, r0, #1
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	2b18      	cmp	r3, #24
 8014cfe:	d830      	bhi.n	8014d62 <__gethex+0x126>
 8014d00:	f1a0 0210 	sub.w	r2, r0, #16
 8014d04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014d08:	f7ff ff82 	bl	8014c10 <__hexdig_fun>
 8014d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014d10:	fa5f fc8c 	uxtb.w	ip, ip
 8014d14:	f1bc 0f18 	cmp.w	ip, #24
 8014d18:	f04f 030a 	mov.w	r3, #10
 8014d1c:	d91e      	bls.n	8014d5c <__gethex+0x120>
 8014d1e:	b104      	cbz	r4, 8014d22 <__gethex+0xe6>
 8014d20:	4252      	negs	r2, r2
 8014d22:	4417      	add	r7, r2
 8014d24:	f8ca 1000 	str.w	r1, [sl]
 8014d28:	b1ed      	cbz	r5, 8014d66 <__gethex+0x12a>
 8014d2a:	f1bb 0f00 	cmp.w	fp, #0
 8014d2e:	bf0c      	ite	eq
 8014d30:	2506      	moveq	r5, #6
 8014d32:	2500      	movne	r5, #0
 8014d34:	4628      	mov	r0, r5
 8014d36:	b005      	add	sp, #20
 8014d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3c:	2500      	movs	r5, #0
 8014d3e:	462c      	mov	r4, r5
 8014d40:	e7b0      	b.n	8014ca4 <__gethex+0x68>
 8014d42:	2c00      	cmp	r4, #0
 8014d44:	d1c7      	bne.n	8014cd6 <__gethex+0x9a>
 8014d46:	4627      	mov	r7, r4
 8014d48:	e7c7      	b.n	8014cda <__gethex+0x9e>
 8014d4a:	464e      	mov	r6, r9
 8014d4c:	462f      	mov	r7, r5
 8014d4e:	2501      	movs	r5, #1
 8014d50:	e7c3      	b.n	8014cda <__gethex+0x9e>
 8014d52:	2400      	movs	r4, #0
 8014d54:	1cb1      	adds	r1, r6, #2
 8014d56:	e7cc      	b.n	8014cf2 <__gethex+0xb6>
 8014d58:	2401      	movs	r4, #1
 8014d5a:	e7fb      	b.n	8014d54 <__gethex+0x118>
 8014d5c:	fb03 0002 	mla	r0, r3, r2, r0
 8014d60:	e7ce      	b.n	8014d00 <__gethex+0xc4>
 8014d62:	4631      	mov	r1, r6
 8014d64:	e7de      	b.n	8014d24 <__gethex+0xe8>
 8014d66:	eba6 0309 	sub.w	r3, r6, r9
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	2b07      	cmp	r3, #7
 8014d70:	dc0a      	bgt.n	8014d88 <__gethex+0x14c>
 8014d72:	9801      	ldr	r0, [sp, #4]
 8014d74:	f7fe f8b8 	bl	8012ee8 <_Balloc>
 8014d78:	4604      	mov	r4, r0
 8014d7a:	b940      	cbnz	r0, 8014d8e <__gethex+0x152>
 8014d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8014ef0 <__gethex+0x2b4>)
 8014d7e:	4602      	mov	r2, r0
 8014d80:	21e4      	movs	r1, #228	@ 0xe4
 8014d82:	485c      	ldr	r0, [pc, #368]	@ (8014ef4 <__gethex+0x2b8>)
 8014d84:	f7ff fec0 	bl	8014b08 <__assert_func>
 8014d88:	3101      	adds	r1, #1
 8014d8a:	105b      	asrs	r3, r3, #1
 8014d8c:	e7ef      	b.n	8014d6e <__gethex+0x132>
 8014d8e:	f100 0a14 	add.w	sl, r0, #20
 8014d92:	2300      	movs	r3, #0
 8014d94:	4655      	mov	r5, sl
 8014d96:	469b      	mov	fp, r3
 8014d98:	45b1      	cmp	r9, r6
 8014d9a:	d337      	bcc.n	8014e0c <__gethex+0x1d0>
 8014d9c:	f845 bb04 	str.w	fp, [r5], #4
 8014da0:	eba5 050a 	sub.w	r5, r5, sl
 8014da4:	10ad      	asrs	r5, r5, #2
 8014da6:	6125      	str	r5, [r4, #16]
 8014da8:	4658      	mov	r0, fp
 8014daa:	f7fe f98f 	bl	80130cc <__hi0bits>
 8014dae:	016d      	lsls	r5, r5, #5
 8014db0:	f8d8 6000 	ldr.w	r6, [r8]
 8014db4:	1a2d      	subs	r5, r5, r0
 8014db6:	42b5      	cmp	r5, r6
 8014db8:	dd54      	ble.n	8014e64 <__gethex+0x228>
 8014dba:	1bad      	subs	r5, r5, r6
 8014dbc:	4629      	mov	r1, r5
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	f7fe fd23 	bl	801380a <__any_on>
 8014dc4:	4681      	mov	r9, r0
 8014dc6:	b178      	cbz	r0, 8014de8 <__gethex+0x1ac>
 8014dc8:	1e6b      	subs	r3, r5, #1
 8014dca:	1159      	asrs	r1, r3, #5
 8014dcc:	f003 021f 	and.w	r2, r3, #31
 8014dd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014dd4:	f04f 0901 	mov.w	r9, #1
 8014dd8:	fa09 f202 	lsl.w	r2, r9, r2
 8014ddc:	420a      	tst	r2, r1
 8014dde:	d003      	beq.n	8014de8 <__gethex+0x1ac>
 8014de0:	454b      	cmp	r3, r9
 8014de2:	dc36      	bgt.n	8014e52 <__gethex+0x216>
 8014de4:	f04f 0902 	mov.w	r9, #2
 8014de8:	4629      	mov	r1, r5
 8014dea:	4620      	mov	r0, r4
 8014dec:	f7ff febe 	bl	8014b6c <rshift>
 8014df0:	442f      	add	r7, r5
 8014df2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014df6:	42bb      	cmp	r3, r7
 8014df8:	da42      	bge.n	8014e80 <__gethex+0x244>
 8014dfa:	9801      	ldr	r0, [sp, #4]
 8014dfc:	4621      	mov	r1, r4
 8014dfe:	f7fe f8b3 	bl	8012f68 <_Bfree>
 8014e02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e04:	2300      	movs	r3, #0
 8014e06:	6013      	str	r3, [r2, #0]
 8014e08:	25a3      	movs	r5, #163	@ 0xa3
 8014e0a:	e793      	b.n	8014d34 <__gethex+0xf8>
 8014e0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014e10:	2a2e      	cmp	r2, #46	@ 0x2e
 8014e12:	d012      	beq.n	8014e3a <__gethex+0x1fe>
 8014e14:	2b20      	cmp	r3, #32
 8014e16:	d104      	bne.n	8014e22 <__gethex+0x1e6>
 8014e18:	f845 bb04 	str.w	fp, [r5], #4
 8014e1c:	f04f 0b00 	mov.w	fp, #0
 8014e20:	465b      	mov	r3, fp
 8014e22:	7830      	ldrb	r0, [r6, #0]
 8014e24:	9303      	str	r3, [sp, #12]
 8014e26:	f7ff fef3 	bl	8014c10 <__hexdig_fun>
 8014e2a:	9b03      	ldr	r3, [sp, #12]
 8014e2c:	f000 000f 	and.w	r0, r0, #15
 8014e30:	4098      	lsls	r0, r3
 8014e32:	ea4b 0b00 	orr.w	fp, fp, r0
 8014e36:	3304      	adds	r3, #4
 8014e38:	e7ae      	b.n	8014d98 <__gethex+0x15c>
 8014e3a:	45b1      	cmp	r9, r6
 8014e3c:	d8ea      	bhi.n	8014e14 <__gethex+0x1d8>
 8014e3e:	492b      	ldr	r1, [pc, #172]	@ (8014eec <__gethex+0x2b0>)
 8014e40:	9303      	str	r3, [sp, #12]
 8014e42:	2201      	movs	r2, #1
 8014e44:	4630      	mov	r0, r6
 8014e46:	f7ff fe05 	bl	8014a54 <strncmp>
 8014e4a:	9b03      	ldr	r3, [sp, #12]
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	d1e1      	bne.n	8014e14 <__gethex+0x1d8>
 8014e50:	e7a2      	b.n	8014d98 <__gethex+0x15c>
 8014e52:	1ea9      	subs	r1, r5, #2
 8014e54:	4620      	mov	r0, r4
 8014e56:	f7fe fcd8 	bl	801380a <__any_on>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	d0c2      	beq.n	8014de4 <__gethex+0x1a8>
 8014e5e:	f04f 0903 	mov.w	r9, #3
 8014e62:	e7c1      	b.n	8014de8 <__gethex+0x1ac>
 8014e64:	da09      	bge.n	8014e7a <__gethex+0x23e>
 8014e66:	1b75      	subs	r5, r6, r5
 8014e68:	4621      	mov	r1, r4
 8014e6a:	9801      	ldr	r0, [sp, #4]
 8014e6c:	462a      	mov	r2, r5
 8014e6e:	f7fe fa93 	bl	8013398 <__lshift>
 8014e72:	1b7f      	subs	r7, r7, r5
 8014e74:	4604      	mov	r4, r0
 8014e76:	f100 0a14 	add.w	sl, r0, #20
 8014e7a:	f04f 0900 	mov.w	r9, #0
 8014e7e:	e7b8      	b.n	8014df2 <__gethex+0x1b6>
 8014e80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014e84:	42bd      	cmp	r5, r7
 8014e86:	dd6f      	ble.n	8014f68 <__gethex+0x32c>
 8014e88:	1bed      	subs	r5, r5, r7
 8014e8a:	42ae      	cmp	r6, r5
 8014e8c:	dc34      	bgt.n	8014ef8 <__gethex+0x2bc>
 8014e8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014e92:	2b02      	cmp	r3, #2
 8014e94:	d022      	beq.n	8014edc <__gethex+0x2a0>
 8014e96:	2b03      	cmp	r3, #3
 8014e98:	d024      	beq.n	8014ee4 <__gethex+0x2a8>
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	d115      	bne.n	8014eca <__gethex+0x28e>
 8014e9e:	42ae      	cmp	r6, r5
 8014ea0:	d113      	bne.n	8014eca <__gethex+0x28e>
 8014ea2:	2e01      	cmp	r6, #1
 8014ea4:	d10b      	bne.n	8014ebe <__gethex+0x282>
 8014ea6:	9a02      	ldr	r2, [sp, #8]
 8014ea8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014eac:	6013      	str	r3, [r2, #0]
 8014eae:	2301      	movs	r3, #1
 8014eb0:	6123      	str	r3, [r4, #16]
 8014eb2:	f8ca 3000 	str.w	r3, [sl]
 8014eb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eb8:	2562      	movs	r5, #98	@ 0x62
 8014eba:	601c      	str	r4, [r3, #0]
 8014ebc:	e73a      	b.n	8014d34 <__gethex+0xf8>
 8014ebe:	1e71      	subs	r1, r6, #1
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f7fe fca2 	bl	801380a <__any_on>
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d1ed      	bne.n	8014ea6 <__gethex+0x26a>
 8014eca:	9801      	ldr	r0, [sp, #4]
 8014ecc:	4621      	mov	r1, r4
 8014ece:	f7fe f84b 	bl	8012f68 <_Bfree>
 8014ed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	6013      	str	r3, [r2, #0]
 8014ed8:	2550      	movs	r5, #80	@ 0x50
 8014eda:	e72b      	b.n	8014d34 <__gethex+0xf8>
 8014edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d1f3      	bne.n	8014eca <__gethex+0x28e>
 8014ee2:	e7e0      	b.n	8014ea6 <__gethex+0x26a>
 8014ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d1dd      	bne.n	8014ea6 <__gethex+0x26a>
 8014eea:	e7ee      	b.n	8014eca <__gethex+0x28e>
 8014eec:	08022eb0 	.word	0x08022eb0
 8014ef0:	08022d49 	.word	0x08022d49
 8014ef4:	0802305e 	.word	0x0802305e
 8014ef8:	1e6f      	subs	r7, r5, #1
 8014efa:	f1b9 0f00 	cmp.w	r9, #0
 8014efe:	d130      	bne.n	8014f62 <__gethex+0x326>
 8014f00:	b127      	cbz	r7, 8014f0c <__gethex+0x2d0>
 8014f02:	4639      	mov	r1, r7
 8014f04:	4620      	mov	r0, r4
 8014f06:	f7fe fc80 	bl	801380a <__any_on>
 8014f0a:	4681      	mov	r9, r0
 8014f0c:	117a      	asrs	r2, r7, #5
 8014f0e:	2301      	movs	r3, #1
 8014f10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014f14:	f007 071f 	and.w	r7, r7, #31
 8014f18:	40bb      	lsls	r3, r7
 8014f1a:	4213      	tst	r3, r2
 8014f1c:	4629      	mov	r1, r5
 8014f1e:	4620      	mov	r0, r4
 8014f20:	bf18      	it	ne
 8014f22:	f049 0902 	orrne.w	r9, r9, #2
 8014f26:	f7ff fe21 	bl	8014b6c <rshift>
 8014f2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014f2e:	1b76      	subs	r6, r6, r5
 8014f30:	2502      	movs	r5, #2
 8014f32:	f1b9 0f00 	cmp.w	r9, #0
 8014f36:	d047      	beq.n	8014fc8 <__gethex+0x38c>
 8014f38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	d015      	beq.n	8014f6c <__gethex+0x330>
 8014f40:	2b03      	cmp	r3, #3
 8014f42:	d017      	beq.n	8014f74 <__gethex+0x338>
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	d109      	bne.n	8014f5c <__gethex+0x320>
 8014f48:	f019 0f02 	tst.w	r9, #2
 8014f4c:	d006      	beq.n	8014f5c <__gethex+0x320>
 8014f4e:	f8da 3000 	ldr.w	r3, [sl]
 8014f52:	ea49 0903 	orr.w	r9, r9, r3
 8014f56:	f019 0f01 	tst.w	r9, #1
 8014f5a:	d10e      	bne.n	8014f7a <__gethex+0x33e>
 8014f5c:	f045 0510 	orr.w	r5, r5, #16
 8014f60:	e032      	b.n	8014fc8 <__gethex+0x38c>
 8014f62:	f04f 0901 	mov.w	r9, #1
 8014f66:	e7d1      	b.n	8014f0c <__gethex+0x2d0>
 8014f68:	2501      	movs	r5, #1
 8014f6a:	e7e2      	b.n	8014f32 <__gethex+0x2f6>
 8014f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f6e:	f1c3 0301 	rsb	r3, r3, #1
 8014f72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d0f0      	beq.n	8014f5c <__gethex+0x320>
 8014f7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014f7e:	f104 0314 	add.w	r3, r4, #20
 8014f82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014f86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014f8a:	f04f 0c00 	mov.w	ip, #0
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014f98:	d01b      	beq.n	8014fd2 <__gethex+0x396>
 8014f9a:	3201      	adds	r2, #1
 8014f9c:	6002      	str	r2, [r0, #0]
 8014f9e:	2d02      	cmp	r5, #2
 8014fa0:	f104 0314 	add.w	r3, r4, #20
 8014fa4:	d13c      	bne.n	8015020 <__gethex+0x3e4>
 8014fa6:	f8d8 2000 	ldr.w	r2, [r8]
 8014faa:	3a01      	subs	r2, #1
 8014fac:	42b2      	cmp	r2, r6
 8014fae:	d109      	bne.n	8014fc4 <__gethex+0x388>
 8014fb0:	1171      	asrs	r1, r6, #5
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014fb8:	f006 061f 	and.w	r6, r6, #31
 8014fbc:	fa02 f606 	lsl.w	r6, r2, r6
 8014fc0:	421e      	tst	r6, r3
 8014fc2:	d13a      	bne.n	801503a <__gethex+0x3fe>
 8014fc4:	f045 0520 	orr.w	r5, r5, #32
 8014fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fca:	601c      	str	r4, [r3, #0]
 8014fcc:	9b02      	ldr	r3, [sp, #8]
 8014fce:	601f      	str	r7, [r3, #0]
 8014fd0:	e6b0      	b.n	8014d34 <__gethex+0xf8>
 8014fd2:	4299      	cmp	r1, r3
 8014fd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8014fd8:	d8d9      	bhi.n	8014f8e <__gethex+0x352>
 8014fda:	68a3      	ldr	r3, [r4, #8]
 8014fdc:	459b      	cmp	fp, r3
 8014fde:	db17      	blt.n	8015010 <__gethex+0x3d4>
 8014fe0:	6861      	ldr	r1, [r4, #4]
 8014fe2:	9801      	ldr	r0, [sp, #4]
 8014fe4:	3101      	adds	r1, #1
 8014fe6:	f7fd ff7f 	bl	8012ee8 <_Balloc>
 8014fea:	4681      	mov	r9, r0
 8014fec:	b918      	cbnz	r0, 8014ff6 <__gethex+0x3ba>
 8014fee:	4b1a      	ldr	r3, [pc, #104]	@ (8015058 <__gethex+0x41c>)
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	2184      	movs	r1, #132	@ 0x84
 8014ff4:	e6c5      	b.n	8014d82 <__gethex+0x146>
 8014ff6:	6922      	ldr	r2, [r4, #16]
 8014ff8:	3202      	adds	r2, #2
 8014ffa:	f104 010c 	add.w	r1, r4, #12
 8014ffe:	0092      	lsls	r2, r2, #2
 8015000:	300c      	adds	r0, #12
 8015002:	f7ff fd6b 	bl	8014adc <memcpy>
 8015006:	4621      	mov	r1, r4
 8015008:	9801      	ldr	r0, [sp, #4]
 801500a:	f7fd ffad 	bl	8012f68 <_Bfree>
 801500e:	464c      	mov	r4, r9
 8015010:	6923      	ldr	r3, [r4, #16]
 8015012:	1c5a      	adds	r2, r3, #1
 8015014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015018:	6122      	str	r2, [r4, #16]
 801501a:	2201      	movs	r2, #1
 801501c:	615a      	str	r2, [r3, #20]
 801501e:	e7be      	b.n	8014f9e <__gethex+0x362>
 8015020:	6922      	ldr	r2, [r4, #16]
 8015022:	455a      	cmp	r2, fp
 8015024:	dd0b      	ble.n	801503e <__gethex+0x402>
 8015026:	2101      	movs	r1, #1
 8015028:	4620      	mov	r0, r4
 801502a:	f7ff fd9f 	bl	8014b6c <rshift>
 801502e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015032:	3701      	adds	r7, #1
 8015034:	42bb      	cmp	r3, r7
 8015036:	f6ff aee0 	blt.w	8014dfa <__gethex+0x1be>
 801503a:	2501      	movs	r5, #1
 801503c:	e7c2      	b.n	8014fc4 <__gethex+0x388>
 801503e:	f016 061f 	ands.w	r6, r6, #31
 8015042:	d0fa      	beq.n	801503a <__gethex+0x3fe>
 8015044:	4453      	add	r3, sl
 8015046:	f1c6 0620 	rsb	r6, r6, #32
 801504a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801504e:	f7fe f83d 	bl	80130cc <__hi0bits>
 8015052:	42b0      	cmp	r0, r6
 8015054:	dbe7      	blt.n	8015026 <__gethex+0x3ea>
 8015056:	e7f0      	b.n	801503a <__gethex+0x3fe>
 8015058:	08022d49 	.word	0x08022d49

0801505c <L_shift>:
 801505c:	f1c2 0208 	rsb	r2, r2, #8
 8015060:	0092      	lsls	r2, r2, #2
 8015062:	b570      	push	{r4, r5, r6, lr}
 8015064:	f1c2 0620 	rsb	r6, r2, #32
 8015068:	6843      	ldr	r3, [r0, #4]
 801506a:	6804      	ldr	r4, [r0, #0]
 801506c:	fa03 f506 	lsl.w	r5, r3, r6
 8015070:	432c      	orrs	r4, r5
 8015072:	40d3      	lsrs	r3, r2
 8015074:	6004      	str	r4, [r0, #0]
 8015076:	f840 3f04 	str.w	r3, [r0, #4]!
 801507a:	4288      	cmp	r0, r1
 801507c:	d3f4      	bcc.n	8015068 <L_shift+0xc>
 801507e:	bd70      	pop	{r4, r5, r6, pc}

08015080 <__match>:
 8015080:	b530      	push	{r4, r5, lr}
 8015082:	6803      	ldr	r3, [r0, #0]
 8015084:	3301      	adds	r3, #1
 8015086:	f811 4b01 	ldrb.w	r4, [r1], #1
 801508a:	b914      	cbnz	r4, 8015092 <__match+0x12>
 801508c:	6003      	str	r3, [r0, #0]
 801508e:	2001      	movs	r0, #1
 8015090:	bd30      	pop	{r4, r5, pc}
 8015092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015096:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801509a:	2d19      	cmp	r5, #25
 801509c:	bf98      	it	ls
 801509e:	3220      	addls	r2, #32
 80150a0:	42a2      	cmp	r2, r4
 80150a2:	d0f0      	beq.n	8015086 <__match+0x6>
 80150a4:	2000      	movs	r0, #0
 80150a6:	e7f3      	b.n	8015090 <__match+0x10>

080150a8 <__hexnan>:
 80150a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ac:	680b      	ldr	r3, [r1, #0]
 80150ae:	6801      	ldr	r1, [r0, #0]
 80150b0:	115e      	asrs	r6, r3, #5
 80150b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80150b6:	f013 031f 	ands.w	r3, r3, #31
 80150ba:	b087      	sub	sp, #28
 80150bc:	bf18      	it	ne
 80150be:	3604      	addne	r6, #4
 80150c0:	2500      	movs	r5, #0
 80150c2:	1f37      	subs	r7, r6, #4
 80150c4:	4682      	mov	sl, r0
 80150c6:	4690      	mov	r8, r2
 80150c8:	9301      	str	r3, [sp, #4]
 80150ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80150ce:	46b9      	mov	r9, r7
 80150d0:	463c      	mov	r4, r7
 80150d2:	9502      	str	r5, [sp, #8]
 80150d4:	46ab      	mov	fp, r5
 80150d6:	784a      	ldrb	r2, [r1, #1]
 80150d8:	1c4b      	adds	r3, r1, #1
 80150da:	9303      	str	r3, [sp, #12]
 80150dc:	b342      	cbz	r2, 8015130 <__hexnan+0x88>
 80150de:	4610      	mov	r0, r2
 80150e0:	9105      	str	r1, [sp, #20]
 80150e2:	9204      	str	r2, [sp, #16]
 80150e4:	f7ff fd94 	bl	8014c10 <__hexdig_fun>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d151      	bne.n	8015190 <__hexnan+0xe8>
 80150ec:	9a04      	ldr	r2, [sp, #16]
 80150ee:	9905      	ldr	r1, [sp, #20]
 80150f0:	2a20      	cmp	r2, #32
 80150f2:	d818      	bhi.n	8015126 <__hexnan+0x7e>
 80150f4:	9b02      	ldr	r3, [sp, #8]
 80150f6:	459b      	cmp	fp, r3
 80150f8:	dd13      	ble.n	8015122 <__hexnan+0x7a>
 80150fa:	454c      	cmp	r4, r9
 80150fc:	d206      	bcs.n	801510c <__hexnan+0x64>
 80150fe:	2d07      	cmp	r5, #7
 8015100:	dc04      	bgt.n	801510c <__hexnan+0x64>
 8015102:	462a      	mov	r2, r5
 8015104:	4649      	mov	r1, r9
 8015106:	4620      	mov	r0, r4
 8015108:	f7ff ffa8 	bl	801505c <L_shift>
 801510c:	4544      	cmp	r4, r8
 801510e:	d952      	bls.n	80151b6 <__hexnan+0x10e>
 8015110:	2300      	movs	r3, #0
 8015112:	f1a4 0904 	sub.w	r9, r4, #4
 8015116:	f844 3c04 	str.w	r3, [r4, #-4]
 801511a:	f8cd b008 	str.w	fp, [sp, #8]
 801511e:	464c      	mov	r4, r9
 8015120:	461d      	mov	r5, r3
 8015122:	9903      	ldr	r1, [sp, #12]
 8015124:	e7d7      	b.n	80150d6 <__hexnan+0x2e>
 8015126:	2a29      	cmp	r2, #41	@ 0x29
 8015128:	d157      	bne.n	80151da <__hexnan+0x132>
 801512a:	3102      	adds	r1, #2
 801512c:	f8ca 1000 	str.w	r1, [sl]
 8015130:	f1bb 0f00 	cmp.w	fp, #0
 8015134:	d051      	beq.n	80151da <__hexnan+0x132>
 8015136:	454c      	cmp	r4, r9
 8015138:	d206      	bcs.n	8015148 <__hexnan+0xa0>
 801513a:	2d07      	cmp	r5, #7
 801513c:	dc04      	bgt.n	8015148 <__hexnan+0xa0>
 801513e:	462a      	mov	r2, r5
 8015140:	4649      	mov	r1, r9
 8015142:	4620      	mov	r0, r4
 8015144:	f7ff ff8a 	bl	801505c <L_shift>
 8015148:	4544      	cmp	r4, r8
 801514a:	d936      	bls.n	80151ba <__hexnan+0x112>
 801514c:	f1a8 0204 	sub.w	r2, r8, #4
 8015150:	4623      	mov	r3, r4
 8015152:	f853 1b04 	ldr.w	r1, [r3], #4
 8015156:	f842 1f04 	str.w	r1, [r2, #4]!
 801515a:	429f      	cmp	r7, r3
 801515c:	d2f9      	bcs.n	8015152 <__hexnan+0xaa>
 801515e:	1b3b      	subs	r3, r7, r4
 8015160:	f023 0303 	bic.w	r3, r3, #3
 8015164:	3304      	adds	r3, #4
 8015166:	3401      	adds	r4, #1
 8015168:	3e03      	subs	r6, #3
 801516a:	42b4      	cmp	r4, r6
 801516c:	bf88      	it	hi
 801516e:	2304      	movhi	r3, #4
 8015170:	4443      	add	r3, r8
 8015172:	2200      	movs	r2, #0
 8015174:	f843 2b04 	str.w	r2, [r3], #4
 8015178:	429f      	cmp	r7, r3
 801517a:	d2fb      	bcs.n	8015174 <__hexnan+0xcc>
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	b91b      	cbnz	r3, 8015188 <__hexnan+0xe0>
 8015180:	4547      	cmp	r7, r8
 8015182:	d128      	bne.n	80151d6 <__hexnan+0x12e>
 8015184:	2301      	movs	r3, #1
 8015186:	603b      	str	r3, [r7, #0]
 8015188:	2005      	movs	r0, #5
 801518a:	b007      	add	sp, #28
 801518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015190:	3501      	adds	r5, #1
 8015192:	2d08      	cmp	r5, #8
 8015194:	f10b 0b01 	add.w	fp, fp, #1
 8015198:	dd06      	ble.n	80151a8 <__hexnan+0x100>
 801519a:	4544      	cmp	r4, r8
 801519c:	d9c1      	bls.n	8015122 <__hexnan+0x7a>
 801519e:	2300      	movs	r3, #0
 80151a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80151a4:	2501      	movs	r5, #1
 80151a6:	3c04      	subs	r4, #4
 80151a8:	6822      	ldr	r2, [r4, #0]
 80151aa:	f000 000f 	and.w	r0, r0, #15
 80151ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80151b2:	6020      	str	r0, [r4, #0]
 80151b4:	e7b5      	b.n	8015122 <__hexnan+0x7a>
 80151b6:	2508      	movs	r5, #8
 80151b8:	e7b3      	b.n	8015122 <__hexnan+0x7a>
 80151ba:	9b01      	ldr	r3, [sp, #4]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d0dd      	beq.n	801517c <__hexnan+0xd4>
 80151c0:	f1c3 0320 	rsb	r3, r3, #32
 80151c4:	f04f 32ff 	mov.w	r2, #4294967295
 80151c8:	40da      	lsrs	r2, r3
 80151ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80151ce:	4013      	ands	r3, r2
 80151d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80151d4:	e7d2      	b.n	801517c <__hexnan+0xd4>
 80151d6:	3f04      	subs	r7, #4
 80151d8:	e7d0      	b.n	801517c <__hexnan+0xd4>
 80151da:	2004      	movs	r0, #4
 80151dc:	e7d5      	b.n	801518a <__hexnan+0xe2>

080151de <__ascii_mbtowc>:
 80151de:	b082      	sub	sp, #8
 80151e0:	b901      	cbnz	r1, 80151e4 <__ascii_mbtowc+0x6>
 80151e2:	a901      	add	r1, sp, #4
 80151e4:	b142      	cbz	r2, 80151f8 <__ascii_mbtowc+0x1a>
 80151e6:	b14b      	cbz	r3, 80151fc <__ascii_mbtowc+0x1e>
 80151e8:	7813      	ldrb	r3, [r2, #0]
 80151ea:	600b      	str	r3, [r1, #0]
 80151ec:	7812      	ldrb	r2, [r2, #0]
 80151ee:	1e10      	subs	r0, r2, #0
 80151f0:	bf18      	it	ne
 80151f2:	2001      	movne	r0, #1
 80151f4:	b002      	add	sp, #8
 80151f6:	4770      	bx	lr
 80151f8:	4610      	mov	r0, r2
 80151fa:	e7fb      	b.n	80151f4 <__ascii_mbtowc+0x16>
 80151fc:	f06f 0001 	mvn.w	r0, #1
 8015200:	e7f8      	b.n	80151f4 <__ascii_mbtowc+0x16>

08015202 <_realloc_r>:
 8015202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015206:	4680      	mov	r8, r0
 8015208:	4615      	mov	r5, r2
 801520a:	460c      	mov	r4, r1
 801520c:	b921      	cbnz	r1, 8015218 <_realloc_r+0x16>
 801520e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015212:	4611      	mov	r1, r2
 8015214:	f7fd bddc 	b.w	8012dd0 <_malloc_r>
 8015218:	b92a      	cbnz	r2, 8015226 <_realloc_r+0x24>
 801521a:	f7fd fd65 	bl	8012ce8 <_free_r>
 801521e:	2400      	movs	r4, #0
 8015220:	4620      	mov	r0, r4
 8015222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015226:	f000 f840 	bl	80152aa <_malloc_usable_size_r>
 801522a:	4285      	cmp	r5, r0
 801522c:	4606      	mov	r6, r0
 801522e:	d802      	bhi.n	8015236 <_realloc_r+0x34>
 8015230:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015234:	d8f4      	bhi.n	8015220 <_realloc_r+0x1e>
 8015236:	4629      	mov	r1, r5
 8015238:	4640      	mov	r0, r8
 801523a:	f7fd fdc9 	bl	8012dd0 <_malloc_r>
 801523e:	4607      	mov	r7, r0
 8015240:	2800      	cmp	r0, #0
 8015242:	d0ec      	beq.n	801521e <_realloc_r+0x1c>
 8015244:	42b5      	cmp	r5, r6
 8015246:	462a      	mov	r2, r5
 8015248:	4621      	mov	r1, r4
 801524a:	bf28      	it	cs
 801524c:	4632      	movcs	r2, r6
 801524e:	f7ff fc45 	bl	8014adc <memcpy>
 8015252:	4621      	mov	r1, r4
 8015254:	4640      	mov	r0, r8
 8015256:	f7fd fd47 	bl	8012ce8 <_free_r>
 801525a:	463c      	mov	r4, r7
 801525c:	e7e0      	b.n	8015220 <_realloc_r+0x1e>

0801525e <__ascii_wctomb>:
 801525e:	4603      	mov	r3, r0
 8015260:	4608      	mov	r0, r1
 8015262:	b141      	cbz	r1, 8015276 <__ascii_wctomb+0x18>
 8015264:	2aff      	cmp	r2, #255	@ 0xff
 8015266:	d904      	bls.n	8015272 <__ascii_wctomb+0x14>
 8015268:	228a      	movs	r2, #138	@ 0x8a
 801526a:	601a      	str	r2, [r3, #0]
 801526c:	f04f 30ff 	mov.w	r0, #4294967295
 8015270:	4770      	bx	lr
 8015272:	700a      	strb	r2, [r1, #0]
 8015274:	2001      	movs	r0, #1
 8015276:	4770      	bx	lr

08015278 <fiprintf>:
 8015278:	b40e      	push	{r1, r2, r3}
 801527a:	b503      	push	{r0, r1, lr}
 801527c:	4601      	mov	r1, r0
 801527e:	ab03      	add	r3, sp, #12
 8015280:	4805      	ldr	r0, [pc, #20]	@ (8015298 <fiprintf+0x20>)
 8015282:	f853 2b04 	ldr.w	r2, [r3], #4
 8015286:	6800      	ldr	r0, [r0, #0]
 8015288:	9301      	str	r3, [sp, #4]
 801528a:	f000 f83f 	bl	801530c <_vfiprintf_r>
 801528e:	b002      	add	sp, #8
 8015290:	f85d eb04 	ldr.w	lr, [sp], #4
 8015294:	b003      	add	sp, #12
 8015296:	4770      	bx	lr
 8015298:	20000394 	.word	0x20000394

0801529c <abort>:
 801529c:	b508      	push	{r3, lr}
 801529e:	2006      	movs	r0, #6
 80152a0:	f000 f974 	bl	801558c <raise>
 80152a4:	2001      	movs	r0, #1
 80152a6:	f7ee fc9b 	bl	8003be0 <_exit>

080152aa <_malloc_usable_size_r>:
 80152aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152ae:	1f18      	subs	r0, r3, #4
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	bfbc      	itt	lt
 80152b4:	580b      	ldrlt	r3, [r1, r0]
 80152b6:	18c0      	addlt	r0, r0, r3
 80152b8:	4770      	bx	lr

080152ba <__sfputc_r>:
 80152ba:	6893      	ldr	r3, [r2, #8]
 80152bc:	3b01      	subs	r3, #1
 80152be:	2b00      	cmp	r3, #0
 80152c0:	b410      	push	{r4}
 80152c2:	6093      	str	r3, [r2, #8]
 80152c4:	da08      	bge.n	80152d8 <__sfputc_r+0x1e>
 80152c6:	6994      	ldr	r4, [r2, #24]
 80152c8:	42a3      	cmp	r3, r4
 80152ca:	db01      	blt.n	80152d0 <__sfputc_r+0x16>
 80152cc:	290a      	cmp	r1, #10
 80152ce:	d103      	bne.n	80152d8 <__sfputc_r+0x1e>
 80152d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152d4:	f7fc bd9f 	b.w	8011e16 <__swbuf_r>
 80152d8:	6813      	ldr	r3, [r2, #0]
 80152da:	1c58      	adds	r0, r3, #1
 80152dc:	6010      	str	r0, [r2, #0]
 80152de:	7019      	strb	r1, [r3, #0]
 80152e0:	4608      	mov	r0, r1
 80152e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <__sfputs_r>:
 80152e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ea:	4606      	mov	r6, r0
 80152ec:	460f      	mov	r7, r1
 80152ee:	4614      	mov	r4, r2
 80152f0:	18d5      	adds	r5, r2, r3
 80152f2:	42ac      	cmp	r4, r5
 80152f4:	d101      	bne.n	80152fa <__sfputs_r+0x12>
 80152f6:	2000      	movs	r0, #0
 80152f8:	e007      	b.n	801530a <__sfputs_r+0x22>
 80152fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152fe:	463a      	mov	r2, r7
 8015300:	4630      	mov	r0, r6
 8015302:	f7ff ffda 	bl	80152ba <__sfputc_r>
 8015306:	1c43      	adds	r3, r0, #1
 8015308:	d1f3      	bne.n	80152f2 <__sfputs_r+0xa>
 801530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801530c <_vfiprintf_r>:
 801530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015310:	460d      	mov	r5, r1
 8015312:	b09d      	sub	sp, #116	@ 0x74
 8015314:	4614      	mov	r4, r2
 8015316:	4698      	mov	r8, r3
 8015318:	4606      	mov	r6, r0
 801531a:	b118      	cbz	r0, 8015324 <_vfiprintf_r+0x18>
 801531c:	6a03      	ldr	r3, [r0, #32]
 801531e:	b90b      	cbnz	r3, 8015324 <_vfiprintf_r+0x18>
 8015320:	f7fc fc82 	bl	8011c28 <__sinit>
 8015324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015326:	07d9      	lsls	r1, r3, #31
 8015328:	d405      	bmi.n	8015336 <_vfiprintf_r+0x2a>
 801532a:	89ab      	ldrh	r3, [r5, #12]
 801532c:	059a      	lsls	r2, r3, #22
 801532e:	d402      	bmi.n	8015336 <_vfiprintf_r+0x2a>
 8015330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015332:	f7fc fe82 	bl	801203a <__retarget_lock_acquire_recursive>
 8015336:	89ab      	ldrh	r3, [r5, #12]
 8015338:	071b      	lsls	r3, r3, #28
 801533a:	d501      	bpl.n	8015340 <_vfiprintf_r+0x34>
 801533c:	692b      	ldr	r3, [r5, #16]
 801533e:	b99b      	cbnz	r3, 8015368 <_vfiprintf_r+0x5c>
 8015340:	4629      	mov	r1, r5
 8015342:	4630      	mov	r0, r6
 8015344:	f7fc fda6 	bl	8011e94 <__swsetup_r>
 8015348:	b170      	cbz	r0, 8015368 <_vfiprintf_r+0x5c>
 801534a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801534c:	07dc      	lsls	r4, r3, #31
 801534e:	d504      	bpl.n	801535a <_vfiprintf_r+0x4e>
 8015350:	f04f 30ff 	mov.w	r0, #4294967295
 8015354:	b01d      	add	sp, #116	@ 0x74
 8015356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801535a:	89ab      	ldrh	r3, [r5, #12]
 801535c:	0598      	lsls	r0, r3, #22
 801535e:	d4f7      	bmi.n	8015350 <_vfiprintf_r+0x44>
 8015360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015362:	f7fc fe6b 	bl	801203c <__retarget_lock_release_recursive>
 8015366:	e7f3      	b.n	8015350 <_vfiprintf_r+0x44>
 8015368:	2300      	movs	r3, #0
 801536a:	9309      	str	r3, [sp, #36]	@ 0x24
 801536c:	2320      	movs	r3, #32
 801536e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015372:	f8cd 800c 	str.w	r8, [sp, #12]
 8015376:	2330      	movs	r3, #48	@ 0x30
 8015378:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015528 <_vfiprintf_r+0x21c>
 801537c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015380:	f04f 0901 	mov.w	r9, #1
 8015384:	4623      	mov	r3, r4
 8015386:	469a      	mov	sl, r3
 8015388:	f813 2b01 	ldrb.w	r2, [r3], #1
 801538c:	b10a      	cbz	r2, 8015392 <_vfiprintf_r+0x86>
 801538e:	2a25      	cmp	r2, #37	@ 0x25
 8015390:	d1f9      	bne.n	8015386 <_vfiprintf_r+0x7a>
 8015392:	ebba 0b04 	subs.w	fp, sl, r4
 8015396:	d00b      	beq.n	80153b0 <_vfiprintf_r+0xa4>
 8015398:	465b      	mov	r3, fp
 801539a:	4622      	mov	r2, r4
 801539c:	4629      	mov	r1, r5
 801539e:	4630      	mov	r0, r6
 80153a0:	f7ff ffa2 	bl	80152e8 <__sfputs_r>
 80153a4:	3001      	adds	r0, #1
 80153a6:	f000 80a7 	beq.w	80154f8 <_vfiprintf_r+0x1ec>
 80153aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153ac:	445a      	add	r2, fp
 80153ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80153b0:	f89a 3000 	ldrb.w	r3, [sl]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f000 809f 	beq.w	80154f8 <_vfiprintf_r+0x1ec>
 80153ba:	2300      	movs	r3, #0
 80153bc:	f04f 32ff 	mov.w	r2, #4294967295
 80153c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153c4:	f10a 0a01 	add.w	sl, sl, #1
 80153c8:	9304      	str	r3, [sp, #16]
 80153ca:	9307      	str	r3, [sp, #28]
 80153cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80153d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80153d2:	4654      	mov	r4, sl
 80153d4:	2205      	movs	r2, #5
 80153d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153da:	4853      	ldr	r0, [pc, #332]	@ (8015528 <_vfiprintf_r+0x21c>)
 80153dc:	f7ea ff20 	bl	8000220 <memchr>
 80153e0:	9a04      	ldr	r2, [sp, #16]
 80153e2:	b9d8      	cbnz	r0, 801541c <_vfiprintf_r+0x110>
 80153e4:	06d1      	lsls	r1, r2, #27
 80153e6:	bf44      	itt	mi
 80153e8:	2320      	movmi	r3, #32
 80153ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80153ee:	0713      	lsls	r3, r2, #28
 80153f0:	bf44      	itt	mi
 80153f2:	232b      	movmi	r3, #43	@ 0x2b
 80153f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80153f8:	f89a 3000 	ldrb.w	r3, [sl]
 80153fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80153fe:	d015      	beq.n	801542c <_vfiprintf_r+0x120>
 8015400:	9a07      	ldr	r2, [sp, #28]
 8015402:	4654      	mov	r4, sl
 8015404:	2000      	movs	r0, #0
 8015406:	f04f 0c0a 	mov.w	ip, #10
 801540a:	4621      	mov	r1, r4
 801540c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015410:	3b30      	subs	r3, #48	@ 0x30
 8015412:	2b09      	cmp	r3, #9
 8015414:	d94b      	bls.n	80154ae <_vfiprintf_r+0x1a2>
 8015416:	b1b0      	cbz	r0, 8015446 <_vfiprintf_r+0x13a>
 8015418:	9207      	str	r2, [sp, #28]
 801541a:	e014      	b.n	8015446 <_vfiprintf_r+0x13a>
 801541c:	eba0 0308 	sub.w	r3, r0, r8
 8015420:	fa09 f303 	lsl.w	r3, r9, r3
 8015424:	4313      	orrs	r3, r2
 8015426:	9304      	str	r3, [sp, #16]
 8015428:	46a2      	mov	sl, r4
 801542a:	e7d2      	b.n	80153d2 <_vfiprintf_r+0xc6>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	1d19      	adds	r1, r3, #4
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	9103      	str	r1, [sp, #12]
 8015434:	2b00      	cmp	r3, #0
 8015436:	bfbb      	ittet	lt
 8015438:	425b      	neglt	r3, r3
 801543a:	f042 0202 	orrlt.w	r2, r2, #2
 801543e:	9307      	strge	r3, [sp, #28]
 8015440:	9307      	strlt	r3, [sp, #28]
 8015442:	bfb8      	it	lt
 8015444:	9204      	strlt	r2, [sp, #16]
 8015446:	7823      	ldrb	r3, [r4, #0]
 8015448:	2b2e      	cmp	r3, #46	@ 0x2e
 801544a:	d10a      	bne.n	8015462 <_vfiprintf_r+0x156>
 801544c:	7863      	ldrb	r3, [r4, #1]
 801544e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015450:	d132      	bne.n	80154b8 <_vfiprintf_r+0x1ac>
 8015452:	9b03      	ldr	r3, [sp, #12]
 8015454:	1d1a      	adds	r2, r3, #4
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	9203      	str	r2, [sp, #12]
 801545a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801545e:	3402      	adds	r4, #2
 8015460:	9305      	str	r3, [sp, #20]
 8015462:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015538 <_vfiprintf_r+0x22c>
 8015466:	7821      	ldrb	r1, [r4, #0]
 8015468:	2203      	movs	r2, #3
 801546a:	4650      	mov	r0, sl
 801546c:	f7ea fed8 	bl	8000220 <memchr>
 8015470:	b138      	cbz	r0, 8015482 <_vfiprintf_r+0x176>
 8015472:	9b04      	ldr	r3, [sp, #16]
 8015474:	eba0 000a 	sub.w	r0, r0, sl
 8015478:	2240      	movs	r2, #64	@ 0x40
 801547a:	4082      	lsls	r2, r0
 801547c:	4313      	orrs	r3, r2
 801547e:	3401      	adds	r4, #1
 8015480:	9304      	str	r3, [sp, #16]
 8015482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015486:	4829      	ldr	r0, [pc, #164]	@ (801552c <_vfiprintf_r+0x220>)
 8015488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801548c:	2206      	movs	r2, #6
 801548e:	f7ea fec7 	bl	8000220 <memchr>
 8015492:	2800      	cmp	r0, #0
 8015494:	d03f      	beq.n	8015516 <_vfiprintf_r+0x20a>
 8015496:	4b26      	ldr	r3, [pc, #152]	@ (8015530 <_vfiprintf_r+0x224>)
 8015498:	bb1b      	cbnz	r3, 80154e2 <_vfiprintf_r+0x1d6>
 801549a:	9b03      	ldr	r3, [sp, #12]
 801549c:	3307      	adds	r3, #7
 801549e:	f023 0307 	bic.w	r3, r3, #7
 80154a2:	3308      	adds	r3, #8
 80154a4:	9303      	str	r3, [sp, #12]
 80154a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154a8:	443b      	add	r3, r7
 80154aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80154ac:	e76a      	b.n	8015384 <_vfiprintf_r+0x78>
 80154ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80154b2:	460c      	mov	r4, r1
 80154b4:	2001      	movs	r0, #1
 80154b6:	e7a8      	b.n	801540a <_vfiprintf_r+0xfe>
 80154b8:	2300      	movs	r3, #0
 80154ba:	3401      	adds	r4, #1
 80154bc:	9305      	str	r3, [sp, #20]
 80154be:	4619      	mov	r1, r3
 80154c0:	f04f 0c0a 	mov.w	ip, #10
 80154c4:	4620      	mov	r0, r4
 80154c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154ca:	3a30      	subs	r2, #48	@ 0x30
 80154cc:	2a09      	cmp	r2, #9
 80154ce:	d903      	bls.n	80154d8 <_vfiprintf_r+0x1cc>
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d0c6      	beq.n	8015462 <_vfiprintf_r+0x156>
 80154d4:	9105      	str	r1, [sp, #20]
 80154d6:	e7c4      	b.n	8015462 <_vfiprintf_r+0x156>
 80154d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80154dc:	4604      	mov	r4, r0
 80154de:	2301      	movs	r3, #1
 80154e0:	e7f0      	b.n	80154c4 <_vfiprintf_r+0x1b8>
 80154e2:	ab03      	add	r3, sp, #12
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	462a      	mov	r2, r5
 80154e8:	4b12      	ldr	r3, [pc, #72]	@ (8015534 <_vfiprintf_r+0x228>)
 80154ea:	a904      	add	r1, sp, #16
 80154ec:	4630      	mov	r0, r6
 80154ee:	f7fb fd43 	bl	8010f78 <_printf_float>
 80154f2:	4607      	mov	r7, r0
 80154f4:	1c78      	adds	r0, r7, #1
 80154f6:	d1d6      	bne.n	80154a6 <_vfiprintf_r+0x19a>
 80154f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154fa:	07d9      	lsls	r1, r3, #31
 80154fc:	d405      	bmi.n	801550a <_vfiprintf_r+0x1fe>
 80154fe:	89ab      	ldrh	r3, [r5, #12]
 8015500:	059a      	lsls	r2, r3, #22
 8015502:	d402      	bmi.n	801550a <_vfiprintf_r+0x1fe>
 8015504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015506:	f7fc fd99 	bl	801203c <__retarget_lock_release_recursive>
 801550a:	89ab      	ldrh	r3, [r5, #12]
 801550c:	065b      	lsls	r3, r3, #25
 801550e:	f53f af1f 	bmi.w	8015350 <_vfiprintf_r+0x44>
 8015512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015514:	e71e      	b.n	8015354 <_vfiprintf_r+0x48>
 8015516:	ab03      	add	r3, sp, #12
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	462a      	mov	r2, r5
 801551c:	4b05      	ldr	r3, [pc, #20]	@ (8015534 <_vfiprintf_r+0x228>)
 801551e:	a904      	add	r1, sp, #16
 8015520:	4630      	mov	r0, r6
 8015522:	f7fb ffc1 	bl	80114a8 <_printf_i>
 8015526:	e7e4      	b.n	80154f2 <_vfiprintf_r+0x1e6>
 8015528:	08023009 	.word	0x08023009
 801552c:	08023013 	.word	0x08023013
 8015530:	08010f79 	.word	0x08010f79
 8015534:	080152e9 	.word	0x080152e9
 8015538:	0802300f 	.word	0x0802300f

0801553c <_raise_r>:
 801553c:	291f      	cmp	r1, #31
 801553e:	b538      	push	{r3, r4, r5, lr}
 8015540:	4605      	mov	r5, r0
 8015542:	460c      	mov	r4, r1
 8015544:	d904      	bls.n	8015550 <_raise_r+0x14>
 8015546:	2316      	movs	r3, #22
 8015548:	6003      	str	r3, [r0, #0]
 801554a:	f04f 30ff 	mov.w	r0, #4294967295
 801554e:	bd38      	pop	{r3, r4, r5, pc}
 8015550:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015552:	b112      	cbz	r2, 801555a <_raise_r+0x1e>
 8015554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015558:	b94b      	cbnz	r3, 801556e <_raise_r+0x32>
 801555a:	4628      	mov	r0, r5
 801555c:	f000 f830 	bl	80155c0 <_getpid_r>
 8015560:	4622      	mov	r2, r4
 8015562:	4601      	mov	r1, r0
 8015564:	4628      	mov	r0, r5
 8015566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801556a:	f000 b817 	b.w	801559c <_kill_r>
 801556e:	2b01      	cmp	r3, #1
 8015570:	d00a      	beq.n	8015588 <_raise_r+0x4c>
 8015572:	1c59      	adds	r1, r3, #1
 8015574:	d103      	bne.n	801557e <_raise_r+0x42>
 8015576:	2316      	movs	r3, #22
 8015578:	6003      	str	r3, [r0, #0]
 801557a:	2001      	movs	r0, #1
 801557c:	e7e7      	b.n	801554e <_raise_r+0x12>
 801557e:	2100      	movs	r1, #0
 8015580:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015584:	4620      	mov	r0, r4
 8015586:	4798      	blx	r3
 8015588:	2000      	movs	r0, #0
 801558a:	e7e0      	b.n	801554e <_raise_r+0x12>

0801558c <raise>:
 801558c:	4b02      	ldr	r3, [pc, #8]	@ (8015598 <raise+0xc>)
 801558e:	4601      	mov	r1, r0
 8015590:	6818      	ldr	r0, [r3, #0]
 8015592:	f7ff bfd3 	b.w	801553c <_raise_r>
 8015596:	bf00      	nop
 8015598:	20000394 	.word	0x20000394

0801559c <_kill_r>:
 801559c:	b538      	push	{r3, r4, r5, lr}
 801559e:	4d07      	ldr	r5, [pc, #28]	@ (80155bc <_kill_r+0x20>)
 80155a0:	2300      	movs	r3, #0
 80155a2:	4604      	mov	r4, r0
 80155a4:	4608      	mov	r0, r1
 80155a6:	4611      	mov	r1, r2
 80155a8:	602b      	str	r3, [r5, #0]
 80155aa:	f7ee fb09 	bl	8003bc0 <_kill>
 80155ae:	1c43      	adds	r3, r0, #1
 80155b0:	d102      	bne.n	80155b8 <_kill_r+0x1c>
 80155b2:	682b      	ldr	r3, [r5, #0]
 80155b4:	b103      	cbz	r3, 80155b8 <_kill_r+0x1c>
 80155b6:	6023      	str	r3, [r4, #0]
 80155b8:	bd38      	pop	{r3, r4, r5, pc}
 80155ba:	bf00      	nop
 80155bc:	20002db4 	.word	0x20002db4

080155c0 <_getpid_r>:
 80155c0:	f7ee baf6 	b.w	8003bb0 <_getpid>

080155c4 <_init>:
 80155c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c6:	bf00      	nop
 80155c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ca:	bc08      	pop	{r3}
 80155cc:	469e      	mov	lr, r3
 80155ce:	4770      	bx	lr

080155d0 <_fini>:
 80155d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155d2:	bf00      	nop
 80155d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155d6:	bc08      	pop	{r3}
 80155d8:	469e      	mov	lr, r3
 80155da:	4770      	bx	lr
